circuit TestHarness : @[chipyard.TestHarness.TinyRocketConfig.fir 2:0]
  extmodule plusarg_reader : @[chipyard.TestHarness.TinyRocketConfig.fir 129:2]
    output out : UInt<32> @[chipyard.TestHarness.TinyRocketConfig.fir 130:4]
    defname = plusarg_reader
    parameter FORMAT = "tilelink_timeout=%d"
    parameter DEFAULT = 0
    parameter WIDTH = 32

  module Queue_5_inTestHarness : @[chipyard.TestHarness.TinyRocketConfig.fir 27698:2]
    input clock : Clock @[chipyard.TestHarness.TinyRocketConfig.fir 27699:4]
    input reset : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 27700:4]
    output io_enq_ready : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 27701:4]
    input io_enq_valid : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 27701:4]
    input io_enq_bits_opcode : UInt<3> @[chipyard.TestHarness.TinyRocketConfig.fir 27701:4]
    input io_enq_bits_size : UInt<2> @[chipyard.TestHarness.TinyRocketConfig.fir 27701:4]
    input io_enq_bits_source : UInt<7> @[chipyard.TestHarness.TinyRocketConfig.fir 27701:4]
    input io_enq_bits_data : UInt<32> @[chipyard.TestHarness.TinyRocketConfig.fir 27701:4]
    input io_deq_ready : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 27701:4]
    output io_deq_valid : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 27701:4]
    output io_deq_bits_opcode : UInt<3> @[chipyard.TestHarness.TinyRocketConfig.fir 27701:4]
    output io_deq_bits_param : UInt<2> @[chipyard.TestHarness.TinyRocketConfig.fir 27701:4]
    output io_deq_bits_size : UInt<2> @[chipyard.TestHarness.TinyRocketConfig.fir 27701:4]
    output io_deq_bits_source : UInt<7> @[chipyard.TestHarness.TinyRocketConfig.fir 27701:4]
    output io_deq_bits_sink : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 27701:4]
    output io_deq_bits_denied : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 27701:4]
    output io_deq_bits_data : UInt<32> @[chipyard.TestHarness.TinyRocketConfig.fir 27701:4]
    output io_deq_bits_corrupt : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 27701:4]

    mem ram_opcode : @[Decoupled.scala 218:16 chipyard.TestHarness.TinyRocketConfig.fir 27703:4]
      data-type => UInt<3>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    mem ram_param : @[Decoupled.scala 218:16 chipyard.TestHarness.TinyRocketConfig.fir 27703:4]
      data-type => UInt<2>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    mem ram_size : @[Decoupled.scala 218:16 chipyard.TestHarness.TinyRocketConfig.fir 27703:4]
      data-type => UInt<2>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    mem ram_source : @[Decoupled.scala 218:16 chipyard.TestHarness.TinyRocketConfig.fir 27703:4]
      data-type => UInt<7>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    mem ram_sink : @[Decoupled.scala 218:16 chipyard.TestHarness.TinyRocketConfig.fir 27703:4]
      data-type => UInt<1>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    mem ram_denied : @[Decoupled.scala 218:16 chipyard.TestHarness.TinyRocketConfig.fir 27703:4]
      data-type => UInt<1>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    mem ram_data : @[Decoupled.scala 218:16 chipyard.TestHarness.TinyRocketConfig.fir 27703:4]
      data-type => UInt<32>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    mem ram_corrupt : @[Decoupled.scala 218:16 chipyard.TestHarness.TinyRocketConfig.fir 27703:4]
      data-type => UInt<1>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    reg value : UInt<1>, clock with :
      reset => (UInt<1>("h0"), value) @[Counter.scala 60:40 chipyard.TestHarness.TinyRocketConfig.fir 27704:4]
    reg value_1 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), value_1) @[Counter.scala 60:40 chipyard.TestHarness.TinyRocketConfig.fir 27705:4]
    reg maybe_full : UInt<1>, clock with :
      reset => (UInt<1>("h0"), maybe_full) @[Decoupled.scala 221:27 chipyard.TestHarness.TinyRocketConfig.fir 27706:4]
    node ptr_match = eq(value, value_1) @[Decoupled.scala 223:33 chipyard.TestHarness.TinyRocketConfig.fir 27707:4]
    node _empty_T = not(maybe_full) @[Decoupled.scala 224:28 chipyard.TestHarness.TinyRocketConfig.fir 27708:4]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 224:25 chipyard.TestHarness.TinyRocketConfig.fir 27709:4]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24 chipyard.TestHarness.TinyRocketConfig.fir 27710:4]
    node do_enq = and(io_enq_ready, io_enq_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.TinyRocketConfig.fir 27711:4]
    node do_deq = and(io_deq_ready, io_deq_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.TinyRocketConfig.fir 27714:4]
    node _value_T = add(value, UInt<1>("h1")) @[Counter.scala 76:24 chipyard.TestHarness.TinyRocketConfig.fir 27728:6]
    node _value_T_1 = tail(_value_T, 1) @[Counter.scala 76:24 chipyard.TestHarness.TinyRocketConfig.fir 27729:6]
    node _GEN_12 = mux(do_enq, _value_T_1, value) @[Decoupled.scala 229:17 chipyard.TestHarness.TinyRocketConfig.fir 27717:4 Counter.scala 76:15 chipyard.TestHarness.TinyRocketConfig.fir 27730:6 Counter.scala 60:40 chipyard.TestHarness.TinyRocketConfig.fir 27704:4]
    node _value_T_2 = add(value_1, UInt<1>("h1")) @[Counter.scala 76:24 chipyard.TestHarness.TinyRocketConfig.fir 27734:6]
    node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 76:24 chipyard.TestHarness.TinyRocketConfig.fir 27735:6]
    node _GEN_13 = mux(do_deq, _value_T_3, value_1) @[Decoupled.scala 233:17 chipyard.TestHarness.TinyRocketConfig.fir 27732:4 Counter.scala 76:15 chipyard.TestHarness.TinyRocketConfig.fir 27736:6 Counter.scala 60:40 chipyard.TestHarness.TinyRocketConfig.fir 27705:4]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 236:16 chipyard.TestHarness.TinyRocketConfig.fir 27738:4]
    node _GEN_14 = mux(_T, do_enq, maybe_full) @[Decoupled.scala 236:28 chipyard.TestHarness.TinyRocketConfig.fir 27739:4 Decoupled.scala 237:16 chipyard.TestHarness.TinyRocketConfig.fir 27740:6 Decoupled.scala 221:27 chipyard.TestHarness.TinyRocketConfig.fir 27706:4]
    io_enq_ready <= not(full) @[Decoupled.scala 241:19 chipyard.TestHarness.TinyRocketConfig.fir 27744:4]
    io_deq_valid <= not(empty) @[Decoupled.scala 240:19 chipyard.TestHarness.TinyRocketConfig.fir 27742:4]
    io_deq_bits_opcode <= ram_opcode.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.TinyRocketConfig.fir 27754:4]
    io_deq_bits_param <= ram_param.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.TinyRocketConfig.fir 27753:4]
    io_deq_bits_size <= ram_size.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.TinyRocketConfig.fir 27752:4]
    io_deq_bits_source <= ram_source.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.TinyRocketConfig.fir 27751:4]
    io_deq_bits_sink <= ram_sink.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.TinyRocketConfig.fir 27750:4]
    io_deq_bits_denied <= ram_denied.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.TinyRocketConfig.fir 27749:4]
    io_deq_bits_data <= ram_data.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.TinyRocketConfig.fir 27748:4]
    io_deq_bits_corrupt <= ram_corrupt.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.TinyRocketConfig.fir 27747:4]
    value <= mux(reset, UInt<1>("h0"), _GEN_12) @[Counter.scala 60:40 chipyard.TestHarness.TinyRocketConfig.fir 27704:4 Counter.scala 60:40 chipyard.TestHarness.TinyRocketConfig.fir 27704:4]
    value_1 <= mux(reset, UInt<1>("h0"), _GEN_13) @[Counter.scala 60:40 chipyard.TestHarness.TinyRocketConfig.fir 27705:4 Counter.scala 60:40 chipyard.TestHarness.TinyRocketConfig.fir 27705:4]
    maybe_full <= mux(reset, UInt<1>("h0"), _GEN_14) @[Decoupled.scala 221:27 chipyard.TestHarness.TinyRocketConfig.fir 27706:4 Decoupled.scala 221:27 chipyard.TestHarness.TinyRocketConfig.fir 27706:4]
    ram_opcode.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_opcode.io_deq_bits_MPORT.addr <= value_1
    ram_opcode.io_deq_bits_MPORT.clk <= clock
    ram_opcode.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_opcode.MPORT.addr <= value
    ram_opcode.MPORT.mask <= UInt<1>("h1")
    ram_opcode.MPORT.data <= io_enq_bits_opcode
    ram_opcode.MPORT.clk <= clock
    ram_param.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_param.io_deq_bits_MPORT.addr <= value_1
    ram_param.io_deq_bits_MPORT.clk <= clock
    ram_param.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_param.MPORT.addr <= value
    ram_param.MPORT.mask <= UInt<1>("h1")
    ram_param.MPORT.data <= UInt<2>("h0")
    ram_param.MPORT.clk <= clock
    ram_size.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_size.io_deq_bits_MPORT.addr <= value_1
    ram_size.io_deq_bits_MPORT.clk <= clock
    ram_size.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_size.MPORT.addr <= value
    ram_size.MPORT.mask <= UInt<1>("h1")
    ram_size.MPORT.data <= io_enq_bits_size
    ram_size.MPORT.clk <= clock
    ram_source.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_source.io_deq_bits_MPORT.addr <= value_1
    ram_source.io_deq_bits_MPORT.clk <= clock
    ram_source.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_source.MPORT.addr <= value
    ram_source.MPORT.mask <= UInt<1>("h1")
    ram_source.MPORT.data <= io_enq_bits_source
    ram_source.MPORT.clk <= clock
    ram_sink.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_sink.io_deq_bits_MPORT.addr <= value_1
    ram_sink.io_deq_bits_MPORT.clk <= clock
    ram_sink.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_sink.MPORT.addr <= value
    ram_sink.MPORT.mask <= UInt<1>("h1")
    ram_sink.MPORT.data <= UInt<1>("h0")
    ram_sink.MPORT.clk <= clock
    ram_denied.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_denied.io_deq_bits_MPORT.addr <= value_1
    ram_denied.io_deq_bits_MPORT.clk <= clock
    ram_denied.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_denied.MPORT.addr <= value
    ram_denied.MPORT.mask <= UInt<1>("h1")
    ram_denied.MPORT.data <= UInt<1>("h0")
    ram_denied.MPORT.clk <= clock
    ram_data.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_data.io_deq_bits_MPORT.addr <= value_1
    ram_data.io_deq_bits_MPORT.clk <= clock
    ram_data.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_data.MPORT.addr <= value
    ram_data.MPORT.mask <= UInt<1>("h1")
    ram_data.MPORT.data <= io_enq_bits_data
    ram_data.MPORT.clk <= clock
    ram_corrupt.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_corrupt.io_deq_bits_MPORT.addr <= value_1
    ram_corrupt.io_deq_bits_MPORT.clk <= clock
    ram_corrupt.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_corrupt.MPORT.addr <= value
    ram_corrupt.MPORT.mask <= UInt<1>("h1")
    ram_corrupt.MPORT.data <= UInt<1>("h0")
    ram_corrupt.MPORT.clk <= clock

  module Queue_6_inTestHarness : @[chipyard.TestHarness.TinyRocketConfig.fir 32859:2]
    input clock : Clock @[chipyard.TestHarness.TinyRocketConfig.fir 32860:4]
    input reset : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 32861:4]
    output io_enq_ready : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 32862:4]
    input io_enq_valid : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 32862:4]
    input io_enq_bits_opcode : UInt<3> @[chipyard.TestHarness.TinyRocketConfig.fir 32862:4]
    input io_enq_bits_size : UInt<4> @[chipyard.TestHarness.TinyRocketConfig.fir 32862:4]
    input io_enq_bits_address : UInt<32> @[chipyard.TestHarness.TinyRocketConfig.fir 32862:4]
    input io_enq_bits_mask : UInt<4> @[chipyard.TestHarness.TinyRocketConfig.fir 32862:4]
    input io_enq_bits_data : UInt<32> @[chipyard.TestHarness.TinyRocketConfig.fir 32862:4]
    input io_deq_ready : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 32862:4]
    output io_deq_valid : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 32862:4]
    output io_deq_bits_opcode : UInt<3> @[chipyard.TestHarness.TinyRocketConfig.fir 32862:4]
    output io_deq_bits_param : UInt<3> @[chipyard.TestHarness.TinyRocketConfig.fir 32862:4]
    output io_deq_bits_size : UInt<4> @[chipyard.TestHarness.TinyRocketConfig.fir 32862:4]
    output io_deq_bits_source : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 32862:4]
    output io_deq_bits_address : UInt<32> @[chipyard.TestHarness.TinyRocketConfig.fir 32862:4]
    output io_deq_bits_mask : UInt<4> @[chipyard.TestHarness.TinyRocketConfig.fir 32862:4]
    output io_deq_bits_data : UInt<32> @[chipyard.TestHarness.TinyRocketConfig.fir 32862:4]
    output io_deq_bits_corrupt : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 32862:4]

    mem ram_opcode : @[Decoupled.scala 218:16 chipyard.TestHarness.TinyRocketConfig.fir 32864:4]
      data-type => UInt<3>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    mem ram_param : @[Decoupled.scala 218:16 chipyard.TestHarness.TinyRocketConfig.fir 32864:4]
      data-type => UInt<3>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    mem ram_size : @[Decoupled.scala 218:16 chipyard.TestHarness.TinyRocketConfig.fir 32864:4]
      data-type => UInt<4>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    mem ram_source : @[Decoupled.scala 218:16 chipyard.TestHarness.TinyRocketConfig.fir 32864:4]
      data-type => UInt<1>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    mem ram_address : @[Decoupled.scala 218:16 chipyard.TestHarness.TinyRocketConfig.fir 32864:4]
      data-type => UInt<32>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    mem ram_mask : @[Decoupled.scala 218:16 chipyard.TestHarness.TinyRocketConfig.fir 32864:4]
      data-type => UInt<4>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    mem ram_data : @[Decoupled.scala 218:16 chipyard.TestHarness.TinyRocketConfig.fir 32864:4]
      data-type => UInt<32>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    mem ram_corrupt : @[Decoupled.scala 218:16 chipyard.TestHarness.TinyRocketConfig.fir 32864:4]
      data-type => UInt<1>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    reg value : UInt<1>, clock with :
      reset => (UInt<1>("h0"), value) @[Counter.scala 60:40 chipyard.TestHarness.TinyRocketConfig.fir 32865:4]
    reg value_1 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), value_1) @[Counter.scala 60:40 chipyard.TestHarness.TinyRocketConfig.fir 32866:4]
    reg maybe_full : UInt<1>, clock with :
      reset => (UInt<1>("h0"), maybe_full) @[Decoupled.scala 221:27 chipyard.TestHarness.TinyRocketConfig.fir 32867:4]
    node ptr_match = eq(value, value_1) @[Decoupled.scala 223:33 chipyard.TestHarness.TinyRocketConfig.fir 32868:4]
    node _empty_T = not(maybe_full) @[Decoupled.scala 224:28 chipyard.TestHarness.TinyRocketConfig.fir 32869:4]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 224:25 chipyard.TestHarness.TinyRocketConfig.fir 32870:4]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24 chipyard.TestHarness.TinyRocketConfig.fir 32871:4]
    node do_enq = and(io_enq_ready, io_enq_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.TinyRocketConfig.fir 32872:4]
    node do_deq = and(io_deq_ready, io_deq_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.TinyRocketConfig.fir 32875:4]
    node _value_T = add(value, UInt<1>("h1")) @[Counter.scala 76:24 chipyard.TestHarness.TinyRocketConfig.fir 32889:6]
    node _value_T_1 = tail(_value_T, 1) @[Counter.scala 76:24 chipyard.TestHarness.TinyRocketConfig.fir 32890:6]
    node _GEN_12 = mux(do_enq, _value_T_1, value) @[Decoupled.scala 229:17 chipyard.TestHarness.TinyRocketConfig.fir 32878:4 Counter.scala 76:15 chipyard.TestHarness.TinyRocketConfig.fir 32891:6 Counter.scala 60:40 chipyard.TestHarness.TinyRocketConfig.fir 32865:4]
    node _value_T_2 = add(value_1, UInt<1>("h1")) @[Counter.scala 76:24 chipyard.TestHarness.TinyRocketConfig.fir 32895:6]
    node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 76:24 chipyard.TestHarness.TinyRocketConfig.fir 32896:6]
    node _GEN_13 = mux(do_deq, _value_T_3, value_1) @[Decoupled.scala 233:17 chipyard.TestHarness.TinyRocketConfig.fir 32893:4 Counter.scala 76:15 chipyard.TestHarness.TinyRocketConfig.fir 32897:6 Counter.scala 60:40 chipyard.TestHarness.TinyRocketConfig.fir 32866:4]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 236:16 chipyard.TestHarness.TinyRocketConfig.fir 32899:4]
    node _GEN_14 = mux(_T, do_enq, maybe_full) @[Decoupled.scala 236:28 chipyard.TestHarness.TinyRocketConfig.fir 32900:4 Decoupled.scala 237:16 chipyard.TestHarness.TinyRocketConfig.fir 32901:6 Decoupled.scala 221:27 chipyard.TestHarness.TinyRocketConfig.fir 32867:4]
    io_enq_ready <= not(full) @[Decoupled.scala 241:19 chipyard.TestHarness.TinyRocketConfig.fir 32905:4]
    io_deq_valid <= not(empty) @[Decoupled.scala 240:19 chipyard.TestHarness.TinyRocketConfig.fir 32903:4]
    io_deq_bits_opcode <= ram_opcode.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.TinyRocketConfig.fir 32915:4]
    io_deq_bits_param <= ram_param.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.TinyRocketConfig.fir 32914:4]
    io_deq_bits_size <= ram_size.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.TinyRocketConfig.fir 32913:4]
    io_deq_bits_source <= ram_source.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.TinyRocketConfig.fir 32912:4]
    io_deq_bits_address <= ram_address.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.TinyRocketConfig.fir 32911:4]
    io_deq_bits_mask <= ram_mask.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.TinyRocketConfig.fir 32910:4]
    io_deq_bits_data <= ram_data.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.TinyRocketConfig.fir 32909:4]
    io_deq_bits_corrupt <= ram_corrupt.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.TinyRocketConfig.fir 32908:4]
    value <= mux(reset, UInt<1>("h0"), _GEN_12) @[Counter.scala 60:40 chipyard.TestHarness.TinyRocketConfig.fir 32865:4 Counter.scala 60:40 chipyard.TestHarness.TinyRocketConfig.fir 32865:4]
    value_1 <= mux(reset, UInt<1>("h0"), _GEN_13) @[Counter.scala 60:40 chipyard.TestHarness.TinyRocketConfig.fir 32866:4 Counter.scala 60:40 chipyard.TestHarness.TinyRocketConfig.fir 32866:4]
    maybe_full <= mux(reset, UInt<1>("h0"), _GEN_14) @[Decoupled.scala 221:27 chipyard.TestHarness.TinyRocketConfig.fir 32867:4 Decoupled.scala 221:27 chipyard.TestHarness.TinyRocketConfig.fir 32867:4]
    ram_opcode.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_opcode.io_deq_bits_MPORT.addr <= value_1
    ram_opcode.io_deq_bits_MPORT.clk <= clock
    ram_opcode.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_opcode.MPORT.addr <= value
    ram_opcode.MPORT.mask <= UInt<1>("h1")
    ram_opcode.MPORT.data <= io_enq_bits_opcode
    ram_opcode.MPORT.clk <= clock
    ram_param.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_param.io_deq_bits_MPORT.addr <= value_1
    ram_param.io_deq_bits_MPORT.clk <= clock
    ram_param.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_param.MPORT.addr <= value
    ram_param.MPORT.mask <= UInt<1>("h1")
    ram_param.MPORT.data <= UInt<3>("h0")
    ram_param.MPORT.clk <= clock
    ram_size.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_size.io_deq_bits_MPORT.addr <= value_1
    ram_size.io_deq_bits_MPORT.clk <= clock
    ram_size.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_size.MPORT.addr <= value
    ram_size.MPORT.mask <= UInt<1>("h1")
    ram_size.MPORT.data <= io_enq_bits_size
    ram_size.MPORT.clk <= clock
    ram_source.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_source.io_deq_bits_MPORT.addr <= value_1
    ram_source.io_deq_bits_MPORT.clk <= clock
    ram_source.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_source.MPORT.addr <= value
    ram_source.MPORT.mask <= UInt<1>("h1")
    ram_source.MPORT.data <= UInt<1>("h0")
    ram_source.MPORT.clk <= clock
    ram_address.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_address.io_deq_bits_MPORT.addr <= value_1
    ram_address.io_deq_bits_MPORT.clk <= clock
    ram_address.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_address.MPORT.addr <= value
    ram_address.MPORT.mask <= UInt<1>("h1")
    ram_address.MPORT.data <= io_enq_bits_address
    ram_address.MPORT.clk <= clock
    ram_mask.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_mask.io_deq_bits_MPORT.addr <= value_1
    ram_mask.io_deq_bits_MPORT.clk <= clock
    ram_mask.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_mask.MPORT.addr <= value
    ram_mask.MPORT.mask <= UInt<1>("h1")
    ram_mask.MPORT.data <= io_enq_bits_mask
    ram_mask.MPORT.clk <= clock
    ram_data.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_data.io_deq_bits_MPORT.addr <= value_1
    ram_data.io_deq_bits_MPORT.clk <= clock
    ram_data.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_data.MPORT.addr <= value
    ram_data.MPORT.mask <= UInt<1>("h1")
    ram_data.MPORT.data <= io_enq_bits_data
    ram_data.MPORT.clk <= clock
    ram_corrupt.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_corrupt.io_deq_bits_MPORT.addr <= value_1
    ram_corrupt.io_deq_bits_MPORT.clk <= clock
    ram_corrupt.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_corrupt.MPORT.addr <= value
    ram_corrupt.MPORT.mask <= UInt<1>("h1")
    ram_corrupt.MPORT.data <= UInt<1>("h0")
    ram_corrupt.MPORT.clk <= clock

  module Queue_7_inTestHarness : @[chipyard.TestHarness.TinyRocketConfig.fir 32923:2]
    input clock : Clock @[chipyard.TestHarness.TinyRocketConfig.fir 32924:4]
    input reset : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 32925:4]
    output io_enq_ready : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 32926:4]
    input io_enq_valid : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 32926:4]
    input io_enq_bits_opcode : UInt<3> @[chipyard.TestHarness.TinyRocketConfig.fir 32926:4]
    input io_enq_bits_param : UInt<2> @[chipyard.TestHarness.TinyRocketConfig.fir 32926:4]
    input io_enq_bits_size : UInt<4> @[chipyard.TestHarness.TinyRocketConfig.fir 32926:4]
    input io_enq_bits_source : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 32926:4]
    input io_enq_bits_sink : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 32926:4]
    input io_enq_bits_denied : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 32926:4]
    input io_enq_bits_data : UInt<32> @[chipyard.TestHarness.TinyRocketConfig.fir 32926:4]
    input io_enq_bits_corrupt : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 32926:4]
    input io_deq_ready : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 32926:4]
    output io_deq_valid : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 32926:4]
    output io_deq_bits_opcode : UInt<3> @[chipyard.TestHarness.TinyRocketConfig.fir 32926:4]
    output io_deq_bits_param : UInt<2> @[chipyard.TestHarness.TinyRocketConfig.fir 32926:4]
    output io_deq_bits_size : UInt<4> @[chipyard.TestHarness.TinyRocketConfig.fir 32926:4]
    output io_deq_bits_source : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 32926:4]
    output io_deq_bits_sink : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 32926:4]
    output io_deq_bits_denied : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 32926:4]
    output io_deq_bits_data : UInt<32> @[chipyard.TestHarness.TinyRocketConfig.fir 32926:4]
    output io_deq_bits_corrupt : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 32926:4]

    mem ram_opcode : @[Decoupled.scala 218:16 chipyard.TestHarness.TinyRocketConfig.fir 32928:4]
      data-type => UInt<3>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    mem ram_param : @[Decoupled.scala 218:16 chipyard.TestHarness.TinyRocketConfig.fir 32928:4]
      data-type => UInt<2>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    mem ram_size : @[Decoupled.scala 218:16 chipyard.TestHarness.TinyRocketConfig.fir 32928:4]
      data-type => UInt<4>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    mem ram_source : @[Decoupled.scala 218:16 chipyard.TestHarness.TinyRocketConfig.fir 32928:4]
      data-type => UInt<1>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    mem ram_sink : @[Decoupled.scala 218:16 chipyard.TestHarness.TinyRocketConfig.fir 32928:4]
      data-type => UInt<1>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    mem ram_denied : @[Decoupled.scala 218:16 chipyard.TestHarness.TinyRocketConfig.fir 32928:4]
      data-type => UInt<1>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    mem ram_data : @[Decoupled.scala 218:16 chipyard.TestHarness.TinyRocketConfig.fir 32928:4]
      data-type => UInt<32>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    mem ram_corrupt : @[Decoupled.scala 218:16 chipyard.TestHarness.TinyRocketConfig.fir 32928:4]
      data-type => UInt<1>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    reg value : UInt<1>, clock with :
      reset => (UInt<1>("h0"), value) @[Counter.scala 60:40 chipyard.TestHarness.TinyRocketConfig.fir 32929:4]
    reg value_1 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), value_1) @[Counter.scala 60:40 chipyard.TestHarness.TinyRocketConfig.fir 32930:4]
    reg maybe_full : UInt<1>, clock with :
      reset => (UInt<1>("h0"), maybe_full) @[Decoupled.scala 221:27 chipyard.TestHarness.TinyRocketConfig.fir 32931:4]
    node ptr_match = eq(value, value_1) @[Decoupled.scala 223:33 chipyard.TestHarness.TinyRocketConfig.fir 32932:4]
    node _empty_T = not(maybe_full) @[Decoupled.scala 224:28 chipyard.TestHarness.TinyRocketConfig.fir 32933:4]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 224:25 chipyard.TestHarness.TinyRocketConfig.fir 32934:4]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24 chipyard.TestHarness.TinyRocketConfig.fir 32935:4]
    node do_enq = and(io_enq_ready, io_enq_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.TinyRocketConfig.fir 32936:4]
    node do_deq = and(io_deq_ready, io_deq_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.TinyRocketConfig.fir 32939:4]
    node _value_T = add(value, UInt<1>("h1")) @[Counter.scala 76:24 chipyard.TestHarness.TinyRocketConfig.fir 32953:6]
    node _value_T_1 = tail(_value_T, 1) @[Counter.scala 76:24 chipyard.TestHarness.TinyRocketConfig.fir 32954:6]
    node _GEN_12 = mux(do_enq, _value_T_1, value) @[Decoupled.scala 229:17 chipyard.TestHarness.TinyRocketConfig.fir 32942:4 Counter.scala 76:15 chipyard.TestHarness.TinyRocketConfig.fir 32955:6 Counter.scala 60:40 chipyard.TestHarness.TinyRocketConfig.fir 32929:4]
    node _value_T_2 = add(value_1, UInt<1>("h1")) @[Counter.scala 76:24 chipyard.TestHarness.TinyRocketConfig.fir 32959:6]
    node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 76:24 chipyard.TestHarness.TinyRocketConfig.fir 32960:6]
    node _GEN_13 = mux(do_deq, _value_T_3, value_1) @[Decoupled.scala 233:17 chipyard.TestHarness.TinyRocketConfig.fir 32957:4 Counter.scala 76:15 chipyard.TestHarness.TinyRocketConfig.fir 32961:6 Counter.scala 60:40 chipyard.TestHarness.TinyRocketConfig.fir 32930:4]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 236:16 chipyard.TestHarness.TinyRocketConfig.fir 32963:4]
    node _GEN_14 = mux(_T, do_enq, maybe_full) @[Decoupled.scala 236:28 chipyard.TestHarness.TinyRocketConfig.fir 32964:4 Decoupled.scala 237:16 chipyard.TestHarness.TinyRocketConfig.fir 32965:6 Decoupled.scala 221:27 chipyard.TestHarness.TinyRocketConfig.fir 32931:4]
    io_enq_ready <= not(full) @[Decoupled.scala 241:19 chipyard.TestHarness.TinyRocketConfig.fir 32969:4]
    io_deq_valid <= not(empty) @[Decoupled.scala 240:19 chipyard.TestHarness.TinyRocketConfig.fir 32967:4]
    io_deq_bits_opcode <= ram_opcode.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.TinyRocketConfig.fir 32979:4]
    io_deq_bits_param <= ram_param.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.TinyRocketConfig.fir 32978:4]
    io_deq_bits_size <= ram_size.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.TinyRocketConfig.fir 32977:4]
    io_deq_bits_source <= ram_source.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.TinyRocketConfig.fir 32976:4]
    io_deq_bits_sink <= ram_sink.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.TinyRocketConfig.fir 32975:4]
    io_deq_bits_denied <= ram_denied.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.TinyRocketConfig.fir 32974:4]
    io_deq_bits_data <= ram_data.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.TinyRocketConfig.fir 32973:4]
    io_deq_bits_corrupt <= ram_corrupt.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.TinyRocketConfig.fir 32972:4]
    value <= mux(reset, UInt<1>("h0"), _GEN_12) @[Counter.scala 60:40 chipyard.TestHarness.TinyRocketConfig.fir 32929:4 Counter.scala 60:40 chipyard.TestHarness.TinyRocketConfig.fir 32929:4]
    value_1 <= mux(reset, UInt<1>("h0"), _GEN_13) @[Counter.scala 60:40 chipyard.TestHarness.TinyRocketConfig.fir 32930:4 Counter.scala 60:40 chipyard.TestHarness.TinyRocketConfig.fir 32930:4]
    maybe_full <= mux(reset, UInt<1>("h0"), _GEN_14) @[Decoupled.scala 221:27 chipyard.TestHarness.TinyRocketConfig.fir 32931:4 Decoupled.scala 221:27 chipyard.TestHarness.TinyRocketConfig.fir 32931:4]
    ram_opcode.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_opcode.io_deq_bits_MPORT.addr <= value_1
    ram_opcode.io_deq_bits_MPORT.clk <= clock
    ram_opcode.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_opcode.MPORT.addr <= value
    ram_opcode.MPORT.mask <= UInt<1>("h1")
    ram_opcode.MPORT.data <= io_enq_bits_opcode
    ram_opcode.MPORT.clk <= clock
    ram_param.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_param.io_deq_bits_MPORT.addr <= value_1
    ram_param.io_deq_bits_MPORT.clk <= clock
    ram_param.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_param.MPORT.addr <= value
    ram_param.MPORT.mask <= UInt<1>("h1")
    ram_param.MPORT.data <= io_enq_bits_param
    ram_param.MPORT.clk <= clock
    ram_size.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_size.io_deq_bits_MPORT.addr <= value_1
    ram_size.io_deq_bits_MPORT.clk <= clock
    ram_size.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_size.MPORT.addr <= value
    ram_size.MPORT.mask <= UInt<1>("h1")
    ram_size.MPORT.data <= io_enq_bits_size
    ram_size.MPORT.clk <= clock
    ram_source.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_source.io_deq_bits_MPORT.addr <= value_1
    ram_source.io_deq_bits_MPORT.clk <= clock
    ram_source.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_source.MPORT.addr <= value
    ram_source.MPORT.mask <= UInt<1>("h1")
    ram_source.MPORT.data <= io_enq_bits_source
    ram_source.MPORT.clk <= clock
    ram_sink.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_sink.io_deq_bits_MPORT.addr <= value_1
    ram_sink.io_deq_bits_MPORT.clk <= clock
    ram_sink.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_sink.MPORT.addr <= value
    ram_sink.MPORT.mask <= UInt<1>("h1")
    ram_sink.MPORT.data <= io_enq_bits_sink
    ram_sink.MPORT.clk <= clock
    ram_denied.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_denied.io_deq_bits_MPORT.addr <= value_1
    ram_denied.io_deq_bits_MPORT.clk <= clock
    ram_denied.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_denied.MPORT.addr <= value
    ram_denied.MPORT.mask <= UInt<1>("h1")
    ram_denied.MPORT.data <= io_enq_bits_denied
    ram_denied.MPORT.clk <= clock
    ram_data.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_data.io_deq_bits_MPORT.addr <= value_1
    ram_data.io_deq_bits_MPORT.clk <= clock
    ram_data.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_data.MPORT.addr <= value
    ram_data.MPORT.mask <= UInt<1>("h1")
    ram_data.MPORT.data <= io_enq_bits_data
    ram_data.MPORT.clk <= clock
    ram_corrupt.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_corrupt.io_deq_bits_MPORT.addr <= value_1
    ram_corrupt.io_deq_bits_MPORT.clk <= clock
    ram_corrupt.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_corrupt.MPORT.addr <= value
    ram_corrupt.MPORT.mask <= UInt<1>("h1")
    ram_corrupt.MPORT.data <= io_enq_bits_corrupt
    ram_corrupt.MPORT.clk <= clock

  module HellaPeekingArbiter_inTestHarness : @[chipyard.TestHarness.TinyRocketConfig.fir 185005:2]
    input clock : Clock @[chipyard.TestHarness.TinyRocketConfig.fir 185006:4]
    input reset : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 185007:4]
    output io_in_1_ready : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 185008:4]
    input io_in_1_valid : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 185008:4]
    input io_in_1_bits_opcode : UInt<3> @[chipyard.TestHarness.TinyRocketConfig.fir 185008:4]
    input io_in_1_bits_param : UInt<3> @[chipyard.TestHarness.TinyRocketConfig.fir 185008:4]
    input io_in_1_bits_size : UInt<4> @[chipyard.TestHarness.TinyRocketConfig.fir 185008:4]
    input io_in_1_bits_source : UInt<2> @[chipyard.TestHarness.TinyRocketConfig.fir 185008:4]
    input io_in_1_bits_data : UInt<32> @[chipyard.TestHarness.TinyRocketConfig.fir 185008:4]
    input io_in_1_bits_corrupt : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 185008:4]
    input io_in_1_bits_union : UInt<4> @[chipyard.TestHarness.TinyRocketConfig.fir 185008:4]
    input io_in_1_bits_last : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 185008:4]
    output io_in_4_ready : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 185008:4]
    input io_in_4_valid : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 185008:4]
    input io_in_4_bits_opcode : UInt<3> @[chipyard.TestHarness.TinyRocketConfig.fir 185008:4]
    input io_in_4_bits_param : UInt<3> @[chipyard.TestHarness.TinyRocketConfig.fir 185008:4]
    input io_in_4_bits_size : UInt<4> @[chipyard.TestHarness.TinyRocketConfig.fir 185008:4]
    input io_in_4_bits_source : UInt<2> @[chipyard.TestHarness.TinyRocketConfig.fir 185008:4]
    input io_in_4_bits_address : UInt<32> @[chipyard.TestHarness.TinyRocketConfig.fir 185008:4]
    input io_in_4_bits_data : UInt<32> @[chipyard.TestHarness.TinyRocketConfig.fir 185008:4]
    input io_in_4_bits_corrupt : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 185008:4]
    input io_in_4_bits_union : UInt<4> @[chipyard.TestHarness.TinyRocketConfig.fir 185008:4]
    input io_in_4_bits_last : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 185008:4]
    input io_out_ready : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 185008:4]
    output io_out_valid : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 185008:4]
    output io_out_bits_chanId : UInt<3> @[chipyard.TestHarness.TinyRocketConfig.fir 185008:4]
    output io_out_bits_opcode : UInt<3> @[chipyard.TestHarness.TinyRocketConfig.fir 185008:4]
    output io_out_bits_param : UInt<3> @[chipyard.TestHarness.TinyRocketConfig.fir 185008:4]
    output io_out_bits_size : UInt<4> @[chipyard.TestHarness.TinyRocketConfig.fir 185008:4]
    output io_out_bits_source : UInt<2> @[chipyard.TestHarness.TinyRocketConfig.fir 185008:4]
    output io_out_bits_address : UInt<32> @[chipyard.TestHarness.TinyRocketConfig.fir 185008:4]
    output io_out_bits_data : UInt<32> @[chipyard.TestHarness.TinyRocketConfig.fir 185008:4]
    output io_out_bits_corrupt : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 185008:4]
    output io_out_bits_union : UInt<4> @[chipyard.TestHarness.TinyRocketConfig.fir 185008:4]
    output io_out_bits_last : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 185008:4]

    reg lockIdx : UInt<3>, clock with :
      reset => (UInt<1>("h0"), lockIdx) @[Arbiters.scala 25:20 chipyard.TestHarness.TinyRocketConfig.fir 185013:4]
    reg locked : UInt<1>, clock with :
      reset => (UInt<1>("h0"), locked) @[Arbiters.scala 26:19 chipyard.TestHarness.TinyRocketConfig.fir 185014:4]
    node choice = mux(io_in_1_valid, UInt<3>("h1"), UInt<3>("h4")) @[Mux.scala 47:69 chipyard.TestHarness.TinyRocketConfig.fir 185017:4]
    node chosen = mux(locked, lockIdx, choice) @[Arbiters.scala 36:19 chipyard.TestHarness.TinyRocketConfig.fir 185019:4]
    node _io_in_1_ready_T = eq(chosen, UInt<3>("h1")) @[Arbiters.scala 39:46 chipyard.TestHarness.TinyRocketConfig.fir 185023:4]
    node _io_in_4_ready_T = eq(chosen, UInt<3>("h4")) @[Arbiters.scala 39:46 chipyard.TestHarness.TinyRocketConfig.fir 185032:4]
    node _GEN_65 = eq(UInt<3>("h1"), chosen) @[Arbiters.scala 42:16 chipyard.TestHarness.TinyRocketConfig.fir 185035:4 Arbiters.scala 42:16 chipyard.TestHarness.TinyRocketConfig.fir 185035:4]
    node _GEN_13 = and(_GEN_65, io_in_1_valid) @[Arbiters.scala 42:16 chipyard.TestHarness.TinyRocketConfig.fir 185035:4 Arbiters.scala 42:16 chipyard.TestHarness.TinyRocketConfig.fir 185035:4]
    node _GEN_14 = mux(eq(UInt<3>("h1"), chosen), UInt<3>("h3"), UInt<3>("h4")) @[Arbiters.scala 42:16 chipyard.TestHarness.TinyRocketConfig.fir 185035:4 Arbiters.scala 42:16 chipyard.TestHarness.TinyRocketConfig.fir 185035:4]
    node _GEN_15 = mux(eq(UInt<3>("h1"), chosen), io_in_1_bits_opcode, UInt<3>("h0")) @[Arbiters.scala 42:16 chipyard.TestHarness.TinyRocketConfig.fir 185035:4 Arbiters.scala 42:16 chipyard.TestHarness.TinyRocketConfig.fir 185035:4]
    node _GEN_16 = mux(eq(UInt<3>("h1"), chosen), io_in_1_bits_param, UInt<3>("h0")) @[Arbiters.scala 42:16 chipyard.TestHarness.TinyRocketConfig.fir 185035:4 Arbiters.scala 42:16 chipyard.TestHarness.TinyRocketConfig.fir 185035:4]
    node _GEN_17 = mux(eq(UInt<3>("h1"), chosen), io_in_1_bits_size, UInt<4>("h0")) @[Arbiters.scala 42:16 chipyard.TestHarness.TinyRocketConfig.fir 185035:4 Arbiters.scala 42:16 chipyard.TestHarness.TinyRocketConfig.fir 185035:4]
    node _GEN_18 = mux(eq(UInt<3>("h1"), chosen), io_in_1_bits_source, UInt<2>("h0")) @[Arbiters.scala 42:16 chipyard.TestHarness.TinyRocketConfig.fir 185035:4 Arbiters.scala 42:16 chipyard.TestHarness.TinyRocketConfig.fir 185035:4]
    node _GEN_20 = mux(eq(UInt<3>("h1"), chosen), io_in_1_bits_data, UInt<32>("h0")) @[Arbiters.scala 42:16 chipyard.TestHarness.TinyRocketConfig.fir 185035:4 Arbiters.scala 42:16 chipyard.TestHarness.TinyRocketConfig.fir 185035:4]
    node _GEN_21 = and(_GEN_65, io_in_1_bits_corrupt) @[Arbiters.scala 42:16 chipyard.TestHarness.TinyRocketConfig.fir 185035:4 Arbiters.scala 42:16 chipyard.TestHarness.TinyRocketConfig.fir 185035:4]
    node _GEN_22 = mux(eq(UInt<3>("h1"), chosen), io_in_1_bits_union, UInt<4>("h0")) @[Arbiters.scala 42:16 chipyard.TestHarness.TinyRocketConfig.fir 185035:4 Arbiters.scala 42:16 chipyard.TestHarness.TinyRocketConfig.fir 185035:4]
    node _GEN_23 = mux(eq(UInt<3>("h1"), chosen), io_in_1_bits_last, UInt<1>("h1")) @[Arbiters.scala 42:16 chipyard.TestHarness.TinyRocketConfig.fir 185035:4 Arbiters.scala 42:16 chipyard.TestHarness.TinyRocketConfig.fir 185035:4]
    node _GEN_25 = mux(eq(UInt<3>("h2"), chosen), UInt<1>("h0"), _GEN_13) @[Arbiters.scala 42:16 chipyard.TestHarness.TinyRocketConfig.fir 185035:4 Arbiters.scala 42:16 chipyard.TestHarness.TinyRocketConfig.fir 185035:4]
    node _GEN_26 = mux(eq(UInt<3>("h2"), chosen), UInt<3>("h2"), _GEN_14) @[Arbiters.scala 42:16 chipyard.TestHarness.TinyRocketConfig.fir 185035:4 Arbiters.scala 42:16 chipyard.TestHarness.TinyRocketConfig.fir 185035:4]
    node _GEN_27 = mux(eq(UInt<3>("h2"), chosen), UInt<3>("h0"), _GEN_15) @[Arbiters.scala 42:16 chipyard.TestHarness.TinyRocketConfig.fir 185035:4 Arbiters.scala 42:16 chipyard.TestHarness.TinyRocketConfig.fir 185035:4]
    node _GEN_28 = mux(eq(UInt<3>("h2"), chosen), UInt<3>("h0"), _GEN_16) @[Arbiters.scala 42:16 chipyard.TestHarness.TinyRocketConfig.fir 185035:4 Arbiters.scala 42:16 chipyard.TestHarness.TinyRocketConfig.fir 185035:4]
    node _GEN_29 = mux(eq(UInt<3>("h2"), chosen), UInt<4>("h0"), _GEN_17) @[Arbiters.scala 42:16 chipyard.TestHarness.TinyRocketConfig.fir 185035:4 Arbiters.scala 42:16 chipyard.TestHarness.TinyRocketConfig.fir 185035:4]
    node _GEN_30 = mux(eq(UInt<3>("h2"), chosen), UInt<2>("h0"), _GEN_18) @[Arbiters.scala 42:16 chipyard.TestHarness.TinyRocketConfig.fir 185035:4 Arbiters.scala 42:16 chipyard.TestHarness.TinyRocketConfig.fir 185035:4]
    node _GEN_32 = mux(eq(UInt<3>("h2"), chosen), UInt<32>("h0"), _GEN_20) @[Arbiters.scala 42:16 chipyard.TestHarness.TinyRocketConfig.fir 185035:4 Arbiters.scala 42:16 chipyard.TestHarness.TinyRocketConfig.fir 185035:4]
    node _GEN_33 = mux(eq(UInt<3>("h2"), chosen), UInt<1>("h0"), _GEN_21) @[Arbiters.scala 42:16 chipyard.TestHarness.TinyRocketConfig.fir 185035:4 Arbiters.scala 42:16 chipyard.TestHarness.TinyRocketConfig.fir 185035:4]
    node _GEN_34 = mux(eq(UInt<3>("h2"), chosen), UInt<4>("h0"), _GEN_22) @[Arbiters.scala 42:16 chipyard.TestHarness.TinyRocketConfig.fir 185035:4 Arbiters.scala 42:16 chipyard.TestHarness.TinyRocketConfig.fir 185035:4]
    node _GEN_67 = eq(UInt<3>("h2"), chosen) @[Arbiters.scala 42:16 chipyard.TestHarness.TinyRocketConfig.fir 185035:4 Arbiters.scala 42:16 chipyard.TestHarness.TinyRocketConfig.fir 185035:4]
    node _GEN_35 = or(_GEN_67, _GEN_23) @[Arbiters.scala 42:16 chipyard.TestHarness.TinyRocketConfig.fir 185035:4 Arbiters.scala 42:16 chipyard.TestHarness.TinyRocketConfig.fir 185035:4]
    node _GEN_37 = mux(eq(UInt<3>("h3"), chosen), UInt<1>("h0"), _GEN_25) @[Arbiters.scala 42:16 chipyard.TestHarness.TinyRocketConfig.fir 185035:4 Arbiters.scala 42:16 chipyard.TestHarness.TinyRocketConfig.fir 185035:4]
    node _GEN_38 = mux(eq(UInt<3>("h3"), chosen), UInt<3>("h1"), _GEN_26) @[Arbiters.scala 42:16 chipyard.TestHarness.TinyRocketConfig.fir 185035:4 Arbiters.scala 42:16 chipyard.TestHarness.TinyRocketConfig.fir 185035:4]
    node _GEN_39 = mux(eq(UInt<3>("h3"), chosen), UInt<3>("h0"), _GEN_27) @[Arbiters.scala 42:16 chipyard.TestHarness.TinyRocketConfig.fir 185035:4 Arbiters.scala 42:16 chipyard.TestHarness.TinyRocketConfig.fir 185035:4]
    node _GEN_40 = mux(eq(UInt<3>("h3"), chosen), UInt<3>("h0"), _GEN_28) @[Arbiters.scala 42:16 chipyard.TestHarness.TinyRocketConfig.fir 185035:4 Arbiters.scala 42:16 chipyard.TestHarness.TinyRocketConfig.fir 185035:4]
    node _GEN_41 = mux(eq(UInt<3>("h3"), chosen), UInt<4>("h0"), _GEN_29) @[Arbiters.scala 42:16 chipyard.TestHarness.TinyRocketConfig.fir 185035:4 Arbiters.scala 42:16 chipyard.TestHarness.TinyRocketConfig.fir 185035:4]
    node _GEN_42 = mux(eq(UInt<3>("h3"), chosen), UInt<2>("h0"), _GEN_30) @[Arbiters.scala 42:16 chipyard.TestHarness.TinyRocketConfig.fir 185035:4 Arbiters.scala 42:16 chipyard.TestHarness.TinyRocketConfig.fir 185035:4]
    node _GEN_44 = mux(eq(UInt<3>("h3"), chosen), UInt<32>("h0"), _GEN_32) @[Arbiters.scala 42:16 chipyard.TestHarness.TinyRocketConfig.fir 185035:4 Arbiters.scala 42:16 chipyard.TestHarness.TinyRocketConfig.fir 185035:4]
    node _GEN_45 = mux(eq(UInt<3>("h3"), chosen), UInt<1>("h0"), _GEN_33) @[Arbiters.scala 42:16 chipyard.TestHarness.TinyRocketConfig.fir 185035:4 Arbiters.scala 42:16 chipyard.TestHarness.TinyRocketConfig.fir 185035:4]
    node _GEN_46 = mux(eq(UInt<3>("h3"), chosen), UInt<4>("h0"), _GEN_34) @[Arbiters.scala 42:16 chipyard.TestHarness.TinyRocketConfig.fir 185035:4 Arbiters.scala 42:16 chipyard.TestHarness.TinyRocketConfig.fir 185035:4]
    node _GEN_68 = eq(UInt<3>("h3"), chosen) @[Arbiters.scala 42:16 chipyard.TestHarness.TinyRocketConfig.fir 185035:4 Arbiters.scala 42:16 chipyard.TestHarness.TinyRocketConfig.fir 185035:4]
    node _GEN_47 = or(_GEN_68, _GEN_35) @[Arbiters.scala 42:16 chipyard.TestHarness.TinyRocketConfig.fir 185035:4 Arbiters.scala 42:16 chipyard.TestHarness.TinyRocketConfig.fir 185035:4]
    node _T = and(io_out_ready, io_out_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.TinyRocketConfig.fir 185037:4]
    node _T_1 = not(locked) @[Arbiters.scala 59:11 chipyard.TestHarness.TinyRocketConfig.fir 185039:6]
    node _GEN_60 = mux(_T_1, choice, lockIdx) @[Arbiters.scala 59:50 chipyard.TestHarness.TinyRocketConfig.fir 185041:6 Arbiters.scala 60:15 chipyard.TestHarness.TinyRocketConfig.fir 185042:8 Arbiters.scala 25:20 chipyard.TestHarness.TinyRocketConfig.fir 185013:4]
    node _GEN_61 = or(_T_1, locked) @[Arbiters.scala 59:50 chipyard.TestHarness.TinyRocketConfig.fir 185041:6 Arbiters.scala 61:14 chipyard.TestHarness.TinyRocketConfig.fir 185043:8 Arbiters.scala 26:19 chipyard.TestHarness.TinyRocketConfig.fir 185014:4]
    node _GEN_62 = mux(io_out_bits_last, UInt<1>("h0"), _GEN_61) @[Arbiters.scala 64:35 chipyard.TestHarness.TinyRocketConfig.fir 185045:6 Arbiters.scala 65:14 chipyard.TestHarness.TinyRocketConfig.fir 185046:8]
    node _GEN_63 = mux(_T, _GEN_60, lockIdx) @[Arbiters.scala 58:24 chipyard.TestHarness.TinyRocketConfig.fir 185038:4 Arbiters.scala 25:20 chipyard.TestHarness.TinyRocketConfig.fir 185013:4]
    node _GEN_64 = mux(_T, _GEN_62, locked) @[Arbiters.scala 58:24 chipyard.TestHarness.TinyRocketConfig.fir 185038:4 Arbiters.scala 26:19 chipyard.TestHarness.TinyRocketConfig.fir 185014:4]
    io_in_1_ready <= and(io_out_ready, _io_in_1_ready_T) @[Arbiters.scala 39:36 chipyard.TestHarness.TinyRocketConfig.fir 185024:4]
    io_in_4_ready <= and(io_out_ready, _io_in_4_ready_T) @[Arbiters.scala 39:36 chipyard.TestHarness.TinyRocketConfig.fir 185033:4]
    io_out_valid <= mux(eq(UInt<3>("h4"), chosen), io_in_4_valid, _GEN_37) @[Arbiters.scala 42:16 chipyard.TestHarness.TinyRocketConfig.fir 185035:4 Arbiters.scala 42:16 chipyard.TestHarness.TinyRocketConfig.fir 185035:4]
    io_out_bits_chanId <= mux(eq(UInt<3>("h4"), chosen), UInt<3>("h0"), _GEN_38) @[Arbiters.scala 42:16 chipyard.TestHarness.TinyRocketConfig.fir 185035:4 Arbiters.scala 42:16 chipyard.TestHarness.TinyRocketConfig.fir 185035:4]
    io_out_bits_opcode <= mux(eq(UInt<3>("h4"), chosen), io_in_4_bits_opcode, _GEN_39) @[Arbiters.scala 42:16 chipyard.TestHarness.TinyRocketConfig.fir 185035:4 Arbiters.scala 42:16 chipyard.TestHarness.TinyRocketConfig.fir 185035:4]
    io_out_bits_param <= mux(eq(UInt<3>("h4"), chosen), io_in_4_bits_param, _GEN_40) @[Arbiters.scala 42:16 chipyard.TestHarness.TinyRocketConfig.fir 185035:4 Arbiters.scala 42:16 chipyard.TestHarness.TinyRocketConfig.fir 185035:4]
    io_out_bits_size <= mux(eq(UInt<3>("h4"), chosen), io_in_4_bits_size, _GEN_41) @[Arbiters.scala 42:16 chipyard.TestHarness.TinyRocketConfig.fir 185035:4 Arbiters.scala 42:16 chipyard.TestHarness.TinyRocketConfig.fir 185035:4]
    io_out_bits_source <= mux(eq(UInt<3>("h4"), chosen), io_in_4_bits_source, _GEN_42) @[Arbiters.scala 42:16 chipyard.TestHarness.TinyRocketConfig.fir 185035:4 Arbiters.scala 42:16 chipyard.TestHarness.TinyRocketConfig.fir 185035:4]
    io_out_bits_address <= mux(eq(UInt<3>("h4"), chosen), io_in_4_bits_address, UInt<32>("h0")) @[Arbiters.scala 42:16 chipyard.TestHarness.TinyRocketConfig.fir 185035:4 Arbiters.scala 42:16 chipyard.TestHarness.TinyRocketConfig.fir 185035:4]
    io_out_bits_data <= mux(eq(UInt<3>("h4"), chosen), io_in_4_bits_data, _GEN_44) @[Arbiters.scala 42:16 chipyard.TestHarness.TinyRocketConfig.fir 185035:4 Arbiters.scala 42:16 chipyard.TestHarness.TinyRocketConfig.fir 185035:4]
    io_out_bits_corrupt <= mux(eq(UInt<3>("h4"), chosen), io_in_4_bits_corrupt, _GEN_45) @[Arbiters.scala 42:16 chipyard.TestHarness.TinyRocketConfig.fir 185035:4 Arbiters.scala 42:16 chipyard.TestHarness.TinyRocketConfig.fir 185035:4]
    io_out_bits_union <= mux(eq(UInt<3>("h4"), chosen), io_in_4_bits_union, _GEN_46) @[Arbiters.scala 42:16 chipyard.TestHarness.TinyRocketConfig.fir 185035:4 Arbiters.scala 42:16 chipyard.TestHarness.TinyRocketConfig.fir 185035:4]
    io_out_bits_last <= mux(eq(UInt<3>("h4"), chosen), io_in_4_bits_last, _GEN_47) @[Arbiters.scala 42:16 chipyard.TestHarness.TinyRocketConfig.fir 185035:4 Arbiters.scala 42:16 chipyard.TestHarness.TinyRocketConfig.fir 185035:4]
    lockIdx <= mux(reset, UInt<3>("h0"), _GEN_63) @[Arbiters.scala 25:20 chipyard.TestHarness.TinyRocketConfig.fir 185013:4 Arbiters.scala 25:20 chipyard.TestHarness.TinyRocketConfig.fir 185013:4]
    locked <= mux(reset, UInt<1>("h0"), _GEN_64) @[Arbiters.scala 26:19 chipyard.TestHarness.TinyRocketConfig.fir 185014:4 Arbiters.scala 26:19 chipyard.TestHarness.TinyRocketConfig.fir 185014:4]

  module GenericSerializer_inTestHarness : @[chipyard.TestHarness.TinyRocketConfig.fir 185050:2]
    input clock : Clock @[chipyard.TestHarness.TinyRocketConfig.fir 185051:4]
    input reset : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 185052:4]
    output io_in_ready : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 185053:4]
    input io_in_valid : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 185053:4]
    input io_in_bits_chanId : UInt<3> @[chipyard.TestHarness.TinyRocketConfig.fir 185053:4]
    input io_in_bits_opcode : UInt<3> @[chipyard.TestHarness.TinyRocketConfig.fir 185053:4]
    input io_in_bits_param : UInt<3> @[chipyard.TestHarness.TinyRocketConfig.fir 185053:4]
    input io_in_bits_size : UInt<4> @[chipyard.TestHarness.TinyRocketConfig.fir 185053:4]
    input io_in_bits_source : UInt<2> @[chipyard.TestHarness.TinyRocketConfig.fir 185053:4]
    input io_in_bits_address : UInt<32> @[chipyard.TestHarness.TinyRocketConfig.fir 185053:4]
    input io_in_bits_data : UInt<32> @[chipyard.TestHarness.TinyRocketConfig.fir 185053:4]
    input io_in_bits_corrupt : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 185053:4]
    input io_in_bits_union : UInt<4> @[chipyard.TestHarness.TinyRocketConfig.fir 185053:4]
    input io_in_bits_last : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 185053:4]
    input io_out_ready : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 185053:4]
    output io_out_valid : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 185053:4]
    output io_out_bits : UInt<4> @[chipyard.TestHarness.TinyRocketConfig.fir 185053:4]

    reg data : UInt<85>, clock with :
      reset => (UInt<1>("h0"), data) @[Serdes.scala 175:17 chipyard.TestHarness.TinyRocketConfig.fir 185055:4]
    reg sending : UInt<1>, clock with :
      reset => (UInt<1>("h0"), sending) @[Serdes.scala 177:24 chipyard.TestHarness.TinyRocketConfig.fir 185056:4]
    node _T = and(io_out_ready, io_out_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.TinyRocketConfig.fir 185057:4]
    reg sendCount : UInt<5>, clock with :
      reset => (UInt<1>("h0"), sendCount) @[Counter.scala 60:40 chipyard.TestHarness.TinyRocketConfig.fir 185058:4]
    node wrap_wrap = eq(sendCount, UInt<5>("h15")) @[Counter.scala 72:24 chipyard.TestHarness.TinyRocketConfig.fir 185062:6]
    node _wrap_value_T = add(sendCount, UInt<5>("h1")) @[Counter.scala 76:24 chipyard.TestHarness.TinyRocketConfig.fir 185063:6]
    node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[Counter.scala 76:24 chipyard.TestHarness.TinyRocketConfig.fir 185064:6]
    node _GEN_0 = mux(wrap_wrap, UInt<5>("h0"), _wrap_value_T_1) @[Counter.scala 86:20 chipyard.TestHarness.TinyRocketConfig.fir 185066:6 Counter.scala 86:28 chipyard.TestHarness.TinyRocketConfig.fir 185067:8 Counter.scala 76:15 chipyard.TestHarness.TinyRocketConfig.fir 185065:6]
    node _GEN_1 = mux(_T, _GEN_0, sendCount) @[Counter.scala 118:17 chipyard.TestHarness.TinyRocketConfig.fir 185061:4 Counter.scala 60:40 chipyard.TestHarness.TinyRocketConfig.fir 185058:4]
    node sendDone = and(_T, wrap_wrap) @[Counter.scala 118:17 chipyard.TestHarness.TinyRocketConfig.fir 185061:4 Counter.scala 118:24 chipyard.TestHarness.TinyRocketConfig.fir 185069:6 chipyard.TestHarness.TinyRocketConfig.fir 185060:4]
    node _T_1 = and(io_in_ready, io_in_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.TinyRocketConfig.fir 185076:4]
    node _data_T = cat(cat(cat(cat(io_in_bits_chanId, io_in_bits_opcode), io_in_bits_param), cat(io_in_bits_size, io_in_bits_source)), cat(cat(cat(io_in_bits_address, io_in_bits_data), io_in_bits_corrupt), cat(io_in_bits_union, io_in_bits_last))) @[Serdes.scala 185:24 chipyard.TestHarness.TinyRocketConfig.fir 185086:6]
    node _GEN_3 = mux(_T_1, _data_T, data) @[Serdes.scala 184:23 chipyard.TestHarness.TinyRocketConfig.fir 185077:4 Serdes.scala 185:10 chipyard.TestHarness.TinyRocketConfig.fir 185087:6 Serdes.scala 175:17 chipyard.TestHarness.TinyRocketConfig.fir 185055:4]
    node _GEN_4 = or(_T_1, sending) @[Serdes.scala 184:23 chipyard.TestHarness.TinyRocketConfig.fir 185077:4 Serdes.scala 186:13 chipyard.TestHarness.TinyRocketConfig.fir 185088:6 Serdes.scala 177:24 chipyard.TestHarness.TinyRocketConfig.fir 185056:4]
    node _GEN_7 = shr(data, 4) @[Serdes.scala 189:39 chipyard.TestHarness.TinyRocketConfig.fir 185092:6]
    node _data_T_1 = pad(_GEN_7, 85) @[Serdes.scala 189:39 chipyard.TestHarness.TinyRocketConfig.fir 185092:6]
    node _GEN_6 = mux(sendDone, UInt<1>("h0"), _GEN_4) @[Serdes.scala 191:19 chipyard.TestHarness.TinyRocketConfig.fir 185095:4 Serdes.scala 191:29 chipyard.TestHarness.TinyRocketConfig.fir 185096:6]
    io_in_ready <= not(sending) @[Serdes.scala 180:18 chipyard.TestHarness.TinyRocketConfig.fir 185071:4]
    io_out_valid <= sending @[Serdes.scala 181:16 chipyard.TestHarness.TinyRocketConfig.fir 185073:4]
    io_out_bits <= bits(data, 3, 0) @[Serdes.scala 182:22 chipyard.TestHarness.TinyRocketConfig.fir 185074:4]
    data <= mux(_T, _data_T_1, _GEN_3) @[Serdes.scala 189:24 chipyard.TestHarness.TinyRocketConfig.fir 185091:4 Serdes.scala 189:31 chipyard.TestHarness.TinyRocketConfig.fir 185093:6]
    sending <= mux(reset, UInt<1>("h0"), _GEN_6) @[Serdes.scala 177:24 chipyard.TestHarness.TinyRocketConfig.fir 185056:4 Serdes.scala 177:24 chipyard.TestHarness.TinyRocketConfig.fir 185056:4]
    sendCount <= mux(reset, UInt<5>("h0"), _GEN_1) @[Counter.scala 60:40 chipyard.TestHarness.TinyRocketConfig.fir 185058:4 Counter.scala 60:40 chipyard.TestHarness.TinyRocketConfig.fir 185058:4]

  module GenericDeserializer_inTestHarness : @[chipyard.TestHarness.TinyRocketConfig.fir 185099:2]
    input clock : Clock @[chipyard.TestHarness.TinyRocketConfig.fir 185100:4]
    input reset : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 185101:4]
    output io_in_ready : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 185102:4]
    input io_in_valid : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 185102:4]
    input io_in_bits : UInt<4> @[chipyard.TestHarness.TinyRocketConfig.fir 185102:4]
    input io_out_ready : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 185102:4]
    output io_out_valid : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 185102:4]
    output io_out_bits_chanId : UInt<3> @[chipyard.TestHarness.TinyRocketConfig.fir 185102:4]
    output io_out_bits_opcode : UInt<3> @[chipyard.TestHarness.TinyRocketConfig.fir 185102:4]
    output io_out_bits_param : UInt<3> @[chipyard.TestHarness.TinyRocketConfig.fir 185102:4]
    output io_out_bits_size : UInt<4> @[chipyard.TestHarness.TinyRocketConfig.fir 185102:4]
    output io_out_bits_source : UInt<2> @[chipyard.TestHarness.TinyRocketConfig.fir 185102:4]
    output io_out_bits_address : UInt<32> @[chipyard.TestHarness.TinyRocketConfig.fir 185102:4]
    output io_out_bits_data : UInt<32> @[chipyard.TestHarness.TinyRocketConfig.fir 185102:4]
    output io_out_bits_corrupt : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 185102:4]
    output io_out_bits_union : UInt<4> @[chipyard.TestHarness.TinyRocketConfig.fir 185102:4]

    reg data_0 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), data_0) @[Serdes.scala 202:17 chipyard.TestHarness.TinyRocketConfig.fir 185104:4]
    reg data_1 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), data_1) @[Serdes.scala 202:17 chipyard.TestHarness.TinyRocketConfig.fir 185104:4]
    reg data_2 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), data_2) @[Serdes.scala 202:17 chipyard.TestHarness.TinyRocketConfig.fir 185104:4]
    reg data_3 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), data_3) @[Serdes.scala 202:17 chipyard.TestHarness.TinyRocketConfig.fir 185104:4]
    reg data_4 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), data_4) @[Serdes.scala 202:17 chipyard.TestHarness.TinyRocketConfig.fir 185104:4]
    reg data_5 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), data_5) @[Serdes.scala 202:17 chipyard.TestHarness.TinyRocketConfig.fir 185104:4]
    reg data_6 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), data_6) @[Serdes.scala 202:17 chipyard.TestHarness.TinyRocketConfig.fir 185104:4]
    reg data_7 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), data_7) @[Serdes.scala 202:17 chipyard.TestHarness.TinyRocketConfig.fir 185104:4]
    reg data_8 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), data_8) @[Serdes.scala 202:17 chipyard.TestHarness.TinyRocketConfig.fir 185104:4]
    reg data_9 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), data_9) @[Serdes.scala 202:17 chipyard.TestHarness.TinyRocketConfig.fir 185104:4]
    reg data_10 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), data_10) @[Serdes.scala 202:17 chipyard.TestHarness.TinyRocketConfig.fir 185104:4]
    reg data_11 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), data_11) @[Serdes.scala 202:17 chipyard.TestHarness.TinyRocketConfig.fir 185104:4]
    reg data_12 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), data_12) @[Serdes.scala 202:17 chipyard.TestHarness.TinyRocketConfig.fir 185104:4]
    reg data_13 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), data_13) @[Serdes.scala 202:17 chipyard.TestHarness.TinyRocketConfig.fir 185104:4]
    reg data_14 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), data_14) @[Serdes.scala 202:17 chipyard.TestHarness.TinyRocketConfig.fir 185104:4]
    reg data_15 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), data_15) @[Serdes.scala 202:17 chipyard.TestHarness.TinyRocketConfig.fir 185104:4]
    reg data_16 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), data_16) @[Serdes.scala 202:17 chipyard.TestHarness.TinyRocketConfig.fir 185104:4]
    reg data_17 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), data_17) @[Serdes.scala 202:17 chipyard.TestHarness.TinyRocketConfig.fir 185104:4]
    reg data_18 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), data_18) @[Serdes.scala 202:17 chipyard.TestHarness.TinyRocketConfig.fir 185104:4]
    reg data_19 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), data_19) @[Serdes.scala 202:17 chipyard.TestHarness.TinyRocketConfig.fir 185104:4]
    reg data_20 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), data_20) @[Serdes.scala 202:17 chipyard.TestHarness.TinyRocketConfig.fir 185104:4]
    reg data_21 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), data_21) @[Serdes.scala 202:17 chipyard.TestHarness.TinyRocketConfig.fir 185104:4]
    reg receiving : UInt<1>, clock with :
      reset => (UInt<1>("h0"), receiving) @[Serdes.scala 204:26 chipyard.TestHarness.TinyRocketConfig.fir 185105:4]
    node _T = and(io_in_ready, io_in_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.TinyRocketConfig.fir 185106:4]
    reg recvCount : UInt<5>, clock with :
      reset => (UInt<1>("h0"), recvCount) @[Counter.scala 60:40 chipyard.TestHarness.TinyRocketConfig.fir 185107:4]
    node wrap_wrap = eq(recvCount, UInt<5>("h15")) @[Counter.scala 72:24 chipyard.TestHarness.TinyRocketConfig.fir 185111:6]
    node _wrap_value_T = add(recvCount, UInt<5>("h1")) @[Counter.scala 76:24 chipyard.TestHarness.TinyRocketConfig.fir 185112:6]
    node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[Counter.scala 76:24 chipyard.TestHarness.TinyRocketConfig.fir 185113:6]
    node _GEN_0 = mux(wrap_wrap, UInt<5>("h0"), _wrap_value_T_1) @[Counter.scala 86:20 chipyard.TestHarness.TinyRocketConfig.fir 185115:6 Counter.scala 86:28 chipyard.TestHarness.TinyRocketConfig.fir 185116:8 Counter.scala 76:15 chipyard.TestHarness.TinyRocketConfig.fir 185114:6]
    node _GEN_1 = mux(_T, _GEN_0, recvCount) @[Counter.scala 118:17 chipyard.TestHarness.TinyRocketConfig.fir 185110:4 Counter.scala 60:40 chipyard.TestHarness.TinyRocketConfig.fir 185107:4]
    node recvDone = and(_T, wrap_wrap) @[Counter.scala 118:17 chipyard.TestHarness.TinyRocketConfig.fir 185110:4 Counter.scala 118:24 chipyard.TestHarness.TinyRocketConfig.fir 185118:6 chipyard.TestHarness.TinyRocketConfig.fir 185109:4]
    node io_out_bits_lo_lo = cat(cat(cat(data_4, data_3), data_2), cat(data_1, data_0)) @[Serdes.scala 209:23 chipyard.TestHarness.TinyRocketConfig.fir 185126:4]
    node io_out_bits_lo = cat(cat(cat(cat(data_10, data_9), data_8), cat(cat(data_7, data_6), data_5)), io_out_bits_lo_lo) @[Serdes.scala 209:23 chipyard.TestHarness.TinyRocketConfig.fir 185132:4]
    node io_out_bits_hi_lo = cat(cat(cat(data_15, data_14), data_13), cat(data_12, data_11)) @[Serdes.scala 209:23 chipyard.TestHarness.TinyRocketConfig.fir 185136:4]
    node _io_out_bits_T = cat(cat(cat(cat(cat(data_21, data_20), data_19), cat(cat(data_18, data_17), data_16)), io_out_bits_hi_lo), io_out_bits_lo) @[Serdes.scala 209:23 chipyard.TestHarness.TinyRocketConfig.fir 185143:4]
    node _io_out_bits_WIRE_1 = bits(_io_out_bits_T, 84, 0) @[chipyard.TestHarness.TinyRocketConfig.fir 185145:4 chipyard.TestHarness.TinyRocketConfig.fir 185146:4]
    node _GEN_3 = mux(eq(UInt<5>("h0"), recvCount), io_in_bits, data_0) @[Serdes.scala 212:21 chipyard.TestHarness.TinyRocketConfig.fir 185179:6 Serdes.scala 212:21 chipyard.TestHarness.TinyRocketConfig.fir 185179:6 Serdes.scala 202:17 chipyard.TestHarness.TinyRocketConfig.fir 185104:4]
    node _GEN_4 = mux(eq(UInt<5>("h1"), recvCount), io_in_bits, data_1) @[Serdes.scala 212:21 chipyard.TestHarness.TinyRocketConfig.fir 185179:6 Serdes.scala 212:21 chipyard.TestHarness.TinyRocketConfig.fir 185179:6 Serdes.scala 202:17 chipyard.TestHarness.TinyRocketConfig.fir 185104:4]
    node _GEN_5 = mux(eq(UInt<5>("h2"), recvCount), io_in_bits, data_2) @[Serdes.scala 212:21 chipyard.TestHarness.TinyRocketConfig.fir 185179:6 Serdes.scala 212:21 chipyard.TestHarness.TinyRocketConfig.fir 185179:6 Serdes.scala 202:17 chipyard.TestHarness.TinyRocketConfig.fir 185104:4]
    node _GEN_6 = mux(eq(UInt<5>("h3"), recvCount), io_in_bits, data_3) @[Serdes.scala 212:21 chipyard.TestHarness.TinyRocketConfig.fir 185179:6 Serdes.scala 212:21 chipyard.TestHarness.TinyRocketConfig.fir 185179:6 Serdes.scala 202:17 chipyard.TestHarness.TinyRocketConfig.fir 185104:4]
    node _GEN_7 = mux(eq(UInt<5>("h4"), recvCount), io_in_bits, data_4) @[Serdes.scala 212:21 chipyard.TestHarness.TinyRocketConfig.fir 185179:6 Serdes.scala 212:21 chipyard.TestHarness.TinyRocketConfig.fir 185179:6 Serdes.scala 202:17 chipyard.TestHarness.TinyRocketConfig.fir 185104:4]
    node _GEN_8 = mux(eq(UInt<5>("h5"), recvCount), io_in_bits, data_5) @[Serdes.scala 212:21 chipyard.TestHarness.TinyRocketConfig.fir 185179:6 Serdes.scala 212:21 chipyard.TestHarness.TinyRocketConfig.fir 185179:6 Serdes.scala 202:17 chipyard.TestHarness.TinyRocketConfig.fir 185104:4]
    node _GEN_9 = mux(eq(UInt<5>("h6"), recvCount), io_in_bits, data_6) @[Serdes.scala 212:21 chipyard.TestHarness.TinyRocketConfig.fir 185179:6 Serdes.scala 212:21 chipyard.TestHarness.TinyRocketConfig.fir 185179:6 Serdes.scala 202:17 chipyard.TestHarness.TinyRocketConfig.fir 185104:4]
    node _GEN_10 = mux(eq(UInt<5>("h7"), recvCount), io_in_bits, data_7) @[Serdes.scala 212:21 chipyard.TestHarness.TinyRocketConfig.fir 185179:6 Serdes.scala 212:21 chipyard.TestHarness.TinyRocketConfig.fir 185179:6 Serdes.scala 202:17 chipyard.TestHarness.TinyRocketConfig.fir 185104:4]
    node _GEN_11 = mux(eq(UInt<5>("h8"), recvCount), io_in_bits, data_8) @[Serdes.scala 212:21 chipyard.TestHarness.TinyRocketConfig.fir 185179:6 Serdes.scala 212:21 chipyard.TestHarness.TinyRocketConfig.fir 185179:6 Serdes.scala 202:17 chipyard.TestHarness.TinyRocketConfig.fir 185104:4]
    node _GEN_12 = mux(eq(UInt<5>("h9"), recvCount), io_in_bits, data_9) @[Serdes.scala 212:21 chipyard.TestHarness.TinyRocketConfig.fir 185179:6 Serdes.scala 212:21 chipyard.TestHarness.TinyRocketConfig.fir 185179:6 Serdes.scala 202:17 chipyard.TestHarness.TinyRocketConfig.fir 185104:4]
    node _GEN_13 = mux(eq(UInt<5>("ha"), recvCount), io_in_bits, data_10) @[Serdes.scala 212:21 chipyard.TestHarness.TinyRocketConfig.fir 185179:6 Serdes.scala 212:21 chipyard.TestHarness.TinyRocketConfig.fir 185179:6 Serdes.scala 202:17 chipyard.TestHarness.TinyRocketConfig.fir 185104:4]
    node _GEN_14 = mux(eq(UInt<5>("hb"), recvCount), io_in_bits, data_11) @[Serdes.scala 212:21 chipyard.TestHarness.TinyRocketConfig.fir 185179:6 Serdes.scala 212:21 chipyard.TestHarness.TinyRocketConfig.fir 185179:6 Serdes.scala 202:17 chipyard.TestHarness.TinyRocketConfig.fir 185104:4]
    node _GEN_15 = mux(eq(UInt<5>("hc"), recvCount), io_in_bits, data_12) @[Serdes.scala 212:21 chipyard.TestHarness.TinyRocketConfig.fir 185179:6 Serdes.scala 212:21 chipyard.TestHarness.TinyRocketConfig.fir 185179:6 Serdes.scala 202:17 chipyard.TestHarness.TinyRocketConfig.fir 185104:4]
    node _GEN_16 = mux(eq(UInt<5>("hd"), recvCount), io_in_bits, data_13) @[Serdes.scala 212:21 chipyard.TestHarness.TinyRocketConfig.fir 185179:6 Serdes.scala 212:21 chipyard.TestHarness.TinyRocketConfig.fir 185179:6 Serdes.scala 202:17 chipyard.TestHarness.TinyRocketConfig.fir 185104:4]
    node _GEN_17 = mux(eq(UInt<5>("he"), recvCount), io_in_bits, data_14) @[Serdes.scala 212:21 chipyard.TestHarness.TinyRocketConfig.fir 185179:6 Serdes.scala 212:21 chipyard.TestHarness.TinyRocketConfig.fir 185179:6 Serdes.scala 202:17 chipyard.TestHarness.TinyRocketConfig.fir 185104:4]
    node _GEN_18 = mux(eq(UInt<5>("hf"), recvCount), io_in_bits, data_15) @[Serdes.scala 212:21 chipyard.TestHarness.TinyRocketConfig.fir 185179:6 Serdes.scala 212:21 chipyard.TestHarness.TinyRocketConfig.fir 185179:6 Serdes.scala 202:17 chipyard.TestHarness.TinyRocketConfig.fir 185104:4]
    node _GEN_19 = mux(eq(UInt<5>("h10"), recvCount), io_in_bits, data_16) @[Serdes.scala 212:21 chipyard.TestHarness.TinyRocketConfig.fir 185179:6 Serdes.scala 212:21 chipyard.TestHarness.TinyRocketConfig.fir 185179:6 Serdes.scala 202:17 chipyard.TestHarness.TinyRocketConfig.fir 185104:4]
    node _GEN_20 = mux(eq(UInt<5>("h11"), recvCount), io_in_bits, data_17) @[Serdes.scala 212:21 chipyard.TestHarness.TinyRocketConfig.fir 185179:6 Serdes.scala 212:21 chipyard.TestHarness.TinyRocketConfig.fir 185179:6 Serdes.scala 202:17 chipyard.TestHarness.TinyRocketConfig.fir 185104:4]
    node _GEN_21 = mux(eq(UInt<5>("h12"), recvCount), io_in_bits, data_18) @[Serdes.scala 212:21 chipyard.TestHarness.TinyRocketConfig.fir 185179:6 Serdes.scala 212:21 chipyard.TestHarness.TinyRocketConfig.fir 185179:6 Serdes.scala 202:17 chipyard.TestHarness.TinyRocketConfig.fir 185104:4]
    node _GEN_22 = mux(eq(UInt<5>("h13"), recvCount), io_in_bits, data_19) @[Serdes.scala 212:21 chipyard.TestHarness.TinyRocketConfig.fir 185179:6 Serdes.scala 212:21 chipyard.TestHarness.TinyRocketConfig.fir 185179:6 Serdes.scala 202:17 chipyard.TestHarness.TinyRocketConfig.fir 185104:4]
    node _GEN_23 = mux(eq(UInt<5>("h14"), recvCount), io_in_bits, data_20) @[Serdes.scala 212:21 chipyard.TestHarness.TinyRocketConfig.fir 185179:6 Serdes.scala 212:21 chipyard.TestHarness.TinyRocketConfig.fir 185179:6 Serdes.scala 202:17 chipyard.TestHarness.TinyRocketConfig.fir 185104:4]
    node _GEN_24 = mux(eq(UInt<5>("h15"), recvCount), io_in_bits, data_21) @[Serdes.scala 212:21 chipyard.TestHarness.TinyRocketConfig.fir 185179:6 Serdes.scala 212:21 chipyard.TestHarness.TinyRocketConfig.fir 185179:6 Serdes.scala 202:17 chipyard.TestHarness.TinyRocketConfig.fir 185104:4]
    node _GEN_47 = mux(recvDone, UInt<1>("h0"), receiving) @[Serdes.scala 215:19 chipyard.TestHarness.TinyRocketConfig.fir 185181:4 Serdes.scala 215:31 chipyard.TestHarness.TinyRocketConfig.fir 185182:6 Serdes.scala 204:26 chipyard.TestHarness.TinyRocketConfig.fir 185105:4]
    node _T_2 = and(io_out_ready, io_out_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.TinyRocketConfig.fir 185184:4]
    node _GEN_48 = or(_T_2, _GEN_47) @[Serdes.scala 217:24 chipyard.TestHarness.TinyRocketConfig.fir 185185:4 Serdes.scala 217:36 chipyard.TestHarness.TinyRocketConfig.fir 185186:6]
    io_in_ready <= receiving @[Serdes.scala 207:15 chipyard.TestHarness.TinyRocketConfig.fir 185120:4]
    io_out_valid <= not(receiving) @[Serdes.scala 208:19 chipyard.TestHarness.TinyRocketConfig.fir 185121:4]
    io_out_bits_chanId <= bits(_io_out_bits_WIRE_1, 84, 82) @[Serdes.scala 209:38 chipyard.TestHarness.TinyRocketConfig.fir 185165:4]
    io_out_bits_opcode <= bits(_io_out_bits_WIRE_1, 81, 79) @[Serdes.scala 209:38 chipyard.TestHarness.TinyRocketConfig.fir 185163:4]
    io_out_bits_param <= bits(_io_out_bits_WIRE_1, 78, 76) @[Serdes.scala 209:38 chipyard.TestHarness.TinyRocketConfig.fir 185161:4]
    io_out_bits_size <= bits(_io_out_bits_WIRE_1, 75, 72) @[Serdes.scala 209:38 chipyard.TestHarness.TinyRocketConfig.fir 185159:4]
    io_out_bits_source <= bits(_io_out_bits_WIRE_1, 71, 70) @[Serdes.scala 209:38 chipyard.TestHarness.TinyRocketConfig.fir 185157:4]
    io_out_bits_address <= bits(_io_out_bits_WIRE_1, 69, 38) @[Serdes.scala 209:38 chipyard.TestHarness.TinyRocketConfig.fir 185155:4]
    io_out_bits_data <= bits(_io_out_bits_WIRE_1, 37, 6) @[Serdes.scala 209:38 chipyard.TestHarness.TinyRocketConfig.fir 185153:4]
    io_out_bits_corrupt <= bits(_io_out_bits_WIRE_1, 5, 5) @[Serdes.scala 209:38 chipyard.TestHarness.TinyRocketConfig.fir 185151:4]
    io_out_bits_union <= bits(_io_out_bits_WIRE_1, 4, 1) @[Serdes.scala 209:38 chipyard.TestHarness.TinyRocketConfig.fir 185149:4]
    data_0 <= mux(_T, _GEN_3, data_0) @[Serdes.scala 211:23 chipyard.TestHarness.TinyRocketConfig.fir 185178:4 Serdes.scala 202:17 chipyard.TestHarness.TinyRocketConfig.fir 185104:4]
    data_1 <= mux(_T, _GEN_4, data_1) @[Serdes.scala 211:23 chipyard.TestHarness.TinyRocketConfig.fir 185178:4 Serdes.scala 202:17 chipyard.TestHarness.TinyRocketConfig.fir 185104:4]
    data_2 <= mux(_T, _GEN_5, data_2) @[Serdes.scala 211:23 chipyard.TestHarness.TinyRocketConfig.fir 185178:4 Serdes.scala 202:17 chipyard.TestHarness.TinyRocketConfig.fir 185104:4]
    data_3 <= mux(_T, _GEN_6, data_3) @[Serdes.scala 211:23 chipyard.TestHarness.TinyRocketConfig.fir 185178:4 Serdes.scala 202:17 chipyard.TestHarness.TinyRocketConfig.fir 185104:4]
    data_4 <= mux(_T, _GEN_7, data_4) @[Serdes.scala 211:23 chipyard.TestHarness.TinyRocketConfig.fir 185178:4 Serdes.scala 202:17 chipyard.TestHarness.TinyRocketConfig.fir 185104:4]
    data_5 <= mux(_T, _GEN_8, data_5) @[Serdes.scala 211:23 chipyard.TestHarness.TinyRocketConfig.fir 185178:4 Serdes.scala 202:17 chipyard.TestHarness.TinyRocketConfig.fir 185104:4]
    data_6 <= mux(_T, _GEN_9, data_6) @[Serdes.scala 211:23 chipyard.TestHarness.TinyRocketConfig.fir 185178:4 Serdes.scala 202:17 chipyard.TestHarness.TinyRocketConfig.fir 185104:4]
    data_7 <= mux(_T, _GEN_10, data_7) @[Serdes.scala 211:23 chipyard.TestHarness.TinyRocketConfig.fir 185178:4 Serdes.scala 202:17 chipyard.TestHarness.TinyRocketConfig.fir 185104:4]
    data_8 <= mux(_T, _GEN_11, data_8) @[Serdes.scala 211:23 chipyard.TestHarness.TinyRocketConfig.fir 185178:4 Serdes.scala 202:17 chipyard.TestHarness.TinyRocketConfig.fir 185104:4]
    data_9 <= mux(_T, _GEN_12, data_9) @[Serdes.scala 211:23 chipyard.TestHarness.TinyRocketConfig.fir 185178:4 Serdes.scala 202:17 chipyard.TestHarness.TinyRocketConfig.fir 185104:4]
    data_10 <= mux(_T, _GEN_13, data_10) @[Serdes.scala 211:23 chipyard.TestHarness.TinyRocketConfig.fir 185178:4 Serdes.scala 202:17 chipyard.TestHarness.TinyRocketConfig.fir 185104:4]
    data_11 <= mux(_T, _GEN_14, data_11) @[Serdes.scala 211:23 chipyard.TestHarness.TinyRocketConfig.fir 185178:4 Serdes.scala 202:17 chipyard.TestHarness.TinyRocketConfig.fir 185104:4]
    data_12 <= mux(_T, _GEN_15, data_12) @[Serdes.scala 211:23 chipyard.TestHarness.TinyRocketConfig.fir 185178:4 Serdes.scala 202:17 chipyard.TestHarness.TinyRocketConfig.fir 185104:4]
    data_13 <= mux(_T, _GEN_16, data_13) @[Serdes.scala 211:23 chipyard.TestHarness.TinyRocketConfig.fir 185178:4 Serdes.scala 202:17 chipyard.TestHarness.TinyRocketConfig.fir 185104:4]
    data_14 <= mux(_T, _GEN_17, data_14) @[Serdes.scala 211:23 chipyard.TestHarness.TinyRocketConfig.fir 185178:4 Serdes.scala 202:17 chipyard.TestHarness.TinyRocketConfig.fir 185104:4]
    data_15 <= mux(_T, _GEN_18, data_15) @[Serdes.scala 211:23 chipyard.TestHarness.TinyRocketConfig.fir 185178:4 Serdes.scala 202:17 chipyard.TestHarness.TinyRocketConfig.fir 185104:4]
    data_16 <= mux(_T, _GEN_19, data_16) @[Serdes.scala 211:23 chipyard.TestHarness.TinyRocketConfig.fir 185178:4 Serdes.scala 202:17 chipyard.TestHarness.TinyRocketConfig.fir 185104:4]
    data_17 <= mux(_T, _GEN_20, data_17) @[Serdes.scala 211:23 chipyard.TestHarness.TinyRocketConfig.fir 185178:4 Serdes.scala 202:17 chipyard.TestHarness.TinyRocketConfig.fir 185104:4]
    data_18 <= mux(_T, _GEN_21, data_18) @[Serdes.scala 211:23 chipyard.TestHarness.TinyRocketConfig.fir 185178:4 Serdes.scala 202:17 chipyard.TestHarness.TinyRocketConfig.fir 185104:4]
    data_19 <= mux(_T, _GEN_22, data_19) @[Serdes.scala 211:23 chipyard.TestHarness.TinyRocketConfig.fir 185178:4 Serdes.scala 202:17 chipyard.TestHarness.TinyRocketConfig.fir 185104:4]
    data_20 <= mux(_T, _GEN_23, data_20) @[Serdes.scala 211:23 chipyard.TestHarness.TinyRocketConfig.fir 185178:4 Serdes.scala 202:17 chipyard.TestHarness.TinyRocketConfig.fir 185104:4]
    data_21 <= mux(_T, _GEN_24, data_21) @[Serdes.scala 211:23 chipyard.TestHarness.TinyRocketConfig.fir 185178:4 Serdes.scala 202:17 chipyard.TestHarness.TinyRocketConfig.fir 185104:4]
    receiving <= or(reset, _GEN_48) @[Serdes.scala 204:26 chipyard.TestHarness.TinyRocketConfig.fir 185105:4 Serdes.scala 204:26 chipyard.TestHarness.TinyRocketConfig.fir 185105:4]
    recvCount <= mux(reset, UInt<5>("h0"), _GEN_1) @[Counter.scala 60:40 chipyard.TestHarness.TinyRocketConfig.fir 185107:4 Counter.scala 60:40 chipyard.TestHarness.TinyRocketConfig.fir 185107:4]

  extmodule ChipTop : @[chipyard.TestHarness.TinyRocketConfig.fir 195621:2]
    input jtag_TCK : Clock @[chipyard.TestHarness.TinyRocketConfig.fir 195623:4]
    input jtag_TMS : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 195623:4]
    input jtag_TDI : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 195623:4]
    output jtag_TDO_data : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 195623:4]
    output jtag_TDO_driven : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 195623:4]
    output serial_tl_clock : Clock @[chipyard.TestHarness.TinyRocketConfig.fir 195624:4]
    output serial_tl_bits_in_ready : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 195624:4]
    input serial_tl_bits_in_valid : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 195624:4]
    input serial_tl_bits_in_bits : UInt<4> @[chipyard.TestHarness.TinyRocketConfig.fir 195624:4]
    input serial_tl_bits_out_ready : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 195624:4]
    output serial_tl_bits_out_valid : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 195624:4]
    output serial_tl_bits_out_bits : UInt<4> @[chipyard.TestHarness.TinyRocketConfig.fir 195624:4]
    output uart_0_txd : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 195625:4]
    input uart_0_rxd : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 195625:4]
    input reset_wire_reset : AsyncReset @[chipyard.TestHarness.TinyRocketConfig.fir 195626:4]
    input clock : Clock @[chipyard.TestHarness.TinyRocketConfig.fir 195627:4]
    defname = ChipTop

  extmodule SimJTAG : @[chipyard.TestHarness.TinyRocketConfig.fir 195919:2]
    input clock : Clock @[chipyard.TestHarness.TinyRocketConfig.fir 195920:4]
    input reset : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 195921:4]
    output jtag_TRSTn : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 195922:4]
    output jtag_TCK : Clock @[chipyard.TestHarness.TinyRocketConfig.fir 195922:4]
    output jtag_TMS : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 195922:4]
    output jtag_TDI : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 195922:4]
    input jtag_TDO_data : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 195922:4]
    input jtag_TDO_driven : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 195922:4]
    input enable : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 195923:4]
    input init_done : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 195924:4]
    output exit : UInt<32> @[chipyard.TestHarness.TinyRocketConfig.fir 195925:4]
    defname = SimJTAG
    parameter TICK_DELAY = 3

  extmodule plusarg_reader_84 : @[chipyard.TestHarness.TinyRocketConfig.fir 195930:2]
    output out : UInt<32> @[chipyard.TestHarness.TinyRocketConfig.fir 195931:4]
    defname = plusarg_reader
    parameter FORMAT = "jtag_rbb_enable=%d"
    parameter DEFAULT = 0
    parameter WIDTH = 32

  module SerialAdapter_inTestHarness : @[chipyard.TestHarness.TinyRocketConfig.fir 195938:2]
    input clock : Clock @[chipyard.TestHarness.TinyRocketConfig.fir 195939:4]
    input reset : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 195940:4]
    input auto_out_a_ready : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 195941:4]
    output auto_out_a_valid : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 195941:4]
    output auto_out_a_bits_opcode : UInt<3> @[chipyard.TestHarness.TinyRocketConfig.fir 195941:4]
    output auto_out_a_bits_size : UInt<4> @[chipyard.TestHarness.TinyRocketConfig.fir 195941:4]
    output auto_out_a_bits_address : UInt<32> @[chipyard.TestHarness.TinyRocketConfig.fir 195941:4]
    output auto_out_a_bits_mask : UInt<4> @[chipyard.TestHarness.TinyRocketConfig.fir 195941:4]
    output auto_out_a_bits_data : UInt<32> @[chipyard.TestHarness.TinyRocketConfig.fir 195941:4]
    output auto_out_d_ready : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 195941:4]
    input auto_out_d_valid : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 195941:4]
    input auto_out_d_bits_data : UInt<32> @[chipyard.TestHarness.TinyRocketConfig.fir 195941:4]
    output io_serial_in_ready : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 195942:4]
    input io_serial_in_valid : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 195942:4]
    input io_serial_in_bits : UInt<32> @[chipyard.TestHarness.TinyRocketConfig.fir 195942:4]
    input io_serial_out_ready : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 195942:4]
    output io_serial_out_valid : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 195942:4]
    output io_serial_out_bits : UInt<32> @[chipyard.TestHarness.TinyRocketConfig.fir 195942:4]

    reg cmd : UInt<32>, clock with :
      reset => (UInt<1>("h0"), cmd) @[SerialAdapter.scala 86:16 chipyard.TestHarness.TinyRocketConfig.fir 195951:4]
    reg addr : UInt<64>, clock with :
      reset => (UInt<1>("h0"), addr) @[SerialAdapter.scala 87:17 chipyard.TestHarness.TinyRocketConfig.fir 195952:4]
    reg len : UInt<64>, clock with :
      reset => (UInt<1>("h0"), len) @[SerialAdapter.scala 88:16 chipyard.TestHarness.TinyRocketConfig.fir 195953:4]
    reg body_0 : UInt<32>, clock with :
      reset => (UInt<1>("h0"), body_0) @[SerialAdapter.scala 89:17 chipyard.TestHarness.TinyRocketConfig.fir 195954:4]
    reg bodyValid : UInt<1>, clock with :
      reset => (UInt<1>("h0"), bodyValid) @[SerialAdapter.scala 90:22 chipyard.TestHarness.TinyRocketConfig.fir 195955:4]
    reg idx : UInt<1>, clock with :
      reset => (UInt<1>("h0"), idx) @[SerialAdapter.scala 91:16 chipyard.TestHarness.TinyRocketConfig.fir 195956:4]
    reg state : UInt<4>, clock with :
      reset => (UInt<1>("h0"), state) @[SerialAdapter.scala 97:22 chipyard.TestHarness.TinyRocketConfig.fir 195957:4]
    node _io_serial_in_ready_T = eq(state, UInt<4>("h0")) @[package.scala 15:47 chipyard.TestHarness.TinyRocketConfig.fir 195958:4]
    node _io_serial_in_ready_T_1 = eq(state, UInt<4>("h1")) @[package.scala 15:47 chipyard.TestHarness.TinyRocketConfig.fir 195959:4]
    node _io_serial_in_ready_T_2 = eq(state, UInt<4>("h2")) @[package.scala 15:47 chipyard.TestHarness.TinyRocketConfig.fir 195960:4]
    node _io_serial_in_ready_T_3 = eq(state, UInt<4>("h6")) @[package.scala 15:47 chipyard.TestHarness.TinyRocketConfig.fir 195961:4]
    node _io_serial_in_ready_T_4 = or(_io_serial_in_ready_T, _io_serial_in_ready_T_1) @[package.scala 72:59 chipyard.TestHarness.TinyRocketConfig.fir 195962:4]
    node _io_serial_in_ready_T_5 = or(_io_serial_in_ready_T_4, _io_serial_in_ready_T_2) @[package.scala 72:59 chipyard.TestHarness.TinyRocketConfig.fir 195963:4]
    node _io_serial_out_valid_T = eq(state, UInt<4>("h5")) @[SerialAdapter.scala 100:32 chipyard.TestHarness.TinyRocketConfig.fir 195966:4]
    node beatAddr = bits(addr, 31, 2) @[SerialAdapter.scala 103:22 chipyard.TestHarness.TinyRocketConfig.fir 195969:4]
    node _nextAddr_T = add(beatAddr, UInt<30>("h1")) @[SerialAdapter.scala 104:31 chipyard.TestHarness.TinyRocketConfig.fir 195970:4]
    node nextAddr_hi = tail(_nextAddr_T, 1) @[SerialAdapter.scala 104:31 chipyard.TestHarness.TinyRocketConfig.fir 195971:4]
    node nextAddr = cat(nextAddr_hi, UInt<2>("h0")) @[Cat.scala 30:58 chipyard.TestHarness.TinyRocketConfig.fir 195972:4]
    node wmask = mux(bodyValid, UInt<4>("hf"), UInt<4>("h0")) @[Bitwise.scala 72:12 chipyard.TestHarness.TinyRocketConfig.fir 195975:4]
    node _GEN_49 = pad(nextAddr, 64) @[SerialAdapter.scala 107:28 chipyard.TestHarness.TinyRocketConfig.fir 195976:4]
    node _addr_size_T = sub(_GEN_49, addr) @[SerialAdapter.scala 107:28 chipyard.TestHarness.TinyRocketConfig.fir 195976:4]
    node addr_size = tail(_addr_size_T, 1) @[SerialAdapter.scala 107:28 chipyard.TestHarness.TinyRocketConfig.fir 195977:4]
    node _len_size_T = add(len, UInt<64>("h1")) @[SerialAdapter.scala 108:26 chipyard.TestHarness.TinyRocketConfig.fir 195978:4]
    node len_size_hi = tail(_len_size_T, 1) @[SerialAdapter.scala 108:26 chipyard.TestHarness.TinyRocketConfig.fir 195979:4]
    node len_size = cat(len_size_hi, UInt<2>("h0")) @[Cat.scala 30:58 chipyard.TestHarness.TinyRocketConfig.fir 195980:4]
    node _GEN_50 = pad(addr_size, 66) @[SerialAdapter.scala 109:31 chipyard.TestHarness.TinyRocketConfig.fir 195981:4]
    node _raw_size_T = lt(len_size, _GEN_50) @[SerialAdapter.scala 109:31 chipyard.TestHarness.TinyRocketConfig.fir 195981:4]
    node raw_size = mux(_raw_size_T, len_size, pad(addr_size, 66)) @[SerialAdapter.scala 109:21 chipyard.TestHarness.TinyRocketConfig.fir 195982:4]
    node _rsize_T = eq(UInt<66>("h1"), raw_size) @[Mux.scala 80:60 chipyard.TestHarness.TinyRocketConfig.fir 195983:4]
    node _rsize_T_1 = mux(_rsize_T, UInt<2>("h0"), UInt<2>("h2")) @[Mux.scala 80:57 chipyard.TestHarness.TinyRocketConfig.fir 195984:4]
    node _rsize_T_2 = eq(UInt<66>("h2"), raw_size) @[Mux.scala 80:60 chipyard.TestHarness.TinyRocketConfig.fir 195985:4]
    node rsize = mux(_rsize_T_2, UInt<2>("h1"), _rsize_T_1) @[Mux.scala 80:57 chipyard.TestHarness.TinyRocketConfig.fir 195986:4]
    node _pow2size_T = bits(raw_size, 0, 0) @[Bitwise.scala 49:65 chipyard.TestHarness.TinyRocketConfig.fir 195987:4]
    node _pow2size_T_1 = bits(raw_size, 1, 1) @[Bitwise.scala 49:65 chipyard.TestHarness.TinyRocketConfig.fir 195988:4]
    node _pow2size_T_2 = bits(raw_size, 2, 2) @[Bitwise.scala 49:65 chipyard.TestHarness.TinyRocketConfig.fir 195989:4]
    node _pow2size_T_3 = bits(raw_size, 3, 3) @[Bitwise.scala 49:65 chipyard.TestHarness.TinyRocketConfig.fir 195990:4]
    node _pow2size_T_4 = bits(raw_size, 4, 4) @[Bitwise.scala 49:65 chipyard.TestHarness.TinyRocketConfig.fir 195991:4]
    node _pow2size_T_5 = bits(raw_size, 5, 5) @[Bitwise.scala 49:65 chipyard.TestHarness.TinyRocketConfig.fir 195992:4]
    node _pow2size_T_6 = bits(raw_size, 6, 6) @[Bitwise.scala 49:65 chipyard.TestHarness.TinyRocketConfig.fir 195993:4]
    node _pow2size_T_7 = bits(raw_size, 7, 7) @[Bitwise.scala 49:65 chipyard.TestHarness.TinyRocketConfig.fir 195994:4]
    node _pow2size_T_8 = bits(raw_size, 8, 8) @[Bitwise.scala 49:65 chipyard.TestHarness.TinyRocketConfig.fir 195995:4]
    node _pow2size_T_9 = bits(raw_size, 9, 9) @[Bitwise.scala 49:65 chipyard.TestHarness.TinyRocketConfig.fir 195996:4]
    node _pow2size_T_10 = bits(raw_size, 10, 10) @[Bitwise.scala 49:65 chipyard.TestHarness.TinyRocketConfig.fir 195997:4]
    node _pow2size_T_11 = bits(raw_size, 11, 11) @[Bitwise.scala 49:65 chipyard.TestHarness.TinyRocketConfig.fir 195998:4]
    node _pow2size_T_12 = bits(raw_size, 12, 12) @[Bitwise.scala 49:65 chipyard.TestHarness.TinyRocketConfig.fir 195999:4]
    node _pow2size_T_13 = bits(raw_size, 13, 13) @[Bitwise.scala 49:65 chipyard.TestHarness.TinyRocketConfig.fir 196000:4]
    node _pow2size_T_14 = bits(raw_size, 14, 14) @[Bitwise.scala 49:65 chipyard.TestHarness.TinyRocketConfig.fir 196001:4]
    node _pow2size_T_15 = bits(raw_size, 15, 15) @[Bitwise.scala 49:65 chipyard.TestHarness.TinyRocketConfig.fir 196002:4]
    node _pow2size_T_16 = bits(raw_size, 16, 16) @[Bitwise.scala 49:65 chipyard.TestHarness.TinyRocketConfig.fir 196003:4]
    node _pow2size_T_17 = bits(raw_size, 17, 17) @[Bitwise.scala 49:65 chipyard.TestHarness.TinyRocketConfig.fir 196004:4]
    node _pow2size_T_18 = bits(raw_size, 18, 18) @[Bitwise.scala 49:65 chipyard.TestHarness.TinyRocketConfig.fir 196005:4]
    node _pow2size_T_19 = bits(raw_size, 19, 19) @[Bitwise.scala 49:65 chipyard.TestHarness.TinyRocketConfig.fir 196006:4]
    node _pow2size_T_20 = bits(raw_size, 20, 20) @[Bitwise.scala 49:65 chipyard.TestHarness.TinyRocketConfig.fir 196007:4]
    node _pow2size_T_21 = bits(raw_size, 21, 21) @[Bitwise.scala 49:65 chipyard.TestHarness.TinyRocketConfig.fir 196008:4]
    node _pow2size_T_22 = bits(raw_size, 22, 22) @[Bitwise.scala 49:65 chipyard.TestHarness.TinyRocketConfig.fir 196009:4]
    node _pow2size_T_23 = bits(raw_size, 23, 23) @[Bitwise.scala 49:65 chipyard.TestHarness.TinyRocketConfig.fir 196010:4]
    node _pow2size_T_24 = bits(raw_size, 24, 24) @[Bitwise.scala 49:65 chipyard.TestHarness.TinyRocketConfig.fir 196011:4]
    node _pow2size_T_25 = bits(raw_size, 25, 25) @[Bitwise.scala 49:65 chipyard.TestHarness.TinyRocketConfig.fir 196012:4]
    node _pow2size_T_26 = bits(raw_size, 26, 26) @[Bitwise.scala 49:65 chipyard.TestHarness.TinyRocketConfig.fir 196013:4]
    node _pow2size_T_27 = bits(raw_size, 27, 27) @[Bitwise.scala 49:65 chipyard.TestHarness.TinyRocketConfig.fir 196014:4]
    node _pow2size_T_28 = bits(raw_size, 28, 28) @[Bitwise.scala 49:65 chipyard.TestHarness.TinyRocketConfig.fir 196015:4]
    node _pow2size_T_29 = bits(raw_size, 29, 29) @[Bitwise.scala 49:65 chipyard.TestHarness.TinyRocketConfig.fir 196016:4]
    node _pow2size_T_30 = bits(raw_size, 30, 30) @[Bitwise.scala 49:65 chipyard.TestHarness.TinyRocketConfig.fir 196017:4]
    node _pow2size_T_31 = bits(raw_size, 31, 31) @[Bitwise.scala 49:65 chipyard.TestHarness.TinyRocketConfig.fir 196018:4]
    node _pow2size_T_32 = bits(raw_size, 32, 32) @[Bitwise.scala 49:65 chipyard.TestHarness.TinyRocketConfig.fir 196019:4]
    node _pow2size_T_33 = bits(raw_size, 33, 33) @[Bitwise.scala 49:65 chipyard.TestHarness.TinyRocketConfig.fir 196020:4]
    node _pow2size_T_34 = bits(raw_size, 34, 34) @[Bitwise.scala 49:65 chipyard.TestHarness.TinyRocketConfig.fir 196021:4]
    node _pow2size_T_35 = bits(raw_size, 35, 35) @[Bitwise.scala 49:65 chipyard.TestHarness.TinyRocketConfig.fir 196022:4]
    node _pow2size_T_36 = bits(raw_size, 36, 36) @[Bitwise.scala 49:65 chipyard.TestHarness.TinyRocketConfig.fir 196023:4]
    node _pow2size_T_37 = bits(raw_size, 37, 37) @[Bitwise.scala 49:65 chipyard.TestHarness.TinyRocketConfig.fir 196024:4]
    node _pow2size_T_38 = bits(raw_size, 38, 38) @[Bitwise.scala 49:65 chipyard.TestHarness.TinyRocketConfig.fir 196025:4]
    node _pow2size_T_39 = bits(raw_size, 39, 39) @[Bitwise.scala 49:65 chipyard.TestHarness.TinyRocketConfig.fir 196026:4]
    node _pow2size_T_40 = bits(raw_size, 40, 40) @[Bitwise.scala 49:65 chipyard.TestHarness.TinyRocketConfig.fir 196027:4]
    node _pow2size_T_41 = bits(raw_size, 41, 41) @[Bitwise.scala 49:65 chipyard.TestHarness.TinyRocketConfig.fir 196028:4]
    node _pow2size_T_42 = bits(raw_size, 42, 42) @[Bitwise.scala 49:65 chipyard.TestHarness.TinyRocketConfig.fir 196029:4]
    node _pow2size_T_43 = bits(raw_size, 43, 43) @[Bitwise.scala 49:65 chipyard.TestHarness.TinyRocketConfig.fir 196030:4]
    node _pow2size_T_44 = bits(raw_size, 44, 44) @[Bitwise.scala 49:65 chipyard.TestHarness.TinyRocketConfig.fir 196031:4]
    node _pow2size_T_45 = bits(raw_size, 45, 45) @[Bitwise.scala 49:65 chipyard.TestHarness.TinyRocketConfig.fir 196032:4]
    node _pow2size_T_46 = bits(raw_size, 46, 46) @[Bitwise.scala 49:65 chipyard.TestHarness.TinyRocketConfig.fir 196033:4]
    node _pow2size_T_47 = bits(raw_size, 47, 47) @[Bitwise.scala 49:65 chipyard.TestHarness.TinyRocketConfig.fir 196034:4]
    node _pow2size_T_48 = bits(raw_size, 48, 48) @[Bitwise.scala 49:65 chipyard.TestHarness.TinyRocketConfig.fir 196035:4]
    node _pow2size_T_49 = bits(raw_size, 49, 49) @[Bitwise.scala 49:65 chipyard.TestHarness.TinyRocketConfig.fir 196036:4]
    node _pow2size_T_50 = bits(raw_size, 50, 50) @[Bitwise.scala 49:65 chipyard.TestHarness.TinyRocketConfig.fir 196037:4]
    node _pow2size_T_51 = bits(raw_size, 51, 51) @[Bitwise.scala 49:65 chipyard.TestHarness.TinyRocketConfig.fir 196038:4]
    node _pow2size_T_52 = bits(raw_size, 52, 52) @[Bitwise.scala 49:65 chipyard.TestHarness.TinyRocketConfig.fir 196039:4]
    node _pow2size_T_53 = bits(raw_size, 53, 53) @[Bitwise.scala 49:65 chipyard.TestHarness.TinyRocketConfig.fir 196040:4]
    node _pow2size_T_54 = bits(raw_size, 54, 54) @[Bitwise.scala 49:65 chipyard.TestHarness.TinyRocketConfig.fir 196041:4]
    node _pow2size_T_55 = bits(raw_size, 55, 55) @[Bitwise.scala 49:65 chipyard.TestHarness.TinyRocketConfig.fir 196042:4]
    node _pow2size_T_56 = bits(raw_size, 56, 56) @[Bitwise.scala 49:65 chipyard.TestHarness.TinyRocketConfig.fir 196043:4]
    node _pow2size_T_57 = bits(raw_size, 57, 57) @[Bitwise.scala 49:65 chipyard.TestHarness.TinyRocketConfig.fir 196044:4]
    node _pow2size_T_58 = bits(raw_size, 58, 58) @[Bitwise.scala 49:65 chipyard.TestHarness.TinyRocketConfig.fir 196045:4]
    node _pow2size_T_59 = bits(raw_size, 59, 59) @[Bitwise.scala 49:65 chipyard.TestHarness.TinyRocketConfig.fir 196046:4]
    node _pow2size_T_60 = bits(raw_size, 60, 60) @[Bitwise.scala 49:65 chipyard.TestHarness.TinyRocketConfig.fir 196047:4]
    node _pow2size_T_61 = bits(raw_size, 61, 61) @[Bitwise.scala 49:65 chipyard.TestHarness.TinyRocketConfig.fir 196048:4]
    node _pow2size_T_62 = bits(raw_size, 62, 62) @[Bitwise.scala 49:65 chipyard.TestHarness.TinyRocketConfig.fir 196049:4]
    node _pow2size_T_63 = bits(raw_size, 63, 63) @[Bitwise.scala 49:65 chipyard.TestHarness.TinyRocketConfig.fir 196050:4]
    node _pow2size_T_64 = bits(raw_size, 64, 64) @[Bitwise.scala 49:65 chipyard.TestHarness.TinyRocketConfig.fir 196051:4]
    node _pow2size_T_65 = bits(raw_size, 65, 65) @[Bitwise.scala 49:65 chipyard.TestHarness.TinyRocketConfig.fir 196052:4]
    node _pow2size_T_66 = add(_pow2size_T, _pow2size_T_1) @[Bitwise.scala 47:55 chipyard.TestHarness.TinyRocketConfig.fir 196053:4]
    node _pow2size_T_68 = add(_pow2size_T_2, _pow2size_T_3) @[Bitwise.scala 47:55 chipyard.TestHarness.TinyRocketConfig.fir 196055:4]
    node _pow2size_T_70 = add(_pow2size_T_66, _pow2size_T_68) @[Bitwise.scala 47:55 chipyard.TestHarness.TinyRocketConfig.fir 196057:4]
    node _pow2size_T_72 = add(_pow2size_T_4, _pow2size_T_5) @[Bitwise.scala 47:55 chipyard.TestHarness.TinyRocketConfig.fir 196059:4]
    node _pow2size_T_74 = add(_pow2size_T_6, _pow2size_T_7) @[Bitwise.scala 47:55 chipyard.TestHarness.TinyRocketConfig.fir 196061:4]
    node _pow2size_T_76 = add(_pow2size_T_72, _pow2size_T_74) @[Bitwise.scala 47:55 chipyard.TestHarness.TinyRocketConfig.fir 196063:4]
    node _pow2size_T_78 = add(_pow2size_T_70, _pow2size_T_76) @[Bitwise.scala 47:55 chipyard.TestHarness.TinyRocketConfig.fir 196065:4]
    node _pow2size_T_80 = add(_pow2size_T_8, _pow2size_T_9) @[Bitwise.scala 47:55 chipyard.TestHarness.TinyRocketConfig.fir 196067:4]
    node _pow2size_T_82 = add(_pow2size_T_10, _pow2size_T_11) @[Bitwise.scala 47:55 chipyard.TestHarness.TinyRocketConfig.fir 196069:4]
    node _pow2size_T_84 = add(_pow2size_T_80, _pow2size_T_82) @[Bitwise.scala 47:55 chipyard.TestHarness.TinyRocketConfig.fir 196071:4]
    node _pow2size_T_86 = add(_pow2size_T_12, _pow2size_T_13) @[Bitwise.scala 47:55 chipyard.TestHarness.TinyRocketConfig.fir 196073:4]
    node _pow2size_T_88 = add(_pow2size_T_14, _pow2size_T_15) @[Bitwise.scala 47:55 chipyard.TestHarness.TinyRocketConfig.fir 196075:4]
    node _pow2size_T_90 = add(_pow2size_T_86, _pow2size_T_88) @[Bitwise.scala 47:55 chipyard.TestHarness.TinyRocketConfig.fir 196077:4]
    node _pow2size_T_92 = add(_pow2size_T_84, _pow2size_T_90) @[Bitwise.scala 47:55 chipyard.TestHarness.TinyRocketConfig.fir 196079:4]
    node _pow2size_T_94 = add(_pow2size_T_78, _pow2size_T_92) @[Bitwise.scala 47:55 chipyard.TestHarness.TinyRocketConfig.fir 196081:4]
    node _pow2size_T_96 = add(_pow2size_T_16, _pow2size_T_17) @[Bitwise.scala 47:55 chipyard.TestHarness.TinyRocketConfig.fir 196083:4]
    node _pow2size_T_98 = add(_pow2size_T_18, _pow2size_T_19) @[Bitwise.scala 47:55 chipyard.TestHarness.TinyRocketConfig.fir 196085:4]
    node _pow2size_T_100 = add(_pow2size_T_96, _pow2size_T_98) @[Bitwise.scala 47:55 chipyard.TestHarness.TinyRocketConfig.fir 196087:4]
    node _pow2size_T_102 = add(_pow2size_T_20, _pow2size_T_21) @[Bitwise.scala 47:55 chipyard.TestHarness.TinyRocketConfig.fir 196089:4]
    node _pow2size_T_104 = add(_pow2size_T_22, _pow2size_T_23) @[Bitwise.scala 47:55 chipyard.TestHarness.TinyRocketConfig.fir 196091:4]
    node _pow2size_T_106 = add(_pow2size_T_102, _pow2size_T_104) @[Bitwise.scala 47:55 chipyard.TestHarness.TinyRocketConfig.fir 196093:4]
    node _pow2size_T_108 = add(_pow2size_T_100, _pow2size_T_106) @[Bitwise.scala 47:55 chipyard.TestHarness.TinyRocketConfig.fir 196095:4]
    node _pow2size_T_110 = add(_pow2size_T_24, _pow2size_T_25) @[Bitwise.scala 47:55 chipyard.TestHarness.TinyRocketConfig.fir 196097:4]
    node _pow2size_T_112 = add(_pow2size_T_26, _pow2size_T_27) @[Bitwise.scala 47:55 chipyard.TestHarness.TinyRocketConfig.fir 196099:4]
    node _pow2size_T_114 = add(_pow2size_T_110, _pow2size_T_112) @[Bitwise.scala 47:55 chipyard.TestHarness.TinyRocketConfig.fir 196101:4]
    node _pow2size_T_116 = add(_pow2size_T_28, _pow2size_T_29) @[Bitwise.scala 47:55 chipyard.TestHarness.TinyRocketConfig.fir 196103:4]
    node _pow2size_T_118 = add(_pow2size_T_31, _pow2size_T_32) @[Bitwise.scala 47:55 chipyard.TestHarness.TinyRocketConfig.fir 196105:4]
    node _GEN_51 = pad(_pow2size_T_30, 2) @[Bitwise.scala 47:55 chipyard.TestHarness.TinyRocketConfig.fir 196107:4]
    node _pow2size_T_120 = add(_GEN_51, _pow2size_T_118) @[Bitwise.scala 47:55 chipyard.TestHarness.TinyRocketConfig.fir 196107:4]
    node _pow2size_T_121 = bits(_pow2size_T_120, 1, 0) @[Bitwise.scala 47:55 chipyard.TestHarness.TinyRocketConfig.fir 196108:4]
    node _pow2size_T_122 = add(_pow2size_T_116, _pow2size_T_121) @[Bitwise.scala 47:55 chipyard.TestHarness.TinyRocketConfig.fir 196109:4]
    node _pow2size_T_124 = add(_pow2size_T_114, _pow2size_T_122) @[Bitwise.scala 47:55 chipyard.TestHarness.TinyRocketConfig.fir 196111:4]
    node _pow2size_T_126 = add(_pow2size_T_108, _pow2size_T_124) @[Bitwise.scala 47:55 chipyard.TestHarness.TinyRocketConfig.fir 196113:4]
    node _pow2size_T_128 = add(_pow2size_T_94, _pow2size_T_126) @[Bitwise.scala 47:55 chipyard.TestHarness.TinyRocketConfig.fir 196115:4]
    node _pow2size_T_130 = add(_pow2size_T_33, _pow2size_T_34) @[Bitwise.scala 47:55 chipyard.TestHarness.TinyRocketConfig.fir 196117:4]
    node _pow2size_T_132 = add(_pow2size_T_35, _pow2size_T_36) @[Bitwise.scala 47:55 chipyard.TestHarness.TinyRocketConfig.fir 196119:4]
    node _pow2size_T_134 = add(_pow2size_T_130, _pow2size_T_132) @[Bitwise.scala 47:55 chipyard.TestHarness.TinyRocketConfig.fir 196121:4]
    node _pow2size_T_136 = add(_pow2size_T_37, _pow2size_T_38) @[Bitwise.scala 47:55 chipyard.TestHarness.TinyRocketConfig.fir 196123:4]
    node _pow2size_T_138 = add(_pow2size_T_39, _pow2size_T_40) @[Bitwise.scala 47:55 chipyard.TestHarness.TinyRocketConfig.fir 196125:4]
    node _pow2size_T_140 = add(_pow2size_T_136, _pow2size_T_138) @[Bitwise.scala 47:55 chipyard.TestHarness.TinyRocketConfig.fir 196127:4]
    node _pow2size_T_142 = add(_pow2size_T_134, _pow2size_T_140) @[Bitwise.scala 47:55 chipyard.TestHarness.TinyRocketConfig.fir 196129:4]
    node _pow2size_T_144 = add(_pow2size_T_41, _pow2size_T_42) @[Bitwise.scala 47:55 chipyard.TestHarness.TinyRocketConfig.fir 196131:4]
    node _pow2size_T_146 = add(_pow2size_T_43, _pow2size_T_44) @[Bitwise.scala 47:55 chipyard.TestHarness.TinyRocketConfig.fir 196133:4]
    node _pow2size_T_148 = add(_pow2size_T_144, _pow2size_T_146) @[Bitwise.scala 47:55 chipyard.TestHarness.TinyRocketConfig.fir 196135:4]
    node _pow2size_T_150 = add(_pow2size_T_45, _pow2size_T_46) @[Bitwise.scala 47:55 chipyard.TestHarness.TinyRocketConfig.fir 196137:4]
    node _pow2size_T_152 = add(_pow2size_T_47, _pow2size_T_48) @[Bitwise.scala 47:55 chipyard.TestHarness.TinyRocketConfig.fir 196139:4]
    node _pow2size_T_154 = add(_pow2size_T_150, _pow2size_T_152) @[Bitwise.scala 47:55 chipyard.TestHarness.TinyRocketConfig.fir 196141:4]
    node _pow2size_T_156 = add(_pow2size_T_148, _pow2size_T_154) @[Bitwise.scala 47:55 chipyard.TestHarness.TinyRocketConfig.fir 196143:4]
    node _pow2size_T_158 = add(_pow2size_T_142, _pow2size_T_156) @[Bitwise.scala 47:55 chipyard.TestHarness.TinyRocketConfig.fir 196145:4]
    node _pow2size_T_160 = add(_pow2size_T_49, _pow2size_T_50) @[Bitwise.scala 47:55 chipyard.TestHarness.TinyRocketConfig.fir 196147:4]
    node _pow2size_T_162 = add(_pow2size_T_51, _pow2size_T_52) @[Bitwise.scala 47:55 chipyard.TestHarness.TinyRocketConfig.fir 196149:4]
    node _pow2size_T_164 = add(_pow2size_T_160, _pow2size_T_162) @[Bitwise.scala 47:55 chipyard.TestHarness.TinyRocketConfig.fir 196151:4]
    node _pow2size_T_166 = add(_pow2size_T_53, _pow2size_T_54) @[Bitwise.scala 47:55 chipyard.TestHarness.TinyRocketConfig.fir 196153:4]
    node _pow2size_T_168 = add(_pow2size_T_55, _pow2size_T_56) @[Bitwise.scala 47:55 chipyard.TestHarness.TinyRocketConfig.fir 196155:4]
    node _pow2size_T_170 = add(_pow2size_T_166, _pow2size_T_168) @[Bitwise.scala 47:55 chipyard.TestHarness.TinyRocketConfig.fir 196157:4]
    node _pow2size_T_172 = add(_pow2size_T_164, _pow2size_T_170) @[Bitwise.scala 47:55 chipyard.TestHarness.TinyRocketConfig.fir 196159:4]
    node _pow2size_T_174 = add(_pow2size_T_57, _pow2size_T_58) @[Bitwise.scala 47:55 chipyard.TestHarness.TinyRocketConfig.fir 196161:4]
    node _pow2size_T_176 = add(_pow2size_T_59, _pow2size_T_60) @[Bitwise.scala 47:55 chipyard.TestHarness.TinyRocketConfig.fir 196163:4]
    node _pow2size_T_178 = add(_pow2size_T_174, _pow2size_T_176) @[Bitwise.scala 47:55 chipyard.TestHarness.TinyRocketConfig.fir 196165:4]
    node _pow2size_T_180 = add(_pow2size_T_61, _pow2size_T_62) @[Bitwise.scala 47:55 chipyard.TestHarness.TinyRocketConfig.fir 196167:4]
    node _pow2size_T_182 = add(_pow2size_T_64, _pow2size_T_65) @[Bitwise.scala 47:55 chipyard.TestHarness.TinyRocketConfig.fir 196169:4]
    node _GEN_52 = pad(_pow2size_T_63, 2) @[Bitwise.scala 47:55 chipyard.TestHarness.TinyRocketConfig.fir 196171:4]
    node _pow2size_T_184 = add(_GEN_52, _pow2size_T_182) @[Bitwise.scala 47:55 chipyard.TestHarness.TinyRocketConfig.fir 196171:4]
    node _pow2size_T_185 = bits(_pow2size_T_184, 1, 0) @[Bitwise.scala 47:55 chipyard.TestHarness.TinyRocketConfig.fir 196172:4]
    node _pow2size_T_186 = add(_pow2size_T_180, _pow2size_T_185) @[Bitwise.scala 47:55 chipyard.TestHarness.TinyRocketConfig.fir 196173:4]
    node _pow2size_T_188 = add(_pow2size_T_178, _pow2size_T_186) @[Bitwise.scala 47:55 chipyard.TestHarness.TinyRocketConfig.fir 196175:4]
    node _pow2size_T_190 = add(_pow2size_T_172, _pow2size_T_188) @[Bitwise.scala 47:55 chipyard.TestHarness.TinyRocketConfig.fir 196177:4]
    node _pow2size_T_192 = add(_pow2size_T_158, _pow2size_T_190) @[Bitwise.scala 47:55 chipyard.TestHarness.TinyRocketConfig.fir 196179:4]
    node _pow2size_T_194 = add(_pow2size_T_128, _pow2size_T_192) @[Bitwise.scala 47:55 chipyard.TestHarness.TinyRocketConfig.fir 196181:4]
    node pow2size = eq(_pow2size_T_194, UInt<7>("h1")) @[SerialAdapter.scala 113:37 chipyard.TestHarness.TinyRocketConfig.fir 196183:4]
    node _byteAddr_T = bits(addr, 1, 0) @[SerialAdapter.scala 114:36 chipyard.TestHarness.TinyRocketConfig.fir 196184:4]
    node byteAddr = mux(pow2size, _byteAddr_T, UInt<2>("h0")) @[SerialAdapter.scala 114:21 chipyard.TestHarness.TinyRocketConfig.fir 196185:4]
    node _GEN_53 = shl(beatAddr, 2) @[SerialAdapter.scala 117:19 chipyard.TestHarness.TinyRocketConfig.fir 196186:4]
    node _put_acquire_T = pad(_GEN_53, 33) @[SerialAdapter.scala 117:19 chipyard.TestHarness.TinyRocketConfig.fir 196186:4]
    node get_acquire_address = cat(beatAddr, byteAddr) @[Cat.scala 30:58 chipyard.TestHarness.TinyRocketConfig.fir 196251:4]
    node get_acquire_a_mask_sizeOH_shiftAmount = bits(rsize, 0, 0) @[OneHot.scala 64:49 chipyard.TestHarness.TinyRocketConfig.fir 196312:4]
    node _get_acquire_a_mask_sizeOH_T_1 = dshlw(UInt<2>("h1"), get_acquire_a_mask_sizeOH_shiftAmount) @[OneHot.scala 65:12 chipyard.TestHarness.TinyRocketConfig.fir 196313:4]
    node get_acquire_a_mask_sizeOH = or(_get_acquire_a_mask_sizeOH_T_1, UInt<2>("h1")) @[Misc.scala 201:81 chipyard.TestHarness.TinyRocketConfig.fir 196315:4]
    node _get_acquire_a_mask_T = geq(rsize, UInt<2>("h2")) @[Misc.scala 205:21 chipyard.TestHarness.TinyRocketConfig.fir 196316:4]
    node get_acquire_a_mask_size = bits(get_acquire_a_mask_sizeOH, 1, 1) @[Misc.scala 208:26 chipyard.TestHarness.TinyRocketConfig.fir 196317:4]
    node get_acquire_a_mask_bit = bits(get_acquire_address, 1, 1) @[Misc.scala 209:26 chipyard.TestHarness.TinyRocketConfig.fir 196318:4]
    node get_acquire_a_mask_nbit = not(get_acquire_a_mask_bit) @[Misc.scala 210:20 chipyard.TestHarness.TinyRocketConfig.fir 196319:4]
    node _get_acquire_a_mask_acc_T = and(get_acquire_a_mask_size, get_acquire_a_mask_nbit) @[Misc.scala 214:38 chipyard.TestHarness.TinyRocketConfig.fir 196321:4]
    node get_acquire_a_mask_acc = or(_get_acquire_a_mask_T, _get_acquire_a_mask_acc_T) @[Misc.scala 214:29 chipyard.TestHarness.TinyRocketConfig.fir 196322:4]
    node _get_acquire_a_mask_acc_T_1 = and(get_acquire_a_mask_size, get_acquire_a_mask_bit) @[Misc.scala 214:38 chipyard.TestHarness.TinyRocketConfig.fir 196324:4]
    node get_acquire_a_mask_acc_1 = or(_get_acquire_a_mask_T, _get_acquire_a_mask_acc_T_1) @[Misc.scala 214:29 chipyard.TestHarness.TinyRocketConfig.fir 196325:4]
    node get_acquire_a_mask_size_1 = bits(get_acquire_a_mask_sizeOH, 0, 0) @[Misc.scala 208:26 chipyard.TestHarness.TinyRocketConfig.fir 196326:4]
    node get_acquire_a_mask_bit_1 = bits(get_acquire_address, 0, 0) @[Misc.scala 209:26 chipyard.TestHarness.TinyRocketConfig.fir 196327:4]
    node get_acquire_a_mask_nbit_1 = not(get_acquire_a_mask_bit_1) @[Misc.scala 210:20 chipyard.TestHarness.TinyRocketConfig.fir 196328:4]
    node get_acquire_a_mask_eq_2 = and(get_acquire_a_mask_nbit, get_acquire_a_mask_nbit_1) @[Misc.scala 213:27 chipyard.TestHarness.TinyRocketConfig.fir 196329:4]
    node _get_acquire_a_mask_acc_T_2 = and(get_acquire_a_mask_size_1, get_acquire_a_mask_eq_2) @[Misc.scala 214:38 chipyard.TestHarness.TinyRocketConfig.fir 196330:4]
    node get_acquire_a_mask_lo_lo = or(get_acquire_a_mask_acc, _get_acquire_a_mask_acc_T_2) @[Misc.scala 214:29 chipyard.TestHarness.TinyRocketConfig.fir 196331:4]
    node get_acquire_a_mask_eq_3 = and(get_acquire_a_mask_nbit, get_acquire_a_mask_bit_1) @[Misc.scala 213:27 chipyard.TestHarness.TinyRocketConfig.fir 196332:4]
    node _get_acquire_a_mask_acc_T_3 = and(get_acquire_a_mask_size_1, get_acquire_a_mask_eq_3) @[Misc.scala 214:38 chipyard.TestHarness.TinyRocketConfig.fir 196333:4]
    node get_acquire_a_mask_lo_hi = or(get_acquire_a_mask_acc, _get_acquire_a_mask_acc_T_3) @[Misc.scala 214:29 chipyard.TestHarness.TinyRocketConfig.fir 196334:4]
    node get_acquire_a_mask_eq_4 = and(get_acquire_a_mask_bit, get_acquire_a_mask_nbit_1) @[Misc.scala 213:27 chipyard.TestHarness.TinyRocketConfig.fir 196335:4]
    node _get_acquire_a_mask_acc_T_4 = and(get_acquire_a_mask_size_1, get_acquire_a_mask_eq_4) @[Misc.scala 214:38 chipyard.TestHarness.TinyRocketConfig.fir 196336:4]
    node get_acquire_a_mask_hi_lo = or(get_acquire_a_mask_acc_1, _get_acquire_a_mask_acc_T_4) @[Misc.scala 214:29 chipyard.TestHarness.TinyRocketConfig.fir 196337:4]
    node get_acquire_a_mask_eq_5 = and(get_acquire_a_mask_bit, get_acquire_a_mask_bit_1) @[Misc.scala 213:27 chipyard.TestHarness.TinyRocketConfig.fir 196338:4]
    node _get_acquire_a_mask_acc_T_5 = and(get_acquire_a_mask_size_1, get_acquire_a_mask_eq_5) @[Misc.scala 214:38 chipyard.TestHarness.TinyRocketConfig.fir 196339:4]
    node get_acquire_a_mask_hi_hi = or(get_acquire_a_mask_acc_1, _get_acquire_a_mask_acc_T_5) @[Misc.scala 214:29 chipyard.TestHarness.TinyRocketConfig.fir 196340:4]
    node get_acquire_mask = cat(cat(get_acquire_a_mask_hi_hi, get_acquire_a_mask_hi_lo), cat(get_acquire_a_mask_lo_hi, get_acquire_a_mask_lo_lo)) @[Cat.scala 30:58 chipyard.TestHarness.TinyRocketConfig.fir 196343:4]
    node _bundleOut_0_a_valid_T = eq(state, UInt<4>("h7")) @[package.scala 15:47 chipyard.TestHarness.TinyRocketConfig.fir 196347:4]
    node _bundleOut_0_a_valid_T_1 = eq(state, UInt<4>("h3")) @[package.scala 15:47 chipyard.TestHarness.TinyRocketConfig.fir 196348:4]
    node get_acquire_size = pad(rsize, 4) @[Edges.scala 447:17 chipyard.TestHarness.TinyRocketConfig.fir 196304:4 Edges.scala 450:15 chipyard.TestHarness.TinyRocketConfig.fir 196308:4]
    node put_acquire_address = bits(_put_acquire_T, 31, 0) @[Edges.scala 483:17 chipyard.TestHarness.TinyRocketConfig.fir 196241:4 Edges.scala 488:15 chipyard.TestHarness.TinyRocketConfig.fir 196247:4]
    node _bundleOut_0_d_ready_T = eq(state, UInt<4>("h8")) @[package.scala 15:47 chipyard.TestHarness.TinyRocketConfig.fir 196367:4]
    node _bundleOut_0_d_ready_T_1 = eq(state, UInt<4>("h4")) @[package.scala 15:47 chipyard.TestHarness.TinyRocketConfig.fir 196368:4]
    node _T_1 = and(_io_serial_in_ready_T, io_serial_in_valid) @[SerialAdapter.scala 138:25 chipyard.TestHarness.TinyRocketConfig.fir 196375:4]
    node _GEN_1 = mux(_T_1, UInt<1>("h0"), idx) @[SerialAdapter.scala 138:48 chipyard.TestHarness.TinyRocketConfig.fir 196376:4 SerialAdapter.scala 140:9 chipyard.TestHarness.TinyRocketConfig.fir 196378:6 SerialAdapter.scala 91:16 chipyard.TestHarness.TinyRocketConfig.fir 195956:4]
    node _GEN_2 = mux(_T_1, UInt<64>("h0"), addr) @[SerialAdapter.scala 138:48 chipyard.TestHarness.TinyRocketConfig.fir 196376:4 SerialAdapter.scala 141:10 chipyard.TestHarness.TinyRocketConfig.fir 196379:6 SerialAdapter.scala 87:17 chipyard.TestHarness.TinyRocketConfig.fir 195952:4]
    node _GEN_3 = mux(_T_1, UInt<64>("h0"), len) @[SerialAdapter.scala 138:48 chipyard.TestHarness.TinyRocketConfig.fir 196376:4 SerialAdapter.scala 142:9 chipyard.TestHarness.TinyRocketConfig.fir 196380:6 SerialAdapter.scala 88:16 chipyard.TestHarness.TinyRocketConfig.fir 195953:4]
    node _GEN_4 = mux(_T_1, UInt<4>("h1"), state) @[SerialAdapter.scala 138:48 chipyard.TestHarness.TinyRocketConfig.fir 196376:4 SerialAdapter.scala 143:11 chipyard.TestHarness.TinyRocketConfig.fir 196381:6 SerialAdapter.scala 97:22 chipyard.TestHarness.TinyRocketConfig.fir 195957:4]
    node _T_3 = and(_io_serial_in_ready_T_1, io_serial_in_valid) @[SerialAdapter.scala 146:26 chipyard.TestHarness.TinyRocketConfig.fir 196384:4]
    node _addr_T = cat(idx, UInt<5>("h0")) @[Cat.scala 30:58 chipyard.TestHarness.TinyRocketConfig.fir 196387:6]
    node _GEN_54 = pad(io_serial_in_bits, 95) @[SerialAdapter.scala 132:12 chipyard.TestHarness.TinyRocketConfig.fir 196388:6]
    node _addr_T_1 = dshlw(_GEN_54, _addr_T) @[SerialAdapter.scala 132:12 chipyard.TestHarness.TinyRocketConfig.fir 196388:6]
    node _GEN_55 = pad(addr, 95) @[SerialAdapter.scala 147:18 chipyard.TestHarness.TinyRocketConfig.fir 196389:6]
    node _addr_T_2 = or(_GEN_55, _addr_T_1) @[SerialAdapter.scala 147:18 chipyard.TestHarness.TinyRocketConfig.fir 196389:6]
    node _idx_T = add(idx, UInt<1>("h1")) @[SerialAdapter.scala 148:16 chipyard.TestHarness.TinyRocketConfig.fir 196391:6]
    node _idx_T_1 = tail(_idx_T, 1) @[SerialAdapter.scala 148:16 chipyard.TestHarness.TinyRocketConfig.fir 196392:6]
    node _GEN_5 = mux(idx, UInt<1>("h0"), _idx_T_1) @[SerialAdapter.scala 149:43 chipyard.TestHarness.TinyRocketConfig.fir 196395:6 SerialAdapter.scala 150:11 chipyard.TestHarness.TinyRocketConfig.fir 196396:8 SerialAdapter.scala 148:9 chipyard.TestHarness.TinyRocketConfig.fir 196393:6]
    node _GEN_6 = mux(idx, UInt<4>("h2"), _GEN_4) @[SerialAdapter.scala 149:43 chipyard.TestHarness.TinyRocketConfig.fir 196395:6 SerialAdapter.scala 151:13 chipyard.TestHarness.TinyRocketConfig.fir 196397:8]
    node _GEN_7 = mux(_T_3, _addr_T_2, pad(_GEN_2, 95)) @[SerialAdapter.scala 146:49 chipyard.TestHarness.TinyRocketConfig.fir 196385:4 SerialAdapter.scala 147:10 chipyard.TestHarness.TinyRocketConfig.fir 196390:6]
    node _GEN_8 = mux(_T_3, _GEN_5, _GEN_1) @[SerialAdapter.scala 146:49 chipyard.TestHarness.TinyRocketConfig.fir 196385:4]
    node _GEN_9 = mux(_T_3, _GEN_6, _GEN_4) @[SerialAdapter.scala 146:49 chipyard.TestHarness.TinyRocketConfig.fir 196385:4]
    node _T_6 = and(_io_serial_in_ready_T_2, io_serial_in_valid) @[SerialAdapter.scala 155:25 chipyard.TestHarness.TinyRocketConfig.fir 196401:4]
    node _GEN_57 = pad(len, 95) @[SerialAdapter.scala 156:16 chipyard.TestHarness.TinyRocketConfig.fir 196406:6]
    node _len_T_2 = or(_GEN_57, _addr_T_1) @[SerialAdapter.scala 156:16 chipyard.TestHarness.TinyRocketConfig.fir 196406:6]
    node _T_8 = eq(cmd, UInt<32>("h1")) @[SerialAdapter.scala 160:17 chipyard.TestHarness.TinyRocketConfig.fir 196414:8]
    node _T_9 = eq(cmd, UInt<32>("h0")) @[SerialAdapter.scala 163:24 chipyard.TestHarness.TinyRocketConfig.fir 196420:10]
    node _T_12 = not(reset) @[SerialAdapter.scala 166:15 chipyard.TestHarness.TinyRocketConfig.fir 196427:12]
    node _GEN_10 = mux(_T_9, UInt<4>("h3"), _GEN_9) @[SerialAdapter.scala 163:38 chipyard.TestHarness.TinyRocketConfig.fir 196421:10 SerialAdapter.scala 164:15 chipyard.TestHarness.TinyRocketConfig.fir 196422:12]
    node _GEN_11 = mux(_T_8, UInt<1>("h0"), bodyValid) @[SerialAdapter.scala 160:32 chipyard.TestHarness.TinyRocketConfig.fir 196415:8 SerialAdapter.scala 161:19 chipyard.TestHarness.TinyRocketConfig.fir 196416:10 SerialAdapter.scala 90:22 chipyard.TestHarness.TinyRocketConfig.fir 195955:4]
    node _GEN_12 = mux(_T_8, UInt<4>("h6"), _GEN_10) @[SerialAdapter.scala 160:32 chipyard.TestHarness.TinyRocketConfig.fir 196415:8 SerialAdapter.scala 162:15 chipyard.TestHarness.TinyRocketConfig.fir 196417:10]
    node _GEN_14 = mux(idx, _GEN_11, bodyValid) @[SerialAdapter.scala 158:43 chipyard.TestHarness.TinyRocketConfig.fir 196412:6 SerialAdapter.scala 90:22 chipyard.TestHarness.TinyRocketConfig.fir 195955:4]
    node _GEN_15 = mux(idx, _GEN_12, _GEN_9) @[SerialAdapter.scala 158:43 chipyard.TestHarness.TinyRocketConfig.fir 196412:6]
    node _GEN_16 = mux(_T_6, _len_T_2, pad(_GEN_3, 95)) @[SerialAdapter.scala 155:48 chipyard.TestHarness.TinyRocketConfig.fir 196402:4 SerialAdapter.scala 156:9 chipyard.TestHarness.TinyRocketConfig.fir 196407:6]
    node _GEN_17 = mux(_T_6, _GEN_5, _GEN_8) @[SerialAdapter.scala 155:48 chipyard.TestHarness.TinyRocketConfig.fir 196402:4]
    node _GEN_18 = mux(_T_6, _GEN_14, bodyValid) @[SerialAdapter.scala 155:48 chipyard.TestHarness.TinyRocketConfig.fir 196402:4 SerialAdapter.scala 90:22 chipyard.TestHarness.TinyRocketConfig.fir 195955:4]
    node _GEN_19 = mux(_T_6, _GEN_15, _GEN_9) @[SerialAdapter.scala 155:48 chipyard.TestHarness.TinyRocketConfig.fir 196402:4]
    node _T_14 = and(_bundleOut_0_a_valid_T_1, auto_out_a_ready) @[SerialAdapter.scala 171:30 chipyard.TestHarness.TinyRocketConfig.fir 196436:4]
    node _GEN_20 = mux(_T_14, UInt<4>("h4"), _GEN_19) @[SerialAdapter.scala 171:46 chipyard.TestHarness.TinyRocketConfig.fir 196437:4 SerialAdapter.scala 172:11 chipyard.TestHarness.TinyRocketConfig.fir 196438:6]
    node _T_16 = and(_bundleOut_0_d_ready_T_1, auto_out_d_valid) @[SerialAdapter.scala 175:31 chipyard.TestHarness.TinyRocketConfig.fir 196441:4]
    node _GEN_21 = mux(_T_16, auto_out_d_bits_data, body_0) @[SerialAdapter.scala 175:47 chipyard.TestHarness.TinyRocketConfig.fir 196442:4 SerialAdapter.scala 176:10 chipyard.TestHarness.TinyRocketConfig.fir 196448:6 SerialAdapter.scala 89:17 chipyard.TestHarness.TinyRocketConfig.fir 195954:4]
    node _GEN_22 = mux(_T_16, UInt<1>("h0"), _GEN_17) @[SerialAdapter.scala 175:47 chipyard.TestHarness.TinyRocketConfig.fir 196442:4 SerialAdapter.scala 177:9 chipyard.TestHarness.TinyRocketConfig.fir 196449:6]
    node _GEN_23 = mux(_T_16, pad(nextAddr, 95), _GEN_7) @[SerialAdapter.scala 175:47 chipyard.TestHarness.TinyRocketConfig.fir 196442:4 SerialAdapter.scala 178:10 chipyard.TestHarness.TinyRocketConfig.fir 196450:6]
    node _GEN_24 = mux(_T_16, UInt<4>("h5"), _GEN_20) @[SerialAdapter.scala 175:47 chipyard.TestHarness.TinyRocketConfig.fir 196442:4 SerialAdapter.scala 179:11 chipyard.TestHarness.TinyRocketConfig.fir 196451:6]
    node _T_19 = and(_io_serial_out_valid_T, io_serial_out_ready) @[SerialAdapter.scala 182:31 chipyard.TestHarness.TinyRocketConfig.fir 196454:4]
    node _len_T_3 = sub(len, UInt<64>("h1")) @[SerialAdapter.scala 184:16 chipyard.TestHarness.TinyRocketConfig.fir 196459:6]
    node _len_T_4 = tail(_len_T_3, 1) @[SerialAdapter.scala 184:16 chipyard.TestHarness.TinyRocketConfig.fir 196460:6]
    node _T_20 = eq(len, UInt<64>("h0")) @[SerialAdapter.scala 185:15 chipyard.TestHarness.TinyRocketConfig.fir 196462:6]
    node _T_21 = not(idx) @[SerialAdapter.scala 186:20 chipyard.TestHarness.TinyRocketConfig.fir 196467:8]
    node _GEN_25 = mux(_T_21, UInt<4>("h3"), _GEN_24) @[SerialAdapter.scala 186:48 chipyard.TestHarness.TinyRocketConfig.fir 196468:8 SerialAdapter.scala 186:56 chipyard.TestHarness.TinyRocketConfig.fir 196469:10]
    node _GEN_26 = mux(_T_20, UInt<4>("h0"), _GEN_25) @[SerialAdapter.scala 185:24 chipyard.TestHarness.TinyRocketConfig.fir 196463:6 SerialAdapter.scala 185:32 chipyard.TestHarness.TinyRocketConfig.fir 196464:8]
    node _GEN_27 = mux(_T_19, _idx_T_1, _GEN_22) @[SerialAdapter.scala 182:55 chipyard.TestHarness.TinyRocketConfig.fir 196455:4 SerialAdapter.scala 183:9 chipyard.TestHarness.TinyRocketConfig.fir 196458:6]
    node _GEN_28 = mux(_T_19, pad(_len_T_4, 95), _GEN_16) @[SerialAdapter.scala 182:55 chipyard.TestHarness.TinyRocketConfig.fir 196455:4 SerialAdapter.scala 184:9 chipyard.TestHarness.TinyRocketConfig.fir 196461:6]
    node _GEN_29 = mux(_T_19, _GEN_26, _GEN_24) @[SerialAdapter.scala 182:55 chipyard.TestHarness.TinyRocketConfig.fir 196455:4]
    node _T_23 = and(_io_serial_in_ready_T_3, io_serial_in_valid) @[SerialAdapter.scala 189:32 chipyard.TestHarness.TinyRocketConfig.fir 196473:4]
    node _bodyValid_T = dshlw(UInt<2>("h1"), idx) @[OneHot.scala 58:35 chipyard.TestHarness.TinyRocketConfig.fir 196476:6]
    node _GEN_58 = pad(bodyValid, 2) @[SerialAdapter.scala 191:28 chipyard.TestHarness.TinyRocketConfig.fir 196477:6]
    node _bodyValid_T_1 = or(_GEN_58, _bodyValid_T) @[SerialAdapter.scala 191:28 chipyard.TestHarness.TinyRocketConfig.fir 196477:6]
    node _T_26 = or(_T_21, _T_20) @[SerialAdapter.scala 192:42 chipyard.TestHarness.TinyRocketConfig.fir 196481:6]
    node _GEN_30 = mux(_T_26, UInt<4>("h7"), _GEN_29) @[SerialAdapter.scala 192:58 chipyard.TestHarness.TinyRocketConfig.fir 196482:6 SerialAdapter.scala 193:13 chipyard.TestHarness.TinyRocketConfig.fir 196483:8]
    node _GEN_31 = mux(_T_26, _GEN_27, _idx_T_1) @[SerialAdapter.scala 192:58 chipyard.TestHarness.TinyRocketConfig.fir 196482:6 SerialAdapter.scala 195:11 chipyard.TestHarness.TinyRocketConfig.fir 196488:8]
    node _GEN_32 = mux(_T_26, _GEN_28, pad(_len_T_4, 95)) @[SerialAdapter.scala 192:58 chipyard.TestHarness.TinyRocketConfig.fir 196482:6 SerialAdapter.scala 196:11 chipyard.TestHarness.TinyRocketConfig.fir 196491:8]
    node _GEN_34 = mux(_T_23, _bodyValid_T_1, pad(_GEN_18, 2)) @[SerialAdapter.scala 189:55 chipyard.TestHarness.TinyRocketConfig.fir 196474:4 SerialAdapter.scala 191:15 chipyard.TestHarness.TinyRocketConfig.fir 196478:6]
    node _GEN_35 = mux(_T_23, _GEN_30, _GEN_29) @[SerialAdapter.scala 189:55 chipyard.TestHarness.TinyRocketConfig.fir 196474:4]
    node _GEN_36 = mux(_T_23, _GEN_31, _GEN_27) @[SerialAdapter.scala 189:55 chipyard.TestHarness.TinyRocketConfig.fir 196474:4]
    node _GEN_37 = mux(_T_23, _GEN_32, _GEN_28) @[SerialAdapter.scala 189:55 chipyard.TestHarness.TinyRocketConfig.fir 196474:4]
    node _T_28 = and(_bundleOut_0_a_valid_T, auto_out_a_ready) @[SerialAdapter.scala 200:32 chipyard.TestHarness.TinyRocketConfig.fir 196495:4]
    node _GEN_38 = mux(_T_28, UInt<4>("h8"), _GEN_35) @[SerialAdapter.scala 200:48 chipyard.TestHarness.TinyRocketConfig.fir 196496:4 SerialAdapter.scala 201:11 chipyard.TestHarness.TinyRocketConfig.fir 196497:6]
    node _T_30 = and(_bundleOut_0_d_ready_T, auto_out_d_valid) @[SerialAdapter.scala 204:31 chipyard.TestHarness.TinyRocketConfig.fir 196500:4]
    node _GEN_39 = mux(_T_20, UInt<4>("h0"), UInt<4>("h6")) @[SerialAdapter.scala 205:24 chipyard.TestHarness.TinyRocketConfig.fir 196503:6 SerialAdapter.scala 206:13 chipyard.TestHarness.TinyRocketConfig.fir 196504:8 SerialAdapter.scala 212:13 chipyard.TestHarness.TinyRocketConfig.fir 196513:8]
    node _GEN_40 = mux(_T_20, _GEN_23, pad(nextAddr, 95)) @[SerialAdapter.scala 205:24 chipyard.TestHarness.TinyRocketConfig.fir 196503:6 SerialAdapter.scala 208:12 chipyard.TestHarness.TinyRocketConfig.fir 196507:8]
    node _GEN_41 = mux(_T_20, _GEN_37, pad(_len_T_4, 95)) @[SerialAdapter.scala 205:24 chipyard.TestHarness.TinyRocketConfig.fir 196503:6 SerialAdapter.scala 209:11 chipyard.TestHarness.TinyRocketConfig.fir 196510:8]
    node _GEN_42 = and(_T_20, _GEN_36) @[SerialAdapter.scala 205:24 chipyard.TestHarness.TinyRocketConfig.fir 196503:6 SerialAdapter.scala 210:11 chipyard.TestHarness.TinyRocketConfig.fir 196511:8]
    node _GEN_43 = mux(_T_20, _GEN_34, UInt<2>("h0")) @[SerialAdapter.scala 205:24 chipyard.TestHarness.TinyRocketConfig.fir 196503:6 SerialAdapter.scala 211:17 chipyard.TestHarness.TinyRocketConfig.fir 196512:8]
    node _GEN_44 = mux(_T_30, _GEN_39, _GEN_38) @[SerialAdapter.scala 204:47 chipyard.TestHarness.TinyRocketConfig.fir 196501:4]
    node _GEN_45 = mux(_T_30, _GEN_40, _GEN_23) @[SerialAdapter.scala 204:47 chipyard.TestHarness.TinyRocketConfig.fir 196501:4]
    node _GEN_46 = mux(_T_30, _GEN_41, _GEN_37) @[SerialAdapter.scala 204:47 chipyard.TestHarness.TinyRocketConfig.fir 196501:4]
    node _GEN_48 = mux(_T_30, _GEN_43, _GEN_34) @[SerialAdapter.scala 204:47 chipyard.TestHarness.TinyRocketConfig.fir 196501:4]
    auto_out_a_valid <= or(_bundleOut_0_a_valid_T, _bundleOut_0_a_valid_T_1) @[package.scala 72:59 chipyard.TestHarness.TinyRocketConfig.fir 196349:4]
    auto_out_a_bits_opcode <= mux(_bundleOut_0_a_valid_T, UInt<3>("h1"), UInt<3>("h4")) @[SerialAdapter.scala 124:20 chipyard.TestHarness.TinyRocketConfig.fir 196352:4]
    auto_out_a_bits_size <= mux(_bundleOut_0_a_valid_T, UInt<4>("h2"), get_acquire_size) @[SerialAdapter.scala 124:20 chipyard.TestHarness.TinyRocketConfig.fir 196352:4]
    auto_out_a_bits_address <= mux(_bundleOut_0_a_valid_T, put_acquire_address, get_acquire_address) @[SerialAdapter.scala 124:20 chipyard.TestHarness.TinyRocketConfig.fir 196352:4]
    auto_out_a_bits_mask <= mux(_bundleOut_0_a_valid_T, wmask, get_acquire_mask) @[SerialAdapter.scala 124:20 chipyard.TestHarness.TinyRocketConfig.fir 196352:4]
    auto_out_a_bits_data <= mux(_bundleOut_0_a_valid_T, body_0, UInt<32>("h0")) @[SerialAdapter.scala 124:20 chipyard.TestHarness.TinyRocketConfig.fir 196352:4]
    auto_out_d_ready <= or(_bundleOut_0_d_ready_T, _bundleOut_0_d_ready_T_1) @[package.scala 72:59 chipyard.TestHarness.TinyRocketConfig.fir 196369:4]
    io_serial_in_ready <= or(_io_serial_in_ready_T_5, _io_serial_in_ready_T_3) @[package.scala 72:59 chipyard.TestHarness.TinyRocketConfig.fir 195964:4]
    io_serial_out_valid <= eq(state, UInt<4>("h5")) @[SerialAdapter.scala 100:32 chipyard.TestHarness.TinyRocketConfig.fir 195966:4]
    io_serial_out_bits <= body_0 @[SerialAdapter.scala 101:22 chipyard.TestHarness.TinyRocketConfig.fir 195968:4]
    cmd <= mux(_T_1, io_serial_in_bits, cmd) @[SerialAdapter.scala 138:48 chipyard.TestHarness.TinyRocketConfig.fir 196376:4 SerialAdapter.scala 139:9 chipyard.TestHarness.TinyRocketConfig.fir 196377:6 SerialAdapter.scala 86:16 chipyard.TestHarness.TinyRocketConfig.fir 195951:4]
    addr <= bits(_GEN_45, 63, 0)
    len <= bits(_GEN_46, 63, 0)
    body_0 <= mux(_T_23, io_serial_in_bits, _GEN_21) @[SerialAdapter.scala 189:55 chipyard.TestHarness.TinyRocketConfig.fir 196474:4 SerialAdapter.scala 190:15 chipyard.TestHarness.TinyRocketConfig.fir 196475:6]
    bodyValid <= bits(_GEN_48, 0, 0)
    idx <= mux(_T_30, _GEN_42, _GEN_36) @[SerialAdapter.scala 204:47 chipyard.TestHarness.TinyRocketConfig.fir 196501:4]
    state <= mux(reset, UInt<4>("h0"), _GEN_44) @[SerialAdapter.scala 97:22 chipyard.TestHarness.TinyRocketConfig.fir 195957:4 SerialAdapter.scala 97:22 chipyard.TestHarness.TinyRocketConfig.fir 195957:4]
    node _GEN_59 = and(_T_6, idx) @[SerialAdapter.scala 166:15 chipyard.TestHarness.TinyRocketConfig.fir 196429:14]
    node _GEN_60 = not(_T_8) @[SerialAdapter.scala 166:15 chipyard.TestHarness.TinyRocketConfig.fir 196429:14]
    node _GEN_61 = and(_GEN_59, _GEN_60) @[SerialAdapter.scala 166:15 chipyard.TestHarness.TinyRocketConfig.fir 196429:14]
    node _GEN_62 = not(_T_9) @[SerialAdapter.scala 166:15 chipyard.TestHarness.TinyRocketConfig.fir 196429:14]
    node _GEN_63 = and(_GEN_61, _GEN_62) @[SerialAdapter.scala 166:15 chipyard.TestHarness.TinyRocketConfig.fir 196429:14]
    printf(clock, and(_GEN_63, _T_12), "Assertion failed: Bad TSI command\n    at SerialAdapter.scala:166 assert(false.B, \"Bad TSI command\")\n") @[SerialAdapter.scala 166:15 chipyard.TestHarness.TinyRocketConfig.fir 196429:14]
    stop(clock, and(_GEN_63, _T_12), 1) @[SerialAdapter.scala 166:15 chipyard.TestHarness.TinyRocketConfig.fir 196430:14]

  module TLMonitor_41_inTestHarness : @[chipyard.TestHarness.TinyRocketConfig.fir 196533:2]
    input clock : Clock @[chipyard.TestHarness.TinyRocketConfig.fir 196534:4]
    input reset : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 196535:4]
    input io_in_a_ready : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 196536:4]
    input io_in_a_valid : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 196536:4]
    input io_in_a_bits_opcode : UInt<3> @[chipyard.TestHarness.TinyRocketConfig.fir 196536:4]
    input io_in_a_bits_param : UInt<3> @[chipyard.TestHarness.TinyRocketConfig.fir 196536:4]
    input io_in_a_bits_size : UInt<4> @[chipyard.TestHarness.TinyRocketConfig.fir 196536:4]
    input io_in_a_bits_source : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 196536:4]
    input io_in_a_bits_address : UInt<32> @[chipyard.TestHarness.TinyRocketConfig.fir 196536:4]
    input io_in_a_bits_mask : UInt<4> @[chipyard.TestHarness.TinyRocketConfig.fir 196536:4]
    input io_in_a_bits_corrupt : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 196536:4]
    input io_in_d_ready : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 196536:4]
    input io_in_d_valid : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 196536:4]
    input io_in_d_bits_opcode : UInt<3> @[chipyard.TestHarness.TinyRocketConfig.fir 196536:4]
    input io_in_d_bits_param : UInt<2> @[chipyard.TestHarness.TinyRocketConfig.fir 196536:4]
    input io_in_d_bits_size : UInt<4> @[chipyard.TestHarness.TinyRocketConfig.fir 196536:4]
    input io_in_d_bits_source : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 196536:4]
    input io_in_d_bits_sink : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 196536:4]
    input io_in_d_bits_denied : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 196536:4]
    input io_in_d_bits_corrupt : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 196536:4]

    inst plusarg_reader of plusarg_reader @[PlusArg.scala 80:11 chipyard.TestHarness.TinyRocketConfig.fir 198373:4]
    inst plusarg_reader_1 of plusarg_reader @[PlusArg.scala 80:11 chipyard.TestHarness.TinyRocketConfig.fir 198680:4]
    node _source_ok_T = not(io_in_a_bits_source) @[Parameters.scala 46:9 chipyard.TestHarness.TinyRocketConfig.fir 196547:6]
    node _is_aligned_mask_T_1 = dshlw(UInt<27>("hfff"), io_in_a_bits_size) @[package.scala 234:77 chipyard.TestHarness.TinyRocketConfig.fir 196552:6]
    node _is_aligned_mask_T_2 = bits(_is_aligned_mask_T_1, 11, 0) @[package.scala 234:82 chipyard.TestHarness.TinyRocketConfig.fir 196553:6]
    node is_aligned_mask = not(_is_aligned_mask_T_2) @[package.scala 234:46 chipyard.TestHarness.TinyRocketConfig.fir 196554:6]
    node _GEN_71 = pad(is_aligned_mask, 32) @[Edges.scala 20:16 chipyard.TestHarness.TinyRocketConfig.fir 196555:6]
    node _is_aligned_T = and(io_in_a_bits_address, _GEN_71) @[Edges.scala 20:16 chipyard.TestHarness.TinyRocketConfig.fir 196555:6]
    node is_aligned = eq(_is_aligned_T, UInt<32>("h0")) @[Edges.scala 20:24 chipyard.TestHarness.TinyRocketConfig.fir 196556:6]
    node mask_sizeOH_shiftAmount = bits(io_in_a_bits_size, 0, 0) @[OneHot.scala 64:49 chipyard.TestHarness.TinyRocketConfig.fir 196558:6]
    node _mask_sizeOH_T_1 = dshlw(UInt<2>("h1"), mask_sizeOH_shiftAmount) @[OneHot.scala 65:12 chipyard.TestHarness.TinyRocketConfig.fir 196559:6]
    node mask_sizeOH = or(_mask_sizeOH_T_1, UInt<2>("h1")) @[Misc.scala 201:81 chipyard.TestHarness.TinyRocketConfig.fir 196561:6]
    node _mask_T = geq(io_in_a_bits_size, UInt<4>("h2")) @[Misc.scala 205:21 chipyard.TestHarness.TinyRocketConfig.fir 196562:6]
    node mask_size = bits(mask_sizeOH, 1, 1) @[Misc.scala 208:26 chipyard.TestHarness.TinyRocketConfig.fir 196563:6]
    node mask_bit = bits(io_in_a_bits_address, 1, 1) @[Misc.scala 209:26 chipyard.TestHarness.TinyRocketConfig.fir 196564:6]
    node mask_nbit = not(mask_bit) @[Misc.scala 210:20 chipyard.TestHarness.TinyRocketConfig.fir 196565:6]
    node _mask_acc_T = and(mask_size, mask_nbit) @[Misc.scala 214:38 chipyard.TestHarness.TinyRocketConfig.fir 196567:6]
    node mask_acc = or(_mask_T, _mask_acc_T) @[Misc.scala 214:29 chipyard.TestHarness.TinyRocketConfig.fir 196568:6]
    node _mask_acc_T_1 = and(mask_size, mask_bit) @[Misc.scala 214:38 chipyard.TestHarness.TinyRocketConfig.fir 196570:6]
    node mask_acc_1 = or(_mask_T, _mask_acc_T_1) @[Misc.scala 214:29 chipyard.TestHarness.TinyRocketConfig.fir 196571:6]
    node mask_size_1 = bits(mask_sizeOH, 0, 0) @[Misc.scala 208:26 chipyard.TestHarness.TinyRocketConfig.fir 196572:6]
    node mask_bit_1 = bits(io_in_a_bits_address, 0, 0) @[Misc.scala 209:26 chipyard.TestHarness.TinyRocketConfig.fir 196573:6]
    node mask_nbit_1 = not(mask_bit_1) @[Misc.scala 210:20 chipyard.TestHarness.TinyRocketConfig.fir 196574:6]
    node mask_eq_2 = and(mask_nbit, mask_nbit_1) @[Misc.scala 213:27 chipyard.TestHarness.TinyRocketConfig.fir 196575:6]
    node _mask_acc_T_2 = and(mask_size_1, mask_eq_2) @[Misc.scala 214:38 chipyard.TestHarness.TinyRocketConfig.fir 196576:6]
    node mask_lo_lo = or(mask_acc, _mask_acc_T_2) @[Misc.scala 214:29 chipyard.TestHarness.TinyRocketConfig.fir 196577:6]
    node mask_eq_3 = and(mask_nbit, mask_bit_1) @[Misc.scala 213:27 chipyard.TestHarness.TinyRocketConfig.fir 196578:6]
    node _mask_acc_T_3 = and(mask_size_1, mask_eq_3) @[Misc.scala 214:38 chipyard.TestHarness.TinyRocketConfig.fir 196579:6]
    node mask_lo_hi = or(mask_acc, _mask_acc_T_3) @[Misc.scala 214:29 chipyard.TestHarness.TinyRocketConfig.fir 196580:6]
    node mask_eq_4 = and(mask_bit, mask_nbit_1) @[Misc.scala 213:27 chipyard.TestHarness.TinyRocketConfig.fir 196581:6]
    node _mask_acc_T_4 = and(mask_size_1, mask_eq_4) @[Misc.scala 214:38 chipyard.TestHarness.TinyRocketConfig.fir 196582:6]
    node mask_hi_lo = or(mask_acc_1, _mask_acc_T_4) @[Misc.scala 214:29 chipyard.TestHarness.TinyRocketConfig.fir 196583:6]
    node mask_eq_5 = and(mask_bit, mask_bit_1) @[Misc.scala 213:27 chipyard.TestHarness.TinyRocketConfig.fir 196584:6]
    node _mask_acc_T_5 = and(mask_size_1, mask_eq_5) @[Misc.scala 214:38 chipyard.TestHarness.TinyRocketConfig.fir 196585:6]
    node mask_hi_hi = or(mask_acc_1, _mask_acc_T_5) @[Misc.scala 214:29 chipyard.TestHarness.TinyRocketConfig.fir 196586:6]
    node mask = cat(cat(mask_hi_hi, mask_hi_lo), cat(mask_lo_hi, mask_lo_lo)) @[Cat.scala 30:58 chipyard.TestHarness.TinyRocketConfig.fir 196589:6]
    node _T_7 = cvt(io_in_a_bits_address) @[Parameters.scala 137:49 chipyard.TestHarness.TinyRocketConfig.fir 196593:6]
    node _T_15 = eq(io_in_a_bits_opcode, UInt<3>("h6")) @[Monitor.scala 81:25 chipyard.TestHarness.TinyRocketConfig.fir 196605:6]
    node _T_17 = leq(io_in_a_bits_size, UInt<4>("hc")) @[Parameters.scala 92:42 chipyard.TestHarness.TinyRocketConfig.fir 196608:8]
    node _T_20 = and(_T_17, _source_ok_T) @[Parameters.scala 1160:30 chipyard.TestHarness.TinyRocketConfig.fir 196611:8]
    node _T_25 = and(_T_7, SInt<33>("h-101000")) @[Parameters.scala 137:52 chipyard.TestHarness.TinyRocketConfig.fir 196616:8]
    node _T_26 = asSInt(_T_25) @[Parameters.scala 137:52 chipyard.TestHarness.TinyRocketConfig.fir 196617:8]
    node _T_27 = eq(_T_26, SInt<33>("h0")) @[Parameters.scala 137:67 chipyard.TestHarness.TinyRocketConfig.fir 196618:8]
    node _T_28 = xor(io_in_a_bits_address, UInt<32>("h3000")) @[Parameters.scala 137:31 chipyard.TestHarness.TinyRocketConfig.fir 196619:8]
    node _T_29 = cvt(_T_28) @[Parameters.scala 137:49 chipyard.TestHarness.TinyRocketConfig.fir 196620:8]
    node _T_30 = and(_T_29, SInt<33>("h-1000")) @[Parameters.scala 137:52 chipyard.TestHarness.TinyRocketConfig.fir 196621:8]
    node _T_31 = asSInt(_T_30) @[Parameters.scala 137:52 chipyard.TestHarness.TinyRocketConfig.fir 196622:8]
    node _T_32 = eq(_T_31, SInt<33>("h0")) @[Parameters.scala 137:67 chipyard.TestHarness.TinyRocketConfig.fir 196623:8]
    node _T_33 = xor(io_in_a_bits_address, UInt<32>("h10000")) @[Parameters.scala 137:31 chipyard.TestHarness.TinyRocketConfig.fir 196624:8]
    node _T_34 = cvt(_T_33) @[Parameters.scala 137:49 chipyard.TestHarness.TinyRocketConfig.fir 196625:8]
    node _T_35 = and(_T_34, SInt<33>("h-10000")) @[Parameters.scala 137:52 chipyard.TestHarness.TinyRocketConfig.fir 196626:8]
    node _T_36 = asSInt(_T_35) @[Parameters.scala 137:52 chipyard.TestHarness.TinyRocketConfig.fir 196627:8]
    node _T_37 = eq(_T_36, SInt<33>("h0")) @[Parameters.scala 137:67 chipyard.TestHarness.TinyRocketConfig.fir 196628:8]
    node _T_38 = xor(io_in_a_bits_address, UInt<32>("h2000000")) @[Parameters.scala 137:31 chipyard.TestHarness.TinyRocketConfig.fir 196629:8]
    node _T_39 = cvt(_T_38) @[Parameters.scala 137:49 chipyard.TestHarness.TinyRocketConfig.fir 196630:8]
    node _T_40 = and(_T_39, SInt<33>("h-10000")) @[Parameters.scala 137:52 chipyard.TestHarness.TinyRocketConfig.fir 196631:8]
    node _T_41 = asSInt(_T_40) @[Parameters.scala 137:52 chipyard.TestHarness.TinyRocketConfig.fir 196632:8]
    node _T_42 = eq(_T_41, SInt<33>("h0")) @[Parameters.scala 137:67 chipyard.TestHarness.TinyRocketConfig.fir 196633:8]
    node _T_43 = xor(io_in_a_bits_address, UInt<32>("hc000000")) @[Parameters.scala 137:31 chipyard.TestHarness.TinyRocketConfig.fir 196634:8]
    node _T_44 = cvt(_T_43) @[Parameters.scala 137:49 chipyard.TestHarness.TinyRocketConfig.fir 196635:8]
    node _T_45 = and(_T_44, SInt<33>("h-4000000")) @[Parameters.scala 137:52 chipyard.TestHarness.TinyRocketConfig.fir 196636:8]
    node _T_46 = asSInt(_T_45) @[Parameters.scala 137:52 chipyard.TestHarness.TinyRocketConfig.fir 196637:8]
    node _T_47 = eq(_T_46, SInt<33>("h0")) @[Parameters.scala 137:67 chipyard.TestHarness.TinyRocketConfig.fir 196638:8]
    node _T_48 = xor(io_in_a_bits_address, UInt<32>("h10000000")) @[Parameters.scala 137:31 chipyard.TestHarness.TinyRocketConfig.fir 196639:8]
    node _T_49 = cvt(_T_48) @[Parameters.scala 137:49 chipyard.TestHarness.TinyRocketConfig.fir 196640:8]
    node _T_50 = and(_T_49, SInt<33>("h-1000")) @[Parameters.scala 137:52 chipyard.TestHarness.TinyRocketConfig.fir 196641:8]
    node _T_51 = asSInt(_T_50) @[Parameters.scala 137:52 chipyard.TestHarness.TinyRocketConfig.fir 196642:8]
    node _T_52 = eq(_T_51, SInt<33>("h0")) @[Parameters.scala 137:67 chipyard.TestHarness.TinyRocketConfig.fir 196643:8]
    node _T_53 = xor(io_in_a_bits_address, UInt<32>("h54000000")) @[Parameters.scala 137:31 chipyard.TestHarness.TinyRocketConfig.fir 196644:8]
    node _T_54 = cvt(_T_53) @[Parameters.scala 137:49 chipyard.TestHarness.TinyRocketConfig.fir 196645:8]
    node _T_55 = and(_T_54, SInt<33>("h-1000")) @[Parameters.scala 137:52 chipyard.TestHarness.TinyRocketConfig.fir 196646:8]
    node _T_56 = asSInt(_T_55) @[Parameters.scala 137:52 chipyard.TestHarness.TinyRocketConfig.fir 196647:8]
    node _T_57 = eq(_T_56, SInt<33>("h0")) @[Parameters.scala 137:67 chipyard.TestHarness.TinyRocketConfig.fir 196648:8]
    node _T_58 = xor(io_in_a_bits_address, UInt<32>("h80000000")) @[Parameters.scala 137:31 chipyard.TestHarness.TinyRocketConfig.fir 196649:8]
    node _T_59 = cvt(_T_58) @[Parameters.scala 137:49 chipyard.TestHarness.TinyRocketConfig.fir 196650:8]
    node _T_60 = and(_T_59, SInt<33>("h-4000")) @[Parameters.scala 137:52 chipyard.TestHarness.TinyRocketConfig.fir 196651:8]
    node _T_61 = asSInt(_T_60) @[Parameters.scala 137:52 chipyard.TestHarness.TinyRocketConfig.fir 196652:8]
    node _T_62 = eq(_T_61, SInt<33>("h0")) @[Parameters.scala 137:67 chipyard.TestHarness.TinyRocketConfig.fir 196653:8]
    node _T_63 = or(_T_27, _T_32) @[Parameters.scala 671:42 chipyard.TestHarness.TinyRocketConfig.fir 196654:8]
    node _T_75 = not(reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 196666:8]
    node _T_134 = or(_source_ok_T, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 196733:8]
    node _T_135 = not(_T_134) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 196734:8]
    node _T_138 = or(_mask_T, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 196741:8]
    node _T_139 = not(_T_138) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 196742:8]
    node _T_141 = or(is_aligned, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 196748:8]
    node _T_142 = not(_T_141) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 196749:8]
    node _T_143 = leq(io_in_a_bits_param, UInt<3>("h2")) @[Bundles.scala 108:27 chipyard.TestHarness.TinyRocketConfig.fir 196754:8]
    node _T_145 = or(_T_143, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 196756:8]
    node _T_146 = not(_T_145) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 196757:8]
    node _T_147 = not(io_in_a_bits_mask) @[Monitor.scala 88:18 chipyard.TestHarness.TinyRocketConfig.fir 196762:8]
    node _T_148 = eq(_T_147, UInt<4>("h0")) @[Monitor.scala 88:31 chipyard.TestHarness.TinyRocketConfig.fir 196763:8]
    node _T_150 = or(_T_148, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 196765:8]
    node _T_151 = not(_T_150) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 196766:8]
    node _T_152 = not(io_in_a_bits_corrupt) @[Monitor.scala 89:18 chipyard.TestHarness.TinyRocketConfig.fir 196771:8]
    node _T_154 = or(_T_152, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 196773:8]
    node _T_155 = not(_T_154) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 196774:8]
    node _T_156 = eq(io_in_a_bits_opcode, UInt<3>("h7")) @[Monitor.scala 92:25 chipyard.TestHarness.TinyRocketConfig.fir 196780:6]
    node _T_288 = neq(io_in_a_bits_param, UInt<3>("h0")) @[Monitor.scala 99:31 chipyard.TestHarness.TinyRocketConfig.fir 196937:8]
    node _T_290 = or(_T_288, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 196939:8]
    node _T_291 = not(_T_290) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 196940:8]
    node _T_301 = eq(io_in_a_bits_opcode, UInt<3>("h4")) @[Monitor.scala 104:25 chipyard.TestHarness.TinyRocketConfig.fir 196963:6]
    node _T_309 = or(_T_20, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 196972:8]
    node _T_310 = not(_T_309) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 196973:8]
    node _T_320 = and(_T_17, _T_32) @[Parameters.scala 670:56 chipyard.TestHarness.TinyRocketConfig.fir 196987:8]
    node _T_322 = leq(io_in_a_bits_size, UInt<4>("h6")) @[Parameters.scala 92:42 chipyard.TestHarness.TinyRocketConfig.fir 196989:8]
    node _T_360 = or(_T_27, _T_37) @[Parameters.scala 671:42 chipyard.TestHarness.TinyRocketConfig.fir 197027:8]
    node _T_361 = or(_T_360, _T_42) @[Parameters.scala 671:42 chipyard.TestHarness.TinyRocketConfig.fir 197028:8]
    node _T_362 = or(_T_361, _T_47) @[Parameters.scala 671:42 chipyard.TestHarness.TinyRocketConfig.fir 197029:8]
    node _T_363 = or(_T_362, _T_52) @[Parameters.scala 671:42 chipyard.TestHarness.TinyRocketConfig.fir 197030:8]
    node _T_364 = or(_T_363, _T_57) @[Parameters.scala 671:42 chipyard.TestHarness.TinyRocketConfig.fir 197031:8]
    node _T_365 = or(_T_364, _T_62) @[Parameters.scala 671:42 chipyard.TestHarness.TinyRocketConfig.fir 197032:8]
    node _T_366 = and(_T_322, _T_365) @[Parameters.scala 670:56 chipyard.TestHarness.TinyRocketConfig.fir 197033:8]
    node _T_368 = or(_T_320, _T_366) @[Parameters.scala 672:30 chipyard.TestHarness.TinyRocketConfig.fir 197035:8]
    node _T_370 = or(_T_368, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197037:8]
    node _T_371 = not(_T_370) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197038:8]
    node _T_378 = eq(io_in_a_bits_param, UInt<3>("h0")) @[Monitor.scala 109:31 chipyard.TestHarness.TinyRocketConfig.fir 197057:8]
    node _T_380 = or(_T_378, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197059:8]
    node _T_381 = not(_T_380) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197060:8]
    node _T_382 = eq(io_in_a_bits_mask, mask) @[Monitor.scala 110:30 chipyard.TestHarness.TinyRocketConfig.fir 197065:8]
    node _T_384 = or(_T_382, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197067:8]
    node _T_385 = not(_T_384) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197068:8]
    node _T_390 = eq(io_in_a_bits_opcode, UInt<3>("h0")) @[Monitor.scala 114:25 chipyard.TestHarness.TinyRocketConfig.fir 197082:6]
    node _T_441 = or(_T_27, _T_42) @[Parameters.scala 671:42 chipyard.TestHarness.TinyRocketConfig.fir 197134:8]
    node _T_442 = or(_T_441, _T_47) @[Parameters.scala 671:42 chipyard.TestHarness.TinyRocketConfig.fir 197135:8]
    node _T_443 = or(_T_442, _T_52) @[Parameters.scala 671:42 chipyard.TestHarness.TinyRocketConfig.fir 197136:8]
    node _T_444 = or(_T_443, _T_57) @[Parameters.scala 671:42 chipyard.TestHarness.TinyRocketConfig.fir 197137:8]
    node _T_445 = or(_T_444, _T_62) @[Parameters.scala 671:42 chipyard.TestHarness.TinyRocketConfig.fir 197138:8]
    node _T_446 = and(_T_322, _T_445) @[Parameters.scala 670:56 chipyard.TestHarness.TinyRocketConfig.fir 197139:8]
    node _T_455 = or(_T_320, _T_446) @[Parameters.scala 672:30 chipyard.TestHarness.TinyRocketConfig.fir 197148:8]
    node _T_457 = and(_T_20, _T_455) @[Monitor.scala 115:71 chipyard.TestHarness.TinyRocketConfig.fir 197150:8]
    node _T_459 = or(_T_457, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197152:8]
    node _T_460 = not(_T_459) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197153:8]
    node _T_475 = eq(io_in_a_bits_opcode, UInt<3>("h1")) @[Monitor.scala 122:25 chipyard.TestHarness.TinyRocketConfig.fir 197189:6]
    node _T_556 = not(mask) @[Monitor.scala 127:33 chipyard.TestHarness.TinyRocketConfig.fir 197287:8]
    node _T_557 = and(io_in_a_bits_mask, _T_556) @[Monitor.scala 127:31 chipyard.TestHarness.TinyRocketConfig.fir 197288:8]
    node _T_558 = eq(_T_557, UInt<4>("h0")) @[Monitor.scala 127:40 chipyard.TestHarness.TinyRocketConfig.fir 197289:8]
    node _T_560 = or(_T_558, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197291:8]
    node _T_561 = not(_T_560) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197292:8]
    node _T_562 = eq(io_in_a_bits_opcode, UInt<3>("h2")) @[Monitor.scala 130:25 chipyard.TestHarness.TinyRocketConfig.fir 197298:6]
    node _T_570 = leq(io_in_a_bits_size, UInt<4>("h2")) @[Parameters.scala 92:42 chipyard.TestHarness.TinyRocketConfig.fir 197307:8]
    node _T_609 = or(_T_63, _T_42) @[Parameters.scala 671:42 chipyard.TestHarness.TinyRocketConfig.fir 197346:8]
    node _T_610 = or(_T_609, _T_47) @[Parameters.scala 671:42 chipyard.TestHarness.TinyRocketConfig.fir 197347:8]
    node _T_611 = or(_T_610, _T_52) @[Parameters.scala 671:42 chipyard.TestHarness.TinyRocketConfig.fir 197348:8]
    node _T_612 = or(_T_611, _T_57) @[Parameters.scala 671:42 chipyard.TestHarness.TinyRocketConfig.fir 197349:8]
    node _T_613 = or(_T_612, _T_62) @[Parameters.scala 671:42 chipyard.TestHarness.TinyRocketConfig.fir 197350:8]
    node _T_614 = and(_T_570, _T_613) @[Parameters.scala 670:56 chipyard.TestHarness.TinyRocketConfig.fir 197351:8]
    node _T_624 = and(_T_20, _T_614) @[Monitor.scala 131:74 chipyard.TestHarness.TinyRocketConfig.fir 197361:8]
    node _T_626 = or(_T_624, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197363:8]
    node _T_627 = not(_T_626) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197364:8]
    node _T_634 = leq(io_in_a_bits_param, UInt<3>("h4")) @[Bundles.scala 138:33 chipyard.TestHarness.TinyRocketConfig.fir 197383:8]
    node _T_636 = or(_T_634, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197385:8]
    node _T_637 = not(_T_636) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197386:8]
    node _T_642 = eq(io_in_a_bits_opcode, UInt<3>("h3")) @[Monitor.scala 138:25 chipyard.TestHarness.TinyRocketConfig.fir 197400:6]
    node _T_714 = leq(io_in_a_bits_param, UInt<3>("h3")) @[Bundles.scala 145:30 chipyard.TestHarness.TinyRocketConfig.fir 197485:8]
    node _T_716 = or(_T_714, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197487:8]
    node _T_717 = not(_T_716) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197488:8]
    node _T_722 = eq(io_in_a_bits_opcode, UInt<3>("h5")) @[Monitor.scala 146:25 chipyard.TestHarness.TinyRocketConfig.fir 197502:6]
    node _T_784 = and(_T_20, _T_320) @[Monitor.scala 147:68 chipyard.TestHarness.TinyRocketConfig.fir 197565:8]
    node _T_786 = or(_T_784, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197567:8]
    node _T_787 = not(_T_786) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197568:8]
    node _T_794 = leq(io_in_a_bits_param, UInt<3>("h1")) @[Bundles.scala 158:28 chipyard.TestHarness.TinyRocketConfig.fir 197587:8]
    node _T_796 = or(_T_794, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197589:8]
    node _T_797 = not(_T_796) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197590:8]
    node _T_806 = leq(io_in_d_bits_opcode, UInt<3>("h6")) @[Bundles.scala 42:24 chipyard.TestHarness.TinyRocketConfig.fir 197614:6]
    node _T_808 = or(_T_806, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 197616:6]
    node _T_809 = not(_T_808) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 197617:6]
    node _source_ok_T_1 = not(io_in_d_bits_source) @[Parameters.scala 46:9 chipyard.TestHarness.TinyRocketConfig.fir 197622:6]
    node _T_810 = eq(io_in_d_bits_opcode, UInt<3>("h6")) @[Monitor.scala 310:25 chipyard.TestHarness.TinyRocketConfig.fir 197627:6]
    node _T_812 = or(_source_ok_T_1, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 197630:8]
    node _T_813 = not(_T_812) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 197631:8]
    node _T_814 = geq(io_in_d_bits_size, UInt<4>("h2")) @[Monitor.scala 312:27 chipyard.TestHarness.TinyRocketConfig.fir 197636:8]
    node _T_816 = or(_T_814, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 197638:8]
    node _T_817 = not(_T_816) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 197639:8]
    node _T_818 = eq(io_in_d_bits_param, UInt<2>("h0")) @[Monitor.scala 313:28 chipyard.TestHarness.TinyRocketConfig.fir 197644:8]
    node _T_820 = or(_T_818, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 197646:8]
    node _T_821 = not(_T_820) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 197647:8]
    node _T_822 = not(io_in_d_bits_corrupt) @[Monitor.scala 314:15 chipyard.TestHarness.TinyRocketConfig.fir 197652:8]
    node _T_824 = or(_T_822, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 197654:8]
    node _T_825 = not(_T_824) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 197655:8]
    node _T_826 = not(io_in_d_bits_denied) @[Monitor.scala 315:15 chipyard.TestHarness.TinyRocketConfig.fir 197660:8]
    node _T_828 = or(_T_826, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 197662:8]
    node _T_829 = not(_T_828) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 197663:8]
    node _T_830 = eq(io_in_d_bits_opcode, UInt<3>("h4")) @[Monitor.scala 318:25 chipyard.TestHarness.TinyRocketConfig.fir 197669:6]
    node _T_841 = leq(io_in_d_bits_param, UInt<2>("h2")) @[Bundles.scala 102:26 chipyard.TestHarness.TinyRocketConfig.fir 197693:8]
    node _T_843 = or(_T_841, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 197695:8]
    node _T_844 = not(_T_843) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 197696:8]
    node _T_845 = neq(io_in_d_bits_param, UInt<2>("h2")) @[Monitor.scala 323:28 chipyard.TestHarness.TinyRocketConfig.fir 197701:8]
    node _T_847 = or(_T_845, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 197703:8]
    node _T_848 = not(_T_847) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 197704:8]
    node _T_858 = eq(io_in_d_bits_opcode, UInt<3>("h5")) @[Monitor.scala 328:25 chipyard.TestHarness.TinyRocketConfig.fir 197727:6]
    node _T_878 = or(_T_826, io_in_d_bits_corrupt) @[Monitor.scala 334:30 chipyard.TestHarness.TinyRocketConfig.fir 197768:8]
    node _T_880 = or(_T_878, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 197770:8]
    node _T_881 = not(_T_880) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 197771:8]
    node _T_887 = eq(io_in_d_bits_opcode, UInt<3>("h0")) @[Monitor.scala 338:25 chipyard.TestHarness.TinyRocketConfig.fir 197786:6]
    node _T_904 = eq(io_in_d_bits_opcode, UInt<3>("h1")) @[Monitor.scala 346:25 chipyard.TestHarness.TinyRocketConfig.fir 197821:6]
    node _T_922 = eq(io_in_d_bits_opcode, UInt<3>("h2")) @[Monitor.scala 354:25 chipyard.TestHarness.TinyRocketConfig.fir 197857:6]
    node _a_first_T = and(io_in_a_ready, io_in_a_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.TinyRocketConfig.fir 197923:4]
    node a_first_beats1_decode = shr(is_aligned_mask, 2) @[Edges.scala 219:59 chipyard.TestHarness.TinyRocketConfig.fir 197928:4]
    node _a_first_beats1_opdata_T = bits(io_in_a_bits_opcode, 2, 2) @[Edges.scala 91:37 chipyard.TestHarness.TinyRocketConfig.fir 197929:4]
    node a_first_beats1_opdata = not(_a_first_beats1_opdata_T) @[Edges.scala 91:28 chipyard.TestHarness.TinyRocketConfig.fir 197930:4]
    node a_first_beats1 = mux(a_first_beats1_opdata, a_first_beats1_decode, UInt<10>("h0")) @[Edges.scala 220:14 chipyard.TestHarness.TinyRocketConfig.fir 197931:4]
    reg a_first_counter : UInt<10>, clock with :
      reset => (UInt<1>("h0"), a_first_counter) @[Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 197932:4]
    node _a_first_counter1_T = sub(a_first_counter, UInt<10>("h1")) @[Edges.scala 229:28 chipyard.TestHarness.TinyRocketConfig.fir 197933:4]
    node a_first_counter1 = tail(_a_first_counter1_T, 1) @[Edges.scala 229:28 chipyard.TestHarness.TinyRocketConfig.fir 197934:4]
    node a_first = eq(a_first_counter, UInt<10>("h0")) @[Edges.scala 230:25 chipyard.TestHarness.TinyRocketConfig.fir 197935:4]
    node _a_first_counter_T = mux(a_first, a_first_beats1, a_first_counter1) @[Edges.scala 235:21 chipyard.TestHarness.TinyRocketConfig.fir 197943:6]
    node _GEN_0 = mux(_a_first_T, _a_first_counter_T, a_first_counter) @[Edges.scala 234:17 chipyard.TestHarness.TinyRocketConfig.fir 197942:4 Edges.scala 235:15 chipyard.TestHarness.TinyRocketConfig.fir 197944:6 Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 197932:4]
    reg opcode : UInt<3>, clock with :
      reset => (UInt<1>("h0"), opcode) @[Monitor.scala 384:22 chipyard.TestHarness.TinyRocketConfig.fir 197946:4]
    reg param : UInt<3>, clock with :
      reset => (UInt<1>("h0"), param) @[Monitor.scala 385:22 chipyard.TestHarness.TinyRocketConfig.fir 197947:4]
    reg size : UInt<4>, clock with :
      reset => (UInt<1>("h0"), size) @[Monitor.scala 386:22 chipyard.TestHarness.TinyRocketConfig.fir 197948:4]
    reg source : UInt<1>, clock with :
      reset => (UInt<1>("h0"), source) @[Monitor.scala 387:22 chipyard.TestHarness.TinyRocketConfig.fir 197949:4]
    reg address : UInt<32>, clock with :
      reset => (UInt<1>("h0"), address) @[Monitor.scala 388:22 chipyard.TestHarness.TinyRocketConfig.fir 197950:4]
    node _T_951 = not(a_first) @[Monitor.scala 389:22 chipyard.TestHarness.TinyRocketConfig.fir 197951:4]
    node _T_952 = and(io_in_a_valid, _T_951) @[Monitor.scala 389:19 chipyard.TestHarness.TinyRocketConfig.fir 197952:4]
    node _T_953 = eq(io_in_a_bits_opcode, opcode) @[Monitor.scala 390:32 chipyard.TestHarness.TinyRocketConfig.fir 197954:6]
    node _T_955 = or(_T_953, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197956:6]
    node _T_956 = not(_T_955) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197957:6]
    node _T_957 = eq(io_in_a_bits_param, param) @[Monitor.scala 391:32 chipyard.TestHarness.TinyRocketConfig.fir 197962:6]
    node _T_959 = or(_T_957, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197964:6]
    node _T_960 = not(_T_959) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197965:6]
    node _T_961 = eq(io_in_a_bits_size, size) @[Monitor.scala 392:32 chipyard.TestHarness.TinyRocketConfig.fir 197970:6]
    node _T_963 = or(_T_961, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197972:6]
    node _T_964 = not(_T_963) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197973:6]
    node _T_965 = eq(io_in_a_bits_source, source) @[Monitor.scala 393:32 chipyard.TestHarness.TinyRocketConfig.fir 197978:6]
    node _T_967 = or(_T_965, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197980:6]
    node _T_968 = not(_T_967) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197981:6]
    node _T_969 = eq(io_in_a_bits_address, address) @[Monitor.scala 394:32 chipyard.TestHarness.TinyRocketConfig.fir 197986:6]
    node _T_971 = or(_T_969, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197988:6]
    node _T_972 = not(_T_971) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197989:6]
    node _T_974 = and(_a_first_T, a_first) @[Monitor.scala 396:20 chipyard.TestHarness.TinyRocketConfig.fir 197996:4]
    node _d_first_T = and(io_in_d_ready, io_in_d_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.TinyRocketConfig.fir 198004:4]
    node _d_first_beats1_decode_T_1 = dshlw(UInt<27>("hfff"), io_in_d_bits_size) @[package.scala 234:77 chipyard.TestHarness.TinyRocketConfig.fir 198006:4]
    node _d_first_beats1_decode_T_2 = bits(_d_first_beats1_decode_T_1, 11, 0) @[package.scala 234:82 chipyard.TestHarness.TinyRocketConfig.fir 198007:4]
    node _d_first_beats1_decode_T_3 = not(_d_first_beats1_decode_T_2) @[package.scala 234:46 chipyard.TestHarness.TinyRocketConfig.fir 198008:4]
    node d_first_beats1_decode = shr(_d_first_beats1_decode_T_3, 2) @[Edges.scala 219:59 chipyard.TestHarness.TinyRocketConfig.fir 198009:4]
    node d_first_beats1_opdata = bits(io_in_d_bits_opcode, 0, 0) @[Edges.scala 105:36 chipyard.TestHarness.TinyRocketConfig.fir 198010:4]
    node d_first_beats1 = mux(d_first_beats1_opdata, d_first_beats1_decode, UInt<10>("h0")) @[Edges.scala 220:14 chipyard.TestHarness.TinyRocketConfig.fir 198011:4]
    reg d_first_counter : UInt<10>, clock with :
      reset => (UInt<1>("h0"), d_first_counter) @[Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 198012:4]
    node _d_first_counter1_T = sub(d_first_counter, UInt<10>("h1")) @[Edges.scala 229:28 chipyard.TestHarness.TinyRocketConfig.fir 198013:4]
    node d_first_counter1 = tail(_d_first_counter1_T, 1) @[Edges.scala 229:28 chipyard.TestHarness.TinyRocketConfig.fir 198014:4]
    node d_first = eq(d_first_counter, UInt<10>("h0")) @[Edges.scala 230:25 chipyard.TestHarness.TinyRocketConfig.fir 198015:4]
    node _d_first_counter_T = mux(d_first, d_first_beats1, d_first_counter1) @[Edges.scala 235:21 chipyard.TestHarness.TinyRocketConfig.fir 198023:6]
    node _GEN_6 = mux(_d_first_T, _d_first_counter_T, d_first_counter) @[Edges.scala 234:17 chipyard.TestHarness.TinyRocketConfig.fir 198022:4 Edges.scala 235:15 chipyard.TestHarness.TinyRocketConfig.fir 198024:6 Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 198012:4]
    reg opcode_1 : UInt<3>, clock with :
      reset => (UInt<1>("h0"), opcode_1) @[Monitor.scala 535:22 chipyard.TestHarness.TinyRocketConfig.fir 198026:4]
    reg param_1 : UInt<2>, clock with :
      reset => (UInt<1>("h0"), param_1) @[Monitor.scala 536:22 chipyard.TestHarness.TinyRocketConfig.fir 198027:4]
    reg size_1 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), size_1) @[Monitor.scala 537:22 chipyard.TestHarness.TinyRocketConfig.fir 198028:4]
    reg source_1 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), source_1) @[Monitor.scala 538:22 chipyard.TestHarness.TinyRocketConfig.fir 198029:4]
    reg sink : UInt<1>, clock with :
      reset => (UInt<1>("h0"), sink) @[Monitor.scala 539:22 chipyard.TestHarness.TinyRocketConfig.fir 198030:4]
    reg denied : UInt<1>, clock with :
      reset => (UInt<1>("h0"), denied) @[Monitor.scala 540:22 chipyard.TestHarness.TinyRocketConfig.fir 198031:4]
    node _T_975 = not(d_first) @[Monitor.scala 541:22 chipyard.TestHarness.TinyRocketConfig.fir 198032:4]
    node _T_976 = and(io_in_d_valid, _T_975) @[Monitor.scala 541:19 chipyard.TestHarness.TinyRocketConfig.fir 198033:4]
    node _T_977 = eq(io_in_d_bits_opcode, opcode_1) @[Monitor.scala 542:29 chipyard.TestHarness.TinyRocketConfig.fir 198035:6]
    node _T_979 = or(_T_977, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 198037:6]
    node _T_980 = not(_T_979) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 198038:6]
    node _T_981 = eq(io_in_d_bits_param, param_1) @[Monitor.scala 543:29 chipyard.TestHarness.TinyRocketConfig.fir 198043:6]
    node _T_983 = or(_T_981, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 198045:6]
    node _T_984 = not(_T_983) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 198046:6]
    node _T_985 = eq(io_in_d_bits_size, size_1) @[Monitor.scala 544:29 chipyard.TestHarness.TinyRocketConfig.fir 198051:6]
    node _T_987 = or(_T_985, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 198053:6]
    node _T_988 = not(_T_987) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 198054:6]
    node _T_989 = eq(io_in_d_bits_source, source_1) @[Monitor.scala 545:29 chipyard.TestHarness.TinyRocketConfig.fir 198059:6]
    node _T_991 = or(_T_989, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 198061:6]
    node _T_992 = not(_T_991) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 198062:6]
    node _T_993 = eq(io_in_d_bits_sink, sink) @[Monitor.scala 546:29 chipyard.TestHarness.TinyRocketConfig.fir 198067:6]
    node _T_995 = or(_T_993, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 198069:6]
    node _T_996 = not(_T_995) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 198070:6]
    node _T_997 = eq(io_in_d_bits_denied, denied) @[Monitor.scala 547:29 chipyard.TestHarness.TinyRocketConfig.fir 198075:6]
    node _T_999 = or(_T_997, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 198077:6]
    node _T_1000 = not(_T_999) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 198078:6]
    node _T_1002 = and(_d_first_T, d_first) @[Monitor.scala 549:20 chipyard.TestHarness.TinyRocketConfig.fir 198085:4]
    reg inflight : UInt<1>, clock with :
      reset => (UInt<1>("h0"), inflight) @[Monitor.scala 611:27 chipyard.TestHarness.TinyRocketConfig.fir 198094:4]
    reg inflight_opcodes : UInt<4>, clock with :
      reset => (UInt<1>("h0"), inflight_opcodes) @[Monitor.scala 613:35 chipyard.TestHarness.TinyRocketConfig.fir 198095:4]
    reg inflight_sizes : UInt<8>, clock with :
      reset => (UInt<1>("h0"), inflight_sizes) @[Monitor.scala 615:33 chipyard.TestHarness.TinyRocketConfig.fir 198096:4]
    reg a_first_counter_1 : UInt<10>, clock with :
      reset => (UInt<1>("h0"), a_first_counter_1) @[Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 198106:4]
    node _a_first_counter1_T_1 = sub(a_first_counter_1, UInt<10>("h1")) @[Edges.scala 229:28 chipyard.TestHarness.TinyRocketConfig.fir 198107:4]
    node a_first_counter1_1 = tail(_a_first_counter1_T_1, 1) @[Edges.scala 229:28 chipyard.TestHarness.TinyRocketConfig.fir 198108:4]
    node a_first_1 = eq(a_first_counter_1, UInt<10>("h0")) @[Edges.scala 230:25 chipyard.TestHarness.TinyRocketConfig.fir 198109:4]
    node _a_first_counter_T_1 = mux(a_first_1, a_first_beats1, a_first_counter1_1) @[Edges.scala 235:21 chipyard.TestHarness.TinyRocketConfig.fir 198117:6]
    node _GEN_13 = mux(_a_first_T, _a_first_counter_T_1, a_first_counter_1) @[Edges.scala 234:17 chipyard.TestHarness.TinyRocketConfig.fir 198116:4 Edges.scala 235:15 chipyard.TestHarness.TinyRocketConfig.fir 198118:6 Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 198106:4]
    reg d_first_counter_1 : UInt<10>, clock with :
      reset => (UInt<1>("h0"), d_first_counter_1) @[Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 198128:4]
    node _d_first_counter1_T_1 = sub(d_first_counter_1, UInt<10>("h1")) @[Edges.scala 229:28 chipyard.TestHarness.TinyRocketConfig.fir 198129:4]
    node d_first_counter1_1 = tail(_d_first_counter1_T_1, 1) @[Edges.scala 229:28 chipyard.TestHarness.TinyRocketConfig.fir 198130:4]
    node d_first_1 = eq(d_first_counter_1, UInt<10>("h0")) @[Edges.scala 230:25 chipyard.TestHarness.TinyRocketConfig.fir 198131:4]
    node _d_first_counter_T_1 = mux(d_first_1, d_first_beats1, d_first_counter1_1) @[Edges.scala 235:21 chipyard.TestHarness.TinyRocketConfig.fir 198139:6]
    node _GEN_14 = mux(_d_first_T, _d_first_counter_T_1, d_first_counter_1) @[Edges.scala 234:17 chipyard.TestHarness.TinyRocketConfig.fir 198138:4 Edges.scala 235:15 chipyard.TestHarness.TinyRocketConfig.fir 198140:6 Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 198128:4]
    node _GEN_72 = shl(io_in_d_bits_source, 2) @[Monitor.scala 634:69 chipyard.TestHarness.TinyRocketConfig.fir 198152:4]
    node _a_opcode_lookup_T = pad(_GEN_72, 4) @[Monitor.scala 634:69 chipyard.TestHarness.TinyRocketConfig.fir 198152:4]
    node _a_opcode_lookup_T_1 = dshr(inflight_opcodes, _a_opcode_lookup_T) @[Monitor.scala 634:44 chipyard.TestHarness.TinyRocketConfig.fir 198153:4]
    node _a_opcode_lookup_T_4 = sub(UInt<16>("h10"), UInt<16>("h1")) @[Monitor.scala 609:57 chipyard.TestHarness.TinyRocketConfig.fir 198156:4]
    node _a_opcode_lookup_T_5 = tail(_a_opcode_lookup_T_4, 1) @[Monitor.scala 609:57 chipyard.TestHarness.TinyRocketConfig.fir 198157:4]
    node _GEN_73 = pad(_a_opcode_lookup_T_1, 16) @[Monitor.scala 634:97 chipyard.TestHarness.TinyRocketConfig.fir 198158:4]
    node _a_opcode_lookup_T_6 = and(_GEN_73, _a_opcode_lookup_T_5) @[Monitor.scala 634:97 chipyard.TestHarness.TinyRocketConfig.fir 198158:4]
    node _GEN_74 = shr(_a_opcode_lookup_T_6, 1) @[Monitor.scala 634:152 chipyard.TestHarness.TinyRocketConfig.fir 198159:4]
    node _a_opcode_lookup_T_7 = pad(_GEN_74, 16) @[Monitor.scala 634:152 chipyard.TestHarness.TinyRocketConfig.fir 198159:4]
    node _a_size_lookup_T = shl(io_in_d_bits_source, 3) @[Monitor.scala 638:65 chipyard.TestHarness.TinyRocketConfig.fir 198163:4]
    node _a_size_lookup_T_1 = dshr(inflight_sizes, _a_size_lookup_T) @[Monitor.scala 638:40 chipyard.TestHarness.TinyRocketConfig.fir 198164:4]
    node _a_size_lookup_T_4 = sub(UInt<16>("h100"), UInt<16>("h1")) @[Monitor.scala 609:57 chipyard.TestHarness.TinyRocketConfig.fir 198167:4]
    node _a_size_lookup_T_5 = tail(_a_size_lookup_T_4, 1) @[Monitor.scala 609:57 chipyard.TestHarness.TinyRocketConfig.fir 198168:4]
    node _GEN_75 = pad(_a_size_lookup_T_1, 16) @[Monitor.scala 638:91 chipyard.TestHarness.TinyRocketConfig.fir 198169:4]
    node _a_size_lookup_T_6 = and(_GEN_75, _a_size_lookup_T_5) @[Monitor.scala 638:91 chipyard.TestHarness.TinyRocketConfig.fir 198169:4]
    node _GEN_76 = shr(_a_size_lookup_T_6, 1) @[Monitor.scala 638:144 chipyard.TestHarness.TinyRocketConfig.fir 198170:4]
    node _a_size_lookup_T_7 = pad(_GEN_76, 16) @[Monitor.scala 638:144 chipyard.TestHarness.TinyRocketConfig.fir 198170:4]
    node _T_1003 = and(io_in_a_valid, a_first_1) @[Monitor.scala 648:26 chipyard.TestHarness.TinyRocketConfig.fir 198194:4]
    node _a_set_wo_ready_T = dshlw(UInt<2>("h1"), io_in_a_bits_source) @[OneHot.scala 58:35 chipyard.TestHarness.TinyRocketConfig.fir 198197:6]
    node _GEN_15 = mux(_T_1003, _a_set_wo_ready_T, UInt<2>("h0")) @[Monitor.scala 648:71 chipyard.TestHarness.TinyRocketConfig.fir 198196:4 Monitor.scala 649:22 chipyard.TestHarness.TinyRocketConfig.fir 198198:6 chipyard.TestHarness.TinyRocketConfig.fir 198145:4]
    node _T_1006 = and(_a_first_T, a_first_1) @[Monitor.scala 652:27 chipyard.TestHarness.TinyRocketConfig.fir 198201:4]
    node _a_opcodes_set_interm_T = shl(io_in_a_bits_opcode, 1) @[Monitor.scala 654:53 chipyard.TestHarness.TinyRocketConfig.fir 198206:6]
    node _a_opcodes_set_interm_T_1 = or(_a_opcodes_set_interm_T, UInt<4>("h1")) @[Monitor.scala 654:61 chipyard.TestHarness.TinyRocketConfig.fir 198207:6]
    node _a_sizes_set_interm_T = shl(io_in_a_bits_size, 1) @[Monitor.scala 655:51 chipyard.TestHarness.TinyRocketConfig.fir 198209:6]
    node _a_sizes_set_interm_T_1 = or(_a_sizes_set_interm_T, UInt<5>("h1")) @[Monitor.scala 655:59 chipyard.TestHarness.TinyRocketConfig.fir 198210:6]
    node _GEN_77 = shl(io_in_a_bits_source, 2) @[Monitor.scala 656:79 chipyard.TestHarness.TinyRocketConfig.fir 198212:6]
    node _a_opcodes_set_T = pad(_GEN_77, 4) @[Monitor.scala 656:79 chipyard.TestHarness.TinyRocketConfig.fir 198212:6]
    node a_opcodes_set_interm = mux(_T_1006, _a_opcodes_set_interm_T_1, UInt<4>("h0")) @[Monitor.scala 652:72 chipyard.TestHarness.TinyRocketConfig.fir 198203:4 Monitor.scala 654:28 chipyard.TestHarness.TinyRocketConfig.fir 198208:6 chipyard.TestHarness.TinyRocketConfig.fir 198191:4]
    node _GEN_78 = pad(a_opcodes_set_interm, 19) @[Monitor.scala 656:54 chipyard.TestHarness.TinyRocketConfig.fir 198213:6]
    node _a_opcodes_set_T_1 = dshlw(_GEN_78, _a_opcodes_set_T) @[Monitor.scala 656:54 chipyard.TestHarness.TinyRocketConfig.fir 198213:6]
    node _a_sizes_set_T = shl(io_in_a_bits_source, 3) @[Monitor.scala 657:77 chipyard.TestHarness.TinyRocketConfig.fir 198215:6]
    node a_sizes_set_interm = mux(_T_1006, _a_sizes_set_interm_T_1, UInt<5>("h0")) @[Monitor.scala 652:72 chipyard.TestHarness.TinyRocketConfig.fir 198203:4 Monitor.scala 655:28 chipyard.TestHarness.TinyRocketConfig.fir 198211:6 chipyard.TestHarness.TinyRocketConfig.fir 198193:4]
    node _GEN_79 = pad(a_sizes_set_interm, 20) @[Monitor.scala 657:52 chipyard.TestHarness.TinyRocketConfig.fir 198216:6]
    node _a_sizes_set_T_1 = dshlw(_GEN_79, _a_sizes_set_T) @[Monitor.scala 657:52 chipyard.TestHarness.TinyRocketConfig.fir 198216:6]
    node _T_1008 = dshr(inflight, io_in_a_bits_source) @[Monitor.scala 658:26 chipyard.TestHarness.TinyRocketConfig.fir 198218:6]
    node _T_1010 = not(_T_1008) @[Monitor.scala 658:17 chipyard.TestHarness.TinyRocketConfig.fir 198220:6]
    node _T_1012 = or(_T_1010, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 198222:6]
    node _T_1013 = not(_T_1012) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 198223:6]
    node _GEN_16 = mux(_T_1006, _a_set_wo_ready_T, UInt<2>("h0")) @[Monitor.scala 652:72 chipyard.TestHarness.TinyRocketConfig.fir 198203:4 Monitor.scala 653:28 chipyard.TestHarness.TinyRocketConfig.fir 198205:6 chipyard.TestHarness.TinyRocketConfig.fir 198143:4]
    node _GEN_19 = mux(_T_1006, _a_opcodes_set_T_1, UInt<19>("h0")) @[Monitor.scala 652:72 chipyard.TestHarness.TinyRocketConfig.fir 198203:4 Monitor.scala 656:28 chipyard.TestHarness.TinyRocketConfig.fir 198214:6 chipyard.TestHarness.TinyRocketConfig.fir 198147:4]
    node _GEN_20 = mux(_T_1006, _a_sizes_set_T_1, UInt<20>("h0")) @[Monitor.scala 652:72 chipyard.TestHarness.TinyRocketConfig.fir 198203:4 Monitor.scala 657:28 chipyard.TestHarness.TinyRocketConfig.fir 198217:6 chipyard.TestHarness.TinyRocketConfig.fir 198149:4]
    node _T_1014 = and(io_in_d_valid, d_first_1) @[Monitor.scala 671:26 chipyard.TestHarness.TinyRocketConfig.fir 198238:4]
    node _T_1016 = not(_T_810) @[Monitor.scala 671:74 chipyard.TestHarness.TinyRocketConfig.fir 198240:4]
    node _T_1017 = and(_T_1014, _T_1016) @[Monitor.scala 671:71 chipyard.TestHarness.TinyRocketConfig.fir 198241:4]
    node _d_clr_wo_ready_T = dshlw(UInt<2>("h1"), io_in_d_bits_source) @[OneHot.scala 58:35 chipyard.TestHarness.TinyRocketConfig.fir 198243:6]
    node _GEN_21 = mux(_T_1017, _d_clr_wo_ready_T, UInt<2>("h0")) @[Monitor.scala 671:90 chipyard.TestHarness.TinyRocketConfig.fir 198242:4 Monitor.scala 672:22 chipyard.TestHarness.TinyRocketConfig.fir 198244:6 chipyard.TestHarness.TinyRocketConfig.fir 198232:4]
    node _T_1019 = and(_d_first_T, d_first_1) @[Monitor.scala 675:27 chipyard.TestHarness.TinyRocketConfig.fir 198247:4]
    node _T_1022 = and(_T_1019, _T_1016) @[Monitor.scala 675:72 chipyard.TestHarness.TinyRocketConfig.fir 198250:4]
    node _GEN_81 = pad(_a_opcode_lookup_T_5, 31) @[Monitor.scala 677:76 chipyard.TestHarness.TinyRocketConfig.fir 198259:6]
    node _d_opcodes_clr_T_5 = dshlw(_GEN_81, _a_opcode_lookup_T) @[Monitor.scala 677:76 chipyard.TestHarness.TinyRocketConfig.fir 198259:6]
    node _GEN_82 = pad(_a_size_lookup_T_5, 31) @[Monitor.scala 678:74 chipyard.TestHarness.TinyRocketConfig.fir 198266:6]
    node _d_sizes_clr_T_5 = dshlw(_GEN_82, _a_size_lookup_T) @[Monitor.scala 678:74 chipyard.TestHarness.TinyRocketConfig.fir 198266:6]
    node _GEN_22 = mux(_T_1022, _d_clr_wo_ready_T, UInt<2>("h0")) @[Monitor.scala 675:91 chipyard.TestHarness.TinyRocketConfig.fir 198251:4 Monitor.scala 676:21 chipyard.TestHarness.TinyRocketConfig.fir 198253:6 chipyard.TestHarness.TinyRocketConfig.fir 198230:4]
    node _GEN_23 = mux(_T_1022, _d_opcodes_clr_T_5, UInt<31>("h0")) @[Monitor.scala 675:91 chipyard.TestHarness.TinyRocketConfig.fir 198251:4 Monitor.scala 677:21 chipyard.TestHarness.TinyRocketConfig.fir 198260:6 chipyard.TestHarness.TinyRocketConfig.fir 198234:4]
    node _GEN_24 = mux(_T_1022, _d_sizes_clr_T_5, UInt<31>("h0")) @[Monitor.scala 675:91 chipyard.TestHarness.TinyRocketConfig.fir 198251:4 Monitor.scala 678:21 chipyard.TestHarness.TinyRocketConfig.fir 198267:6 chipyard.TestHarness.TinyRocketConfig.fir 198236:4]
    node _same_cycle_resp_T_2 = eq(io_in_a_bits_source, io_in_d_bits_source) @[Monitor.scala 681:113 chipyard.TestHarness.TinyRocketConfig.fir 198276:6]
    node same_cycle_resp = and(_T_1003, _same_cycle_resp_T_2) @[Monitor.scala 681:88 chipyard.TestHarness.TinyRocketConfig.fir 198277:6]
    node _T_1027 = dshr(inflight, io_in_d_bits_source) @[Monitor.scala 682:25 chipyard.TestHarness.TinyRocketConfig.fir 198278:6]
    node _T_1029 = or(_T_1027, same_cycle_resp) @[Monitor.scala 682:49 chipyard.TestHarness.TinyRocketConfig.fir 198280:6]
    node _T_1031 = or(_T_1029, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 198282:6]
    node _T_1032 = not(_T_1031) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 198283:6]
    node _GEN_27 = mux(eq(UInt<3>("h2"), io_in_a_bits_opcode), UInt<3>("h1"), UInt<3>("h0")) @[Monitor.scala 685:38 chipyard.TestHarness.TinyRocketConfig.fir 198289:8 Monitor.scala 685:38 chipyard.TestHarness.TinyRocketConfig.fir 198289:8]
    node _GEN_28 = mux(eq(UInt<3>("h3"), io_in_a_bits_opcode), UInt<3>("h1"), _GEN_27) @[Monitor.scala 685:38 chipyard.TestHarness.TinyRocketConfig.fir 198289:8 Monitor.scala 685:38 chipyard.TestHarness.TinyRocketConfig.fir 198289:8]
    node _GEN_29 = mux(eq(UInt<3>("h4"), io_in_a_bits_opcode), UInt<3>("h1"), _GEN_28) @[Monitor.scala 685:38 chipyard.TestHarness.TinyRocketConfig.fir 198289:8 Monitor.scala 685:38 chipyard.TestHarness.TinyRocketConfig.fir 198289:8]
    node _GEN_30 = mux(eq(UInt<3>("h5"), io_in_a_bits_opcode), UInt<3>("h2"), _GEN_29) @[Monitor.scala 685:38 chipyard.TestHarness.TinyRocketConfig.fir 198289:8 Monitor.scala 685:38 chipyard.TestHarness.TinyRocketConfig.fir 198289:8]
    node _GEN_31 = mux(eq(UInt<3>("h6"), io_in_a_bits_opcode), UInt<3>("h4"), _GEN_30) @[Monitor.scala 685:38 chipyard.TestHarness.TinyRocketConfig.fir 198289:8 Monitor.scala 685:38 chipyard.TestHarness.TinyRocketConfig.fir 198289:8]
    node _GEN_32 = mux(eq(UInt<3>("h7"), io_in_a_bits_opcode), UInt<3>("h4"), _GEN_31) @[Monitor.scala 685:38 chipyard.TestHarness.TinyRocketConfig.fir 198289:8 Monitor.scala 685:38 chipyard.TestHarness.TinyRocketConfig.fir 198289:8]
    node _T_1033 = eq(io_in_d_bits_opcode, _GEN_32) @[Monitor.scala 685:38 chipyard.TestHarness.TinyRocketConfig.fir 198289:8]
    node _GEN_39 = mux(eq(UInt<3>("h6"), io_in_a_bits_opcode), UInt<3>("h5"), _GEN_30) @[Monitor.scala 686:39 chipyard.TestHarness.TinyRocketConfig.fir 198290:8 Monitor.scala 686:39 chipyard.TestHarness.TinyRocketConfig.fir 198290:8]
    node _GEN_40 = mux(eq(UInt<3>("h7"), io_in_a_bits_opcode), UInt<3>("h4"), _GEN_39) @[Monitor.scala 686:39 chipyard.TestHarness.TinyRocketConfig.fir 198290:8 Monitor.scala 686:39 chipyard.TestHarness.TinyRocketConfig.fir 198290:8]
    node _T_1034 = eq(io_in_d_bits_opcode, _GEN_40) @[Monitor.scala 686:39 chipyard.TestHarness.TinyRocketConfig.fir 198290:8]
    node _T_1035 = or(_T_1033, _T_1034) @[Monitor.scala 685:77 chipyard.TestHarness.TinyRocketConfig.fir 198291:8]
    node _T_1037 = or(_T_1035, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 198293:8]
    node _T_1038 = not(_T_1037) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 198294:8]
    node _T_1039 = eq(io_in_a_bits_size, io_in_d_bits_size) @[Monitor.scala 687:36 chipyard.TestHarness.TinyRocketConfig.fir 198299:8]
    node _T_1041 = or(_T_1039, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 198301:8]
    node _T_1042 = not(_T_1041) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 198302:8]
    node a_opcode_lookup = bits(_a_opcode_lookup_T_7, 3, 0) @[chipyard.TestHarness.TinyRocketConfig.fir 198150:4 Monitor.scala 634:21 chipyard.TestHarness.TinyRocketConfig.fir 198160:4]
    node _T_1043 = bits(a_opcode_lookup, 2, 0) @[chipyard.TestHarness.TinyRocketConfig.fir 198309:8]
    node _GEN_43 = mux(eq(UInt<3>("h2"), _T_1043), UInt<3>("h1"), UInt<3>("h0")) @[Monitor.scala 689:38 chipyard.TestHarness.TinyRocketConfig.fir 198310:8 Monitor.scala 689:38 chipyard.TestHarness.TinyRocketConfig.fir 198310:8]
    node _GEN_44 = mux(eq(UInt<3>("h3"), _T_1043), UInt<3>("h1"), _GEN_43) @[Monitor.scala 689:38 chipyard.TestHarness.TinyRocketConfig.fir 198310:8 Monitor.scala 689:38 chipyard.TestHarness.TinyRocketConfig.fir 198310:8]
    node _GEN_45 = mux(eq(UInt<3>("h4"), _T_1043), UInt<3>("h1"), _GEN_44) @[Monitor.scala 689:38 chipyard.TestHarness.TinyRocketConfig.fir 198310:8 Monitor.scala 689:38 chipyard.TestHarness.TinyRocketConfig.fir 198310:8]
    node _GEN_46 = mux(eq(UInt<3>("h5"), _T_1043), UInt<3>("h2"), _GEN_45) @[Monitor.scala 689:38 chipyard.TestHarness.TinyRocketConfig.fir 198310:8 Monitor.scala 689:38 chipyard.TestHarness.TinyRocketConfig.fir 198310:8]
    node _GEN_47 = mux(eq(UInt<3>("h6"), _T_1043), UInt<3>("h4"), _GEN_46) @[Monitor.scala 689:38 chipyard.TestHarness.TinyRocketConfig.fir 198310:8 Monitor.scala 689:38 chipyard.TestHarness.TinyRocketConfig.fir 198310:8]
    node _GEN_48 = mux(eq(UInt<3>("h7"), _T_1043), UInt<3>("h4"), _GEN_47) @[Monitor.scala 689:38 chipyard.TestHarness.TinyRocketConfig.fir 198310:8 Monitor.scala 689:38 chipyard.TestHarness.TinyRocketConfig.fir 198310:8]
    node _T_1044 = eq(io_in_d_bits_opcode, _GEN_48) @[Monitor.scala 689:38 chipyard.TestHarness.TinyRocketConfig.fir 198310:8]
    node _GEN_55 = mux(eq(UInt<3>("h6"), _T_1043), UInt<3>("h5"), _GEN_46) @[Monitor.scala 690:38 chipyard.TestHarness.TinyRocketConfig.fir 198312:8 Monitor.scala 690:38 chipyard.TestHarness.TinyRocketConfig.fir 198312:8]
    node _GEN_56 = mux(eq(UInt<3>("h7"), _T_1043), UInt<3>("h4"), _GEN_55) @[Monitor.scala 690:38 chipyard.TestHarness.TinyRocketConfig.fir 198312:8 Monitor.scala 690:38 chipyard.TestHarness.TinyRocketConfig.fir 198312:8]
    node _T_1046 = eq(io_in_d_bits_opcode, _GEN_56) @[Monitor.scala 690:38 chipyard.TestHarness.TinyRocketConfig.fir 198312:8]
    node _T_1047 = or(_T_1044, _T_1046) @[Monitor.scala 689:72 chipyard.TestHarness.TinyRocketConfig.fir 198313:8]
    node _T_1049 = or(_T_1047, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 198315:8]
    node _T_1050 = not(_T_1049) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 198316:8]
    node a_size_lookup = bits(_a_size_lookup_T_7, 7, 0) @[chipyard.TestHarness.TinyRocketConfig.fir 198161:4 Monitor.scala 638:19 chipyard.TestHarness.TinyRocketConfig.fir 198171:4]
    node _GEN_83 = pad(io_in_d_bits_size, 8) @[Monitor.scala 691:36 chipyard.TestHarness.TinyRocketConfig.fir 198321:8]
    node _T_1051 = eq(_GEN_83, a_size_lookup) @[Monitor.scala 691:36 chipyard.TestHarness.TinyRocketConfig.fir 198321:8]
    node _T_1053 = or(_T_1051, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 198323:8]
    node _T_1054 = not(_T_1053) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 198324:8]
    node _T_1056 = and(_T_1014, a_first_1) @[Monitor.scala 694:36 chipyard.TestHarness.TinyRocketConfig.fir 198332:4]
    node _T_1057 = and(_T_1056, io_in_a_valid) @[Monitor.scala 694:47 chipyard.TestHarness.TinyRocketConfig.fir 198333:4]
    node _T_1059 = and(_T_1057, _same_cycle_resp_T_2) @[Monitor.scala 694:65 chipyard.TestHarness.TinyRocketConfig.fir 198335:4]
    node _T_1061 = and(_T_1059, _T_1016) @[Monitor.scala 694:116 chipyard.TestHarness.TinyRocketConfig.fir 198337:4]
    node _T_1062 = not(io_in_d_ready) @[Monitor.scala 695:15 chipyard.TestHarness.TinyRocketConfig.fir 198339:6]
    node _T_1063 = or(_T_1062, io_in_a_ready) @[Monitor.scala 695:32 chipyard.TestHarness.TinyRocketConfig.fir 198340:6]
    node _T_1065 = or(_T_1063, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 198342:6]
    node _T_1066 = not(_T_1065) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 198343:6]
    node a_set_wo_ready = bits(_GEN_15, 0, 0) @[chipyard.TestHarness.TinyRocketConfig.fir 198144:4]
    node d_clr_wo_ready = bits(_GEN_21, 0, 0) @[chipyard.TestHarness.TinyRocketConfig.fir 198231:4]
    node _T_1067 = neq(a_set_wo_ready, d_clr_wo_ready) @[Monitor.scala 699:29 chipyard.TestHarness.TinyRocketConfig.fir 198349:4]
    node _T_1068 = orr(a_set_wo_ready) @[Monitor.scala 699:67 chipyard.TestHarness.TinyRocketConfig.fir 198350:4]
    node _T_1069 = not(_T_1068) @[Monitor.scala 699:51 chipyard.TestHarness.TinyRocketConfig.fir 198351:4]
    node _T_1070 = or(_T_1067, _T_1069) @[Monitor.scala 699:48 chipyard.TestHarness.TinyRocketConfig.fir 198352:4]
    node _T_1072 = or(_T_1070, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 198354:4]
    node _T_1073 = not(_T_1072) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 198355:4]
    node a_set = bits(_GEN_16, 0, 0) @[chipyard.TestHarness.TinyRocketConfig.fir 198142:4]
    node _inflight_T = or(inflight, a_set) @[Monitor.scala 702:27 chipyard.TestHarness.TinyRocketConfig.fir 198360:4]
    node d_clr = bits(_GEN_22, 0, 0) @[chipyard.TestHarness.TinyRocketConfig.fir 198229:4]
    node _inflight_T_1 = not(d_clr) @[Monitor.scala 702:38 chipyard.TestHarness.TinyRocketConfig.fir 198361:4]
    node _inflight_T_2 = and(_inflight_T, _inflight_T_1) @[Monitor.scala 702:36 chipyard.TestHarness.TinyRocketConfig.fir 198362:4]
    node a_opcodes_set = bits(_GEN_19, 3, 0) @[chipyard.TestHarness.TinyRocketConfig.fir 198146:4]
    node _inflight_opcodes_T = or(inflight_opcodes, a_opcodes_set) @[Monitor.scala 703:43 chipyard.TestHarness.TinyRocketConfig.fir 198364:4]
    node d_opcodes_clr = bits(_GEN_23, 3, 0) @[chipyard.TestHarness.TinyRocketConfig.fir 198233:4]
    node _inflight_opcodes_T_1 = not(d_opcodes_clr) @[Monitor.scala 703:62 chipyard.TestHarness.TinyRocketConfig.fir 198365:4]
    node _inflight_opcodes_T_2 = and(_inflight_opcodes_T, _inflight_opcodes_T_1) @[Monitor.scala 703:60 chipyard.TestHarness.TinyRocketConfig.fir 198366:4]
    node a_sizes_set = bits(_GEN_20, 7, 0) @[chipyard.TestHarness.TinyRocketConfig.fir 198148:4]
    node _inflight_sizes_T = or(inflight_sizes, a_sizes_set) @[Monitor.scala 704:39 chipyard.TestHarness.TinyRocketConfig.fir 198368:4]
    node d_sizes_clr = bits(_GEN_24, 7, 0) @[chipyard.TestHarness.TinyRocketConfig.fir 198235:4]
    node _inflight_sizes_T_1 = not(d_sizes_clr) @[Monitor.scala 704:56 chipyard.TestHarness.TinyRocketConfig.fir 198369:4]
    node _inflight_sizes_T_2 = and(_inflight_sizes_T, _inflight_sizes_T_1) @[Monitor.scala 704:54 chipyard.TestHarness.TinyRocketConfig.fir 198370:4]
    reg watchdog : UInt<32>, clock with :
      reset => (UInt<1>("h0"), watchdog) @[Monitor.scala 706:27 chipyard.TestHarness.TinyRocketConfig.fir 198372:4]
    node _T_1074 = orr(inflight) @[Monitor.scala 709:26 chipyard.TestHarness.TinyRocketConfig.fir 198375:4]
    node _T_1075 = not(_T_1074) @[Monitor.scala 709:16 chipyard.TestHarness.TinyRocketConfig.fir 198376:4]
    node _T_1076 = eq(plusarg_reader.out, UInt<32>("h0")) @[Monitor.scala 709:39 chipyard.TestHarness.TinyRocketConfig.fir 198377:4]
    node _T_1077 = or(_T_1075, _T_1076) @[Monitor.scala 709:30 chipyard.TestHarness.TinyRocketConfig.fir 198378:4]
    node _T_1078 = lt(watchdog, plusarg_reader.out) @[Monitor.scala 709:59 chipyard.TestHarness.TinyRocketConfig.fir 198379:4]
    node _T_1079 = or(_T_1077, _T_1078) @[Monitor.scala 709:47 chipyard.TestHarness.TinyRocketConfig.fir 198380:4]
    node _T_1081 = or(_T_1079, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 198382:4]
    node _T_1082 = not(_T_1081) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 198383:4]
    node _watchdog_T = add(watchdog, UInt<32>("h1")) @[Monitor.scala 711:26 chipyard.TestHarness.TinyRocketConfig.fir 198388:4]
    node _watchdog_T_1 = tail(_watchdog_T, 1) @[Monitor.scala 711:26 chipyard.TestHarness.TinyRocketConfig.fir 198389:4]
    node _T_1085 = or(_a_first_T, _d_first_T) @[Monitor.scala 712:27 chipyard.TestHarness.TinyRocketConfig.fir 198393:4]
    node _GEN_57 = mux(_T_1085, UInt<32>("h0"), _watchdog_T_1) @[Monitor.scala 712:47 chipyard.TestHarness.TinyRocketConfig.fir 198394:4 Monitor.scala 712:58 chipyard.TestHarness.TinyRocketConfig.fir 198395:6 Monitor.scala 711:14 chipyard.TestHarness.TinyRocketConfig.fir 198390:4]
    reg inflight_sizes_1 : UInt<8>, clock with :
      reset => (UInt<1>("h0"), inflight_sizes_1) @[Monitor.scala 725:35 chipyard.TestHarness.TinyRocketConfig.fir 198399:4]
    reg d_first_counter_2 : UInt<10>, clock with :
      reset => (UInt<1>("h0"), d_first_counter_2) @[Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 198434:4]
    node _d_first_counter1_T_2 = sub(d_first_counter_2, UInt<10>("h1")) @[Edges.scala 229:28 chipyard.TestHarness.TinyRocketConfig.fir 198435:4]
    node d_first_counter1_2 = tail(_d_first_counter1_T_2, 1) @[Edges.scala 229:28 chipyard.TestHarness.TinyRocketConfig.fir 198436:4]
    node d_first_2 = eq(d_first_counter_2, UInt<10>("h0")) @[Edges.scala 230:25 chipyard.TestHarness.TinyRocketConfig.fir 198437:4]
    node _d_first_counter_T_2 = mux(d_first_2, d_first_beats1, d_first_counter1_2) @[Edges.scala 235:21 chipyard.TestHarness.TinyRocketConfig.fir 198445:6]
    node _GEN_59 = mux(_d_first_T, _d_first_counter_T_2, d_first_counter_2) @[Edges.scala 234:17 chipyard.TestHarness.TinyRocketConfig.fir 198444:4 Edges.scala 235:15 chipyard.TestHarness.TinyRocketConfig.fir 198446:6 Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 198434:4]
    node _c_size_lookup_T_1 = dshr(inflight_sizes_1, _a_size_lookup_T) @[Monitor.scala 747:42 chipyard.TestHarness.TinyRocketConfig.fir 198470:4]
    node _GEN_87 = pad(_c_size_lookup_T_1, 16) @[Monitor.scala 747:93 chipyard.TestHarness.TinyRocketConfig.fir 198475:4]
    node _c_size_lookup_T_6 = and(_GEN_87, _a_size_lookup_T_5) @[Monitor.scala 747:93 chipyard.TestHarness.TinyRocketConfig.fir 198475:4]
    node _GEN_88 = shr(_c_size_lookup_T_6, 1) @[Monitor.scala 747:146 chipyard.TestHarness.TinyRocketConfig.fir 198476:4]
    node _c_size_lookup_T_7 = pad(_GEN_88, 16) @[Monitor.scala 747:146 chipyard.TestHarness.TinyRocketConfig.fir 198476:4]
    node _T_1103 = and(io_in_d_valid, d_first_2) @[Monitor.scala 779:26 chipyard.TestHarness.TinyRocketConfig.fir 198554:4]
    node _T_1105 = and(_T_1103, _T_810) @[Monitor.scala 779:71 chipyard.TestHarness.TinyRocketConfig.fir 198556:4]
    node _T_1107 = and(_d_first_T, d_first_2) @[Monitor.scala 783:27 chipyard.TestHarness.TinyRocketConfig.fir 198562:4]
    node _T_1109 = and(_T_1107, _T_810) @[Monitor.scala 783:72 chipyard.TestHarness.TinyRocketConfig.fir 198564:4]
    node _GEN_69 = mux(_T_1109, _d_sizes_clr_T_5, UInt<31>("h0")) @[Monitor.scala 783:90 chipyard.TestHarness.TinyRocketConfig.fir 198565:4 Monitor.scala 786:21 chipyard.TestHarness.TinyRocketConfig.fir 198581:6 chipyard.TestHarness.TinyRocketConfig.fir 198552:4]
    node _T_1113 = dshr(UInt<1>("h0"), io_in_d_bits_source) @[Monitor.scala 791:25 chipyard.TestHarness.TinyRocketConfig.fir 198600:6]
    node _T_1117 = or(_T_1113, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 198604:6]
    node _T_1118 = not(_T_1117) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 198605:6]
    node c_size_lookup = bits(_c_size_lookup_T_7, 7, 0) @[chipyard.TestHarness.TinyRocketConfig.fir 198458:4 Monitor.scala 747:21 chipyard.TestHarness.TinyRocketConfig.fir 198477:4]
    node _T_1123 = eq(_GEN_83, c_size_lookup) @[Monitor.scala 795:36 chipyard.TestHarness.TinyRocketConfig.fir 198623:8]
    node _T_1125 = or(_T_1123, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 198625:8]
    node _T_1126 = not(_T_1125) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 198626:8]
    node d_sizes_clr_1 = bits(_GEN_69, 7, 0) @[chipyard.TestHarness.TinyRocketConfig.fir 198551:4]
    node _inflight_sizes_T_4 = not(d_sizes_clr_1) @[Monitor.scala 811:58 chipyard.TestHarness.TinyRocketConfig.fir 198676:4]
    node _inflight_sizes_T_5 = and(inflight_sizes_1, _inflight_sizes_T_4) @[Monitor.scala 811:56 chipyard.TestHarness.TinyRocketConfig.fir 198677:4]
    a_first_counter <= mux(reset, UInt<10>("h0"), _GEN_0) @[Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 197932:4 Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 197932:4]
    opcode <= mux(_T_974, io_in_a_bits_opcode, opcode) @[Monitor.scala 396:32 chipyard.TestHarness.TinyRocketConfig.fir 197997:4 Monitor.scala 397:15 chipyard.TestHarness.TinyRocketConfig.fir 197998:6 Monitor.scala 384:22 chipyard.TestHarness.TinyRocketConfig.fir 197946:4]
    param <= mux(_T_974, io_in_a_bits_param, param) @[Monitor.scala 396:32 chipyard.TestHarness.TinyRocketConfig.fir 197997:4 Monitor.scala 398:15 chipyard.TestHarness.TinyRocketConfig.fir 197999:6 Monitor.scala 385:22 chipyard.TestHarness.TinyRocketConfig.fir 197947:4]
    size <= mux(_T_974, io_in_a_bits_size, size) @[Monitor.scala 396:32 chipyard.TestHarness.TinyRocketConfig.fir 197997:4 Monitor.scala 399:15 chipyard.TestHarness.TinyRocketConfig.fir 198000:6 Monitor.scala 386:22 chipyard.TestHarness.TinyRocketConfig.fir 197948:4]
    source <= mux(_T_974, io_in_a_bits_source, source) @[Monitor.scala 396:32 chipyard.TestHarness.TinyRocketConfig.fir 197997:4 Monitor.scala 400:15 chipyard.TestHarness.TinyRocketConfig.fir 198001:6 Monitor.scala 387:22 chipyard.TestHarness.TinyRocketConfig.fir 197949:4]
    address <= mux(_T_974, io_in_a_bits_address, address) @[Monitor.scala 396:32 chipyard.TestHarness.TinyRocketConfig.fir 197997:4 Monitor.scala 401:15 chipyard.TestHarness.TinyRocketConfig.fir 198002:6 Monitor.scala 388:22 chipyard.TestHarness.TinyRocketConfig.fir 197950:4]
    d_first_counter <= mux(reset, UInt<10>("h0"), _GEN_6) @[Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 198012:4 Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 198012:4]
    opcode_1 <= mux(_T_1002, io_in_d_bits_opcode, opcode_1) @[Monitor.scala 549:32 chipyard.TestHarness.TinyRocketConfig.fir 198086:4 Monitor.scala 550:15 chipyard.TestHarness.TinyRocketConfig.fir 198087:6 Monitor.scala 535:22 chipyard.TestHarness.TinyRocketConfig.fir 198026:4]
    param_1 <= mux(_T_1002, io_in_d_bits_param, param_1) @[Monitor.scala 549:32 chipyard.TestHarness.TinyRocketConfig.fir 198086:4 Monitor.scala 551:15 chipyard.TestHarness.TinyRocketConfig.fir 198088:6 Monitor.scala 536:22 chipyard.TestHarness.TinyRocketConfig.fir 198027:4]
    size_1 <= mux(_T_1002, io_in_d_bits_size, size_1) @[Monitor.scala 549:32 chipyard.TestHarness.TinyRocketConfig.fir 198086:4 Monitor.scala 552:15 chipyard.TestHarness.TinyRocketConfig.fir 198089:6 Monitor.scala 537:22 chipyard.TestHarness.TinyRocketConfig.fir 198028:4]
    source_1 <= mux(_T_1002, io_in_d_bits_source, source_1) @[Monitor.scala 549:32 chipyard.TestHarness.TinyRocketConfig.fir 198086:4 Monitor.scala 553:15 chipyard.TestHarness.TinyRocketConfig.fir 198090:6 Monitor.scala 538:22 chipyard.TestHarness.TinyRocketConfig.fir 198029:4]
    sink <= mux(_T_1002, io_in_d_bits_sink, sink) @[Monitor.scala 549:32 chipyard.TestHarness.TinyRocketConfig.fir 198086:4 Monitor.scala 554:15 chipyard.TestHarness.TinyRocketConfig.fir 198091:6 Monitor.scala 539:22 chipyard.TestHarness.TinyRocketConfig.fir 198030:4]
    denied <= mux(_T_1002, io_in_d_bits_denied, denied) @[Monitor.scala 549:32 chipyard.TestHarness.TinyRocketConfig.fir 198086:4 Monitor.scala 555:15 chipyard.TestHarness.TinyRocketConfig.fir 198092:6 Monitor.scala 540:22 chipyard.TestHarness.TinyRocketConfig.fir 198031:4]
    inflight <= mux(reset, UInt<1>("h0"), _inflight_T_2) @[Monitor.scala 611:27 chipyard.TestHarness.TinyRocketConfig.fir 198094:4 Monitor.scala 611:27 chipyard.TestHarness.TinyRocketConfig.fir 198094:4 Monitor.scala 702:14 chipyard.TestHarness.TinyRocketConfig.fir 198363:4]
    inflight_opcodes <= mux(reset, UInt<4>("h0"), _inflight_opcodes_T_2) @[Monitor.scala 613:35 chipyard.TestHarness.TinyRocketConfig.fir 198095:4 Monitor.scala 613:35 chipyard.TestHarness.TinyRocketConfig.fir 198095:4 Monitor.scala 703:22 chipyard.TestHarness.TinyRocketConfig.fir 198367:4]
    inflight_sizes <= mux(reset, UInt<8>("h0"), _inflight_sizes_T_2) @[Monitor.scala 615:33 chipyard.TestHarness.TinyRocketConfig.fir 198096:4 Monitor.scala 615:33 chipyard.TestHarness.TinyRocketConfig.fir 198096:4 Monitor.scala 704:20 chipyard.TestHarness.TinyRocketConfig.fir 198371:4]
    a_first_counter_1 <= mux(reset, UInt<10>("h0"), _GEN_13) @[Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 198106:4 Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 198106:4]
    d_first_counter_1 <= mux(reset, UInt<10>("h0"), _GEN_14) @[Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 198128:4 Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 198128:4]
    watchdog <= mux(reset, UInt<32>("h0"), _GEN_57) @[Monitor.scala 706:27 chipyard.TestHarness.TinyRocketConfig.fir 198372:4 Monitor.scala 706:27 chipyard.TestHarness.TinyRocketConfig.fir 198372:4]
    inflight_sizes_1 <= mux(reset, UInt<8>("h0"), _inflight_sizes_T_5) @[Monitor.scala 725:35 chipyard.TestHarness.TinyRocketConfig.fir 198399:4 Monitor.scala 725:35 chipyard.TestHarness.TinyRocketConfig.fir 198399:4 Monitor.scala 811:22 chipyard.TestHarness.TinyRocketConfig.fir 198678:4]
    d_first_counter_2 <= mux(reset, UInt<10>("h0"), _GEN_59) @[Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 198434:4 Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 198434:4]
    node _GEN_93 = and(io_in_a_valid, _T_15) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 196668:10]
    printf(clock, and(_GEN_93, _T_75), "Assertion failed: 'A' channel carries AcquireBlock type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 196668:10]
    stop(clock, and(_GEN_93, _T_75), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 196669:10]
    printf(clock, and(_GEN_93, _T_75), "Assertion failed: 'A' channel carries AcquireBlock from a client which does not support Probe (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 196729:10]
    stop(clock, and(_GEN_93, _T_75), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 196730:10]
    printf(clock, and(_GEN_93, _T_135), "Assertion failed: 'A' channel AcquireBlock carries invalid source ID (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 196736:10]
    stop(clock, and(_GEN_93, _T_135), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 196737:10]
    printf(clock, and(_GEN_93, _T_139), "Assertion failed: 'A' channel AcquireBlock smaller than a beat (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 196744:10]
    stop(clock, and(_GEN_93, _T_139), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 196745:10]
    printf(clock, and(_GEN_93, _T_142), "Assertion failed: 'A' channel AcquireBlock address not aligned to size (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 196751:10]
    stop(clock, and(_GEN_93, _T_142), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 196752:10]
    printf(clock, and(_GEN_93, _T_146), "Assertion failed: 'A' channel AcquireBlock carries invalid grow param (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 196759:10]
    stop(clock, and(_GEN_93, _T_146), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 196760:10]
    printf(clock, and(_GEN_93, _T_151), "Assertion failed: 'A' channel AcquireBlock contains invalid mask (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 196768:10]
    stop(clock, and(_GEN_93, _T_151), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 196769:10]
    printf(clock, and(_GEN_93, _T_155), "Assertion failed: 'A' channel AcquireBlock is corrupt (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 196776:10]
    stop(clock, and(_GEN_93, _T_155), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 196777:10]
    node _GEN_109 = and(io_in_a_valid, _T_156) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 196843:10]
    printf(clock, and(_GEN_109, _T_75), "Assertion failed: 'A' channel carries AcquirePerm type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 196843:10]
    stop(clock, and(_GEN_109, _T_75), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 196844:10]
    printf(clock, and(_GEN_109, _T_75), "Assertion failed: 'A' channel carries AcquirePerm from a client which does not support Probe (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 196904:10]
    stop(clock, and(_GEN_109, _T_75), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 196905:10]
    printf(clock, and(_GEN_109, _T_135), "Assertion failed: 'A' channel AcquirePerm carries invalid source ID (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 196911:10]
    stop(clock, and(_GEN_109, _T_135), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 196912:10]
    printf(clock, and(_GEN_109, _T_139), "Assertion failed: 'A' channel AcquirePerm smaller than a beat (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 196919:10]
    stop(clock, and(_GEN_109, _T_139), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 196920:10]
    printf(clock, and(_GEN_109, _T_142), "Assertion failed: 'A' channel AcquirePerm address not aligned to size (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 196926:10]
    stop(clock, and(_GEN_109, _T_142), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 196927:10]
    printf(clock, and(_GEN_109, _T_146), "Assertion failed: 'A' channel AcquirePerm carries invalid grow param (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 196934:10]
    stop(clock, and(_GEN_109, _T_146), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 196935:10]
    printf(clock, and(_GEN_109, _T_291), "Assertion failed: 'A' channel AcquirePerm requests NtoB (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 196942:10]
    stop(clock, and(_GEN_109, _T_291), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 196943:10]
    printf(clock, and(_GEN_109, _T_151), "Assertion failed: 'A' channel AcquirePerm contains invalid mask (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 196951:10]
    stop(clock, and(_GEN_109, _T_151), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 196952:10]
    printf(clock, and(_GEN_109, _T_155), "Assertion failed: 'A' channel AcquirePerm is corrupt (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 196959:10]
    stop(clock, and(_GEN_109, _T_155), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 196960:10]
    node _GEN_127 = and(io_in_a_valid, _T_301) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 196975:10]
    printf(clock, and(_GEN_127, _T_310), "Assertion failed: 'A' channel carries Get type which master claims it can't emit (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 196975:10]
    stop(clock, and(_GEN_127, _T_310), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 196976:10]
    printf(clock, and(_GEN_127, _T_371), "Assertion failed: 'A' channel carries Get type which slave claims it can't support (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197040:10]
    stop(clock, and(_GEN_127, _T_371), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197041:10]
    printf(clock, and(_GEN_127, _T_135), "Assertion failed: 'A' channel Get carries invalid source ID (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197047:10]
    stop(clock, and(_GEN_127, _T_135), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197048:10]
    printf(clock, and(_GEN_127, _T_142), "Assertion failed: 'A' channel Get address not aligned to size (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197054:10]
    stop(clock, and(_GEN_127, _T_142), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197055:10]
    printf(clock, and(_GEN_127, _T_381), "Assertion failed: 'A' channel Get carries invalid param (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197062:10]
    stop(clock, and(_GEN_127, _T_381), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197063:10]
    printf(clock, and(_GEN_127, _T_385), "Assertion failed: 'A' channel Get contains invalid mask (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197070:10]
    stop(clock, and(_GEN_127, _T_385), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197071:10]
    printf(clock, and(_GEN_127, _T_155), "Assertion failed: 'A' channel Get is corrupt (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197078:10]
    stop(clock, and(_GEN_127, _T_155), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197079:10]
    node _GEN_141 = and(io_in_a_valid, _T_390) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197155:10]
    printf(clock, and(_GEN_141, _T_460), "Assertion failed: 'A' channel carries PutFull type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197155:10]
    stop(clock, and(_GEN_141, _T_460), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197156:10]
    printf(clock, and(_GEN_141, _T_135), "Assertion failed: 'A' channel PutFull carries invalid source ID (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197162:10]
    stop(clock, and(_GEN_141, _T_135), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197163:10]
    printf(clock, and(_GEN_141, _T_142), "Assertion failed: 'A' channel PutFull address not aligned to size (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197169:10]
    stop(clock, and(_GEN_141, _T_142), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197170:10]
    printf(clock, and(_GEN_141, _T_381), "Assertion failed: 'A' channel PutFull carries invalid param (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197177:10]
    stop(clock, and(_GEN_141, _T_381), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197178:10]
    printf(clock, and(_GEN_141, _T_385), "Assertion failed: 'A' channel PutFull contains invalid mask (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197185:10]
    stop(clock, and(_GEN_141, _T_385), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197186:10]
    node _GEN_151 = and(io_in_a_valid, _T_475) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197262:10]
    printf(clock, and(_GEN_151, _T_460), "Assertion failed: 'A' channel carries PutPartial type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197262:10]
    stop(clock, and(_GEN_151, _T_460), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197263:10]
    printf(clock, and(_GEN_151, _T_135), "Assertion failed: 'A' channel PutPartial carries invalid source ID (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197269:10]
    stop(clock, and(_GEN_151, _T_135), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197270:10]
    printf(clock, and(_GEN_151, _T_142), "Assertion failed: 'A' channel PutPartial address not aligned to size (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197276:10]
    stop(clock, and(_GEN_151, _T_142), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197277:10]
    printf(clock, and(_GEN_151, _T_381), "Assertion failed: 'A' channel PutPartial carries invalid param (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197284:10]
    stop(clock, and(_GEN_151, _T_381), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197285:10]
    printf(clock, and(_GEN_151, _T_561), "Assertion failed: 'A' channel PutPartial contains invalid mask (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197294:10]
    stop(clock, and(_GEN_151, _T_561), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197295:10]
    node _GEN_161 = and(io_in_a_valid, _T_562) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197366:10]
    printf(clock, and(_GEN_161, _T_627), "Assertion failed: 'A' channel carries Arithmetic type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197366:10]
    stop(clock, and(_GEN_161, _T_627), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197367:10]
    printf(clock, and(_GEN_161, _T_135), "Assertion failed: 'A' channel Arithmetic carries invalid source ID (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197373:10]
    stop(clock, and(_GEN_161, _T_135), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197374:10]
    printf(clock, and(_GEN_161, _T_142), "Assertion failed: 'A' channel Arithmetic address not aligned to size (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197380:10]
    stop(clock, and(_GEN_161, _T_142), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197381:10]
    printf(clock, and(_GEN_161, _T_637), "Assertion failed: 'A' channel Arithmetic carries invalid opcode param (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197388:10]
    stop(clock, and(_GEN_161, _T_637), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197389:10]
    printf(clock, and(_GEN_161, _T_385), "Assertion failed: 'A' channel Arithmetic contains invalid mask (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197396:10]
    stop(clock, and(_GEN_161, _T_385), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197397:10]
    node _GEN_171 = and(io_in_a_valid, _T_642) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197468:10]
    printf(clock, and(_GEN_171, _T_627), "Assertion failed: 'A' channel carries Logical type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197468:10]
    stop(clock, and(_GEN_171, _T_627), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197469:10]
    printf(clock, and(_GEN_171, _T_135), "Assertion failed: 'A' channel Logical carries invalid source ID (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197475:10]
    stop(clock, and(_GEN_171, _T_135), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197476:10]
    printf(clock, and(_GEN_171, _T_142), "Assertion failed: 'A' channel Logical address not aligned to size (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197482:10]
    stop(clock, and(_GEN_171, _T_142), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197483:10]
    printf(clock, and(_GEN_171, _T_717), "Assertion failed: 'A' channel Logical carries invalid opcode param (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197490:10]
    stop(clock, and(_GEN_171, _T_717), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197491:10]
    printf(clock, and(_GEN_171, _T_385), "Assertion failed: 'A' channel Logical contains invalid mask (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197498:10]
    stop(clock, and(_GEN_171, _T_385), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197499:10]
    node _GEN_181 = and(io_in_a_valid, _T_722) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197570:10]
    printf(clock, and(_GEN_181, _T_787), "Assertion failed: 'A' channel carries Hint type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197570:10]
    stop(clock, and(_GEN_181, _T_787), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197571:10]
    printf(clock, and(_GEN_181, _T_135), "Assertion failed: 'A' channel Hint carries invalid source ID (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197577:10]
    stop(clock, and(_GEN_181, _T_135), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197578:10]
    printf(clock, and(_GEN_181, _T_142), "Assertion failed: 'A' channel Hint address not aligned to size (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197584:10]
    stop(clock, and(_GEN_181, _T_142), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197585:10]
    printf(clock, and(_GEN_181, _T_797), "Assertion failed: 'A' channel Hint carries invalid opcode param (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197592:10]
    stop(clock, and(_GEN_181, _T_797), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197593:10]
    printf(clock, and(_GEN_181, _T_385), "Assertion failed: 'A' channel Hint contains invalid mask (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197600:10]
    stop(clock, and(_GEN_181, _T_385), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197601:10]
    printf(clock, and(_GEN_181, _T_155), "Assertion failed: 'A' channel Hint is corrupt (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197608:10]
    stop(clock, and(_GEN_181, _T_155), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197609:10]
    printf(clock, and(io_in_d_valid, _T_809), "Assertion failed: 'D' channel has invalid opcode (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 197619:8]
    stop(clock, and(io_in_d_valid, _T_809), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 197620:8]
    node _GEN_193 = and(io_in_d_valid, _T_810) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 197633:10]
    printf(clock, and(_GEN_193, _T_813), "Assertion failed: 'D' channel ReleaseAck carries invalid source ID (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 197633:10]
    stop(clock, and(_GEN_193, _T_813), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 197634:10]
    printf(clock, and(_GEN_193, _T_817), "Assertion failed: 'D' channel ReleaseAck smaller than a beat (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 197641:10]
    stop(clock, and(_GEN_193, _T_817), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 197642:10]
    printf(clock, and(_GEN_193, _T_821), "Assertion failed: 'D' channel ReleaseeAck carries invalid param (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 197649:10]
    stop(clock, and(_GEN_193, _T_821), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 197650:10]
    printf(clock, and(_GEN_193, _T_825), "Assertion failed: 'D' channel ReleaseAck is corrupt (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 197657:10]
    stop(clock, and(_GEN_193, _T_825), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 197658:10]
    printf(clock, and(_GEN_193, _T_829), "Assertion failed: 'D' channel ReleaseAck is denied (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 197665:10]
    stop(clock, and(_GEN_193, _T_829), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 197666:10]
    node _GEN_203 = and(io_in_d_valid, _T_830) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 197675:10]
    printf(clock, and(_GEN_203, _T_813), "Assertion failed: 'D' channel Grant carries invalid source ID (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 197675:10]
    stop(clock, and(_GEN_203, _T_813), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 197676:10]
    printf(clock, and(_GEN_203, _T_75), "Assertion failed: 'D' channel Grant carries invalid sink ID (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 197682:10]
    stop(clock, and(_GEN_203, _T_75), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 197683:10]
    printf(clock, and(_GEN_203, _T_817), "Assertion failed: 'D' channel Grant smaller than a beat (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 197690:10]
    stop(clock, and(_GEN_203, _T_817), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 197691:10]
    printf(clock, and(_GEN_203, _T_844), "Assertion failed: 'D' channel Grant carries invalid cap param (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 197698:10]
    stop(clock, and(_GEN_203, _T_844), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 197699:10]
    printf(clock, and(_GEN_203, _T_848), "Assertion failed: 'D' channel Grant carries toN param (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 197706:10]
    stop(clock, and(_GEN_203, _T_848), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 197707:10]
    printf(clock, and(_GEN_203, _T_825), "Assertion failed: 'D' channel Grant is corrupt (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 197714:10]
    stop(clock, and(_GEN_203, _T_825), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 197715:10]
    node _GEN_215 = and(io_in_d_valid, _T_858) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 197733:10]
    printf(clock, and(_GEN_215, _T_813), "Assertion failed: 'D' channel GrantData carries invalid source ID (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 197733:10]
    stop(clock, and(_GEN_215, _T_813), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 197734:10]
    printf(clock, and(_GEN_215, _T_75), "Assertion failed: 'D' channel GrantData carries invalid sink ID (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 197740:10]
    stop(clock, and(_GEN_215, _T_75), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 197741:10]
    printf(clock, and(_GEN_215, _T_817), "Assertion failed: 'D' channel GrantData smaller than a beat (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 197748:10]
    stop(clock, and(_GEN_215, _T_817), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 197749:10]
    printf(clock, and(_GEN_215, _T_844), "Assertion failed: 'D' channel GrantData carries invalid cap param (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 197756:10]
    stop(clock, and(_GEN_215, _T_844), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 197757:10]
    printf(clock, and(_GEN_215, _T_848), "Assertion failed: 'D' channel GrantData carries toN param (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 197764:10]
    stop(clock, and(_GEN_215, _T_848), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 197765:10]
    printf(clock, and(_GEN_215, _T_881), "Assertion failed: 'D' channel GrantData is denied but not corrupt (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 197773:10]
    stop(clock, and(_GEN_215, _T_881), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 197774:10]
    node _GEN_227 = and(io_in_d_valid, _T_887) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 197792:10]
    printf(clock, and(_GEN_227, _T_813), "Assertion failed: 'D' channel AccessAck carries invalid source ID (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 197792:10]
    stop(clock, and(_GEN_227, _T_813), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 197793:10]
    printf(clock, and(_GEN_227, _T_821), "Assertion failed: 'D' channel AccessAck carries invalid param (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 197800:10]
    stop(clock, and(_GEN_227, _T_821), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 197801:10]
    printf(clock, and(_GEN_227, _T_825), "Assertion failed: 'D' channel AccessAck is corrupt (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 197808:10]
    stop(clock, and(_GEN_227, _T_825), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 197809:10]
    node _GEN_233 = and(io_in_d_valid, _T_904) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 197827:10]
    printf(clock, and(_GEN_233, _T_813), "Assertion failed: 'D' channel AccessAckData carries invalid source ID (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 197827:10]
    stop(clock, and(_GEN_233, _T_813), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 197828:10]
    printf(clock, and(_GEN_233, _T_821), "Assertion failed: 'D' channel AccessAckData carries invalid param (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 197835:10]
    stop(clock, and(_GEN_233, _T_821), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 197836:10]
    printf(clock, and(_GEN_233, _T_881), "Assertion failed: 'D' channel AccessAckData is denied but not corrupt (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 197844:10]
    stop(clock, and(_GEN_233, _T_881), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 197845:10]
    node _GEN_239 = and(io_in_d_valid, _T_922) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 197863:10]
    printf(clock, and(_GEN_239, _T_813), "Assertion failed: 'D' channel HintAck carries invalid source ID (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 197863:10]
    stop(clock, and(_GEN_239, _T_813), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 197864:10]
    printf(clock, and(_GEN_239, _T_821), "Assertion failed: 'D' channel HintAck carries invalid param (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 197871:10]
    stop(clock, and(_GEN_239, _T_821), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 197872:10]
    printf(clock, and(_GEN_239, _T_825), "Assertion failed: 'D' channel HintAck is corrupt (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 197879:10]
    stop(clock, and(_GEN_239, _T_825), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 197880:10]
    printf(clock, and(_T_952, _T_956), "Assertion failed: 'A' channel opcode changed within multibeat operation (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197959:8]
    stop(clock, and(_T_952, _T_956), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197960:8]
    printf(clock, and(_T_952, _T_960), "Assertion failed: 'A' channel param changed within multibeat operation (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197967:8]
    stop(clock, and(_T_952, _T_960), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197968:8]
    printf(clock, and(_T_952, _T_964), "Assertion failed: 'A' channel size changed within multibeat operation (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197975:8]
    stop(clock, and(_T_952, _T_964), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197976:8]
    printf(clock, and(_T_952, _T_968), "Assertion failed: 'A' channel source changed within multibeat operation (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197983:8]
    stop(clock, and(_T_952, _T_968), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197984:8]
    printf(clock, and(_T_952, _T_972), "Assertion failed: 'A' channel address changed with multibeat operation (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197991:8]
    stop(clock, and(_T_952, _T_972), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 197992:8]
    printf(clock, and(_T_976, _T_980), "Assertion failed: 'D' channel opcode changed within multibeat operation (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 198040:8]
    stop(clock, and(_T_976, _T_980), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 198041:8]
    printf(clock, and(_T_976, _T_984), "Assertion failed: 'D' channel param changed within multibeat operation (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 198048:8]
    stop(clock, and(_T_976, _T_984), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 198049:8]
    printf(clock, and(_T_976, _T_988), "Assertion failed: 'D' channel size changed within multibeat operation (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 198056:8]
    stop(clock, and(_T_976, _T_988), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 198057:8]
    printf(clock, and(_T_976, _T_992), "Assertion failed: 'D' channel source changed within multibeat operation (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 198064:8]
    stop(clock, and(_T_976, _T_992), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 198065:8]
    printf(clock, and(_T_976, _T_996), "Assertion failed: 'D' channel sink changed with multibeat operation (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 198072:8]
    stop(clock, and(_T_976, _T_996), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 198073:8]
    printf(clock, and(_T_976, _T_1000), "Assertion failed: 'D' channel denied changed with multibeat operation (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 198080:8]
    stop(clock, and(_T_976, _T_1000), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 198081:8]
    printf(clock, and(_T_1006, _T_1013), "Assertion failed: 'A' channel re-used a source ID (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 198225:8]
    stop(clock, and(_T_1006, _T_1013), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 198226:8]
    printf(clock, and(_T_1017, _T_1032), "Assertion failed: 'D' channel acknowledged for nothing inflight (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 198285:8]
    stop(clock, and(_T_1017, _T_1032), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 198286:8]
    node _GEN_245 = and(_T_1017, same_cycle_resp) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 198296:10]
    printf(clock, and(_GEN_245, _T_1038), "Assertion failed: 'D' channel contains improper opcode response (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 198296:10]
    stop(clock, and(_GEN_245, _T_1038), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 198297:10]
    printf(clock, and(_GEN_245, _T_1042), "Assertion failed: 'D' channel contains improper response size (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 198304:10]
    stop(clock, and(_GEN_245, _T_1042), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 198305:10]
    node _GEN_249 = not(same_cycle_resp) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 198318:10]
    node _GEN_250 = and(_T_1017, _GEN_249) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 198318:10]
    printf(clock, and(_GEN_250, _T_1050), "Assertion failed: 'D' channel contains improper opcode response (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 198318:10]
    stop(clock, and(_GEN_250, _T_1050), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 198319:10]
    printf(clock, and(_GEN_250, _T_1054), "Assertion failed: 'D' channel contains improper response size (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 198326:10]
    stop(clock, and(_GEN_250, _T_1054), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 198327:10]
    printf(clock, and(_T_1061, _T_1066), "Assertion failed: ready check\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 198345:8]
    stop(clock, and(_T_1061, _T_1066), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 198346:8]
    printf(clock, _T_1073, "Assertion failed: 'A' and 'D' concurrent, despite minlatency 6 (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 198357:6]
    stop(clock, _T_1073, 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 198358:6]
    printf(clock, _T_1082, "Assertion failed: TileLink timeout expired (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 198385:6]
    stop(clock, _T_1082, 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 198386:6]
    printf(clock, and(_T_1105, _T_1118), "Assertion failed: 'D' channel acknowledged for nothing inflight (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 198607:8]
    stop(clock, and(_T_1105, _T_1118), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 198608:8]
    printf(clock, and(_T_1105, _T_1126), "Assertion failed: 'D' channel contains improper response size (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 198628:10]
    stop(clock, and(_T_1105, _T_1126), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 198629:10]

  module TLSerdesser_1_inTestHarness : @[chipyard.TestHarness.TinyRocketConfig.fir 198891:2]
    input clock : Clock @[chipyard.TestHarness.TinyRocketConfig.fir 198892:4]
    input reset : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 198893:4]
    output auto_manager_in_a_ready : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 198894:4]
    input auto_manager_in_a_valid : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 198894:4]
    input auto_manager_in_a_bits_opcode : UInt<3> @[chipyard.TestHarness.TinyRocketConfig.fir 198894:4]
    input auto_manager_in_a_bits_param : UInt<3> @[chipyard.TestHarness.TinyRocketConfig.fir 198894:4]
    input auto_manager_in_a_bits_size : UInt<4> @[chipyard.TestHarness.TinyRocketConfig.fir 198894:4]
    input auto_manager_in_a_bits_source : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 198894:4]
    input auto_manager_in_a_bits_address : UInt<32> @[chipyard.TestHarness.TinyRocketConfig.fir 198894:4]
    input auto_manager_in_a_bits_mask : UInt<4> @[chipyard.TestHarness.TinyRocketConfig.fir 198894:4]
    input auto_manager_in_a_bits_data : UInt<32> @[chipyard.TestHarness.TinyRocketConfig.fir 198894:4]
    input auto_manager_in_a_bits_corrupt : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 198894:4]
    input auto_manager_in_d_ready : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 198894:4]
    output auto_manager_in_d_valid : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 198894:4]
    output auto_manager_in_d_bits_opcode : UInt<3> @[chipyard.TestHarness.TinyRocketConfig.fir 198894:4]
    output auto_manager_in_d_bits_param : UInt<2> @[chipyard.TestHarness.TinyRocketConfig.fir 198894:4]
    output auto_manager_in_d_bits_size : UInt<4> @[chipyard.TestHarness.TinyRocketConfig.fir 198894:4]
    output auto_manager_in_d_bits_source : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 198894:4]
    output auto_manager_in_d_bits_sink : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 198894:4]
    output auto_manager_in_d_bits_denied : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 198894:4]
    output auto_manager_in_d_bits_data : UInt<32> @[chipyard.TestHarness.TinyRocketConfig.fir 198894:4]
    output auto_manager_in_d_bits_corrupt : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 198894:4]
    input auto_client_out_a_ready : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 198894:4]
    output auto_client_out_a_valid : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 198894:4]
    output auto_client_out_a_bits_opcode : UInt<3> @[chipyard.TestHarness.TinyRocketConfig.fir 198894:4]
    output auto_client_out_a_bits_param : UInt<3> @[chipyard.TestHarness.TinyRocketConfig.fir 198894:4]
    output auto_client_out_a_bits_size : UInt<3> @[chipyard.TestHarness.TinyRocketConfig.fir 198894:4]
    output auto_client_out_a_bits_source : UInt<2> @[chipyard.TestHarness.TinyRocketConfig.fir 198894:4]
    output auto_client_out_a_bits_address : UInt<29> @[chipyard.TestHarness.TinyRocketConfig.fir 198894:4]
    output auto_client_out_a_bits_mask : UInt<4> @[chipyard.TestHarness.TinyRocketConfig.fir 198894:4]
    output auto_client_out_a_bits_data : UInt<32> @[chipyard.TestHarness.TinyRocketConfig.fir 198894:4]
    output auto_client_out_a_bits_corrupt : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 198894:4]
    output auto_client_out_d_ready : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 198894:4]
    input auto_client_out_d_valid : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 198894:4]
    input auto_client_out_d_bits_opcode : UInt<3> @[chipyard.TestHarness.TinyRocketConfig.fir 198894:4]
    input auto_client_out_d_bits_param : UInt<2> @[chipyard.TestHarness.TinyRocketConfig.fir 198894:4]
    input auto_client_out_d_bits_size : UInt<3> @[chipyard.TestHarness.TinyRocketConfig.fir 198894:4]
    input auto_client_out_d_bits_source : UInt<2> @[chipyard.TestHarness.TinyRocketConfig.fir 198894:4]
    input auto_client_out_d_bits_sink : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 198894:4]
    input auto_client_out_d_bits_denied : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 198894:4]
    input auto_client_out_d_bits_data : UInt<32> @[chipyard.TestHarness.TinyRocketConfig.fir 198894:4]
    input auto_client_out_d_bits_corrupt : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 198894:4]
    output io_ser_in_ready : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 198895:4]
    input io_ser_in_valid : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 198895:4]
    input io_ser_in_bits : UInt<4> @[chipyard.TestHarness.TinyRocketConfig.fir 198895:4]
    input io_ser_out_ready : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 198895:4]
    output io_ser_out_valid : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 198895:4]
    output io_ser_out_bits : UInt<4> @[chipyard.TestHarness.TinyRocketConfig.fir 198895:4]

    inst monitor of TLMonitor_41_inTestHarness @[Nodes.scala 24:25 chipyard.TestHarness.TinyRocketConfig.fir 198905:4]
    inst outArb of HellaPeekingArbiter_inTestHarness @[Serdes.scala 622:24 chipyard.TestHarness.TinyRocketConfig.fir 198936:4]
    inst outSer of GenericSerializer_inTestHarness @[Serdes.scala 624:24 chipyard.TestHarness.TinyRocketConfig.fir 198939:4]
    inst inDes of GenericDeserializer_inTestHarness @[Serdes.scala 629:23 chipyard.TestHarness.TinyRocketConfig.fir 199195:4]
    node _merged_bits_merged_union_T_1 = cat(auto_client_out_d_bits_sink, auto_client_out_d_bits_denied) @[Cat.scala 30:58 chipyard.TestHarness.TinyRocketConfig.fir 198994:4]
    node merged_1_ready = outArb.io_in_1_ready @[Serdes.scala 357:22 chipyard.TestHarness.TinyRocketConfig.fir 198983:4 Serdes.scala 625:18 chipyard.TestHarness.TinyRocketConfig.fir 199179:4]
    node _merged_bits_last_T_1 = and(merged_1_ready, auto_client_out_d_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.TinyRocketConfig.fir 199007:4]
    node _merged_bits_last_beats1_decode_T_1 = dshlw(UInt<13>("h3f"), auto_client_out_d_bits_size) @[package.scala 234:77 chipyard.TestHarness.TinyRocketConfig.fir 199009:4]
    node _merged_bits_last_beats1_decode_T_2 = bits(_merged_bits_last_beats1_decode_T_1, 5, 0) @[package.scala 234:82 chipyard.TestHarness.TinyRocketConfig.fir 199010:4]
    node _merged_bits_last_beats1_decode_T_3 = not(_merged_bits_last_beats1_decode_T_2) @[package.scala 234:46 chipyard.TestHarness.TinyRocketConfig.fir 199011:4]
    node merged_bits_last_beats1_decode = shr(_merged_bits_last_beats1_decode_T_3, 2) @[Edges.scala 219:59 chipyard.TestHarness.TinyRocketConfig.fir 199012:4]
    node merged_bits_last_beats1_opdata = bits(auto_client_out_d_bits_opcode, 0, 0) @[Edges.scala 105:36 chipyard.TestHarness.TinyRocketConfig.fir 199013:4]
    node merged_bits_last_beats1 = mux(merged_bits_last_beats1_opdata, merged_bits_last_beats1_decode, UInt<4>("h0")) @[Edges.scala 220:14 chipyard.TestHarness.TinyRocketConfig.fir 199014:4]
    reg merged_bits_last_counter_1 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), merged_bits_last_counter_1) @[Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 199015:4]
    node _merged_bits_last_counter1_T_1 = sub(merged_bits_last_counter_1, UInt<4>("h1")) @[Edges.scala 229:28 chipyard.TestHarness.TinyRocketConfig.fir 199016:4]
    node merged_bits_last_counter1_1 = tail(_merged_bits_last_counter1_T_1, 1) @[Edges.scala 229:28 chipyard.TestHarness.TinyRocketConfig.fir 199017:4]
    node merged_bits_last_first_1 = eq(merged_bits_last_counter_1, UInt<4>("h0")) @[Edges.scala 230:25 chipyard.TestHarness.TinyRocketConfig.fir 199018:4]
    node _merged_bits_last_last_T_2 = eq(merged_bits_last_counter_1, UInt<4>("h1")) @[Edges.scala 231:25 chipyard.TestHarness.TinyRocketConfig.fir 199019:4]
    node _merged_bits_last_last_T_3 = eq(merged_bits_last_beats1, UInt<4>("h0")) @[Edges.scala 231:47 chipyard.TestHarness.TinyRocketConfig.fir 199020:4]
    node _merged_bits_last_counter_T_1 = mux(merged_bits_last_first_1, merged_bits_last_beats1, merged_bits_last_counter1_1) @[Edges.scala 235:21 chipyard.TestHarness.TinyRocketConfig.fir 199026:6]
    node _GEN_1 = mux(_merged_bits_last_T_1, _merged_bits_last_counter_T_1, merged_bits_last_counter_1) @[Edges.scala 234:17 chipyard.TestHarness.TinyRocketConfig.fir 199025:4 Edges.scala 235:15 chipyard.TestHarness.TinyRocketConfig.fir 199027:6 Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 199015:4]
    node merged_4_ready = outArb.io_in_4_ready @[Serdes.scala 357:22 chipyard.TestHarness.TinyRocketConfig.fir 199126:4 Serdes.scala 625:18 chipyard.TestHarness.TinyRocketConfig.fir 199188:4]
    node _merged_bits_last_T_4 = and(merged_4_ready, auto_manager_in_a_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.TinyRocketConfig.fir 199149:4]
    node _merged_bits_last_beats1_decode_T_13 = dshlw(UInt<21>("h3f"), auto_manager_in_a_bits_size) @[package.scala 234:77 chipyard.TestHarness.TinyRocketConfig.fir 199151:4]
    node _merged_bits_last_beats1_decode_T_14 = bits(_merged_bits_last_beats1_decode_T_13, 5, 0) @[package.scala 234:82 chipyard.TestHarness.TinyRocketConfig.fir 199152:4]
    node _merged_bits_last_beats1_decode_T_15 = not(_merged_bits_last_beats1_decode_T_14) @[package.scala 234:46 chipyard.TestHarness.TinyRocketConfig.fir 199153:4]
    node merged_bits_last_beats1_decode_3 = shr(_merged_bits_last_beats1_decode_T_15, 2) @[Edges.scala 219:59 chipyard.TestHarness.TinyRocketConfig.fir 199154:4]
    node _merged_bits_last_beats1_opdata_T_1 = bits(auto_manager_in_a_bits_opcode, 2, 2) @[Edges.scala 91:37 chipyard.TestHarness.TinyRocketConfig.fir 199155:4]
    node merged_bits_last_beats1_opdata_3 = not(_merged_bits_last_beats1_opdata_T_1) @[Edges.scala 91:28 chipyard.TestHarness.TinyRocketConfig.fir 199156:4]
    node merged_bits_last_beats1_3 = mux(merged_bits_last_beats1_opdata_3, merged_bits_last_beats1_decode_3, UInt<4>("h0")) @[Edges.scala 220:14 chipyard.TestHarness.TinyRocketConfig.fir 199157:4]
    reg merged_bits_last_counter_4 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), merged_bits_last_counter_4) @[Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 199158:4]
    node _merged_bits_last_counter1_T_4 = sub(merged_bits_last_counter_4, UInt<4>("h1")) @[Edges.scala 229:28 chipyard.TestHarness.TinyRocketConfig.fir 199159:4]
    node merged_bits_last_counter1_4 = tail(_merged_bits_last_counter1_T_4, 1) @[Edges.scala 229:28 chipyard.TestHarness.TinyRocketConfig.fir 199160:4]
    node merged_bits_last_first_4 = eq(merged_bits_last_counter_4, UInt<4>("h0")) @[Edges.scala 230:25 chipyard.TestHarness.TinyRocketConfig.fir 199161:4]
    node _merged_bits_last_last_T_8 = eq(merged_bits_last_counter_4, UInt<4>("h1")) @[Edges.scala 231:25 chipyard.TestHarness.TinyRocketConfig.fir 199162:4]
    node _merged_bits_last_last_T_9 = eq(merged_bits_last_beats1_3, UInt<4>("h0")) @[Edges.scala 231:47 chipyard.TestHarness.TinyRocketConfig.fir 199163:4]
    node _merged_bits_last_counter_T_4 = mux(merged_bits_last_first_4, merged_bits_last_beats1_3, merged_bits_last_counter1_4) @[Edges.scala 235:21 chipyard.TestHarness.TinyRocketConfig.fir 199169:6]
    node _GEN_4 = mux(_merged_bits_last_T_4, _merged_bits_last_counter_T_4, merged_bits_last_counter_4) @[Edges.scala 234:17 chipyard.TestHarness.TinyRocketConfig.fir 199168:4 Edges.scala 235:15 chipyard.TestHarness.TinyRocketConfig.fir 199170:6 Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 199158:4]
    node _bundleOut_0_a_valid_T = eq(inDes.io_out_bits_chanId, UInt<3>("h0")) @[Serdes.scala 236:37 chipyard.TestHarness.TinyRocketConfig.fir 199201:4]
    node _bundleIn_0_d_valid_T = eq(inDes.io_out_bits_chanId, UInt<3>("h3")) @[Serdes.scala 239:37 chipyard.TestHarness.TinyRocketConfig.fir 199267:4]
    node _GEN_5 = shr(inDes.io_out_bits_union, 1) @[Serdes.scala 468:31 chipyard.TestHarness.TinyRocketConfig.fir 199277:4]
    node _bundleIn_0_d_bits_d_sink_T = pad(_GEN_5, 4) @[Serdes.scala 468:31 chipyard.TestHarness.TinyRocketConfig.fir 199277:4]
    node _inDes_io_out_ready_T = eq(UInt<3>("h0"), inDes.io_out_bits_chanId) @[Mux.scala 80:60 chipyard.TestHarness.TinyRocketConfig.fir 199306:4]
    node _inDes_io_out_ready_T_1 = and(_inDes_io_out_ready_T, auto_client_out_a_ready) @[Mux.scala 80:57 chipyard.TestHarness.TinyRocketConfig.fir 199307:4]
    node _inDes_io_out_ready_T_2 = eq(UInt<3>("h1"), inDes.io_out_bits_chanId) @[Mux.scala 80:60 chipyard.TestHarness.TinyRocketConfig.fir 199308:4]
    node _inDes_io_out_ready_T_3 = mux(_inDes_io_out_ready_T_2, UInt<1>("h0"), _inDes_io_out_ready_T_1) @[Mux.scala 80:57 chipyard.TestHarness.TinyRocketConfig.fir 199309:4]
    node _inDes_io_out_ready_T_4 = eq(UInt<3>("h2"), inDes.io_out_bits_chanId) @[Mux.scala 80:60 chipyard.TestHarness.TinyRocketConfig.fir 199310:4]
    node _inDes_io_out_ready_T_5 = mux(_inDes_io_out_ready_T_4, UInt<1>("h0"), _inDes_io_out_ready_T_3) @[Mux.scala 80:57 chipyard.TestHarness.TinyRocketConfig.fir 199311:4]
    node _inDes_io_out_ready_T_6 = eq(UInt<3>("h3"), inDes.io_out_bits_chanId) @[Mux.scala 80:60 chipyard.TestHarness.TinyRocketConfig.fir 199312:4]
    node _inDes_io_out_ready_T_7 = mux(_inDes_io_out_ready_T_6, auto_manager_in_d_ready, _inDes_io_out_ready_T_5) @[Mux.scala 80:57 chipyard.TestHarness.TinyRocketConfig.fir 199313:4]
    node _inDes_io_out_ready_T_8 = eq(UInt<3>("h4"), inDes.io_out_bits_chanId) @[Mux.scala 80:60 chipyard.TestHarness.TinyRocketConfig.fir 199314:4]
    auto_manager_in_a_ready <= outArb.io_in_4_ready @[Serdes.scala 357:22 chipyard.TestHarness.TinyRocketConfig.fir 199126:4 Serdes.scala 625:18 chipyard.TestHarness.TinyRocketConfig.fir 199188:4]
    auto_manager_in_d_valid <= and(inDes.io_out_valid, _bundleIn_0_d_valid_T) @[Serdes.scala 637:46 chipyard.TestHarness.TinyRocketConfig.fir 199268:4]
    auto_manager_in_d_bits_opcode <= inDes.io_out_bits_opcode @[Serdes.scala 460:17 chipyard.TestHarness.TinyRocketConfig.fir 199270:4 Serdes.scala 461:15 chipyard.TestHarness.TinyRocketConfig.fir 199271:4]
    auto_manager_in_d_bits_param <= bits(inDes.io_out_bits_param, 1, 0) @[Serdes.scala 460:17 chipyard.TestHarness.TinyRocketConfig.fir 199270:4 Serdes.scala 462:15 chipyard.TestHarness.TinyRocketConfig.fir 199272:4]
    auto_manager_in_d_bits_size <= inDes.io_out_bits_size @[Serdes.scala 460:17 chipyard.TestHarness.TinyRocketConfig.fir 199270:4 Serdes.scala 463:15 chipyard.TestHarness.TinyRocketConfig.fir 199273:4]
    auto_manager_in_d_bits_source <= bits(inDes.io_out_bits_source, 0, 0) @[Serdes.scala 460:17 chipyard.TestHarness.TinyRocketConfig.fir 199270:4 Serdes.scala 464:15 chipyard.TestHarness.TinyRocketConfig.fir 199274:4]
    auto_manager_in_d_bits_sink <= bits(_bundleIn_0_d_bits_d_sink_T, 0, 0) @[Serdes.scala 460:17 chipyard.TestHarness.TinyRocketConfig.fir 199270:4 Serdes.scala 468:17 chipyard.TestHarness.TinyRocketConfig.fir 199278:4]
    auto_manager_in_d_bits_denied <= bits(inDes.io_out_bits_union, 0, 0) @[Serdes.scala 469:30 chipyard.TestHarness.TinyRocketConfig.fir 199279:4]
    auto_manager_in_d_bits_data <= inDes.io_out_bits_data @[Serdes.scala 460:17 chipyard.TestHarness.TinyRocketConfig.fir 199270:4 Serdes.scala 465:15 chipyard.TestHarness.TinyRocketConfig.fir 199275:4]
    auto_manager_in_d_bits_corrupt <= inDes.io_out_bits_corrupt @[Serdes.scala 460:17 chipyard.TestHarness.TinyRocketConfig.fir 199270:4 Serdes.scala 467:17 chipyard.TestHarness.TinyRocketConfig.fir 199276:4]
    auto_client_out_a_valid <= and(inDes.io_out_valid, _bundleOut_0_a_valid_T) @[Serdes.scala 631:45 chipyard.TestHarness.TinyRocketConfig.fir 199202:4]
    auto_client_out_a_bits_opcode <= inDes.io_out_bits_opcode @[Serdes.scala 374:17 chipyard.TestHarness.TinyRocketConfig.fir 199204:4 Serdes.scala 375:15 chipyard.TestHarness.TinyRocketConfig.fir 199205:4]
    auto_client_out_a_bits_param <= inDes.io_out_bits_param @[Serdes.scala 374:17 chipyard.TestHarness.TinyRocketConfig.fir 199204:4 Serdes.scala 376:15 chipyard.TestHarness.TinyRocketConfig.fir 199206:4]
    auto_client_out_a_bits_size <= bits(inDes.io_out_bits_size, 2, 0) @[Serdes.scala 374:17 chipyard.TestHarness.TinyRocketConfig.fir 199204:4 Serdes.scala 377:15 chipyard.TestHarness.TinyRocketConfig.fir 199207:4]
    auto_client_out_a_bits_source <= inDes.io_out_bits_source @[Serdes.scala 374:17 chipyard.TestHarness.TinyRocketConfig.fir 199204:4 Serdes.scala 378:15 chipyard.TestHarness.TinyRocketConfig.fir 199208:4]
    auto_client_out_a_bits_address <= bits(inDes.io_out_bits_address, 28, 0) @[Serdes.scala 374:17 chipyard.TestHarness.TinyRocketConfig.fir 199204:4 Serdes.scala 379:15 chipyard.TestHarness.TinyRocketConfig.fir 199209:4]
    auto_client_out_a_bits_mask <= inDes.io_out_bits_union @[Serdes.scala 374:17 chipyard.TestHarness.TinyRocketConfig.fir 199204:4 Serdes.scala 385:15 chipyard.TestHarness.TinyRocketConfig.fir 199212:4]
    auto_client_out_a_bits_data <= inDes.io_out_bits_data @[Serdes.scala 374:17 chipyard.TestHarness.TinyRocketConfig.fir 199204:4 Serdes.scala 380:15 chipyard.TestHarness.TinyRocketConfig.fir 199210:4]
    auto_client_out_a_bits_corrupt <= inDes.io_out_bits_corrupt @[Serdes.scala 374:17 chipyard.TestHarness.TinyRocketConfig.fir 199204:4 Serdes.scala 382:17 chipyard.TestHarness.TinyRocketConfig.fir 199211:4]
    auto_client_out_d_ready <= outArb.io_in_1_ready @[Serdes.scala 357:22 chipyard.TestHarness.TinyRocketConfig.fir 198983:4 Serdes.scala 625:18 chipyard.TestHarness.TinyRocketConfig.fir 199179:4]
    io_ser_in_ready <= inDes.io_in_ready @[Serdes.scala 630:17 chipyard.TestHarness.TinyRocketConfig.fir 199200:4]
    io_ser_out_valid <= outSer.io_out_valid @[Serdes.scala 627:16 chipyard.TestHarness.TinyRocketConfig.fir 199193:4]
    io_ser_out_bits <= outSer.io_out_bits @[Serdes.scala 627:16 chipyard.TestHarness.TinyRocketConfig.fir 199192:4]
    monitor.clock <= clock @[chipyard.TestHarness.TinyRocketConfig.fir 198906:4]
    monitor.reset <= reset @[chipyard.TestHarness.TinyRocketConfig.fir 198907:4]
    monitor.io_in_a_ready <= outArb.io_in_4_ready @[Serdes.scala 357:22 chipyard.TestHarness.TinyRocketConfig.fir 199126:4 Serdes.scala 625:18 chipyard.TestHarness.TinyRocketConfig.fir 199188:4]
    monitor.io_in_a_valid <= auto_manager_in_a_valid @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 198903:4 LazyModule.scala 309:16 chipyard.TestHarness.TinyRocketConfig.fir 198929:4]
    monitor.io_in_a_bits_opcode <= auto_manager_in_a_bits_opcode @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 198903:4 LazyModule.scala 309:16 chipyard.TestHarness.TinyRocketConfig.fir 198929:4]
    monitor.io_in_a_bits_param <= auto_manager_in_a_bits_param @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 198903:4 LazyModule.scala 309:16 chipyard.TestHarness.TinyRocketConfig.fir 198929:4]
    monitor.io_in_a_bits_size <= auto_manager_in_a_bits_size @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 198903:4 LazyModule.scala 309:16 chipyard.TestHarness.TinyRocketConfig.fir 198929:4]
    monitor.io_in_a_bits_source <= auto_manager_in_a_bits_source @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 198903:4 LazyModule.scala 309:16 chipyard.TestHarness.TinyRocketConfig.fir 198929:4]
    monitor.io_in_a_bits_address <= auto_manager_in_a_bits_address @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 198903:4 LazyModule.scala 309:16 chipyard.TestHarness.TinyRocketConfig.fir 198929:4]
    monitor.io_in_a_bits_mask <= auto_manager_in_a_bits_mask @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 198903:4 LazyModule.scala 309:16 chipyard.TestHarness.TinyRocketConfig.fir 198929:4]
    monitor.io_in_a_bits_corrupt <= auto_manager_in_a_bits_corrupt @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 198903:4 LazyModule.scala 309:16 chipyard.TestHarness.TinyRocketConfig.fir 198929:4]
    monitor.io_in_d_ready <= auto_manager_in_d_ready @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 198903:4 LazyModule.scala 309:16 chipyard.TestHarness.TinyRocketConfig.fir 198929:4]
    monitor.io_in_d_valid <= and(inDes.io_out_valid, _bundleIn_0_d_valid_T) @[Serdes.scala 637:46 chipyard.TestHarness.TinyRocketConfig.fir 199268:4]
    monitor.io_in_d_bits_opcode <= inDes.io_out_bits_opcode @[Serdes.scala 460:17 chipyard.TestHarness.TinyRocketConfig.fir 199270:4 Serdes.scala 461:15 chipyard.TestHarness.TinyRocketConfig.fir 199271:4]
    monitor.io_in_d_bits_param <= bits(inDes.io_out_bits_param, 1, 0) @[Serdes.scala 460:17 chipyard.TestHarness.TinyRocketConfig.fir 199270:4 Serdes.scala 462:15 chipyard.TestHarness.TinyRocketConfig.fir 199272:4]
    monitor.io_in_d_bits_size <= inDes.io_out_bits_size @[Serdes.scala 460:17 chipyard.TestHarness.TinyRocketConfig.fir 199270:4 Serdes.scala 463:15 chipyard.TestHarness.TinyRocketConfig.fir 199273:4]
    monitor.io_in_d_bits_source <= bits(inDes.io_out_bits_source, 0, 0) @[Serdes.scala 460:17 chipyard.TestHarness.TinyRocketConfig.fir 199270:4 Serdes.scala 464:15 chipyard.TestHarness.TinyRocketConfig.fir 199274:4]
    monitor.io_in_d_bits_sink <= bits(_bundleIn_0_d_bits_d_sink_T, 0, 0) @[Serdes.scala 460:17 chipyard.TestHarness.TinyRocketConfig.fir 199270:4 Serdes.scala 468:17 chipyard.TestHarness.TinyRocketConfig.fir 199278:4]
    monitor.io_in_d_bits_denied <= bits(inDes.io_out_bits_union, 0, 0) @[Serdes.scala 469:30 chipyard.TestHarness.TinyRocketConfig.fir 199279:4]
    monitor.io_in_d_bits_corrupt <= inDes.io_out_bits_corrupt @[Serdes.scala 460:17 chipyard.TestHarness.TinyRocketConfig.fir 199270:4 Serdes.scala 467:17 chipyard.TestHarness.TinyRocketConfig.fir 199276:4]
    outArb.clock <= clock @[chipyard.TestHarness.TinyRocketConfig.fir 198937:4]
    outArb.reset <= reset @[chipyard.TestHarness.TinyRocketConfig.fir 198938:4]
    outArb.io_in_1_valid <= auto_client_out_d_valid @[Nodes.scala 1207:84 chipyard.TestHarness.TinyRocketConfig.fir 198901:4 LazyModule.scala 311:12 chipyard.TestHarness.TinyRocketConfig.fir 198928:4]
    outArb.io_in_1_bits_opcode <= auto_client_out_d_bits_opcode @[Nodes.scala 1207:84 chipyard.TestHarness.TinyRocketConfig.fir 198901:4 LazyModule.scala 311:12 chipyard.TestHarness.TinyRocketConfig.fir 198928:4]
    outArb.io_in_1_bits_param <= pad(auto_client_out_d_bits_param, 3) @[Serdes.scala 312:22 chipyard.TestHarness.TinyRocketConfig.fir 198985:4 Serdes.scala 315:20 chipyard.TestHarness.TinyRocketConfig.fir 198988:4]
    outArb.io_in_1_bits_size <= pad(auto_client_out_d_bits_size, 4) @[Serdes.scala 312:22 chipyard.TestHarness.TinyRocketConfig.fir 198985:4 Serdes.scala 316:20 chipyard.TestHarness.TinyRocketConfig.fir 198989:4]
    outArb.io_in_1_bits_source <= auto_client_out_d_bits_source @[Nodes.scala 1207:84 chipyard.TestHarness.TinyRocketConfig.fir 198901:4 LazyModule.scala 311:12 chipyard.TestHarness.TinyRocketConfig.fir 198928:4]
    outArb.io_in_1_bits_data <= auto_client_out_d_bits_data @[Nodes.scala 1207:84 chipyard.TestHarness.TinyRocketConfig.fir 198901:4 LazyModule.scala 311:12 chipyard.TestHarness.TinyRocketConfig.fir 198928:4]
    outArb.io_in_1_bits_corrupt <= auto_client_out_d_bits_corrupt @[Nodes.scala 1207:84 chipyard.TestHarness.TinyRocketConfig.fir 198901:4 LazyModule.scala 311:12 chipyard.TestHarness.TinyRocketConfig.fir 198928:4]
    outArb.io_in_1_bits_union <= pad(_merged_bits_merged_union_T_1, 4) @[Serdes.scala 312:22 chipyard.TestHarness.TinyRocketConfig.fir 198985:4 Serdes.scala 322:22 chipyard.TestHarness.TinyRocketConfig.fir 198995:4]
    outArb.io_in_1_bits_last <= or(_merged_bits_last_last_T_2, _merged_bits_last_last_T_3) @[Edges.scala 231:37 chipyard.TestHarness.TinyRocketConfig.fir 199021:4]
    outArb.io_in_4_valid <= auto_manager_in_a_valid @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 198903:4 LazyModule.scala 309:16 chipyard.TestHarness.TinyRocketConfig.fir 198929:4]
    outArb.io_in_4_bits_opcode <= auto_manager_in_a_bits_opcode @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 198903:4 LazyModule.scala 309:16 chipyard.TestHarness.TinyRocketConfig.fir 198929:4]
    outArb.io_in_4_bits_param <= auto_manager_in_a_bits_param @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 198903:4 LazyModule.scala 309:16 chipyard.TestHarness.TinyRocketConfig.fir 198929:4]
    outArb.io_in_4_bits_size <= auto_manager_in_a_bits_size @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 198903:4 LazyModule.scala 309:16 chipyard.TestHarness.TinyRocketConfig.fir 198929:4]
    outArb.io_in_4_bits_source <= pad(auto_manager_in_a_bits_source, 2) @[Serdes.scala 255:22 chipyard.TestHarness.TinyRocketConfig.fir 199128:4 Serdes.scala 260:20 chipyard.TestHarness.TinyRocketConfig.fir 199133:4]
    outArb.io_in_4_bits_address <= auto_manager_in_a_bits_address @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 198903:4 LazyModule.scala 309:16 chipyard.TestHarness.TinyRocketConfig.fir 198929:4]
    outArb.io_in_4_bits_data <= auto_manager_in_a_bits_data @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 198903:4 LazyModule.scala 309:16 chipyard.TestHarness.TinyRocketConfig.fir 198929:4]
    outArb.io_in_4_bits_corrupt <= auto_manager_in_a_bits_corrupt @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 198903:4 LazyModule.scala 309:16 chipyard.TestHarness.TinyRocketConfig.fir 198929:4]
    outArb.io_in_4_bits_union <= auto_manager_in_a_bits_mask @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 198903:4 LazyModule.scala 309:16 chipyard.TestHarness.TinyRocketConfig.fir 198929:4]
    outArb.io_in_4_bits_last <= or(_merged_bits_last_last_T_8, _merged_bits_last_last_T_9) @[Edges.scala 231:37 chipyard.TestHarness.TinyRocketConfig.fir 199164:4]
    outArb.io_out_ready <= outSer.io_in_ready @[Serdes.scala 626:18 chipyard.TestHarness.TinyRocketConfig.fir 199191:4]
    outSer.clock <= clock @[chipyard.TestHarness.TinyRocketConfig.fir 198940:4]
    outSer.reset <= reset @[chipyard.TestHarness.TinyRocketConfig.fir 198941:4]
    outSer.io_in_valid <= outArb.io_out_valid @[Serdes.scala 626:18 chipyard.TestHarness.TinyRocketConfig.fir 199190:4]
    outSer.io_in_bits_chanId <= outArb.io_out_bits_chanId @[Serdes.scala 626:18 chipyard.TestHarness.TinyRocketConfig.fir 199189:4]
    outSer.io_in_bits_opcode <= outArb.io_out_bits_opcode @[Serdes.scala 626:18 chipyard.TestHarness.TinyRocketConfig.fir 199189:4]
    outSer.io_in_bits_param <= outArb.io_out_bits_param @[Serdes.scala 626:18 chipyard.TestHarness.TinyRocketConfig.fir 199189:4]
    outSer.io_in_bits_size <= outArb.io_out_bits_size @[Serdes.scala 626:18 chipyard.TestHarness.TinyRocketConfig.fir 199189:4]
    outSer.io_in_bits_source <= outArb.io_out_bits_source @[Serdes.scala 626:18 chipyard.TestHarness.TinyRocketConfig.fir 199189:4]
    outSer.io_in_bits_address <= outArb.io_out_bits_address @[Serdes.scala 626:18 chipyard.TestHarness.TinyRocketConfig.fir 199189:4]
    outSer.io_in_bits_data <= outArb.io_out_bits_data @[Serdes.scala 626:18 chipyard.TestHarness.TinyRocketConfig.fir 199189:4]
    outSer.io_in_bits_corrupt <= outArb.io_out_bits_corrupt @[Serdes.scala 626:18 chipyard.TestHarness.TinyRocketConfig.fir 199189:4]
    outSer.io_in_bits_union <= outArb.io_out_bits_union @[Serdes.scala 626:18 chipyard.TestHarness.TinyRocketConfig.fir 199189:4]
    outSer.io_in_bits_last <= outArb.io_out_bits_last @[Serdes.scala 626:18 chipyard.TestHarness.TinyRocketConfig.fir 199189:4]
    outSer.io_out_ready <= io_ser_out_ready @[Serdes.scala 627:16 chipyard.TestHarness.TinyRocketConfig.fir 199194:4]
    merged_bits_last_counter_1 <= mux(reset, UInt<4>("h0"), _GEN_1) @[Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 199015:4 Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 199015:4]
    merged_bits_last_counter_4 <= mux(reset, UInt<4>("h0"), _GEN_4) @[Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 199158:4 Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 199158:4]
    inDes.clock <= clock @[chipyard.TestHarness.TinyRocketConfig.fir 199196:4]
    inDes.reset <= reset @[chipyard.TestHarness.TinyRocketConfig.fir 199197:4]
    inDes.io_in_valid <= io_ser_in_valid @[Serdes.scala 630:17 chipyard.TestHarness.TinyRocketConfig.fir 199199:4]
    inDes.io_in_bits <= io_ser_in_bits @[Serdes.scala 630:17 chipyard.TestHarness.TinyRocketConfig.fir 199198:4]
    inDes.io_out_ready <= mux(_inDes_io_out_ready_T_8, UInt<1>("h0"), _inDes_io_out_ready_T_7) @[Mux.scala 80:57 chipyard.TestHarness.TinyRocketConfig.fir 199315:4]

  module TLMonitor_42_inTestHarness : @[chipyard.TestHarness.TinyRocketConfig.fir 199334:2]
    input clock : Clock @[chipyard.TestHarness.TinyRocketConfig.fir 199335:4]
    input reset : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 199336:4]
    input io_in_a_ready : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 199337:4]
    input io_in_a_valid : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 199337:4]
    input io_in_a_bits_opcode : UInt<3> @[chipyard.TestHarness.TinyRocketConfig.fir 199337:4]
    input io_in_a_bits_param : UInt<3> @[chipyard.TestHarness.TinyRocketConfig.fir 199337:4]
    input io_in_a_bits_size : UInt<2> @[chipyard.TestHarness.TinyRocketConfig.fir 199337:4]
    input io_in_a_bits_source : UInt<7> @[chipyard.TestHarness.TinyRocketConfig.fir 199337:4]
    input io_in_a_bits_address : UInt<29> @[chipyard.TestHarness.TinyRocketConfig.fir 199337:4]
    input io_in_a_bits_mask : UInt<4> @[chipyard.TestHarness.TinyRocketConfig.fir 199337:4]
    input io_in_a_bits_corrupt : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 199337:4]
    input io_in_d_ready : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 199337:4]
    input io_in_d_valid : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 199337:4]
    input io_in_d_bits_opcode : UInt<3> @[chipyard.TestHarness.TinyRocketConfig.fir 199337:4]
    input io_in_d_bits_size : UInt<2> @[chipyard.TestHarness.TinyRocketConfig.fir 199337:4]
    input io_in_d_bits_source : UInt<7> @[chipyard.TestHarness.TinyRocketConfig.fir 199337:4]

    inst plusarg_reader of plusarg_reader @[PlusArg.scala 80:11 chipyard.TestHarness.TinyRocketConfig.fir 200797:4]
    inst plusarg_reader_1 of plusarg_reader @[PlusArg.scala 80:11 chipyard.TestHarness.TinyRocketConfig.fir 201104:4]
    node _source_ok_T_4 = leq(io_in_a_bits_source, UInt<7>("h5f")) @[Parameters.scala 57:20 chipyard.TestHarness.TinyRocketConfig.fir 199354:6]
    node _is_aligned_mask_T_1 = dshlw(UInt<5>("h3"), io_in_a_bits_size) @[package.scala 234:77 chipyard.TestHarness.TinyRocketConfig.fir 199360:6]
    node _is_aligned_mask_T_2 = bits(_is_aligned_mask_T_1, 1, 0) @[package.scala 234:82 chipyard.TestHarness.TinyRocketConfig.fir 199361:6]
    node is_aligned_mask = not(_is_aligned_mask_T_2) @[package.scala 234:46 chipyard.TestHarness.TinyRocketConfig.fir 199362:6]
    node _GEN_71 = pad(is_aligned_mask, 29) @[Edges.scala 20:16 chipyard.TestHarness.TinyRocketConfig.fir 199363:6]
    node _is_aligned_T = and(io_in_a_bits_address, _GEN_71) @[Edges.scala 20:16 chipyard.TestHarness.TinyRocketConfig.fir 199363:6]
    node is_aligned = eq(_is_aligned_T, UInt<29>("h0")) @[Edges.scala 20:24 chipyard.TestHarness.TinyRocketConfig.fir 199364:6]
    node mask_sizeOH_shiftAmount = bits(io_in_a_bits_size, 0, 0) @[OneHot.scala 64:49 chipyard.TestHarness.TinyRocketConfig.fir 199366:6]
    node _mask_sizeOH_T_1 = dshlw(UInt<2>("h1"), mask_sizeOH_shiftAmount) @[OneHot.scala 65:12 chipyard.TestHarness.TinyRocketConfig.fir 199367:6]
    node mask_sizeOH = or(_mask_sizeOH_T_1, UInt<2>("h1")) @[Misc.scala 201:81 chipyard.TestHarness.TinyRocketConfig.fir 199369:6]
    node _mask_T = geq(io_in_a_bits_size, UInt<2>("h2")) @[Misc.scala 205:21 chipyard.TestHarness.TinyRocketConfig.fir 199370:6]
    node mask_size = bits(mask_sizeOH, 1, 1) @[Misc.scala 208:26 chipyard.TestHarness.TinyRocketConfig.fir 199371:6]
    node mask_bit = bits(io_in_a_bits_address, 1, 1) @[Misc.scala 209:26 chipyard.TestHarness.TinyRocketConfig.fir 199372:6]
    node mask_nbit = not(mask_bit) @[Misc.scala 210:20 chipyard.TestHarness.TinyRocketConfig.fir 199373:6]
    node _mask_acc_T = and(mask_size, mask_nbit) @[Misc.scala 214:38 chipyard.TestHarness.TinyRocketConfig.fir 199375:6]
    node mask_acc = or(_mask_T, _mask_acc_T) @[Misc.scala 214:29 chipyard.TestHarness.TinyRocketConfig.fir 199376:6]
    node _mask_acc_T_1 = and(mask_size, mask_bit) @[Misc.scala 214:38 chipyard.TestHarness.TinyRocketConfig.fir 199378:6]
    node mask_acc_1 = or(_mask_T, _mask_acc_T_1) @[Misc.scala 214:29 chipyard.TestHarness.TinyRocketConfig.fir 199379:6]
    node mask_size_1 = bits(mask_sizeOH, 0, 0) @[Misc.scala 208:26 chipyard.TestHarness.TinyRocketConfig.fir 199380:6]
    node mask_bit_1 = bits(io_in_a_bits_address, 0, 0) @[Misc.scala 209:26 chipyard.TestHarness.TinyRocketConfig.fir 199381:6]
    node mask_nbit_1 = not(mask_bit_1) @[Misc.scala 210:20 chipyard.TestHarness.TinyRocketConfig.fir 199382:6]
    node mask_eq_2 = and(mask_nbit, mask_nbit_1) @[Misc.scala 213:27 chipyard.TestHarness.TinyRocketConfig.fir 199383:6]
    node _mask_acc_T_2 = and(mask_size_1, mask_eq_2) @[Misc.scala 214:38 chipyard.TestHarness.TinyRocketConfig.fir 199384:6]
    node mask_lo_lo = or(mask_acc, _mask_acc_T_2) @[Misc.scala 214:29 chipyard.TestHarness.TinyRocketConfig.fir 199385:6]
    node mask_eq_3 = and(mask_nbit, mask_bit_1) @[Misc.scala 213:27 chipyard.TestHarness.TinyRocketConfig.fir 199386:6]
    node _mask_acc_T_3 = and(mask_size_1, mask_eq_3) @[Misc.scala 214:38 chipyard.TestHarness.TinyRocketConfig.fir 199387:6]
    node mask_lo_hi = or(mask_acc, _mask_acc_T_3) @[Misc.scala 214:29 chipyard.TestHarness.TinyRocketConfig.fir 199388:6]
    node mask_eq_4 = and(mask_bit, mask_nbit_1) @[Misc.scala 213:27 chipyard.TestHarness.TinyRocketConfig.fir 199389:6]
    node _mask_acc_T_4 = and(mask_size_1, mask_eq_4) @[Misc.scala 214:38 chipyard.TestHarness.TinyRocketConfig.fir 199390:6]
    node mask_hi_lo = or(mask_acc_1, _mask_acc_T_4) @[Misc.scala 214:29 chipyard.TestHarness.TinyRocketConfig.fir 199391:6]
    node mask_eq_5 = and(mask_bit, mask_bit_1) @[Misc.scala 213:27 chipyard.TestHarness.TinyRocketConfig.fir 199392:6]
    node _mask_acc_T_5 = and(mask_size_1, mask_eq_5) @[Misc.scala 214:38 chipyard.TestHarness.TinyRocketConfig.fir 199393:6]
    node mask_hi_hi = or(mask_acc_1, _mask_acc_T_5) @[Misc.scala 214:29 chipyard.TestHarness.TinyRocketConfig.fir 199394:6]
    node mask = cat(cat(mask_hi_hi, mask_hi_lo), cat(mask_lo_hi, mask_lo_lo)) @[Cat.scala 30:58 chipyard.TestHarness.TinyRocketConfig.fir 199397:6]
    node _T_20 = eq(io_in_a_bits_opcode, UInt<3>("h6")) @[Monitor.scala 81:25 chipyard.TestHarness.TinyRocketConfig.fir 199420:6]
    node _T_33 = xor(io_in_a_bits_address, UInt<29>("h10000000")) @[Parameters.scala 137:31 chipyard.TestHarness.TinyRocketConfig.fir 199436:8]
    node _T_34 = cvt(_T_33) @[Parameters.scala 137:49 chipyard.TestHarness.TinyRocketConfig.fir 199437:8]
    node _T_35 = and(_T_34, SInt<30>("h-1000")) @[Parameters.scala 137:52 chipyard.TestHarness.TinyRocketConfig.fir 199438:8]
    node _T_36 = asSInt(_T_35) @[Parameters.scala 137:52 chipyard.TestHarness.TinyRocketConfig.fir 199439:8]
    node _T_37 = eq(_T_36, SInt<30>("h0")) @[Parameters.scala 137:67 chipyard.TestHarness.TinyRocketConfig.fir 199440:8]
    node _T_43 = not(reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199446:8]
    node _T_60 = or(_source_ok_T_4, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199471:8]
    node _T_61 = not(_T_60) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199472:8]
    node _T_64 = or(_mask_T, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199479:8]
    node _T_65 = not(_T_64) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199480:8]
    node _T_67 = or(is_aligned, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199486:8]
    node _T_68 = not(_T_67) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199487:8]
    node _T_69 = leq(io_in_a_bits_param, UInt<3>("h2")) @[Bundles.scala 108:27 chipyard.TestHarness.TinyRocketConfig.fir 199492:8]
    node _T_71 = or(_T_69, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199494:8]
    node _T_72 = not(_T_71) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199495:8]
    node _T_73 = not(io_in_a_bits_mask) @[Monitor.scala 88:18 chipyard.TestHarness.TinyRocketConfig.fir 199500:8]
    node _T_74 = eq(_T_73, UInt<4>("h0")) @[Monitor.scala 88:31 chipyard.TestHarness.TinyRocketConfig.fir 199501:8]
    node _T_76 = or(_T_74, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199503:8]
    node _T_77 = not(_T_76) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199504:8]
    node _T_78 = not(io_in_a_bits_corrupt) @[Monitor.scala 89:18 chipyard.TestHarness.TinyRocketConfig.fir 199509:8]
    node _T_80 = or(_T_78, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199511:8]
    node _T_81 = not(_T_80) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199512:8]
    node _T_82 = eq(io_in_a_bits_opcode, UInt<3>("h7")) @[Monitor.scala 92:25 chipyard.TestHarness.TinyRocketConfig.fir 199518:6]
    node _T_135 = neq(io_in_a_bits_param, UInt<3>("h0")) @[Monitor.scala 99:31 chipyard.TestHarness.TinyRocketConfig.fir 199598:8]
    node _T_137 = or(_T_135, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199600:8]
    node _T_138 = not(_T_137) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199601:8]
    node _T_148 = eq(io_in_a_bits_opcode, UInt<3>("h4")) @[Monitor.scala 104:25 chipyard.TestHarness.TinyRocketConfig.fir 199624:6]
    node _T_164 = leq(io_in_a_bits_size, UInt<2>("h2")) @[Parameters.scala 92:42 chipyard.TestHarness.TinyRocketConfig.fir 199647:8]
    node _T_172 = and(_T_164, _T_37) @[Parameters.scala 670:56 chipyard.TestHarness.TinyRocketConfig.fir 199655:8]
    node _T_175 = or(_T_172, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199658:8]
    node _T_176 = not(_T_175) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199659:8]
    node _T_183 = eq(io_in_a_bits_param, UInt<3>("h0")) @[Monitor.scala 109:31 chipyard.TestHarness.TinyRocketConfig.fir 199678:8]
    node _T_185 = or(_T_183, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199680:8]
    node _T_186 = not(_T_185) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199681:8]
    node _T_187 = eq(io_in_a_bits_mask, mask) @[Monitor.scala 110:30 chipyard.TestHarness.TinyRocketConfig.fir 199686:8]
    node _T_189 = or(_T_187, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199688:8]
    node _T_190 = not(_T_189) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199689:8]
    node _T_195 = eq(io_in_a_bits_opcode, UInt<3>("h0")) @[Monitor.scala 114:25 chipyard.TestHarness.TinyRocketConfig.fir 199703:6]
    node _T_218 = and(_source_ok_T_4, _T_172) @[Monitor.scala 115:71 chipyard.TestHarness.TinyRocketConfig.fir 199729:8]
    node _T_220 = or(_T_218, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199731:8]
    node _T_221 = not(_T_220) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199732:8]
    node _T_236 = eq(io_in_a_bits_opcode, UInt<3>("h1")) @[Monitor.scala 122:25 chipyard.TestHarness.TinyRocketConfig.fir 199768:6]
    node _T_273 = not(mask) @[Monitor.scala 127:33 chipyard.TestHarness.TinyRocketConfig.fir 199824:8]
    node _T_274 = and(io_in_a_bits_mask, _T_273) @[Monitor.scala 127:31 chipyard.TestHarness.TinyRocketConfig.fir 199825:8]
    node _T_275 = eq(_T_274, UInt<4>("h0")) @[Monitor.scala 127:40 chipyard.TestHarness.TinyRocketConfig.fir 199826:8]
    node _T_277 = or(_T_275, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199828:8]
    node _T_278 = not(_T_277) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199829:8]
    node _T_279 = eq(io_in_a_bits_opcode, UInt<3>("h2")) @[Monitor.scala 130:25 chipyard.TestHarness.TinyRocketConfig.fir 199835:6]
    node _T_309 = leq(io_in_a_bits_param, UInt<3>("h4")) @[Bundles.scala 138:33 chipyard.TestHarness.TinyRocketConfig.fir 199880:8]
    node _T_311 = or(_T_309, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199882:8]
    node _T_312 = not(_T_311) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199883:8]
    node _T_317 = eq(io_in_a_bits_opcode, UInt<3>("h3")) @[Monitor.scala 138:25 chipyard.TestHarness.TinyRocketConfig.fir 199897:6]
    node _T_347 = leq(io_in_a_bits_param, UInt<3>("h3")) @[Bundles.scala 145:30 chipyard.TestHarness.TinyRocketConfig.fir 199942:8]
    node _T_349 = or(_T_347, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199944:8]
    node _T_350 = not(_T_349) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199945:8]
    node _T_355 = eq(io_in_a_bits_opcode, UInt<3>("h5")) @[Monitor.scala 146:25 chipyard.TestHarness.TinyRocketConfig.fir 199959:6]
    node _T_385 = leq(io_in_a_bits_param, UInt<3>("h1")) @[Bundles.scala 158:28 chipyard.TestHarness.TinyRocketConfig.fir 200004:8]
    node _T_387 = or(_T_385, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 200006:8]
    node _T_388 = not(_T_387) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 200007:8]
    node _T_397 = leq(io_in_d_bits_opcode, UInt<3>("h6")) @[Bundles.scala 42:24 chipyard.TestHarness.TinyRocketConfig.fir 200031:6]
    node _T_399 = or(_T_397, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 200033:6]
    node _T_400 = not(_T_399) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 200034:6]
    node _source_ok_T_10 = leq(io_in_d_bits_source, UInt<7>("h5f")) @[Parameters.scala 57:20 chipyard.TestHarness.TinyRocketConfig.fir 200045:6]
    node _T_401 = eq(io_in_d_bits_opcode, UInt<3>("h6")) @[Monitor.scala 310:25 chipyard.TestHarness.TinyRocketConfig.fir 200051:6]
    node _T_403 = or(_source_ok_T_10, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 200054:8]
    node _T_404 = not(_T_403) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 200055:8]
    node _T_405 = geq(io_in_d_bits_size, UInt<2>("h2")) @[Monitor.scala 312:27 chipyard.TestHarness.TinyRocketConfig.fir 200060:8]
    node _T_407 = or(_T_405, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 200062:8]
    node _T_408 = not(_T_407) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 200063:8]
    node _T_421 = eq(io_in_d_bits_opcode, UInt<3>("h4")) @[Monitor.scala 318:25 chipyard.TestHarness.TinyRocketConfig.fir 200093:6]
    node _T_449 = eq(io_in_d_bits_opcode, UInt<3>("h5")) @[Monitor.scala 328:25 chipyard.TestHarness.TinyRocketConfig.fir 200151:6]
    node _T_478 = eq(io_in_d_bits_opcode, UInt<3>("h0")) @[Monitor.scala 338:25 chipyard.TestHarness.TinyRocketConfig.fir 200210:6]
    node _T_495 = eq(io_in_d_bits_opcode, UInt<3>("h1")) @[Monitor.scala 346:25 chipyard.TestHarness.TinyRocketConfig.fir 200245:6]
    node _T_513 = eq(io_in_d_bits_opcode, UInt<3>("h2")) @[Monitor.scala 354:25 chipyard.TestHarness.TinyRocketConfig.fir 200281:6]
    node a_first_done = and(io_in_a_ready, io_in_a_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.TinyRocketConfig.fir 200347:4]
    reg a_first_counter : UInt<1>, clock with :
      reset => (UInt<1>("h0"), a_first_counter) @[Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 200356:4]
    node _a_first_counter1_T = sub(a_first_counter, UInt<1>("h1")) @[Edges.scala 229:28 chipyard.TestHarness.TinyRocketConfig.fir 200357:4]
    node a_first_counter1 = tail(_a_first_counter1_T, 1) @[Edges.scala 229:28 chipyard.TestHarness.TinyRocketConfig.fir 200358:4]
    node a_first = not(a_first_counter) @[Edges.scala 230:25 chipyard.TestHarness.TinyRocketConfig.fir 200359:4]
    node _a_first_counter_T = mux(a_first, UInt<1>("h0"), a_first_counter1) @[Edges.scala 235:21 chipyard.TestHarness.TinyRocketConfig.fir 200367:6]
    node _GEN_0 = mux(a_first_done, _a_first_counter_T, a_first_counter) @[Edges.scala 234:17 chipyard.TestHarness.TinyRocketConfig.fir 200366:4 Edges.scala 235:15 chipyard.TestHarness.TinyRocketConfig.fir 200368:6 Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 200356:4]
    reg opcode : UInt<3>, clock with :
      reset => (UInt<1>("h0"), opcode) @[Monitor.scala 384:22 chipyard.TestHarness.TinyRocketConfig.fir 200370:4]
    reg param : UInt<3>, clock with :
      reset => (UInt<1>("h0"), param) @[Monitor.scala 385:22 chipyard.TestHarness.TinyRocketConfig.fir 200371:4]
    reg size : UInt<2>, clock with :
      reset => (UInt<1>("h0"), size) @[Monitor.scala 386:22 chipyard.TestHarness.TinyRocketConfig.fir 200372:4]
    reg source : UInt<7>, clock with :
      reset => (UInt<1>("h0"), source) @[Monitor.scala 387:22 chipyard.TestHarness.TinyRocketConfig.fir 200373:4]
    reg address : UInt<29>, clock with :
      reset => (UInt<1>("h0"), address) @[Monitor.scala 388:22 chipyard.TestHarness.TinyRocketConfig.fir 200374:4]
    node _T_542 = not(a_first) @[Monitor.scala 389:22 chipyard.TestHarness.TinyRocketConfig.fir 200375:4]
    node _T_543 = and(io_in_a_valid, _T_542) @[Monitor.scala 389:19 chipyard.TestHarness.TinyRocketConfig.fir 200376:4]
    node _T_544 = eq(io_in_a_bits_opcode, opcode) @[Monitor.scala 390:32 chipyard.TestHarness.TinyRocketConfig.fir 200378:6]
    node _T_546 = or(_T_544, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 200380:6]
    node _T_547 = not(_T_546) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 200381:6]
    node _T_548 = eq(io_in_a_bits_param, param) @[Monitor.scala 391:32 chipyard.TestHarness.TinyRocketConfig.fir 200386:6]
    node _T_550 = or(_T_548, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 200388:6]
    node _T_551 = not(_T_550) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 200389:6]
    node _T_552 = eq(io_in_a_bits_size, size) @[Monitor.scala 392:32 chipyard.TestHarness.TinyRocketConfig.fir 200394:6]
    node _T_554 = or(_T_552, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 200396:6]
    node _T_555 = not(_T_554) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 200397:6]
    node _T_556 = eq(io_in_a_bits_source, source) @[Monitor.scala 393:32 chipyard.TestHarness.TinyRocketConfig.fir 200402:6]
    node _T_558 = or(_T_556, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 200404:6]
    node _T_559 = not(_T_558) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 200405:6]
    node _T_560 = eq(io_in_a_bits_address, address) @[Monitor.scala 394:32 chipyard.TestHarness.TinyRocketConfig.fir 200410:6]
    node _T_562 = or(_T_560, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 200412:6]
    node _T_563 = not(_T_562) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 200413:6]
    node _T_565 = and(a_first_done, a_first) @[Monitor.scala 396:20 chipyard.TestHarness.TinyRocketConfig.fir 200420:4]
    node d_first_done = and(io_in_d_ready, io_in_d_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.TinyRocketConfig.fir 200428:4]
    reg d_first_counter : UInt<1>, clock with :
      reset => (UInt<1>("h0"), d_first_counter) @[Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 200436:4]
    node _d_first_counter1_T = sub(d_first_counter, UInt<1>("h1")) @[Edges.scala 229:28 chipyard.TestHarness.TinyRocketConfig.fir 200437:4]
    node d_first_counter1 = tail(_d_first_counter1_T, 1) @[Edges.scala 229:28 chipyard.TestHarness.TinyRocketConfig.fir 200438:4]
    node d_first = not(d_first_counter) @[Edges.scala 230:25 chipyard.TestHarness.TinyRocketConfig.fir 200439:4]
    node _d_first_counter_T = mux(d_first, UInt<1>("h0"), d_first_counter1) @[Edges.scala 235:21 chipyard.TestHarness.TinyRocketConfig.fir 200447:6]
    node _GEN_6 = mux(d_first_done, _d_first_counter_T, d_first_counter) @[Edges.scala 234:17 chipyard.TestHarness.TinyRocketConfig.fir 200446:4 Edges.scala 235:15 chipyard.TestHarness.TinyRocketConfig.fir 200448:6 Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 200436:4]
    reg opcode_1 : UInt<3>, clock with :
      reset => (UInt<1>("h0"), opcode_1) @[Monitor.scala 535:22 chipyard.TestHarness.TinyRocketConfig.fir 200450:4]
    reg size_1 : UInt<2>, clock with :
      reset => (UInt<1>("h0"), size_1) @[Monitor.scala 537:22 chipyard.TestHarness.TinyRocketConfig.fir 200452:4]
    reg source_1 : UInt<7>, clock with :
      reset => (UInt<1>("h0"), source_1) @[Monitor.scala 538:22 chipyard.TestHarness.TinyRocketConfig.fir 200453:4]
    node _T_566 = not(d_first) @[Monitor.scala 541:22 chipyard.TestHarness.TinyRocketConfig.fir 200456:4]
    node _T_567 = and(io_in_d_valid, _T_566) @[Monitor.scala 541:19 chipyard.TestHarness.TinyRocketConfig.fir 200457:4]
    node _T_568 = eq(io_in_d_bits_opcode, opcode_1) @[Monitor.scala 542:29 chipyard.TestHarness.TinyRocketConfig.fir 200459:6]
    node _T_570 = or(_T_568, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 200461:6]
    node _T_571 = not(_T_570) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 200462:6]
    node _T_576 = eq(io_in_d_bits_size, size_1) @[Monitor.scala 544:29 chipyard.TestHarness.TinyRocketConfig.fir 200475:6]
    node _T_578 = or(_T_576, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 200477:6]
    node _T_579 = not(_T_578) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 200478:6]
    node _T_580 = eq(io_in_d_bits_source, source_1) @[Monitor.scala 545:29 chipyard.TestHarness.TinyRocketConfig.fir 200483:6]
    node _T_582 = or(_T_580, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 200485:6]
    node _T_583 = not(_T_582) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 200486:6]
    node _T_593 = and(d_first_done, d_first) @[Monitor.scala 549:20 chipyard.TestHarness.TinyRocketConfig.fir 200509:4]
    reg inflight : UInt<96>, clock with :
      reset => (UInt<1>("h0"), inflight) @[Monitor.scala 611:27 chipyard.TestHarness.TinyRocketConfig.fir 200518:4]
    reg inflight_opcodes : UInt<384>, clock with :
      reset => (UInt<1>("h0"), inflight_opcodes) @[Monitor.scala 613:35 chipyard.TestHarness.TinyRocketConfig.fir 200519:4]
    reg inflight_sizes : UInt<384>, clock with :
      reset => (UInt<1>("h0"), inflight_sizes) @[Monitor.scala 615:33 chipyard.TestHarness.TinyRocketConfig.fir 200520:4]
    reg a_first_counter_1 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), a_first_counter_1) @[Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 200530:4]
    node _a_first_counter1_T_1 = sub(a_first_counter_1, UInt<1>("h1")) @[Edges.scala 229:28 chipyard.TestHarness.TinyRocketConfig.fir 200531:4]
    node a_first_counter1_1 = tail(_a_first_counter1_T_1, 1) @[Edges.scala 229:28 chipyard.TestHarness.TinyRocketConfig.fir 200532:4]
    node a_first_1 = not(a_first_counter_1) @[Edges.scala 230:25 chipyard.TestHarness.TinyRocketConfig.fir 200533:4]
    node _a_first_counter_T_1 = mux(a_first_1, UInt<1>("h0"), a_first_counter1_1) @[Edges.scala 235:21 chipyard.TestHarness.TinyRocketConfig.fir 200541:6]
    node _GEN_13 = mux(a_first_done, _a_first_counter_T_1, a_first_counter_1) @[Edges.scala 234:17 chipyard.TestHarness.TinyRocketConfig.fir 200540:4 Edges.scala 235:15 chipyard.TestHarness.TinyRocketConfig.fir 200542:6 Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 200530:4]
    reg d_first_counter_1 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), d_first_counter_1) @[Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 200552:4]
    node _d_first_counter1_T_1 = sub(d_first_counter_1, UInt<1>("h1")) @[Edges.scala 229:28 chipyard.TestHarness.TinyRocketConfig.fir 200553:4]
    node d_first_counter1_1 = tail(_d_first_counter1_T_1, 1) @[Edges.scala 229:28 chipyard.TestHarness.TinyRocketConfig.fir 200554:4]
    node d_first_1 = not(d_first_counter_1) @[Edges.scala 230:25 chipyard.TestHarness.TinyRocketConfig.fir 200555:4]
    node _d_first_counter_T_1 = mux(d_first_1, UInt<1>("h0"), d_first_counter1_1) @[Edges.scala 235:21 chipyard.TestHarness.TinyRocketConfig.fir 200563:6]
    node _GEN_14 = mux(d_first_done, _d_first_counter_T_1, d_first_counter_1) @[Edges.scala 234:17 chipyard.TestHarness.TinyRocketConfig.fir 200562:4 Edges.scala 235:15 chipyard.TestHarness.TinyRocketConfig.fir 200564:6 Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 200552:4]
    node _GEN_72 = shl(io_in_d_bits_source, 2) @[Monitor.scala 634:69 chipyard.TestHarness.TinyRocketConfig.fir 200576:4]
    node _a_opcode_lookup_T = pad(_GEN_72, 10) @[Monitor.scala 634:69 chipyard.TestHarness.TinyRocketConfig.fir 200576:4]
    node _a_opcode_lookup_T_1 = dshr(inflight_opcodes, _a_opcode_lookup_T) @[Monitor.scala 634:44 chipyard.TestHarness.TinyRocketConfig.fir 200577:4]
    node _a_opcode_lookup_T_4 = sub(UInt<16>("h10"), UInt<16>("h1")) @[Monitor.scala 609:57 chipyard.TestHarness.TinyRocketConfig.fir 200580:4]
    node _a_opcode_lookup_T_5 = tail(_a_opcode_lookup_T_4, 1) @[Monitor.scala 609:57 chipyard.TestHarness.TinyRocketConfig.fir 200581:4]
    node _GEN_73 = pad(_a_opcode_lookup_T_5, 384) @[Monitor.scala 634:97 chipyard.TestHarness.TinyRocketConfig.fir 200582:4]
    node _a_opcode_lookup_T_6 = and(_a_opcode_lookup_T_1, _GEN_73) @[Monitor.scala 634:97 chipyard.TestHarness.TinyRocketConfig.fir 200582:4]
    node _GEN_74 = shr(_a_opcode_lookup_T_6, 1) @[Monitor.scala 634:152 chipyard.TestHarness.TinyRocketConfig.fir 200583:4]
    node _a_opcode_lookup_T_7 = pad(_GEN_74, 384) @[Monitor.scala 634:152 chipyard.TestHarness.TinyRocketConfig.fir 200583:4]
    node _a_size_lookup_T_1 = dshr(inflight_sizes, _a_opcode_lookup_T) @[Monitor.scala 638:40 chipyard.TestHarness.TinyRocketConfig.fir 200588:4]
    node _a_size_lookup_T_6 = and(_a_size_lookup_T_1, _GEN_73) @[Monitor.scala 638:91 chipyard.TestHarness.TinyRocketConfig.fir 200593:4]
    node _GEN_77 = shr(_a_size_lookup_T_6, 1) @[Monitor.scala 638:144 chipyard.TestHarness.TinyRocketConfig.fir 200594:4]
    node _a_size_lookup_T_7 = pad(_GEN_77, 384) @[Monitor.scala 638:144 chipyard.TestHarness.TinyRocketConfig.fir 200594:4]
    node _T_594 = and(io_in_a_valid, a_first_1) @[Monitor.scala 648:26 chipyard.TestHarness.TinyRocketConfig.fir 200618:4]
    node _a_set_wo_ready_T = dshlw(UInt<128>("h1"), io_in_a_bits_source) @[OneHot.scala 58:35 chipyard.TestHarness.TinyRocketConfig.fir 200621:6]
    node _GEN_15 = mux(_T_594, _a_set_wo_ready_T, UInt<128>("h0")) @[Monitor.scala 648:71 chipyard.TestHarness.TinyRocketConfig.fir 200620:4 Monitor.scala 649:22 chipyard.TestHarness.TinyRocketConfig.fir 200622:6 chipyard.TestHarness.TinyRocketConfig.fir 200569:4]
    node _T_597 = and(a_first_done, a_first_1) @[Monitor.scala 652:27 chipyard.TestHarness.TinyRocketConfig.fir 200625:4]
    node _a_opcodes_set_interm_T = shl(io_in_a_bits_opcode, 1) @[Monitor.scala 654:53 chipyard.TestHarness.TinyRocketConfig.fir 200630:6]
    node _a_opcodes_set_interm_T_1 = or(_a_opcodes_set_interm_T, UInt<4>("h1")) @[Monitor.scala 654:61 chipyard.TestHarness.TinyRocketConfig.fir 200631:6]
    node _a_sizes_set_interm_T = shl(io_in_a_bits_size, 1) @[Monitor.scala 655:51 chipyard.TestHarness.TinyRocketConfig.fir 200633:6]
    node _a_sizes_set_interm_T_1 = or(_a_sizes_set_interm_T, UInt<3>("h1")) @[Monitor.scala 655:59 chipyard.TestHarness.TinyRocketConfig.fir 200634:6]
    node _GEN_78 = shl(io_in_a_bits_source, 2) @[Monitor.scala 656:79 chipyard.TestHarness.TinyRocketConfig.fir 200636:6]
    node _a_opcodes_set_T = pad(_GEN_78, 10) @[Monitor.scala 656:79 chipyard.TestHarness.TinyRocketConfig.fir 200636:6]
    node a_opcodes_set_interm = mux(_T_597, _a_opcodes_set_interm_T_1, UInt<4>("h0")) @[Monitor.scala 652:72 chipyard.TestHarness.TinyRocketConfig.fir 200627:4 Monitor.scala 654:28 chipyard.TestHarness.TinyRocketConfig.fir 200632:6 chipyard.TestHarness.TinyRocketConfig.fir 200615:4]
    node _GEN_79 = pad(a_opcodes_set_interm, 1027) @[Monitor.scala 656:54 chipyard.TestHarness.TinyRocketConfig.fir 200637:6]
    node _a_opcodes_set_T_1 = dshlw(_GEN_79, _a_opcodes_set_T) @[Monitor.scala 656:54 chipyard.TestHarness.TinyRocketConfig.fir 200637:6]
    node a_sizes_set_interm = mux(_T_597, _a_sizes_set_interm_T_1, UInt<3>("h0")) @[Monitor.scala 652:72 chipyard.TestHarness.TinyRocketConfig.fir 200627:4 Monitor.scala 655:28 chipyard.TestHarness.TinyRocketConfig.fir 200635:6 chipyard.TestHarness.TinyRocketConfig.fir 200617:4]
    node _GEN_81 = pad(a_sizes_set_interm, 1026) @[Monitor.scala 657:52 chipyard.TestHarness.TinyRocketConfig.fir 200640:6]
    node _a_sizes_set_T_1 = dshlw(_GEN_81, _a_opcodes_set_T) @[Monitor.scala 657:52 chipyard.TestHarness.TinyRocketConfig.fir 200640:6]
    node _T_599 = dshr(inflight, io_in_a_bits_source) @[Monitor.scala 658:26 chipyard.TestHarness.TinyRocketConfig.fir 200642:6]
    node _T_600 = bits(_T_599, 0, 0) @[Monitor.scala 658:26 chipyard.TestHarness.TinyRocketConfig.fir 200643:6]
    node _T_601 = not(_T_600) @[Monitor.scala 658:17 chipyard.TestHarness.TinyRocketConfig.fir 200644:6]
    node _T_603 = or(_T_601, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 200646:6]
    node _T_604 = not(_T_603) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 200647:6]
    node _GEN_16 = mux(_T_597, _a_set_wo_ready_T, UInt<128>("h0")) @[Monitor.scala 652:72 chipyard.TestHarness.TinyRocketConfig.fir 200627:4 Monitor.scala 653:28 chipyard.TestHarness.TinyRocketConfig.fir 200629:6 chipyard.TestHarness.TinyRocketConfig.fir 200567:4]
    node _GEN_19 = mux(_T_597, _a_opcodes_set_T_1, UInt<1027>("h0")) @[Monitor.scala 652:72 chipyard.TestHarness.TinyRocketConfig.fir 200627:4 Monitor.scala 656:28 chipyard.TestHarness.TinyRocketConfig.fir 200638:6 chipyard.TestHarness.TinyRocketConfig.fir 200571:4]
    node _GEN_20 = mux(_T_597, _a_sizes_set_T_1, UInt<1026>("h0")) @[Monitor.scala 652:72 chipyard.TestHarness.TinyRocketConfig.fir 200627:4 Monitor.scala 657:28 chipyard.TestHarness.TinyRocketConfig.fir 200641:6 chipyard.TestHarness.TinyRocketConfig.fir 200573:4]
    node _T_605 = and(io_in_d_valid, d_first_1) @[Monitor.scala 671:26 chipyard.TestHarness.TinyRocketConfig.fir 200662:4]
    node _T_607 = not(_T_401) @[Monitor.scala 671:74 chipyard.TestHarness.TinyRocketConfig.fir 200664:4]
    node _T_608 = and(_T_605, _T_607) @[Monitor.scala 671:71 chipyard.TestHarness.TinyRocketConfig.fir 200665:4]
    node _d_clr_wo_ready_T = dshlw(UInt<128>("h1"), io_in_d_bits_source) @[OneHot.scala 58:35 chipyard.TestHarness.TinyRocketConfig.fir 200667:6]
    node _GEN_21 = mux(_T_608, _d_clr_wo_ready_T, UInt<128>("h0")) @[Monitor.scala 671:90 chipyard.TestHarness.TinyRocketConfig.fir 200666:4 Monitor.scala 672:22 chipyard.TestHarness.TinyRocketConfig.fir 200668:6 chipyard.TestHarness.TinyRocketConfig.fir 200656:4]
    node _T_610 = and(d_first_done, d_first_1) @[Monitor.scala 675:27 chipyard.TestHarness.TinyRocketConfig.fir 200671:4]
    node _T_613 = and(_T_610, _T_607) @[Monitor.scala 675:72 chipyard.TestHarness.TinyRocketConfig.fir 200674:4]
    node _GEN_83 = pad(_a_opcode_lookup_T_5, 1039) @[Monitor.scala 677:76 chipyard.TestHarness.TinyRocketConfig.fir 200683:6]
    node _d_opcodes_clr_T_5 = dshlw(_GEN_83, _a_opcode_lookup_T) @[Monitor.scala 677:76 chipyard.TestHarness.TinyRocketConfig.fir 200683:6]
    node _GEN_22 = mux(_T_613, _d_clr_wo_ready_T, UInt<128>("h0")) @[Monitor.scala 675:91 chipyard.TestHarness.TinyRocketConfig.fir 200675:4 Monitor.scala 676:21 chipyard.TestHarness.TinyRocketConfig.fir 200677:6 chipyard.TestHarness.TinyRocketConfig.fir 200654:4]
    node _GEN_23 = mux(_T_613, _d_opcodes_clr_T_5, UInt<1039>("h0")) @[Monitor.scala 675:91 chipyard.TestHarness.TinyRocketConfig.fir 200675:4 Monitor.scala 677:21 chipyard.TestHarness.TinyRocketConfig.fir 200684:6 chipyard.TestHarness.TinyRocketConfig.fir 200658:4]
    node _same_cycle_resp_T_2 = eq(io_in_a_bits_source, io_in_d_bits_source) @[Monitor.scala 681:113 chipyard.TestHarness.TinyRocketConfig.fir 200700:6]
    node same_cycle_resp = and(_T_594, _same_cycle_resp_T_2) @[Monitor.scala 681:88 chipyard.TestHarness.TinyRocketConfig.fir 200701:6]
    node _T_618 = dshr(inflight, io_in_d_bits_source) @[Monitor.scala 682:25 chipyard.TestHarness.TinyRocketConfig.fir 200702:6]
    node _T_619 = bits(_T_618, 0, 0) @[Monitor.scala 682:25 chipyard.TestHarness.TinyRocketConfig.fir 200703:6]
    node _T_620 = or(_T_619, same_cycle_resp) @[Monitor.scala 682:49 chipyard.TestHarness.TinyRocketConfig.fir 200704:6]
    node _T_622 = or(_T_620, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 200706:6]
    node _T_623 = not(_T_622) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 200707:6]
    node _GEN_27 = mux(eq(UInt<3>("h2"), io_in_a_bits_opcode), UInt<3>("h1"), UInt<3>("h0")) @[Monitor.scala 685:38 chipyard.TestHarness.TinyRocketConfig.fir 200713:8 Monitor.scala 685:38 chipyard.TestHarness.TinyRocketConfig.fir 200713:8]
    node _GEN_28 = mux(eq(UInt<3>("h3"), io_in_a_bits_opcode), UInt<3>("h1"), _GEN_27) @[Monitor.scala 685:38 chipyard.TestHarness.TinyRocketConfig.fir 200713:8 Monitor.scala 685:38 chipyard.TestHarness.TinyRocketConfig.fir 200713:8]
    node _GEN_29 = mux(eq(UInt<3>("h4"), io_in_a_bits_opcode), UInt<3>("h1"), _GEN_28) @[Monitor.scala 685:38 chipyard.TestHarness.TinyRocketConfig.fir 200713:8 Monitor.scala 685:38 chipyard.TestHarness.TinyRocketConfig.fir 200713:8]
    node _GEN_30 = mux(eq(UInt<3>("h5"), io_in_a_bits_opcode), UInt<3>("h2"), _GEN_29) @[Monitor.scala 685:38 chipyard.TestHarness.TinyRocketConfig.fir 200713:8 Monitor.scala 685:38 chipyard.TestHarness.TinyRocketConfig.fir 200713:8]
    node _GEN_31 = mux(eq(UInt<3>("h6"), io_in_a_bits_opcode), UInt<3>("h4"), _GEN_30) @[Monitor.scala 685:38 chipyard.TestHarness.TinyRocketConfig.fir 200713:8 Monitor.scala 685:38 chipyard.TestHarness.TinyRocketConfig.fir 200713:8]
    node _GEN_32 = mux(eq(UInt<3>("h7"), io_in_a_bits_opcode), UInt<3>("h4"), _GEN_31) @[Monitor.scala 685:38 chipyard.TestHarness.TinyRocketConfig.fir 200713:8 Monitor.scala 685:38 chipyard.TestHarness.TinyRocketConfig.fir 200713:8]
    node _T_624 = eq(io_in_d_bits_opcode, _GEN_32) @[Monitor.scala 685:38 chipyard.TestHarness.TinyRocketConfig.fir 200713:8]
    node _GEN_39 = mux(eq(UInt<3>("h6"), io_in_a_bits_opcode), UInt<3>("h5"), _GEN_30) @[Monitor.scala 686:39 chipyard.TestHarness.TinyRocketConfig.fir 200714:8 Monitor.scala 686:39 chipyard.TestHarness.TinyRocketConfig.fir 200714:8]
    node _GEN_40 = mux(eq(UInt<3>("h7"), io_in_a_bits_opcode), UInt<3>("h4"), _GEN_39) @[Monitor.scala 686:39 chipyard.TestHarness.TinyRocketConfig.fir 200714:8 Monitor.scala 686:39 chipyard.TestHarness.TinyRocketConfig.fir 200714:8]
    node _T_625 = eq(io_in_d_bits_opcode, _GEN_40) @[Monitor.scala 686:39 chipyard.TestHarness.TinyRocketConfig.fir 200714:8]
    node _T_626 = or(_T_624, _T_625) @[Monitor.scala 685:77 chipyard.TestHarness.TinyRocketConfig.fir 200715:8]
    node _T_628 = or(_T_626, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 200717:8]
    node _T_629 = not(_T_628) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 200718:8]
    node _T_630 = eq(io_in_a_bits_size, io_in_d_bits_size) @[Monitor.scala 687:36 chipyard.TestHarness.TinyRocketConfig.fir 200723:8]
    node _T_632 = or(_T_630, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 200725:8]
    node _T_633 = not(_T_632) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 200726:8]
    node a_opcode_lookup = bits(_a_opcode_lookup_T_7, 3, 0) @[chipyard.TestHarness.TinyRocketConfig.fir 200574:4 Monitor.scala 634:21 chipyard.TestHarness.TinyRocketConfig.fir 200584:4]
    node _T_634 = bits(a_opcode_lookup, 2, 0) @[chipyard.TestHarness.TinyRocketConfig.fir 200733:8]
    node _GEN_43 = mux(eq(UInt<3>("h2"), _T_634), UInt<3>("h1"), UInt<3>("h0")) @[Monitor.scala 689:38 chipyard.TestHarness.TinyRocketConfig.fir 200734:8 Monitor.scala 689:38 chipyard.TestHarness.TinyRocketConfig.fir 200734:8]
    node _GEN_44 = mux(eq(UInt<3>("h3"), _T_634), UInt<3>("h1"), _GEN_43) @[Monitor.scala 689:38 chipyard.TestHarness.TinyRocketConfig.fir 200734:8 Monitor.scala 689:38 chipyard.TestHarness.TinyRocketConfig.fir 200734:8]
    node _GEN_45 = mux(eq(UInt<3>("h4"), _T_634), UInt<3>("h1"), _GEN_44) @[Monitor.scala 689:38 chipyard.TestHarness.TinyRocketConfig.fir 200734:8 Monitor.scala 689:38 chipyard.TestHarness.TinyRocketConfig.fir 200734:8]
    node _GEN_46 = mux(eq(UInt<3>("h5"), _T_634), UInt<3>("h2"), _GEN_45) @[Monitor.scala 689:38 chipyard.TestHarness.TinyRocketConfig.fir 200734:8 Monitor.scala 689:38 chipyard.TestHarness.TinyRocketConfig.fir 200734:8]
    node _GEN_47 = mux(eq(UInt<3>("h6"), _T_634), UInt<3>("h4"), _GEN_46) @[Monitor.scala 689:38 chipyard.TestHarness.TinyRocketConfig.fir 200734:8 Monitor.scala 689:38 chipyard.TestHarness.TinyRocketConfig.fir 200734:8]
    node _GEN_48 = mux(eq(UInt<3>("h7"), _T_634), UInt<3>("h4"), _GEN_47) @[Monitor.scala 689:38 chipyard.TestHarness.TinyRocketConfig.fir 200734:8 Monitor.scala 689:38 chipyard.TestHarness.TinyRocketConfig.fir 200734:8]
    node _T_635 = eq(io_in_d_bits_opcode, _GEN_48) @[Monitor.scala 689:38 chipyard.TestHarness.TinyRocketConfig.fir 200734:8]
    node _GEN_55 = mux(eq(UInt<3>("h6"), _T_634), UInt<3>("h5"), _GEN_46) @[Monitor.scala 690:38 chipyard.TestHarness.TinyRocketConfig.fir 200736:8 Monitor.scala 690:38 chipyard.TestHarness.TinyRocketConfig.fir 200736:8]
    node _GEN_56 = mux(eq(UInt<3>("h7"), _T_634), UInt<3>("h4"), _GEN_55) @[Monitor.scala 690:38 chipyard.TestHarness.TinyRocketConfig.fir 200736:8 Monitor.scala 690:38 chipyard.TestHarness.TinyRocketConfig.fir 200736:8]
    node _T_637 = eq(io_in_d_bits_opcode, _GEN_56) @[Monitor.scala 690:38 chipyard.TestHarness.TinyRocketConfig.fir 200736:8]
    node _T_638 = or(_T_635, _T_637) @[Monitor.scala 689:72 chipyard.TestHarness.TinyRocketConfig.fir 200737:8]
    node _T_640 = or(_T_638, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 200739:8]
    node _T_641 = not(_T_640) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 200740:8]
    node a_size_lookup = bits(_a_size_lookup_T_7, 3, 0) @[chipyard.TestHarness.TinyRocketConfig.fir 200585:4 Monitor.scala 638:19 chipyard.TestHarness.TinyRocketConfig.fir 200595:4]
    node _GEN_86 = pad(io_in_d_bits_size, 4) @[Monitor.scala 691:36 chipyard.TestHarness.TinyRocketConfig.fir 200745:8]
    node _T_642 = eq(_GEN_86, a_size_lookup) @[Monitor.scala 691:36 chipyard.TestHarness.TinyRocketConfig.fir 200745:8]
    node _T_644 = or(_T_642, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 200747:8]
    node _T_645 = not(_T_644) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 200748:8]
    node _T_647 = and(_T_605, a_first_1) @[Monitor.scala 694:36 chipyard.TestHarness.TinyRocketConfig.fir 200756:4]
    node _T_648 = and(_T_647, io_in_a_valid) @[Monitor.scala 694:47 chipyard.TestHarness.TinyRocketConfig.fir 200757:4]
    node _T_650 = and(_T_648, _same_cycle_resp_T_2) @[Monitor.scala 694:65 chipyard.TestHarness.TinyRocketConfig.fir 200759:4]
    node _T_652 = and(_T_650, _T_607) @[Monitor.scala 694:116 chipyard.TestHarness.TinyRocketConfig.fir 200761:4]
    node _T_653 = not(io_in_d_ready) @[Monitor.scala 695:15 chipyard.TestHarness.TinyRocketConfig.fir 200763:6]
    node _T_654 = or(_T_653, io_in_a_ready) @[Monitor.scala 695:32 chipyard.TestHarness.TinyRocketConfig.fir 200764:6]
    node _T_656 = or(_T_654, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 200766:6]
    node _T_657 = not(_T_656) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 200767:6]
    node a_set_wo_ready = bits(_GEN_15, 95, 0) @[chipyard.TestHarness.TinyRocketConfig.fir 200568:4]
    node d_clr_wo_ready = bits(_GEN_21, 95, 0) @[chipyard.TestHarness.TinyRocketConfig.fir 200655:4]
    node _T_658 = neq(a_set_wo_ready, d_clr_wo_ready) @[Monitor.scala 699:29 chipyard.TestHarness.TinyRocketConfig.fir 200773:4]
    node _T_659 = orr(a_set_wo_ready) @[Monitor.scala 699:67 chipyard.TestHarness.TinyRocketConfig.fir 200774:4]
    node _T_660 = not(_T_659) @[Monitor.scala 699:51 chipyard.TestHarness.TinyRocketConfig.fir 200775:4]
    node _T_661 = or(_T_658, _T_660) @[Monitor.scala 699:48 chipyard.TestHarness.TinyRocketConfig.fir 200776:4]
    node _T_663 = or(_T_661, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 200778:4]
    node _T_664 = not(_T_663) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 200779:4]
    node a_set = bits(_GEN_16, 95, 0) @[chipyard.TestHarness.TinyRocketConfig.fir 200566:4]
    node _inflight_T = or(inflight, a_set) @[Monitor.scala 702:27 chipyard.TestHarness.TinyRocketConfig.fir 200784:4]
    node d_clr = bits(_GEN_22, 95, 0) @[chipyard.TestHarness.TinyRocketConfig.fir 200653:4]
    node _inflight_T_1 = not(d_clr) @[Monitor.scala 702:38 chipyard.TestHarness.TinyRocketConfig.fir 200785:4]
    node _inflight_T_2 = and(_inflight_T, _inflight_T_1) @[Monitor.scala 702:36 chipyard.TestHarness.TinyRocketConfig.fir 200786:4]
    node a_opcodes_set = bits(_GEN_19, 383, 0) @[chipyard.TestHarness.TinyRocketConfig.fir 200570:4]
    node _inflight_opcodes_T = or(inflight_opcodes, a_opcodes_set) @[Monitor.scala 703:43 chipyard.TestHarness.TinyRocketConfig.fir 200788:4]
    node d_opcodes_clr = bits(_GEN_23, 383, 0) @[chipyard.TestHarness.TinyRocketConfig.fir 200657:4]
    node _inflight_opcodes_T_1 = not(d_opcodes_clr) @[Monitor.scala 703:62 chipyard.TestHarness.TinyRocketConfig.fir 200789:4]
    node _inflight_opcodes_T_2 = and(_inflight_opcodes_T, _inflight_opcodes_T_1) @[Monitor.scala 703:60 chipyard.TestHarness.TinyRocketConfig.fir 200790:4]
    node a_sizes_set = bits(_GEN_20, 383, 0) @[chipyard.TestHarness.TinyRocketConfig.fir 200572:4]
    node _inflight_sizes_T = or(inflight_sizes, a_sizes_set) @[Monitor.scala 704:39 chipyard.TestHarness.TinyRocketConfig.fir 200792:4]
    node _inflight_sizes_T_2 = and(_inflight_sizes_T, _inflight_opcodes_T_1) @[Monitor.scala 704:54 chipyard.TestHarness.TinyRocketConfig.fir 200794:4]
    reg watchdog : UInt<32>, clock with :
      reset => (UInt<1>("h0"), watchdog) @[Monitor.scala 706:27 chipyard.TestHarness.TinyRocketConfig.fir 200796:4]
    node _T_665 = orr(inflight) @[Monitor.scala 709:26 chipyard.TestHarness.TinyRocketConfig.fir 200799:4]
    node _T_666 = not(_T_665) @[Monitor.scala 709:16 chipyard.TestHarness.TinyRocketConfig.fir 200800:4]
    node _T_667 = eq(plusarg_reader.out, UInt<32>("h0")) @[Monitor.scala 709:39 chipyard.TestHarness.TinyRocketConfig.fir 200801:4]
    node _T_668 = or(_T_666, _T_667) @[Monitor.scala 709:30 chipyard.TestHarness.TinyRocketConfig.fir 200802:4]
    node _T_669 = lt(watchdog, plusarg_reader.out) @[Monitor.scala 709:59 chipyard.TestHarness.TinyRocketConfig.fir 200803:4]
    node _T_670 = or(_T_668, _T_669) @[Monitor.scala 709:47 chipyard.TestHarness.TinyRocketConfig.fir 200804:4]
    node _T_672 = or(_T_670, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 200806:4]
    node _T_673 = not(_T_672) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 200807:4]
    node _watchdog_T = add(watchdog, UInt<32>("h1")) @[Monitor.scala 711:26 chipyard.TestHarness.TinyRocketConfig.fir 200812:4]
    node _watchdog_T_1 = tail(_watchdog_T, 1) @[Monitor.scala 711:26 chipyard.TestHarness.TinyRocketConfig.fir 200813:4]
    node _T_676 = or(a_first_done, d_first_done) @[Monitor.scala 712:27 chipyard.TestHarness.TinyRocketConfig.fir 200817:4]
    node _GEN_57 = mux(_T_676, UInt<32>("h0"), _watchdog_T_1) @[Monitor.scala 712:47 chipyard.TestHarness.TinyRocketConfig.fir 200818:4 Monitor.scala 712:58 chipyard.TestHarness.TinyRocketConfig.fir 200819:6 Monitor.scala 711:14 chipyard.TestHarness.TinyRocketConfig.fir 200814:4]
    reg inflight_1 : UInt<96>, clock with :
      reset => (UInt<1>("h0"), inflight_1) @[Monitor.scala 723:35 chipyard.TestHarness.TinyRocketConfig.fir 200821:4]
    reg inflight_sizes_1 : UInt<384>, clock with :
      reset => (UInt<1>("h0"), inflight_sizes_1) @[Monitor.scala 725:35 chipyard.TestHarness.TinyRocketConfig.fir 200823:4]
    reg d_first_counter_2 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), d_first_counter_2) @[Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 200858:4]
    node _d_first_counter1_T_2 = sub(d_first_counter_2, UInt<1>("h1")) @[Edges.scala 229:28 chipyard.TestHarness.TinyRocketConfig.fir 200859:4]
    node d_first_counter1_2 = tail(_d_first_counter1_T_2, 1) @[Edges.scala 229:28 chipyard.TestHarness.TinyRocketConfig.fir 200860:4]
    node d_first_2 = not(d_first_counter_2) @[Edges.scala 230:25 chipyard.TestHarness.TinyRocketConfig.fir 200861:4]
    node _d_first_counter_T_2 = mux(d_first_2, UInt<1>("h0"), d_first_counter1_2) @[Edges.scala 235:21 chipyard.TestHarness.TinyRocketConfig.fir 200869:6]
    node _GEN_59 = mux(d_first_done, _d_first_counter_T_2, d_first_counter_2) @[Edges.scala 234:17 chipyard.TestHarness.TinyRocketConfig.fir 200868:4 Edges.scala 235:15 chipyard.TestHarness.TinyRocketConfig.fir 200870:6 Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 200858:4]
    node _c_size_lookup_T_1 = dshr(inflight_sizes_1, _a_opcode_lookup_T) @[Monitor.scala 747:42 chipyard.TestHarness.TinyRocketConfig.fir 200894:4]
    node _c_size_lookup_T_6 = and(_c_size_lookup_T_1, _GEN_73) @[Monitor.scala 747:93 chipyard.TestHarness.TinyRocketConfig.fir 200899:4]
    node _GEN_92 = shr(_c_size_lookup_T_6, 1) @[Monitor.scala 747:146 chipyard.TestHarness.TinyRocketConfig.fir 200900:4]
    node _c_size_lookup_T_7 = pad(_GEN_92, 384) @[Monitor.scala 747:146 chipyard.TestHarness.TinyRocketConfig.fir 200900:4]
    node _T_694 = and(io_in_d_valid, d_first_2) @[Monitor.scala 779:26 chipyard.TestHarness.TinyRocketConfig.fir 200978:4]
    node _T_696 = and(_T_694, _T_401) @[Monitor.scala 779:71 chipyard.TestHarness.TinyRocketConfig.fir 200980:4]
    node _T_698 = and(d_first_done, d_first_2) @[Monitor.scala 783:27 chipyard.TestHarness.TinyRocketConfig.fir 200986:4]
    node _T_700 = and(_T_698, _T_401) @[Monitor.scala 783:72 chipyard.TestHarness.TinyRocketConfig.fir 200988:4]
    node _GEN_67 = mux(_T_700, _d_clr_wo_ready_T, UInt<128>("h0")) @[Monitor.scala 783:90 chipyard.TestHarness.TinyRocketConfig.fir 200989:4 Monitor.scala 784:21 chipyard.TestHarness.TinyRocketConfig.fir 200991:6 chipyard.TestHarness.TinyRocketConfig.fir 200970:4]
    node _GEN_68 = mux(_T_700, _d_opcodes_clr_T_5, UInt<1039>("h0")) @[Monitor.scala 783:90 chipyard.TestHarness.TinyRocketConfig.fir 200989:4 Monitor.scala 785:21 chipyard.TestHarness.TinyRocketConfig.fir 200998:6 chipyard.TestHarness.TinyRocketConfig.fir 200974:4]
    node _T_704 = dshr(inflight_1, io_in_d_bits_source) @[Monitor.scala 791:25 chipyard.TestHarness.TinyRocketConfig.fir 201024:6]
    node _T_705 = bits(_T_704, 0, 0) @[Monitor.scala 791:25 chipyard.TestHarness.TinyRocketConfig.fir 201025:6]
    node _T_708 = or(_T_705, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 201028:6]
    node _T_709 = not(_T_708) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 201029:6]
    node c_size_lookup = bits(_c_size_lookup_T_7, 3, 0) @[chipyard.TestHarness.TinyRocketConfig.fir 200882:4 Monitor.scala 747:21 chipyard.TestHarness.TinyRocketConfig.fir 200901:4]
    node _T_714 = eq(_GEN_86, c_size_lookup) @[Monitor.scala 795:36 chipyard.TestHarness.TinyRocketConfig.fir 201047:8]
    node _T_716 = or(_T_714, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 201049:8]
    node _T_717 = not(_T_716) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 201050:8]
    node d_clr_1 = bits(_GEN_67, 95, 0) @[chipyard.TestHarness.TinyRocketConfig.fir 200969:4]
    node _inflight_T_4 = not(d_clr_1) @[Monitor.scala 809:46 chipyard.TestHarness.TinyRocketConfig.fir 201092:4]
    node _inflight_T_5 = and(inflight_1, _inflight_T_4) @[Monitor.scala 809:44 chipyard.TestHarness.TinyRocketConfig.fir 201093:4]
    node d_opcodes_clr_1 = bits(_GEN_68, 383, 0) @[chipyard.TestHarness.TinyRocketConfig.fir 200973:4]
    node _inflight_opcodes_T_4 = not(d_opcodes_clr_1) @[Monitor.scala 810:62 chipyard.TestHarness.TinyRocketConfig.fir 201096:4]
    node _inflight_sizes_T_5 = and(inflight_sizes_1, _inflight_opcodes_T_4) @[Monitor.scala 811:56 chipyard.TestHarness.TinyRocketConfig.fir 201101:4]
    reg watchdog_1 : UInt<32>, clock with :
      reset => (UInt<1>("h0"), watchdog_1) @[Monitor.scala 813:27 chipyard.TestHarness.TinyRocketConfig.fir 201103:4]
    node _T_734 = orr(inflight_1) @[Monitor.scala 816:26 chipyard.TestHarness.TinyRocketConfig.fir 201106:4]
    node _T_735 = not(_T_734) @[Monitor.scala 816:16 chipyard.TestHarness.TinyRocketConfig.fir 201107:4]
    node _T_736 = eq(plusarg_reader_1.out, UInt<32>("h0")) @[Monitor.scala 816:39 chipyard.TestHarness.TinyRocketConfig.fir 201108:4]
    node _T_737 = or(_T_735, _T_736) @[Monitor.scala 816:30 chipyard.TestHarness.TinyRocketConfig.fir 201109:4]
    node _T_738 = lt(watchdog_1, plusarg_reader_1.out) @[Monitor.scala 816:59 chipyard.TestHarness.TinyRocketConfig.fir 201110:4]
    node _T_739 = or(_T_737, _T_738) @[Monitor.scala 816:47 chipyard.TestHarness.TinyRocketConfig.fir 201111:4]
    node _T_741 = or(_T_739, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 201113:4]
    node _T_742 = not(_T_741) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 201114:4]
    node _watchdog_T_2 = add(watchdog_1, UInt<32>("h1")) @[Monitor.scala 818:26 chipyard.TestHarness.TinyRocketConfig.fir 201119:4]
    node _watchdog_T_3 = tail(_watchdog_T_2, 1) @[Monitor.scala 818:26 chipyard.TestHarness.TinyRocketConfig.fir 201120:4]
    node _GEN_70 = mux(d_first_done, UInt<32>("h0"), _watchdog_T_3) @[Monitor.scala 819:47 chipyard.TestHarness.TinyRocketConfig.fir 201127:4 Monitor.scala 819:58 chipyard.TestHarness.TinyRocketConfig.fir 201128:6 Monitor.scala 818:14 chipyard.TestHarness.TinyRocketConfig.fir 201121:4]
    a_first_counter <= mux(reset, UInt<1>("h0"), _GEN_0) @[Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 200356:4 Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 200356:4]
    opcode <= mux(_T_565, io_in_a_bits_opcode, opcode) @[Monitor.scala 396:32 chipyard.TestHarness.TinyRocketConfig.fir 200421:4 Monitor.scala 397:15 chipyard.TestHarness.TinyRocketConfig.fir 200422:6 Monitor.scala 384:22 chipyard.TestHarness.TinyRocketConfig.fir 200370:4]
    param <= mux(_T_565, io_in_a_bits_param, param) @[Monitor.scala 396:32 chipyard.TestHarness.TinyRocketConfig.fir 200421:4 Monitor.scala 398:15 chipyard.TestHarness.TinyRocketConfig.fir 200423:6 Monitor.scala 385:22 chipyard.TestHarness.TinyRocketConfig.fir 200371:4]
    size <= mux(_T_565, io_in_a_bits_size, size) @[Monitor.scala 396:32 chipyard.TestHarness.TinyRocketConfig.fir 200421:4 Monitor.scala 399:15 chipyard.TestHarness.TinyRocketConfig.fir 200424:6 Monitor.scala 386:22 chipyard.TestHarness.TinyRocketConfig.fir 200372:4]
    source <= mux(_T_565, io_in_a_bits_source, source) @[Monitor.scala 396:32 chipyard.TestHarness.TinyRocketConfig.fir 200421:4 Monitor.scala 400:15 chipyard.TestHarness.TinyRocketConfig.fir 200425:6 Monitor.scala 387:22 chipyard.TestHarness.TinyRocketConfig.fir 200373:4]
    address <= mux(_T_565, io_in_a_bits_address, address) @[Monitor.scala 396:32 chipyard.TestHarness.TinyRocketConfig.fir 200421:4 Monitor.scala 401:15 chipyard.TestHarness.TinyRocketConfig.fir 200426:6 Monitor.scala 388:22 chipyard.TestHarness.TinyRocketConfig.fir 200374:4]
    d_first_counter <= mux(reset, UInt<1>("h0"), _GEN_6) @[Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 200436:4 Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 200436:4]
    opcode_1 <= mux(_T_593, io_in_d_bits_opcode, opcode_1) @[Monitor.scala 549:32 chipyard.TestHarness.TinyRocketConfig.fir 200510:4 Monitor.scala 550:15 chipyard.TestHarness.TinyRocketConfig.fir 200511:6 Monitor.scala 535:22 chipyard.TestHarness.TinyRocketConfig.fir 200450:4]
    size_1 <= mux(_T_593, io_in_d_bits_size, size_1) @[Monitor.scala 549:32 chipyard.TestHarness.TinyRocketConfig.fir 200510:4 Monitor.scala 552:15 chipyard.TestHarness.TinyRocketConfig.fir 200513:6 Monitor.scala 537:22 chipyard.TestHarness.TinyRocketConfig.fir 200452:4]
    source_1 <= mux(_T_593, io_in_d_bits_source, source_1) @[Monitor.scala 549:32 chipyard.TestHarness.TinyRocketConfig.fir 200510:4 Monitor.scala 553:15 chipyard.TestHarness.TinyRocketConfig.fir 200514:6 Monitor.scala 538:22 chipyard.TestHarness.TinyRocketConfig.fir 200453:4]
    inflight <= mux(reset, UInt<96>("h0"), _inflight_T_2) @[Monitor.scala 611:27 chipyard.TestHarness.TinyRocketConfig.fir 200518:4 Monitor.scala 611:27 chipyard.TestHarness.TinyRocketConfig.fir 200518:4 Monitor.scala 702:14 chipyard.TestHarness.TinyRocketConfig.fir 200787:4]
    inflight_opcodes <= mux(reset, UInt<384>("h0"), _inflight_opcodes_T_2) @[Monitor.scala 613:35 chipyard.TestHarness.TinyRocketConfig.fir 200519:4 Monitor.scala 613:35 chipyard.TestHarness.TinyRocketConfig.fir 200519:4 Monitor.scala 703:22 chipyard.TestHarness.TinyRocketConfig.fir 200791:4]
    inflight_sizes <= mux(reset, UInt<384>("h0"), _inflight_sizes_T_2) @[Monitor.scala 615:33 chipyard.TestHarness.TinyRocketConfig.fir 200520:4 Monitor.scala 615:33 chipyard.TestHarness.TinyRocketConfig.fir 200520:4 Monitor.scala 704:20 chipyard.TestHarness.TinyRocketConfig.fir 200795:4]
    a_first_counter_1 <= mux(reset, UInt<1>("h0"), _GEN_13) @[Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 200530:4 Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 200530:4]
    d_first_counter_1 <= mux(reset, UInt<1>("h0"), _GEN_14) @[Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 200552:4 Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 200552:4]
    watchdog <= mux(reset, UInt<32>("h0"), _GEN_57) @[Monitor.scala 706:27 chipyard.TestHarness.TinyRocketConfig.fir 200796:4 Monitor.scala 706:27 chipyard.TestHarness.TinyRocketConfig.fir 200796:4]
    inflight_1 <= mux(reset, UInt<96>("h0"), _inflight_T_5) @[Monitor.scala 723:35 chipyard.TestHarness.TinyRocketConfig.fir 200821:4 Monitor.scala 723:35 chipyard.TestHarness.TinyRocketConfig.fir 200821:4 Monitor.scala 809:22 chipyard.TestHarness.TinyRocketConfig.fir 201094:4]
    inflight_sizes_1 <= mux(reset, UInt<384>("h0"), _inflight_sizes_T_5) @[Monitor.scala 725:35 chipyard.TestHarness.TinyRocketConfig.fir 200823:4 Monitor.scala 725:35 chipyard.TestHarness.TinyRocketConfig.fir 200823:4 Monitor.scala 811:22 chipyard.TestHarness.TinyRocketConfig.fir 201102:4]
    d_first_counter_2 <= mux(reset, UInt<1>("h0"), _GEN_59) @[Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 200858:4 Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 200858:4]
    watchdog_1 <= mux(reset, UInt<32>("h0"), _GEN_70) @[Monitor.scala 813:27 chipyard.TestHarness.TinyRocketConfig.fir 201103:4 Monitor.scala 813:27 chipyard.TestHarness.TinyRocketConfig.fir 201103:4]
    node _GEN_98 = and(io_in_a_valid, _T_20) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199448:10]
    printf(clock, and(_GEN_98, _T_43), "Assertion failed: 'A' channel carries AcquireBlock type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199448:10]
    stop(clock, and(_GEN_98, _T_43), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199449:10]
    printf(clock, and(_GEN_98, _T_43), "Assertion failed: 'A' channel carries AcquireBlock from a client which does not support Probe (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199467:10]
    stop(clock, and(_GEN_98, _T_43), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199468:10]
    printf(clock, and(_GEN_98, _T_61), "Assertion failed: 'A' channel AcquireBlock carries invalid source ID (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199474:10]
    stop(clock, and(_GEN_98, _T_61), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199475:10]
    printf(clock, and(_GEN_98, _T_65), "Assertion failed: 'A' channel AcquireBlock smaller than a beat (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199482:10]
    stop(clock, and(_GEN_98, _T_65), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199483:10]
    printf(clock, and(_GEN_98, _T_68), "Assertion failed: 'A' channel AcquireBlock address not aligned to size (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199489:10]
    stop(clock, and(_GEN_98, _T_68), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199490:10]
    printf(clock, and(_GEN_98, _T_72), "Assertion failed: 'A' channel AcquireBlock carries invalid grow param (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199497:10]
    stop(clock, and(_GEN_98, _T_72), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199498:10]
    printf(clock, and(_GEN_98, _T_77), "Assertion failed: 'A' channel AcquireBlock contains invalid mask (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199506:10]
    stop(clock, and(_GEN_98, _T_77), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199507:10]
    printf(clock, and(_GEN_98, _T_81), "Assertion failed: 'A' channel AcquireBlock is corrupt (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199514:10]
    stop(clock, and(_GEN_98, _T_81), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199515:10]
    node _GEN_114 = and(io_in_a_valid, _T_82) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199546:10]
    printf(clock, and(_GEN_114, _T_43), "Assertion failed: 'A' channel carries AcquirePerm type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199546:10]
    stop(clock, and(_GEN_114, _T_43), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199547:10]
    printf(clock, and(_GEN_114, _T_43), "Assertion failed: 'A' channel carries AcquirePerm from a client which does not support Probe (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199565:10]
    stop(clock, and(_GEN_114, _T_43), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199566:10]
    printf(clock, and(_GEN_114, _T_61), "Assertion failed: 'A' channel AcquirePerm carries invalid source ID (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199572:10]
    stop(clock, and(_GEN_114, _T_61), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199573:10]
    printf(clock, and(_GEN_114, _T_65), "Assertion failed: 'A' channel AcquirePerm smaller than a beat (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199580:10]
    stop(clock, and(_GEN_114, _T_65), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199581:10]
    printf(clock, and(_GEN_114, _T_68), "Assertion failed: 'A' channel AcquirePerm address not aligned to size (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199587:10]
    stop(clock, and(_GEN_114, _T_68), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199588:10]
    printf(clock, and(_GEN_114, _T_72), "Assertion failed: 'A' channel AcquirePerm carries invalid grow param (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199595:10]
    stop(clock, and(_GEN_114, _T_72), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199596:10]
    printf(clock, and(_GEN_114, _T_138), "Assertion failed: 'A' channel AcquirePerm requests NtoB (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199603:10]
    stop(clock, and(_GEN_114, _T_138), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199604:10]
    printf(clock, and(_GEN_114, _T_77), "Assertion failed: 'A' channel AcquirePerm contains invalid mask (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199612:10]
    stop(clock, and(_GEN_114, _T_77), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199613:10]
    printf(clock, and(_GEN_114, _T_81), "Assertion failed: 'A' channel AcquirePerm is corrupt (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199620:10]
    stop(clock, and(_GEN_114, _T_81), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199621:10]
    node _GEN_132 = and(io_in_a_valid, _T_148) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199643:10]
    printf(clock, and(_GEN_132, _T_61), "Assertion failed: 'A' channel carries Get type which master claims it can't emit (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199643:10]
    stop(clock, and(_GEN_132, _T_61), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199644:10]
    printf(clock, and(_GEN_132, _T_176), "Assertion failed: 'A' channel carries Get type which slave claims it can't support (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199661:10]
    stop(clock, and(_GEN_132, _T_176), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199662:10]
    printf(clock, and(_GEN_132, _T_61), "Assertion failed: 'A' channel Get carries invalid source ID (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199668:10]
    stop(clock, and(_GEN_132, _T_61), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199669:10]
    printf(clock, and(_GEN_132, _T_68), "Assertion failed: 'A' channel Get address not aligned to size (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199675:10]
    stop(clock, and(_GEN_132, _T_68), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199676:10]
    printf(clock, and(_GEN_132, _T_186), "Assertion failed: 'A' channel Get carries invalid param (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199683:10]
    stop(clock, and(_GEN_132, _T_186), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199684:10]
    printf(clock, and(_GEN_132, _T_190), "Assertion failed: 'A' channel Get contains invalid mask (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199691:10]
    stop(clock, and(_GEN_132, _T_190), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199692:10]
    printf(clock, and(_GEN_132, _T_81), "Assertion failed: 'A' channel Get is corrupt (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199699:10]
    stop(clock, and(_GEN_132, _T_81), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199700:10]
    node _GEN_146 = and(io_in_a_valid, _T_195) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199734:10]
    printf(clock, and(_GEN_146, _T_221), "Assertion failed: 'A' channel carries PutFull type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199734:10]
    stop(clock, and(_GEN_146, _T_221), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199735:10]
    printf(clock, and(_GEN_146, _T_61), "Assertion failed: 'A' channel PutFull carries invalid source ID (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199741:10]
    stop(clock, and(_GEN_146, _T_61), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199742:10]
    printf(clock, and(_GEN_146, _T_68), "Assertion failed: 'A' channel PutFull address not aligned to size (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199748:10]
    stop(clock, and(_GEN_146, _T_68), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199749:10]
    printf(clock, and(_GEN_146, _T_186), "Assertion failed: 'A' channel PutFull carries invalid param (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199756:10]
    stop(clock, and(_GEN_146, _T_186), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199757:10]
    printf(clock, and(_GEN_146, _T_190), "Assertion failed: 'A' channel PutFull contains invalid mask (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199764:10]
    stop(clock, and(_GEN_146, _T_190), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199765:10]
    node _GEN_156 = and(io_in_a_valid, _T_236) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199799:10]
    printf(clock, and(_GEN_156, _T_221), "Assertion failed: 'A' channel carries PutPartial type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199799:10]
    stop(clock, and(_GEN_156, _T_221), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199800:10]
    printf(clock, and(_GEN_156, _T_61), "Assertion failed: 'A' channel PutPartial carries invalid source ID (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199806:10]
    stop(clock, and(_GEN_156, _T_61), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199807:10]
    printf(clock, and(_GEN_156, _T_68), "Assertion failed: 'A' channel PutPartial address not aligned to size (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199813:10]
    stop(clock, and(_GEN_156, _T_68), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199814:10]
    printf(clock, and(_GEN_156, _T_186), "Assertion failed: 'A' channel PutPartial carries invalid param (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199821:10]
    stop(clock, and(_GEN_156, _T_186), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199822:10]
    printf(clock, and(_GEN_156, _T_278), "Assertion failed: 'A' channel PutPartial contains invalid mask (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199831:10]
    stop(clock, and(_GEN_156, _T_278), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199832:10]
    node _GEN_166 = and(io_in_a_valid, _T_279) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199863:10]
    printf(clock, and(_GEN_166, _T_43), "Assertion failed: 'A' channel carries Arithmetic type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199863:10]
    stop(clock, and(_GEN_166, _T_43), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199864:10]
    printf(clock, and(_GEN_166, _T_61), "Assertion failed: 'A' channel Arithmetic carries invalid source ID (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199870:10]
    stop(clock, and(_GEN_166, _T_61), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199871:10]
    printf(clock, and(_GEN_166, _T_68), "Assertion failed: 'A' channel Arithmetic address not aligned to size (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199877:10]
    stop(clock, and(_GEN_166, _T_68), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199878:10]
    printf(clock, and(_GEN_166, _T_312), "Assertion failed: 'A' channel Arithmetic carries invalid opcode param (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199885:10]
    stop(clock, and(_GEN_166, _T_312), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199886:10]
    printf(clock, and(_GEN_166, _T_190), "Assertion failed: 'A' channel Arithmetic contains invalid mask (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199893:10]
    stop(clock, and(_GEN_166, _T_190), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199894:10]
    node _GEN_176 = and(io_in_a_valid, _T_317) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199925:10]
    printf(clock, and(_GEN_176, _T_43), "Assertion failed: 'A' channel carries Logical type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199925:10]
    stop(clock, and(_GEN_176, _T_43), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199926:10]
    printf(clock, and(_GEN_176, _T_61), "Assertion failed: 'A' channel Logical carries invalid source ID (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199932:10]
    stop(clock, and(_GEN_176, _T_61), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199933:10]
    printf(clock, and(_GEN_176, _T_68), "Assertion failed: 'A' channel Logical address not aligned to size (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199939:10]
    stop(clock, and(_GEN_176, _T_68), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199940:10]
    printf(clock, and(_GEN_176, _T_350), "Assertion failed: 'A' channel Logical carries invalid opcode param (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199947:10]
    stop(clock, and(_GEN_176, _T_350), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199948:10]
    printf(clock, and(_GEN_176, _T_190), "Assertion failed: 'A' channel Logical contains invalid mask (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199955:10]
    stop(clock, and(_GEN_176, _T_190), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199956:10]
    node _GEN_186 = and(io_in_a_valid, _T_355) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199987:10]
    printf(clock, and(_GEN_186, _T_43), "Assertion failed: 'A' channel carries Hint type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199987:10]
    stop(clock, and(_GEN_186, _T_43), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199988:10]
    printf(clock, and(_GEN_186, _T_61), "Assertion failed: 'A' channel Hint carries invalid source ID (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199994:10]
    stop(clock, and(_GEN_186, _T_61), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 199995:10]
    printf(clock, and(_GEN_186, _T_68), "Assertion failed: 'A' channel Hint address not aligned to size (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 200001:10]
    stop(clock, and(_GEN_186, _T_68), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 200002:10]
    printf(clock, and(_GEN_186, _T_388), "Assertion failed: 'A' channel Hint carries invalid opcode param (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 200009:10]
    stop(clock, and(_GEN_186, _T_388), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 200010:10]
    printf(clock, and(_GEN_186, _T_190), "Assertion failed: 'A' channel Hint contains invalid mask (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 200017:10]
    stop(clock, and(_GEN_186, _T_190), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 200018:10]
    printf(clock, and(_GEN_186, _T_81), "Assertion failed: 'A' channel Hint is corrupt (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 200025:10]
    stop(clock, and(_GEN_186, _T_81), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 200026:10]
    printf(clock, and(io_in_d_valid, _T_400), "Assertion failed: 'D' channel has invalid opcode (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 200036:8]
    stop(clock, and(io_in_d_valid, _T_400), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 200037:8]
    node _GEN_198 = and(io_in_d_valid, _T_401) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 200057:10]
    printf(clock, and(_GEN_198, _T_404), "Assertion failed: 'D' channel ReleaseAck carries invalid source ID (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 200057:10]
    stop(clock, and(_GEN_198, _T_404), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 200058:10]
    printf(clock, and(_GEN_198, _T_408), "Assertion failed: 'D' channel ReleaseAck smaller than a beat (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 200065:10]
    stop(clock, and(_GEN_198, _T_408), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 200066:10]
    node _GEN_202 = and(io_in_d_valid, _T_421) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 200099:10]
    printf(clock, and(_GEN_202, _T_404), "Assertion failed: 'D' channel Grant carries invalid source ID (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 200099:10]
    stop(clock, and(_GEN_202, _T_404), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 200100:10]
    printf(clock, and(_GEN_202, _T_43), "Assertion failed: 'D' channel Grant carries invalid sink ID (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 200106:10]
    stop(clock, and(_GEN_202, _T_43), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 200107:10]
    printf(clock, and(_GEN_202, _T_408), "Assertion failed: 'D' channel Grant smaller than a beat (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 200114:10]
    stop(clock, and(_GEN_202, _T_408), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 200115:10]
    node _GEN_208 = and(io_in_d_valid, _T_449) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 200157:10]
    printf(clock, and(_GEN_208, _T_404), "Assertion failed: 'D' channel GrantData carries invalid source ID (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 200157:10]
    stop(clock, and(_GEN_208, _T_404), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 200158:10]
    printf(clock, and(_GEN_208, _T_43), "Assertion failed: 'D' channel GrantData carries invalid sink ID (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 200164:10]
    stop(clock, and(_GEN_208, _T_43), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 200165:10]
    printf(clock, and(_GEN_208, _T_408), "Assertion failed: 'D' channel GrantData smaller than a beat (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 200172:10]
    stop(clock, and(_GEN_208, _T_408), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 200173:10]
    node _GEN_214 = and(io_in_d_valid, _T_478) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 200216:10]
    printf(clock, and(_GEN_214, _T_404), "Assertion failed: 'D' channel AccessAck carries invalid source ID (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 200216:10]
    stop(clock, and(_GEN_214, _T_404), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 200217:10]
    node _GEN_216 = and(io_in_d_valid, _T_495) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 200251:10]
    printf(clock, and(_GEN_216, _T_404), "Assertion failed: 'D' channel AccessAckData carries invalid source ID (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 200251:10]
    stop(clock, and(_GEN_216, _T_404), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 200252:10]
    node _GEN_218 = and(io_in_d_valid, _T_513) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 200287:10]
    printf(clock, and(_GEN_218, _T_404), "Assertion failed: 'D' channel HintAck carries invalid source ID (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 200287:10]
    stop(clock, and(_GEN_218, _T_404), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 200288:10]
    printf(clock, and(_T_543, _T_547), "Assertion failed: 'A' channel opcode changed within multibeat operation (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 200383:8]
    stop(clock, and(_T_543, _T_547), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 200384:8]
    printf(clock, and(_T_543, _T_551), "Assertion failed: 'A' channel param changed within multibeat operation (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 200391:8]
    stop(clock, and(_T_543, _T_551), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 200392:8]
    printf(clock, and(_T_543, _T_555), "Assertion failed: 'A' channel size changed within multibeat operation (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 200399:8]
    stop(clock, and(_T_543, _T_555), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 200400:8]
    printf(clock, and(_T_543, _T_559), "Assertion failed: 'A' channel source changed within multibeat operation (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 200407:8]
    stop(clock, and(_T_543, _T_559), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 200408:8]
    printf(clock, and(_T_543, _T_563), "Assertion failed: 'A' channel address changed with multibeat operation (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 200415:8]
    stop(clock, and(_T_543, _T_563), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 200416:8]
    printf(clock, and(_T_567, _T_571), "Assertion failed: 'D' channel opcode changed within multibeat operation (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 200464:8]
    stop(clock, and(_T_567, _T_571), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 200465:8]
    printf(clock, and(_T_567, _T_579), "Assertion failed: 'D' channel size changed within multibeat operation (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 200480:8]
    stop(clock, and(_T_567, _T_579), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 200481:8]
    printf(clock, and(_T_567, _T_583), "Assertion failed: 'D' channel source changed within multibeat operation (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 200488:8]
    stop(clock, and(_T_567, _T_583), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 200489:8]
    printf(clock, and(_T_597, _T_604), "Assertion failed: 'A' channel re-used a source ID (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 200649:8]
    stop(clock, and(_T_597, _T_604), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 200650:8]
    printf(clock, and(_T_608, _T_623), "Assertion failed: 'D' channel acknowledged for nothing inflight (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 200709:8]
    stop(clock, and(_T_608, _T_623), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 200710:8]
    node _GEN_220 = and(_T_608, same_cycle_resp) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 200720:10]
    printf(clock, and(_GEN_220, _T_629), "Assertion failed: 'D' channel contains improper opcode response (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 200720:10]
    stop(clock, and(_GEN_220, _T_629), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 200721:10]
    printf(clock, and(_GEN_220, _T_633), "Assertion failed: 'D' channel contains improper response size (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 200728:10]
    stop(clock, and(_GEN_220, _T_633), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 200729:10]
    node _GEN_224 = not(same_cycle_resp) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 200742:10]
    node _GEN_225 = and(_T_608, _GEN_224) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 200742:10]
    printf(clock, and(_GEN_225, _T_641), "Assertion failed: 'D' channel contains improper opcode response (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 200742:10]
    stop(clock, and(_GEN_225, _T_641), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 200743:10]
    printf(clock, and(_GEN_225, _T_645), "Assertion failed: 'D' channel contains improper response size (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 200750:10]
    stop(clock, and(_GEN_225, _T_645), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 200751:10]
    printf(clock, and(_T_652, _T_657), "Assertion failed: ready check\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 200769:8]
    stop(clock, and(_T_652, _T_657), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 200770:8]
    printf(clock, _T_664, "Assertion failed: 'A' and 'D' concurrent, despite minlatency 1 (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 200781:6]
    stop(clock, _T_664, 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 200782:6]
    printf(clock, _T_673, "Assertion failed: TileLink timeout expired (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 200809:6]
    stop(clock, _T_673, 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 200810:6]
    printf(clock, and(_T_696, _T_709), "Assertion failed: 'D' channel acknowledged for nothing inflight (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 201031:8]
    stop(clock, and(_T_696, _T_709), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 201032:8]
    printf(clock, and(_T_696, _T_717), "Assertion failed: 'D' channel contains improper response size (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 201052:10]
    stop(clock, and(_T_696, _T_717), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 201053:10]
    printf(clock, _T_742, "Assertion failed: TileLink timeout expired (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 201116:6]
    stop(clock, _T_742, 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 201117:6]

  module TLRAM_inTestHarness : @[chipyard.TestHarness.TinyRocketConfig.fir 201131:2]
    input clock : Clock @[chipyard.TestHarness.TinyRocketConfig.fir 201132:4]
    input reset : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 201133:4]
    output auto_in_a_ready : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 201134:4]
    input auto_in_a_valid : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 201134:4]
    input auto_in_a_bits_opcode : UInt<3> @[chipyard.TestHarness.TinyRocketConfig.fir 201134:4]
    input auto_in_a_bits_param : UInt<3> @[chipyard.TestHarness.TinyRocketConfig.fir 201134:4]
    input auto_in_a_bits_size : UInt<2> @[chipyard.TestHarness.TinyRocketConfig.fir 201134:4]
    input auto_in_a_bits_source : UInt<7> @[chipyard.TestHarness.TinyRocketConfig.fir 201134:4]
    input auto_in_a_bits_address : UInt<29> @[chipyard.TestHarness.TinyRocketConfig.fir 201134:4]
    input auto_in_a_bits_mask : UInt<4> @[chipyard.TestHarness.TinyRocketConfig.fir 201134:4]
    input auto_in_a_bits_data : UInt<32> @[chipyard.TestHarness.TinyRocketConfig.fir 201134:4]
    input auto_in_a_bits_corrupt : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 201134:4]
    input auto_in_d_ready : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 201134:4]
    output auto_in_d_valid : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 201134:4]
    output auto_in_d_bits_opcode : UInt<3> @[chipyard.TestHarness.TinyRocketConfig.fir 201134:4]
    output auto_in_d_bits_size : UInt<2> @[chipyard.TestHarness.TinyRocketConfig.fir 201134:4]
    output auto_in_d_bits_source : UInt<7> @[chipyard.TestHarness.TinyRocketConfig.fir 201134:4]
    output auto_in_d_bits_data : UInt<32> @[chipyard.TestHarness.TinyRocketConfig.fir 201134:4]

    inst monitor of TLMonitor_42_inTestHarness @[Nodes.scala 24:25 chipyard.TestHarness.TinyRocketConfig.fir 201141:4]
    inst mem of mem_inTestHarness @[DescribedSRAM.scala 19:26 chipyard.TestHarness.TinyRocketConfig.fir 201165:4]
    reg r_full : UInt<1>, clock with :
      reset => (UInt<1>("h0"), r_full) @[SRAM.scala 134:30 chipyard.TestHarness.TinyRocketConfig.fir 201180:4]
    reg r_size : UInt<2>, clock with :
      reset => (UInt<1>("h0"), r_size) @[SRAM.scala 137:26 chipyard.TestHarness.TinyRocketConfig.fir 201183:4]
    reg r_source : UInt<7>, clock with :
      reset => (UInt<1>("h0"), r_source) @[SRAM.scala 138:26 chipyard.TestHarness.TinyRocketConfig.fir 201184:4]
    reg r_read : UInt<1>, clock with :
      reset => (UInt<1>("h0"), r_read) @[SRAM.scala 139:26 chipyard.TestHarness.TinyRocketConfig.fir 201185:4]
    reg REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG) @[SRAM.scala 321:58 chipyard.TestHarness.TinyRocketConfig.fir 201547:4]
    reg r_1 : UInt<8>, clock with :
      reset => (UInt<1>("h0"), r_1) @[Reg.scala 15:16 chipyard.TestHarness.TinyRocketConfig.fir 201549:4]
    node r_raw_data_1 = mux(REG, mem.RW0_rdata_1, r_1) @[package.scala 79:42 chipyard.TestHarness.TinyRocketConfig.fir 201556:4]
    reg r_0 : UInt<8>, clock with :
      reset => (UInt<1>("h0"), r_0) @[Reg.scala 15:16 chipyard.TestHarness.TinyRocketConfig.fir 201549:4]
    node r_raw_data_0 = mux(REG, mem.RW0_rdata_0, r_0) @[package.scala 79:42 chipyard.TestHarness.TinyRocketConfig.fir 201556:4]
    node r_corrected_lo = cat(r_raw_data_1, r_raw_data_0) @[Cat.scala 30:58 chipyard.TestHarness.TinyRocketConfig.fir 201218:4]
    reg r_3 : UInt<8>, clock with :
      reset => (UInt<1>("h0"), r_3) @[Reg.scala 15:16 chipyard.TestHarness.TinyRocketConfig.fir 201549:4]
    node r_raw_data_3 = mux(REG, mem.RW0_rdata_3, r_3) @[package.scala 79:42 chipyard.TestHarness.TinyRocketConfig.fir 201556:4]
    reg r_2 : UInt<8>, clock with :
      reset => (UInt<1>("h0"), r_2) @[Reg.scala 15:16 chipyard.TestHarness.TinyRocketConfig.fir 201549:4]
    node r_raw_data_2 = mux(REG, mem.RW0_rdata_2, r_2) @[package.scala 79:42 chipyard.TestHarness.TinyRocketConfig.fir 201556:4]
    node r_corrected_hi = cat(r_raw_data_3, r_raw_data_2) @[Cat.scala 30:58 chipyard.TestHarness.TinyRocketConfig.fir 201219:4]
    node _bundleIn_0_a_ready_T_2 = not(r_full) @[SRAM.scala 243:41 chipyard.TestHarness.TinyRocketConfig.fir 201347:4]
    node in_a_ready = or(_bundleIn_0_a_ready_T_2, auto_in_d_ready) @[SRAM.scala 243:49 chipyard.TestHarness.TinyRocketConfig.fir 201348:4]
    node a_read = eq(auto_in_a_bits_opcode, UInt<3>("h4")) @[SRAM.scala 251:35 chipyard.TestHarness.TinyRocketConfig.fir 201356:4]
    node _GEN_18 = mux(auto_in_d_ready, UInt<1>("h0"), r_full) @[SRAM.scala 273:20 chipyard.TestHarness.TinyRocketConfig.fir 201381:4 SRAM.scala 273:29 chipyard.TestHarness.TinyRocketConfig.fir 201382:6 SRAM.scala 134:30 chipyard.TestHarness.TinyRocketConfig.fir 201180:4]
    node _T_18 = and(in_a_ready, auto_in_a_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.TinyRocketConfig.fir 201384:4]
    node _T_19 = not(a_read) @[SRAM.scala 287:13 chipyard.TestHarness.TinyRocketConfig.fir 201398:6]
    node _GEN_20 = or(_T_18, _GEN_18) @[SRAM.scala 274:24 chipyard.TestHarness.TinyRocketConfig.fir 201385:4 SRAM.scala 275:18 chipyard.TestHarness.TinyRocketConfig.fir 201386:6]
    node _a_lanes_T = bits(auto_in_a_bits_mask, 0, 0) @[SRAM.scala 303:64 chipyard.TestHarness.TinyRocketConfig.fir 201465:4]
    node a_lanes_lo_lo = orr(_a_lanes_T) @[SRAM.scala 303:95 chipyard.TestHarness.TinyRocketConfig.fir 201466:4]
    node _a_lanes_T_1 = bits(auto_in_a_bits_mask, 1, 1) @[SRAM.scala 303:64 chipyard.TestHarness.TinyRocketConfig.fir 201467:4]
    node a_lanes_lo_hi = orr(_a_lanes_T_1) @[SRAM.scala 303:95 chipyard.TestHarness.TinyRocketConfig.fir 201468:4]
    node _a_lanes_T_2 = bits(auto_in_a_bits_mask, 2, 2) @[SRAM.scala 303:64 chipyard.TestHarness.TinyRocketConfig.fir 201469:4]
    node a_lanes_hi_lo = orr(_a_lanes_T_2) @[SRAM.scala 303:95 chipyard.TestHarness.TinyRocketConfig.fir 201470:4]
    node _a_lanes_T_3 = bits(auto_in_a_bits_mask, 3, 3) @[SRAM.scala 303:64 chipyard.TestHarness.TinyRocketConfig.fir 201471:4]
    node a_lanes_hi_hi = orr(_a_lanes_T_3) @[SRAM.scala 303:95 chipyard.TestHarness.TinyRocketConfig.fir 201472:4]
    node a_lanes = cat(cat(a_lanes_hi_hi, a_lanes_hi_lo), cat(a_lanes_lo_hi, a_lanes_lo_lo)) @[Cat.scala 30:58 chipyard.TestHarness.TinyRocketConfig.fir 201475:4]
    node wen = and(_T_18, _T_19) @[SRAM.scala 309:52 chipyard.TestHarness.TinyRocketConfig.fir 201483:4]
    node _ren_T = not(wen) @[SRAM.scala 310:15 chipyard.TestHarness.TinyRocketConfig.fir 201486:4]
    node ren = and(_ren_T, _T_18) @[SRAM.scala 310:20 chipyard.TestHarness.TinyRocketConfig.fir 201488:4]
    node _index_T = shr(auto_in_a_bits_address, 2) @[SRAM.scala 320:36 chipyard.TestHarness.TinyRocketConfig.fir 201502:4]
    node index_lo_lo_lo = bits(_index_T, 0, 0) @[SRAM.scala 320:60 chipyard.TestHarness.TinyRocketConfig.fir 201503:4]
    node index_lo_lo_hi = bits(_index_T, 1, 1) @[SRAM.scala 320:60 chipyard.TestHarness.TinyRocketConfig.fir 201504:4]
    node index_lo_hi_lo = bits(_index_T, 2, 2) @[SRAM.scala 320:60 chipyard.TestHarness.TinyRocketConfig.fir 201505:4]
    node index_lo_hi_hi_lo = bits(_index_T, 3, 3) @[SRAM.scala 320:60 chipyard.TestHarness.TinyRocketConfig.fir 201506:4]
    node index_lo_hi_hi_hi = bits(_index_T, 4, 4) @[SRAM.scala 320:60 chipyard.TestHarness.TinyRocketConfig.fir 201507:4]
    node index_hi_lo_lo = bits(_index_T, 5, 5) @[SRAM.scala 320:60 chipyard.TestHarness.TinyRocketConfig.fir 201508:4]
    node index_hi_lo_hi = bits(_index_T, 6, 6) @[SRAM.scala 320:60 chipyard.TestHarness.TinyRocketConfig.fir 201509:4]
    node index_hi_hi_lo = bits(_index_T, 7, 7) @[SRAM.scala 320:60 chipyard.TestHarness.TinyRocketConfig.fir 201510:4]
    node index_hi_hi_hi_lo = bits(_index_T, 8, 8) @[SRAM.scala 320:60 chipyard.TestHarness.TinyRocketConfig.fir 201511:4]
    node index_hi_hi_hi_hi = bits(_index_T, 9, 9) @[SRAM.scala 320:60 chipyard.TestHarness.TinyRocketConfig.fir 201512:4]
    node index_lo = cat(cat(cat(index_lo_hi_hi_hi, index_lo_hi_hi_lo), index_lo_hi_lo), cat(index_lo_lo_hi, index_lo_lo_lo)) @[Cat.scala 30:58 chipyard.TestHarness.TinyRocketConfig.fir 201533:4]
    node index_hi = cat(cat(cat(index_hi_hi_hi_hi, index_hi_hi_hi_lo), index_hi_hi_lo), cat(index_hi_lo_hi, index_hi_lo_lo)) @[Cat.scala 30:58 chipyard.TestHarness.TinyRocketConfig.fir 201537:4]
    auto_in_a_ready <= or(_bundleIn_0_a_ready_T_2, auto_in_d_ready) @[SRAM.scala 243:49 chipyard.TestHarness.TinyRocketConfig.fir 201348:4]
    auto_in_d_valid <= r_full @[SRAM.scala 240:65 chipyard.TestHarness.TinyRocketConfig.fir 201327:4]
    auto_in_d_bits_opcode <= pad(r_read, 3) @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 201139:4 SRAM.scala 209:23 chipyard.TestHarness.TinyRocketConfig.fir 201275:4]
    auto_in_d_bits_size <= r_size @[SRAM.scala 211:29 chipyard.TestHarness.TinyRocketConfig.fir 201277:4]
    auto_in_d_bits_source <= r_source @[SRAM.scala 212:29 chipyard.TestHarness.TinyRocketConfig.fir 201279:4]
    auto_in_d_bits_data <= cat(r_corrected_hi, r_corrected_lo) @[Cat.scala 30:58 chipyard.TestHarness.TinyRocketConfig.fir 201223:4]
    monitor.clock <= clock @[chipyard.TestHarness.TinyRocketConfig.fir 201142:4]
    monitor.reset <= reset @[chipyard.TestHarness.TinyRocketConfig.fir 201143:4]
    monitor.io_in_a_ready <= or(_bundleIn_0_a_ready_T_2, auto_in_d_ready) @[SRAM.scala 243:49 chipyard.TestHarness.TinyRocketConfig.fir 201348:4]
    monitor.io_in_a_valid <= auto_in_a_valid @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 201139:4 LazyModule.scala 309:16 chipyard.TestHarness.TinyRocketConfig.fir 201164:4]
    monitor.io_in_a_bits_opcode <= auto_in_a_bits_opcode @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 201139:4 LazyModule.scala 309:16 chipyard.TestHarness.TinyRocketConfig.fir 201164:4]
    monitor.io_in_a_bits_param <= auto_in_a_bits_param @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 201139:4 LazyModule.scala 309:16 chipyard.TestHarness.TinyRocketConfig.fir 201164:4]
    monitor.io_in_a_bits_size <= auto_in_a_bits_size @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 201139:4 LazyModule.scala 309:16 chipyard.TestHarness.TinyRocketConfig.fir 201164:4]
    monitor.io_in_a_bits_source <= auto_in_a_bits_source @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 201139:4 LazyModule.scala 309:16 chipyard.TestHarness.TinyRocketConfig.fir 201164:4]
    monitor.io_in_a_bits_address <= auto_in_a_bits_address @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 201139:4 LazyModule.scala 309:16 chipyard.TestHarness.TinyRocketConfig.fir 201164:4]
    monitor.io_in_a_bits_mask <= auto_in_a_bits_mask @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 201139:4 LazyModule.scala 309:16 chipyard.TestHarness.TinyRocketConfig.fir 201164:4]
    monitor.io_in_a_bits_corrupt <= auto_in_a_bits_corrupt @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 201139:4 LazyModule.scala 309:16 chipyard.TestHarness.TinyRocketConfig.fir 201164:4]
    monitor.io_in_d_ready <= auto_in_d_ready @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 201139:4 LazyModule.scala 309:16 chipyard.TestHarness.TinyRocketConfig.fir 201164:4]
    monitor.io_in_d_valid <= r_full @[SRAM.scala 240:65 chipyard.TestHarness.TinyRocketConfig.fir 201327:4]
    monitor.io_in_d_bits_opcode <= pad(r_read, 3) @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 201139:4 SRAM.scala 209:23 chipyard.TestHarness.TinyRocketConfig.fir 201275:4]
    monitor.io_in_d_bits_size <= r_size @[SRAM.scala 211:29 chipyard.TestHarness.TinyRocketConfig.fir 201277:4]
    monitor.io_in_d_bits_source <= r_source @[SRAM.scala 212:29 chipyard.TestHarness.TinyRocketConfig.fir 201279:4]
    mem.RW0_wdata_0 <= bits(auto_in_a_bits_data, 7, 0) @[SRAM.scala 291:67 chipyard.TestHarness.TinyRocketConfig.fir 201403:4]
    mem.RW0_wdata_1 <= bits(auto_in_a_bits_data, 15, 8) @[SRAM.scala 291:67 chipyard.TestHarness.TinyRocketConfig.fir 201404:4]
    mem.RW0_wdata_2 <= bits(auto_in_a_bits_data, 23, 16) @[SRAM.scala 291:67 chipyard.TestHarness.TinyRocketConfig.fir 201405:4]
    mem.RW0_wdata_3 <= bits(auto_in_a_bits_data, 31, 24) @[SRAM.scala 291:67 chipyard.TestHarness.TinyRocketConfig.fir 201406:4]
    mem.RW0_wmask_0 <= bits(a_lanes, 0, 0) @[SRAM.scala 322:46 chipyard.TestHarness.TinyRocketConfig.fir 201562:6]
    mem.RW0_wmask_1 <= bits(a_lanes, 1, 1) @[SRAM.scala 322:46 chipyard.TestHarness.TinyRocketConfig.fir 201563:6]
    mem.RW0_wmask_2 <= bits(a_lanes, 2, 2) @[SRAM.scala 322:46 chipyard.TestHarness.TinyRocketConfig.fir 201564:6]
    mem.RW0_wmask_3 <= bits(a_lanes, 3, 3) @[SRAM.scala 322:46 chipyard.TestHarness.TinyRocketConfig.fir 201565:6]
    r_full <= mux(reset, UInt<1>("h0"), _GEN_20) @[SRAM.scala 134:30 chipyard.TestHarness.TinyRocketConfig.fir 201180:4 SRAM.scala 134:30 chipyard.TestHarness.TinyRocketConfig.fir 201180:4]
    r_size <= mux(_T_18, auto_in_a_bits_size, r_size) @[SRAM.scala 274:24 chipyard.TestHarness.TinyRocketConfig.fir 201385:4 SRAM.scala 279:18 chipyard.TestHarness.TinyRocketConfig.fir 201390:6 SRAM.scala 137:26 chipyard.TestHarness.TinyRocketConfig.fir 201183:4]
    r_source <= mux(_T_18, auto_in_a_bits_source, r_source) @[SRAM.scala 274:24 chipyard.TestHarness.TinyRocketConfig.fir 201385:4 SRAM.scala 280:18 chipyard.TestHarness.TinyRocketConfig.fir 201391:6 SRAM.scala 138:26 chipyard.TestHarness.TinyRocketConfig.fir 201184:4]
    r_read <= mux(_T_18, a_read, r_read) @[SRAM.scala 274:24 chipyard.TestHarness.TinyRocketConfig.fir 201385:4 SRAM.scala 281:18 chipyard.TestHarness.TinyRocketConfig.fir 201392:6 SRAM.scala 139:26 chipyard.TestHarness.TinyRocketConfig.fir 201185:4]
    REG <= and(_ren_T, _T_18) @[SRAM.scala 310:20 chipyard.TestHarness.TinyRocketConfig.fir 201488:4]
    r_0 <= mux(REG, mem.RW0_rdata_0, r_0) @[Reg.scala 16:19 chipyard.TestHarness.TinyRocketConfig.fir 201550:4 Reg.scala 16:23 chipyard.TestHarness.TinyRocketConfig.fir 201551:6 Reg.scala 15:16 chipyard.TestHarness.TinyRocketConfig.fir 201549:4]
    r_1 <= mux(REG, mem.RW0_rdata_1, r_1) @[Reg.scala 16:19 chipyard.TestHarness.TinyRocketConfig.fir 201550:4 Reg.scala 16:23 chipyard.TestHarness.TinyRocketConfig.fir 201552:6 Reg.scala 15:16 chipyard.TestHarness.TinyRocketConfig.fir 201549:4]
    r_2 <= mux(REG, mem.RW0_rdata_2, r_2) @[Reg.scala 16:19 chipyard.TestHarness.TinyRocketConfig.fir 201550:4 Reg.scala 16:23 chipyard.TestHarness.TinyRocketConfig.fir 201553:6 Reg.scala 15:16 chipyard.TestHarness.TinyRocketConfig.fir 201549:4]
    r_3 <= mux(REG, mem.RW0_rdata_3, r_3) @[Reg.scala 16:19 chipyard.TestHarness.TinyRocketConfig.fir 201550:4 Reg.scala 16:23 chipyard.TestHarness.TinyRocketConfig.fir 201554:6 Reg.scala 15:16 chipyard.TestHarness.TinyRocketConfig.fir 201549:4]
    mem.RW0_wmode <= and(_T_18, _T_19) @[SRAM.scala 309:52 chipyard.TestHarness.TinyRocketConfig.fir 201483:4]
    mem.RW0_clk <= clock
    mem.RW0_en <= or(ren, wen)
    mem.RW0_addr <= cat(index_hi, index_lo) @[Cat.scala 30:58 chipyard.TestHarness.TinyRocketConfig.fir 201538:4]

  module TLXbar_9_inTestHarness : @[chipyard.TestHarness.TinyRocketConfig.fir 201590:2]
    output auto_in_a_ready : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 201593:4]
    input auto_in_a_valid : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 201593:4]
    input auto_in_a_bits_opcode : UInt<3> @[chipyard.TestHarness.TinyRocketConfig.fir 201593:4]
    input auto_in_a_bits_param : UInt<3> @[chipyard.TestHarness.TinyRocketConfig.fir 201593:4]
    input auto_in_a_bits_size : UInt<3> @[chipyard.TestHarness.TinyRocketConfig.fir 201593:4]
    input auto_in_a_bits_source : UInt<2> @[chipyard.TestHarness.TinyRocketConfig.fir 201593:4]
    input auto_in_a_bits_address : UInt<29> @[chipyard.TestHarness.TinyRocketConfig.fir 201593:4]
    input auto_in_a_bits_mask : UInt<4> @[chipyard.TestHarness.TinyRocketConfig.fir 201593:4]
    input auto_in_a_bits_data : UInt<32> @[chipyard.TestHarness.TinyRocketConfig.fir 201593:4]
    input auto_in_a_bits_corrupt : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 201593:4]
    input auto_in_d_ready : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 201593:4]
    output auto_in_d_valid : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 201593:4]
    output auto_in_d_bits_opcode : UInt<3> @[chipyard.TestHarness.TinyRocketConfig.fir 201593:4]
    output auto_in_d_bits_param : UInt<2> @[chipyard.TestHarness.TinyRocketConfig.fir 201593:4]
    output auto_in_d_bits_size : UInt<3> @[chipyard.TestHarness.TinyRocketConfig.fir 201593:4]
    output auto_in_d_bits_source : UInt<2> @[chipyard.TestHarness.TinyRocketConfig.fir 201593:4]
    output auto_in_d_bits_sink : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 201593:4]
    output auto_in_d_bits_denied : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 201593:4]
    output auto_in_d_bits_data : UInt<32> @[chipyard.TestHarness.TinyRocketConfig.fir 201593:4]
    output auto_in_d_bits_corrupt : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 201593:4]
    input auto_out_a_ready : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 201593:4]
    output auto_out_a_valid : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 201593:4]
    output auto_out_a_bits_opcode : UInt<3> @[chipyard.TestHarness.TinyRocketConfig.fir 201593:4]
    output auto_out_a_bits_param : UInt<3> @[chipyard.TestHarness.TinyRocketConfig.fir 201593:4]
    output auto_out_a_bits_size : UInt<3> @[chipyard.TestHarness.TinyRocketConfig.fir 201593:4]
    output auto_out_a_bits_source : UInt<2> @[chipyard.TestHarness.TinyRocketConfig.fir 201593:4]
    output auto_out_a_bits_address : UInt<29> @[chipyard.TestHarness.TinyRocketConfig.fir 201593:4]
    output auto_out_a_bits_mask : UInt<4> @[chipyard.TestHarness.TinyRocketConfig.fir 201593:4]
    output auto_out_a_bits_data : UInt<32> @[chipyard.TestHarness.TinyRocketConfig.fir 201593:4]
    output auto_out_a_bits_corrupt : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 201593:4]
    output auto_out_d_ready : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 201593:4]
    input auto_out_d_valid : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 201593:4]
    input auto_out_d_bits_opcode : UInt<3> @[chipyard.TestHarness.TinyRocketConfig.fir 201593:4]
    input auto_out_d_bits_param : UInt<2> @[chipyard.TestHarness.TinyRocketConfig.fir 201593:4]
    input auto_out_d_bits_size : UInt<3> @[chipyard.TestHarness.TinyRocketConfig.fir 201593:4]
    input auto_out_d_bits_source : UInt<2> @[chipyard.TestHarness.TinyRocketConfig.fir 201593:4]
    input auto_out_d_bits_sink : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 201593:4]
    input auto_out_d_bits_denied : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 201593:4]
    input auto_out_d_bits_data : UInt<32> @[chipyard.TestHarness.TinyRocketConfig.fir 201593:4]
    input auto_out_d_bits_corrupt : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 201593:4]

    auto_in_a_ready <= auto_out_a_ready @[Nodes.scala 1207:84 chipyard.TestHarness.TinyRocketConfig.fir 201598:4 LazyModule.scala 311:12 chipyard.TestHarness.TinyRocketConfig.fir 201602:4]
    auto_in_d_valid <= auto_out_d_valid @[ReadyValidCancel.scala 21:38 chipyard.TestHarness.TinyRocketConfig.fir 202014:4]
    auto_in_d_bits_opcode <= auto_out_d_bits_opcode @[Nodes.scala 1207:84 chipyard.TestHarness.TinyRocketConfig.fir 201598:4 LazyModule.scala 311:12 chipyard.TestHarness.TinyRocketConfig.fir 201602:4]
    auto_in_d_bits_param <= auto_out_d_bits_param @[Nodes.scala 1207:84 chipyard.TestHarness.TinyRocketConfig.fir 201598:4 LazyModule.scala 311:12 chipyard.TestHarness.TinyRocketConfig.fir 201602:4]
    auto_in_d_bits_size <= auto_out_d_bits_size @[Nodes.scala 1207:84 chipyard.TestHarness.TinyRocketConfig.fir 201598:4 LazyModule.scala 311:12 chipyard.TestHarness.TinyRocketConfig.fir 201602:4]
    auto_in_d_bits_source <= auto_out_d_bits_source @[Xbar.scala 228:69 chipyard.TestHarness.TinyRocketConfig.fir 201713:4]
    auto_in_d_bits_sink <= auto_out_d_bits_sink @[Xbar.scala 323:53 chipyard.TestHarness.TinyRocketConfig.fir 201775:4]
    auto_in_d_bits_denied <= auto_out_d_bits_denied @[Nodes.scala 1207:84 chipyard.TestHarness.TinyRocketConfig.fir 201598:4 LazyModule.scala 311:12 chipyard.TestHarness.TinyRocketConfig.fir 201602:4]
    auto_in_d_bits_data <= auto_out_d_bits_data @[Nodes.scala 1207:84 chipyard.TestHarness.TinyRocketConfig.fir 201598:4 LazyModule.scala 311:12 chipyard.TestHarness.TinyRocketConfig.fir 201602:4]
    auto_in_d_bits_corrupt <= auto_out_d_bits_corrupt @[Nodes.scala 1207:84 chipyard.TestHarness.TinyRocketConfig.fir 201598:4 LazyModule.scala 311:12 chipyard.TestHarness.TinyRocketConfig.fir 201602:4]
    auto_out_a_valid <= auto_in_a_valid @[ReadyValidCancel.scala 21:38 chipyard.TestHarness.TinyRocketConfig.fir 202039:4]
    auto_out_a_bits_opcode <= auto_in_a_bits_opcode @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 201600:4 LazyModule.scala 309:16 chipyard.TestHarness.TinyRocketConfig.fir 201603:4]
    auto_out_a_bits_param <= auto_in_a_bits_param @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 201600:4 LazyModule.scala 309:16 chipyard.TestHarness.TinyRocketConfig.fir 201603:4]
    auto_out_a_bits_size <= auto_in_a_bits_size @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 201600:4 LazyModule.scala 309:16 chipyard.TestHarness.TinyRocketConfig.fir 201603:4]
    auto_out_a_bits_source <= auto_in_a_bits_source @[Xbar.scala 237:55 chipyard.TestHarness.TinyRocketConfig.fir 201667:4]
    auto_out_a_bits_address <= auto_in_a_bits_address @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 201600:4 LazyModule.scala 309:16 chipyard.TestHarness.TinyRocketConfig.fir 201603:4]
    auto_out_a_bits_mask <= auto_in_a_bits_mask @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 201600:4 LazyModule.scala 309:16 chipyard.TestHarness.TinyRocketConfig.fir 201603:4]
    auto_out_a_bits_data <= auto_in_a_bits_data @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 201600:4 LazyModule.scala 309:16 chipyard.TestHarness.TinyRocketConfig.fir 201603:4]
    auto_out_a_bits_corrupt <= auto_in_a_bits_corrupt @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 201600:4 LazyModule.scala 309:16 chipyard.TestHarness.TinyRocketConfig.fir 201603:4]
    auto_out_d_ready <= auto_in_d_ready @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 201600:4 LazyModule.scala 309:16 chipyard.TestHarness.TinyRocketConfig.fir 201603:4]

  module TLMonitor_43_inTestHarness : @[chipyard.TestHarness.TinyRocketConfig.fir 202116:2]
    input clock : Clock @[chipyard.TestHarness.TinyRocketConfig.fir 202117:4]
    input reset : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 202118:4]
    input io_in_a_ready : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 202119:4]
    input io_in_a_valid : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 202119:4]
    input io_in_a_bits_opcode : UInt<3> @[chipyard.TestHarness.TinyRocketConfig.fir 202119:4]
    input io_in_a_bits_param : UInt<3> @[chipyard.TestHarness.TinyRocketConfig.fir 202119:4]
    input io_in_a_bits_size : UInt<2> @[chipyard.TestHarness.TinyRocketConfig.fir 202119:4]
    input io_in_a_bits_source : UInt<7> @[chipyard.TestHarness.TinyRocketConfig.fir 202119:4]
    input io_in_a_bits_address : UInt<29> @[chipyard.TestHarness.TinyRocketConfig.fir 202119:4]
    input io_in_a_bits_mask : UInt<4> @[chipyard.TestHarness.TinyRocketConfig.fir 202119:4]
    input io_in_a_bits_corrupt : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 202119:4]
    input io_in_d_ready : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 202119:4]
    input io_in_d_valid : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 202119:4]
    input io_in_d_bits_opcode : UInt<3> @[chipyard.TestHarness.TinyRocketConfig.fir 202119:4]
    input io_in_d_bits_param : UInt<2> @[chipyard.TestHarness.TinyRocketConfig.fir 202119:4]
    input io_in_d_bits_size : UInt<2> @[chipyard.TestHarness.TinyRocketConfig.fir 202119:4]
    input io_in_d_bits_source : UInt<7> @[chipyard.TestHarness.TinyRocketConfig.fir 202119:4]
    input io_in_d_bits_sink : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 202119:4]
    input io_in_d_bits_denied : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 202119:4]
    input io_in_d_bits_corrupt : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 202119:4]

    inst plusarg_reader of plusarg_reader @[PlusArg.scala 80:11 chipyard.TestHarness.TinyRocketConfig.fir 203579:4]
    inst plusarg_reader_1 of plusarg_reader @[PlusArg.scala 80:11 chipyard.TestHarness.TinyRocketConfig.fir 203886:4]
    node _source_ok_T_4 = leq(io_in_a_bits_source, UInt<7>("h5f")) @[Parameters.scala 57:20 chipyard.TestHarness.TinyRocketConfig.fir 202136:6]
    node _is_aligned_mask_T_1 = dshlw(UInt<5>("h3"), io_in_a_bits_size) @[package.scala 234:77 chipyard.TestHarness.TinyRocketConfig.fir 202142:6]
    node _is_aligned_mask_T_2 = bits(_is_aligned_mask_T_1, 1, 0) @[package.scala 234:82 chipyard.TestHarness.TinyRocketConfig.fir 202143:6]
    node is_aligned_mask = not(_is_aligned_mask_T_2) @[package.scala 234:46 chipyard.TestHarness.TinyRocketConfig.fir 202144:6]
    node _GEN_71 = pad(is_aligned_mask, 29) @[Edges.scala 20:16 chipyard.TestHarness.TinyRocketConfig.fir 202145:6]
    node _is_aligned_T = and(io_in_a_bits_address, _GEN_71) @[Edges.scala 20:16 chipyard.TestHarness.TinyRocketConfig.fir 202145:6]
    node is_aligned = eq(_is_aligned_T, UInt<29>("h0")) @[Edges.scala 20:24 chipyard.TestHarness.TinyRocketConfig.fir 202146:6]
    node mask_sizeOH_shiftAmount = bits(io_in_a_bits_size, 0, 0) @[OneHot.scala 64:49 chipyard.TestHarness.TinyRocketConfig.fir 202148:6]
    node _mask_sizeOH_T_1 = dshlw(UInt<2>("h1"), mask_sizeOH_shiftAmount) @[OneHot.scala 65:12 chipyard.TestHarness.TinyRocketConfig.fir 202149:6]
    node mask_sizeOH = or(_mask_sizeOH_T_1, UInt<2>("h1")) @[Misc.scala 201:81 chipyard.TestHarness.TinyRocketConfig.fir 202151:6]
    node _mask_T = geq(io_in_a_bits_size, UInt<2>("h2")) @[Misc.scala 205:21 chipyard.TestHarness.TinyRocketConfig.fir 202152:6]
    node mask_size = bits(mask_sizeOH, 1, 1) @[Misc.scala 208:26 chipyard.TestHarness.TinyRocketConfig.fir 202153:6]
    node mask_bit = bits(io_in_a_bits_address, 1, 1) @[Misc.scala 209:26 chipyard.TestHarness.TinyRocketConfig.fir 202154:6]
    node mask_nbit = not(mask_bit) @[Misc.scala 210:20 chipyard.TestHarness.TinyRocketConfig.fir 202155:6]
    node _mask_acc_T = and(mask_size, mask_nbit) @[Misc.scala 214:38 chipyard.TestHarness.TinyRocketConfig.fir 202157:6]
    node mask_acc = or(_mask_T, _mask_acc_T) @[Misc.scala 214:29 chipyard.TestHarness.TinyRocketConfig.fir 202158:6]
    node _mask_acc_T_1 = and(mask_size, mask_bit) @[Misc.scala 214:38 chipyard.TestHarness.TinyRocketConfig.fir 202160:6]
    node mask_acc_1 = or(_mask_T, _mask_acc_T_1) @[Misc.scala 214:29 chipyard.TestHarness.TinyRocketConfig.fir 202161:6]
    node mask_size_1 = bits(mask_sizeOH, 0, 0) @[Misc.scala 208:26 chipyard.TestHarness.TinyRocketConfig.fir 202162:6]
    node mask_bit_1 = bits(io_in_a_bits_address, 0, 0) @[Misc.scala 209:26 chipyard.TestHarness.TinyRocketConfig.fir 202163:6]
    node mask_nbit_1 = not(mask_bit_1) @[Misc.scala 210:20 chipyard.TestHarness.TinyRocketConfig.fir 202164:6]
    node mask_eq_2 = and(mask_nbit, mask_nbit_1) @[Misc.scala 213:27 chipyard.TestHarness.TinyRocketConfig.fir 202165:6]
    node _mask_acc_T_2 = and(mask_size_1, mask_eq_2) @[Misc.scala 214:38 chipyard.TestHarness.TinyRocketConfig.fir 202166:6]
    node mask_lo_lo = or(mask_acc, _mask_acc_T_2) @[Misc.scala 214:29 chipyard.TestHarness.TinyRocketConfig.fir 202167:6]
    node mask_eq_3 = and(mask_nbit, mask_bit_1) @[Misc.scala 213:27 chipyard.TestHarness.TinyRocketConfig.fir 202168:6]
    node _mask_acc_T_3 = and(mask_size_1, mask_eq_3) @[Misc.scala 214:38 chipyard.TestHarness.TinyRocketConfig.fir 202169:6]
    node mask_lo_hi = or(mask_acc, _mask_acc_T_3) @[Misc.scala 214:29 chipyard.TestHarness.TinyRocketConfig.fir 202170:6]
    node mask_eq_4 = and(mask_bit, mask_nbit_1) @[Misc.scala 213:27 chipyard.TestHarness.TinyRocketConfig.fir 202171:6]
    node _mask_acc_T_4 = and(mask_size_1, mask_eq_4) @[Misc.scala 214:38 chipyard.TestHarness.TinyRocketConfig.fir 202172:6]
    node mask_hi_lo = or(mask_acc_1, _mask_acc_T_4) @[Misc.scala 214:29 chipyard.TestHarness.TinyRocketConfig.fir 202173:6]
    node mask_eq_5 = and(mask_bit, mask_bit_1) @[Misc.scala 213:27 chipyard.TestHarness.TinyRocketConfig.fir 202174:6]
    node _mask_acc_T_5 = and(mask_size_1, mask_eq_5) @[Misc.scala 214:38 chipyard.TestHarness.TinyRocketConfig.fir 202175:6]
    node mask_hi_hi = or(mask_acc_1, _mask_acc_T_5) @[Misc.scala 214:29 chipyard.TestHarness.TinyRocketConfig.fir 202176:6]
    node mask = cat(cat(mask_hi_hi, mask_hi_lo), cat(mask_lo_hi, mask_lo_lo)) @[Cat.scala 30:58 chipyard.TestHarness.TinyRocketConfig.fir 202179:6]
    node _T_20 = eq(io_in_a_bits_opcode, UInt<3>("h6")) @[Monitor.scala 81:25 chipyard.TestHarness.TinyRocketConfig.fir 202202:6]
    node _T_33 = xor(io_in_a_bits_address, UInt<29>("h10000000")) @[Parameters.scala 137:31 chipyard.TestHarness.TinyRocketConfig.fir 202218:8]
    node _T_34 = cvt(_T_33) @[Parameters.scala 137:49 chipyard.TestHarness.TinyRocketConfig.fir 202219:8]
    node _T_35 = and(_T_34, SInt<30>("h-1000")) @[Parameters.scala 137:52 chipyard.TestHarness.TinyRocketConfig.fir 202220:8]
    node _T_36 = asSInt(_T_35) @[Parameters.scala 137:52 chipyard.TestHarness.TinyRocketConfig.fir 202221:8]
    node _T_37 = eq(_T_36, SInt<30>("h0")) @[Parameters.scala 137:67 chipyard.TestHarness.TinyRocketConfig.fir 202222:8]
    node _T_43 = not(reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202228:8]
    node _T_60 = or(_source_ok_T_4, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202253:8]
    node _T_61 = not(_T_60) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202254:8]
    node _T_64 = or(_mask_T, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202261:8]
    node _T_65 = not(_T_64) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202262:8]
    node _T_67 = or(is_aligned, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202268:8]
    node _T_68 = not(_T_67) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202269:8]
    node _T_69 = leq(io_in_a_bits_param, UInt<3>("h2")) @[Bundles.scala 108:27 chipyard.TestHarness.TinyRocketConfig.fir 202274:8]
    node _T_71 = or(_T_69, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202276:8]
    node _T_72 = not(_T_71) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202277:8]
    node _T_73 = not(io_in_a_bits_mask) @[Monitor.scala 88:18 chipyard.TestHarness.TinyRocketConfig.fir 202282:8]
    node _T_74 = eq(_T_73, UInt<4>("h0")) @[Monitor.scala 88:31 chipyard.TestHarness.TinyRocketConfig.fir 202283:8]
    node _T_76 = or(_T_74, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202285:8]
    node _T_77 = not(_T_76) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202286:8]
    node _T_78 = not(io_in_a_bits_corrupt) @[Monitor.scala 89:18 chipyard.TestHarness.TinyRocketConfig.fir 202291:8]
    node _T_80 = or(_T_78, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202293:8]
    node _T_81 = not(_T_80) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202294:8]
    node _T_82 = eq(io_in_a_bits_opcode, UInt<3>("h7")) @[Monitor.scala 92:25 chipyard.TestHarness.TinyRocketConfig.fir 202300:6]
    node _T_135 = neq(io_in_a_bits_param, UInt<3>("h0")) @[Monitor.scala 99:31 chipyard.TestHarness.TinyRocketConfig.fir 202380:8]
    node _T_137 = or(_T_135, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202382:8]
    node _T_138 = not(_T_137) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202383:8]
    node _T_148 = eq(io_in_a_bits_opcode, UInt<3>("h4")) @[Monitor.scala 104:25 chipyard.TestHarness.TinyRocketConfig.fir 202406:6]
    node _T_164 = leq(io_in_a_bits_size, UInt<2>("h2")) @[Parameters.scala 92:42 chipyard.TestHarness.TinyRocketConfig.fir 202429:8]
    node _T_172 = and(_T_164, _T_37) @[Parameters.scala 670:56 chipyard.TestHarness.TinyRocketConfig.fir 202437:8]
    node _T_175 = or(_T_172, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202440:8]
    node _T_176 = not(_T_175) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202441:8]
    node _T_183 = eq(io_in_a_bits_param, UInt<3>("h0")) @[Monitor.scala 109:31 chipyard.TestHarness.TinyRocketConfig.fir 202460:8]
    node _T_185 = or(_T_183, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202462:8]
    node _T_186 = not(_T_185) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202463:8]
    node _T_187 = eq(io_in_a_bits_mask, mask) @[Monitor.scala 110:30 chipyard.TestHarness.TinyRocketConfig.fir 202468:8]
    node _T_189 = or(_T_187, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202470:8]
    node _T_190 = not(_T_189) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202471:8]
    node _T_195 = eq(io_in_a_bits_opcode, UInt<3>("h0")) @[Monitor.scala 114:25 chipyard.TestHarness.TinyRocketConfig.fir 202485:6]
    node _T_218 = and(_source_ok_T_4, _T_172) @[Monitor.scala 115:71 chipyard.TestHarness.TinyRocketConfig.fir 202511:8]
    node _T_220 = or(_T_218, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202513:8]
    node _T_221 = not(_T_220) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202514:8]
    node _T_236 = eq(io_in_a_bits_opcode, UInt<3>("h1")) @[Monitor.scala 122:25 chipyard.TestHarness.TinyRocketConfig.fir 202550:6]
    node _T_273 = not(mask) @[Monitor.scala 127:33 chipyard.TestHarness.TinyRocketConfig.fir 202606:8]
    node _T_274 = and(io_in_a_bits_mask, _T_273) @[Monitor.scala 127:31 chipyard.TestHarness.TinyRocketConfig.fir 202607:8]
    node _T_275 = eq(_T_274, UInt<4>("h0")) @[Monitor.scala 127:40 chipyard.TestHarness.TinyRocketConfig.fir 202608:8]
    node _T_277 = or(_T_275, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202610:8]
    node _T_278 = not(_T_277) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202611:8]
    node _T_279 = eq(io_in_a_bits_opcode, UInt<3>("h2")) @[Monitor.scala 130:25 chipyard.TestHarness.TinyRocketConfig.fir 202617:6]
    node _T_309 = leq(io_in_a_bits_param, UInt<3>("h4")) @[Bundles.scala 138:33 chipyard.TestHarness.TinyRocketConfig.fir 202662:8]
    node _T_311 = or(_T_309, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202664:8]
    node _T_312 = not(_T_311) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202665:8]
    node _T_317 = eq(io_in_a_bits_opcode, UInt<3>("h3")) @[Monitor.scala 138:25 chipyard.TestHarness.TinyRocketConfig.fir 202679:6]
    node _T_347 = leq(io_in_a_bits_param, UInt<3>("h3")) @[Bundles.scala 145:30 chipyard.TestHarness.TinyRocketConfig.fir 202724:8]
    node _T_349 = or(_T_347, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202726:8]
    node _T_350 = not(_T_349) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202727:8]
    node _T_355 = eq(io_in_a_bits_opcode, UInt<3>("h5")) @[Monitor.scala 146:25 chipyard.TestHarness.TinyRocketConfig.fir 202741:6]
    node _T_385 = leq(io_in_a_bits_param, UInt<3>("h1")) @[Bundles.scala 158:28 chipyard.TestHarness.TinyRocketConfig.fir 202786:8]
    node _T_387 = or(_T_385, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202788:8]
    node _T_388 = not(_T_387) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202789:8]
    node _T_397 = leq(io_in_d_bits_opcode, UInt<3>("h6")) @[Bundles.scala 42:24 chipyard.TestHarness.TinyRocketConfig.fir 202813:6]
    node _T_399 = or(_T_397, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 202815:6]
    node _T_400 = not(_T_399) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 202816:6]
    node _source_ok_T_10 = leq(io_in_d_bits_source, UInt<7>("h5f")) @[Parameters.scala 57:20 chipyard.TestHarness.TinyRocketConfig.fir 202827:6]
    node _T_401 = eq(io_in_d_bits_opcode, UInt<3>("h6")) @[Monitor.scala 310:25 chipyard.TestHarness.TinyRocketConfig.fir 202833:6]
    node _T_403 = or(_source_ok_T_10, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 202836:8]
    node _T_404 = not(_T_403) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 202837:8]
    node _T_405 = geq(io_in_d_bits_size, UInt<2>("h2")) @[Monitor.scala 312:27 chipyard.TestHarness.TinyRocketConfig.fir 202842:8]
    node _T_407 = or(_T_405, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 202844:8]
    node _T_408 = not(_T_407) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 202845:8]
    node _T_409 = eq(io_in_d_bits_param, UInt<2>("h0")) @[Monitor.scala 313:28 chipyard.TestHarness.TinyRocketConfig.fir 202850:8]
    node _T_411 = or(_T_409, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 202852:8]
    node _T_412 = not(_T_411) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 202853:8]
    node _T_413 = not(io_in_d_bits_corrupt) @[Monitor.scala 314:15 chipyard.TestHarness.TinyRocketConfig.fir 202858:8]
    node _T_415 = or(_T_413, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 202860:8]
    node _T_416 = not(_T_415) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 202861:8]
    node _T_417 = not(io_in_d_bits_denied) @[Monitor.scala 315:15 chipyard.TestHarness.TinyRocketConfig.fir 202866:8]
    node _T_419 = or(_T_417, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 202868:8]
    node _T_420 = not(_T_419) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 202869:8]
    node _T_421 = eq(io_in_d_bits_opcode, UInt<3>("h4")) @[Monitor.scala 318:25 chipyard.TestHarness.TinyRocketConfig.fir 202875:6]
    node _T_432 = leq(io_in_d_bits_param, UInt<2>("h2")) @[Bundles.scala 102:26 chipyard.TestHarness.TinyRocketConfig.fir 202899:8]
    node _T_434 = or(_T_432, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 202901:8]
    node _T_435 = not(_T_434) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 202902:8]
    node _T_436 = neq(io_in_d_bits_param, UInt<2>("h2")) @[Monitor.scala 323:28 chipyard.TestHarness.TinyRocketConfig.fir 202907:8]
    node _T_438 = or(_T_436, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 202909:8]
    node _T_439 = not(_T_438) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 202910:8]
    node _T_449 = eq(io_in_d_bits_opcode, UInt<3>("h5")) @[Monitor.scala 328:25 chipyard.TestHarness.TinyRocketConfig.fir 202933:6]
    node _T_469 = or(_T_417, io_in_d_bits_corrupt) @[Monitor.scala 334:30 chipyard.TestHarness.TinyRocketConfig.fir 202974:8]
    node _T_471 = or(_T_469, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 202976:8]
    node _T_472 = not(_T_471) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 202977:8]
    node _T_478 = eq(io_in_d_bits_opcode, UInt<3>("h0")) @[Monitor.scala 338:25 chipyard.TestHarness.TinyRocketConfig.fir 202992:6]
    node _T_495 = eq(io_in_d_bits_opcode, UInt<3>("h1")) @[Monitor.scala 346:25 chipyard.TestHarness.TinyRocketConfig.fir 203027:6]
    node _T_513 = eq(io_in_d_bits_opcode, UInt<3>("h2")) @[Monitor.scala 354:25 chipyard.TestHarness.TinyRocketConfig.fir 203063:6]
    node a_first_done = and(io_in_a_ready, io_in_a_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.TinyRocketConfig.fir 203129:4]
    reg a_first_counter : UInt<1>, clock with :
      reset => (UInt<1>("h0"), a_first_counter) @[Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 203138:4]
    node _a_first_counter1_T = sub(a_first_counter, UInt<1>("h1")) @[Edges.scala 229:28 chipyard.TestHarness.TinyRocketConfig.fir 203139:4]
    node a_first_counter1 = tail(_a_first_counter1_T, 1) @[Edges.scala 229:28 chipyard.TestHarness.TinyRocketConfig.fir 203140:4]
    node a_first = not(a_first_counter) @[Edges.scala 230:25 chipyard.TestHarness.TinyRocketConfig.fir 203141:4]
    node _a_first_counter_T = mux(a_first, UInt<1>("h0"), a_first_counter1) @[Edges.scala 235:21 chipyard.TestHarness.TinyRocketConfig.fir 203149:6]
    node _GEN_0 = mux(a_first_done, _a_first_counter_T, a_first_counter) @[Edges.scala 234:17 chipyard.TestHarness.TinyRocketConfig.fir 203148:4 Edges.scala 235:15 chipyard.TestHarness.TinyRocketConfig.fir 203150:6 Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 203138:4]
    reg opcode : UInt<3>, clock with :
      reset => (UInt<1>("h0"), opcode) @[Monitor.scala 384:22 chipyard.TestHarness.TinyRocketConfig.fir 203152:4]
    reg param : UInt<3>, clock with :
      reset => (UInt<1>("h0"), param) @[Monitor.scala 385:22 chipyard.TestHarness.TinyRocketConfig.fir 203153:4]
    reg size : UInt<2>, clock with :
      reset => (UInt<1>("h0"), size) @[Monitor.scala 386:22 chipyard.TestHarness.TinyRocketConfig.fir 203154:4]
    reg source : UInt<7>, clock with :
      reset => (UInt<1>("h0"), source) @[Monitor.scala 387:22 chipyard.TestHarness.TinyRocketConfig.fir 203155:4]
    reg address : UInt<29>, clock with :
      reset => (UInt<1>("h0"), address) @[Monitor.scala 388:22 chipyard.TestHarness.TinyRocketConfig.fir 203156:4]
    node _T_542 = not(a_first) @[Monitor.scala 389:22 chipyard.TestHarness.TinyRocketConfig.fir 203157:4]
    node _T_543 = and(io_in_a_valid, _T_542) @[Monitor.scala 389:19 chipyard.TestHarness.TinyRocketConfig.fir 203158:4]
    node _T_544 = eq(io_in_a_bits_opcode, opcode) @[Monitor.scala 390:32 chipyard.TestHarness.TinyRocketConfig.fir 203160:6]
    node _T_546 = or(_T_544, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 203162:6]
    node _T_547 = not(_T_546) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 203163:6]
    node _T_548 = eq(io_in_a_bits_param, param) @[Monitor.scala 391:32 chipyard.TestHarness.TinyRocketConfig.fir 203168:6]
    node _T_550 = or(_T_548, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 203170:6]
    node _T_551 = not(_T_550) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 203171:6]
    node _T_552 = eq(io_in_a_bits_size, size) @[Monitor.scala 392:32 chipyard.TestHarness.TinyRocketConfig.fir 203176:6]
    node _T_554 = or(_T_552, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 203178:6]
    node _T_555 = not(_T_554) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 203179:6]
    node _T_556 = eq(io_in_a_bits_source, source) @[Monitor.scala 393:32 chipyard.TestHarness.TinyRocketConfig.fir 203184:6]
    node _T_558 = or(_T_556, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 203186:6]
    node _T_559 = not(_T_558) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 203187:6]
    node _T_560 = eq(io_in_a_bits_address, address) @[Monitor.scala 394:32 chipyard.TestHarness.TinyRocketConfig.fir 203192:6]
    node _T_562 = or(_T_560, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 203194:6]
    node _T_563 = not(_T_562) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 203195:6]
    node _T_565 = and(a_first_done, a_first) @[Monitor.scala 396:20 chipyard.TestHarness.TinyRocketConfig.fir 203202:4]
    node d_first_done = and(io_in_d_ready, io_in_d_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.TinyRocketConfig.fir 203210:4]
    reg d_first_counter : UInt<1>, clock with :
      reset => (UInt<1>("h0"), d_first_counter) @[Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 203218:4]
    node _d_first_counter1_T = sub(d_first_counter, UInt<1>("h1")) @[Edges.scala 229:28 chipyard.TestHarness.TinyRocketConfig.fir 203219:4]
    node d_first_counter1 = tail(_d_first_counter1_T, 1) @[Edges.scala 229:28 chipyard.TestHarness.TinyRocketConfig.fir 203220:4]
    node d_first = not(d_first_counter) @[Edges.scala 230:25 chipyard.TestHarness.TinyRocketConfig.fir 203221:4]
    node _d_first_counter_T = mux(d_first, UInt<1>("h0"), d_first_counter1) @[Edges.scala 235:21 chipyard.TestHarness.TinyRocketConfig.fir 203229:6]
    node _GEN_6 = mux(d_first_done, _d_first_counter_T, d_first_counter) @[Edges.scala 234:17 chipyard.TestHarness.TinyRocketConfig.fir 203228:4 Edges.scala 235:15 chipyard.TestHarness.TinyRocketConfig.fir 203230:6 Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 203218:4]
    reg opcode_1 : UInt<3>, clock with :
      reset => (UInt<1>("h0"), opcode_1) @[Monitor.scala 535:22 chipyard.TestHarness.TinyRocketConfig.fir 203232:4]
    reg param_1 : UInt<2>, clock with :
      reset => (UInt<1>("h0"), param_1) @[Monitor.scala 536:22 chipyard.TestHarness.TinyRocketConfig.fir 203233:4]
    reg size_1 : UInt<2>, clock with :
      reset => (UInt<1>("h0"), size_1) @[Monitor.scala 537:22 chipyard.TestHarness.TinyRocketConfig.fir 203234:4]
    reg source_1 : UInt<7>, clock with :
      reset => (UInt<1>("h0"), source_1) @[Monitor.scala 538:22 chipyard.TestHarness.TinyRocketConfig.fir 203235:4]
    reg sink : UInt<1>, clock with :
      reset => (UInt<1>("h0"), sink) @[Monitor.scala 539:22 chipyard.TestHarness.TinyRocketConfig.fir 203236:4]
    reg denied : UInt<1>, clock with :
      reset => (UInt<1>("h0"), denied) @[Monitor.scala 540:22 chipyard.TestHarness.TinyRocketConfig.fir 203237:4]
    node _T_566 = not(d_first) @[Monitor.scala 541:22 chipyard.TestHarness.TinyRocketConfig.fir 203238:4]
    node _T_567 = and(io_in_d_valid, _T_566) @[Monitor.scala 541:19 chipyard.TestHarness.TinyRocketConfig.fir 203239:4]
    node _T_568 = eq(io_in_d_bits_opcode, opcode_1) @[Monitor.scala 542:29 chipyard.TestHarness.TinyRocketConfig.fir 203241:6]
    node _T_570 = or(_T_568, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 203243:6]
    node _T_571 = not(_T_570) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 203244:6]
    node _T_572 = eq(io_in_d_bits_param, param_1) @[Monitor.scala 543:29 chipyard.TestHarness.TinyRocketConfig.fir 203249:6]
    node _T_574 = or(_T_572, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 203251:6]
    node _T_575 = not(_T_574) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 203252:6]
    node _T_576 = eq(io_in_d_bits_size, size_1) @[Monitor.scala 544:29 chipyard.TestHarness.TinyRocketConfig.fir 203257:6]
    node _T_578 = or(_T_576, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 203259:6]
    node _T_579 = not(_T_578) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 203260:6]
    node _T_580 = eq(io_in_d_bits_source, source_1) @[Monitor.scala 545:29 chipyard.TestHarness.TinyRocketConfig.fir 203265:6]
    node _T_582 = or(_T_580, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 203267:6]
    node _T_583 = not(_T_582) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 203268:6]
    node _T_584 = eq(io_in_d_bits_sink, sink) @[Monitor.scala 546:29 chipyard.TestHarness.TinyRocketConfig.fir 203273:6]
    node _T_586 = or(_T_584, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 203275:6]
    node _T_587 = not(_T_586) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 203276:6]
    node _T_588 = eq(io_in_d_bits_denied, denied) @[Monitor.scala 547:29 chipyard.TestHarness.TinyRocketConfig.fir 203281:6]
    node _T_590 = or(_T_588, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 203283:6]
    node _T_591 = not(_T_590) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 203284:6]
    node _T_593 = and(d_first_done, d_first) @[Monitor.scala 549:20 chipyard.TestHarness.TinyRocketConfig.fir 203291:4]
    reg inflight : UInt<96>, clock with :
      reset => (UInt<1>("h0"), inflight) @[Monitor.scala 611:27 chipyard.TestHarness.TinyRocketConfig.fir 203300:4]
    reg inflight_opcodes : UInt<384>, clock with :
      reset => (UInt<1>("h0"), inflight_opcodes) @[Monitor.scala 613:35 chipyard.TestHarness.TinyRocketConfig.fir 203301:4]
    reg inflight_sizes : UInt<384>, clock with :
      reset => (UInt<1>("h0"), inflight_sizes) @[Monitor.scala 615:33 chipyard.TestHarness.TinyRocketConfig.fir 203302:4]
    reg a_first_counter_1 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), a_first_counter_1) @[Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 203312:4]
    node _a_first_counter1_T_1 = sub(a_first_counter_1, UInt<1>("h1")) @[Edges.scala 229:28 chipyard.TestHarness.TinyRocketConfig.fir 203313:4]
    node a_first_counter1_1 = tail(_a_first_counter1_T_1, 1) @[Edges.scala 229:28 chipyard.TestHarness.TinyRocketConfig.fir 203314:4]
    node a_first_1 = not(a_first_counter_1) @[Edges.scala 230:25 chipyard.TestHarness.TinyRocketConfig.fir 203315:4]
    node _a_first_counter_T_1 = mux(a_first_1, UInt<1>("h0"), a_first_counter1_1) @[Edges.scala 235:21 chipyard.TestHarness.TinyRocketConfig.fir 203323:6]
    node _GEN_13 = mux(a_first_done, _a_first_counter_T_1, a_first_counter_1) @[Edges.scala 234:17 chipyard.TestHarness.TinyRocketConfig.fir 203322:4 Edges.scala 235:15 chipyard.TestHarness.TinyRocketConfig.fir 203324:6 Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 203312:4]
    reg d_first_counter_1 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), d_first_counter_1) @[Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 203334:4]
    node _d_first_counter1_T_1 = sub(d_first_counter_1, UInt<1>("h1")) @[Edges.scala 229:28 chipyard.TestHarness.TinyRocketConfig.fir 203335:4]
    node d_first_counter1_1 = tail(_d_first_counter1_T_1, 1) @[Edges.scala 229:28 chipyard.TestHarness.TinyRocketConfig.fir 203336:4]
    node d_first_1 = not(d_first_counter_1) @[Edges.scala 230:25 chipyard.TestHarness.TinyRocketConfig.fir 203337:4]
    node _d_first_counter_T_1 = mux(d_first_1, UInt<1>("h0"), d_first_counter1_1) @[Edges.scala 235:21 chipyard.TestHarness.TinyRocketConfig.fir 203345:6]
    node _GEN_14 = mux(d_first_done, _d_first_counter_T_1, d_first_counter_1) @[Edges.scala 234:17 chipyard.TestHarness.TinyRocketConfig.fir 203344:4 Edges.scala 235:15 chipyard.TestHarness.TinyRocketConfig.fir 203346:6 Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 203334:4]
    node _GEN_72 = shl(io_in_d_bits_source, 2) @[Monitor.scala 634:69 chipyard.TestHarness.TinyRocketConfig.fir 203358:4]
    node _a_opcode_lookup_T = pad(_GEN_72, 10) @[Monitor.scala 634:69 chipyard.TestHarness.TinyRocketConfig.fir 203358:4]
    node _a_opcode_lookup_T_1 = dshr(inflight_opcodes, _a_opcode_lookup_T) @[Monitor.scala 634:44 chipyard.TestHarness.TinyRocketConfig.fir 203359:4]
    node _a_opcode_lookup_T_4 = sub(UInt<16>("h10"), UInt<16>("h1")) @[Monitor.scala 609:57 chipyard.TestHarness.TinyRocketConfig.fir 203362:4]
    node _a_opcode_lookup_T_5 = tail(_a_opcode_lookup_T_4, 1) @[Monitor.scala 609:57 chipyard.TestHarness.TinyRocketConfig.fir 203363:4]
    node _GEN_73 = pad(_a_opcode_lookup_T_5, 384) @[Monitor.scala 634:97 chipyard.TestHarness.TinyRocketConfig.fir 203364:4]
    node _a_opcode_lookup_T_6 = and(_a_opcode_lookup_T_1, _GEN_73) @[Monitor.scala 634:97 chipyard.TestHarness.TinyRocketConfig.fir 203364:4]
    node _GEN_74 = shr(_a_opcode_lookup_T_6, 1) @[Monitor.scala 634:152 chipyard.TestHarness.TinyRocketConfig.fir 203365:4]
    node _a_opcode_lookup_T_7 = pad(_GEN_74, 384) @[Monitor.scala 634:152 chipyard.TestHarness.TinyRocketConfig.fir 203365:4]
    node _a_size_lookup_T_1 = dshr(inflight_sizes, _a_opcode_lookup_T) @[Monitor.scala 638:40 chipyard.TestHarness.TinyRocketConfig.fir 203370:4]
    node _a_size_lookup_T_6 = and(_a_size_lookup_T_1, _GEN_73) @[Monitor.scala 638:91 chipyard.TestHarness.TinyRocketConfig.fir 203375:4]
    node _GEN_77 = shr(_a_size_lookup_T_6, 1) @[Monitor.scala 638:144 chipyard.TestHarness.TinyRocketConfig.fir 203376:4]
    node _a_size_lookup_T_7 = pad(_GEN_77, 384) @[Monitor.scala 638:144 chipyard.TestHarness.TinyRocketConfig.fir 203376:4]
    node _T_594 = and(io_in_a_valid, a_first_1) @[Monitor.scala 648:26 chipyard.TestHarness.TinyRocketConfig.fir 203400:4]
    node _a_set_wo_ready_T = dshlw(UInt<128>("h1"), io_in_a_bits_source) @[OneHot.scala 58:35 chipyard.TestHarness.TinyRocketConfig.fir 203403:6]
    node _GEN_15 = mux(_T_594, _a_set_wo_ready_T, UInt<128>("h0")) @[Monitor.scala 648:71 chipyard.TestHarness.TinyRocketConfig.fir 203402:4 Monitor.scala 649:22 chipyard.TestHarness.TinyRocketConfig.fir 203404:6 chipyard.TestHarness.TinyRocketConfig.fir 203351:4]
    node _T_597 = and(a_first_done, a_first_1) @[Monitor.scala 652:27 chipyard.TestHarness.TinyRocketConfig.fir 203407:4]
    node _a_opcodes_set_interm_T = shl(io_in_a_bits_opcode, 1) @[Monitor.scala 654:53 chipyard.TestHarness.TinyRocketConfig.fir 203412:6]
    node _a_opcodes_set_interm_T_1 = or(_a_opcodes_set_interm_T, UInt<4>("h1")) @[Monitor.scala 654:61 chipyard.TestHarness.TinyRocketConfig.fir 203413:6]
    node _a_sizes_set_interm_T = shl(io_in_a_bits_size, 1) @[Monitor.scala 655:51 chipyard.TestHarness.TinyRocketConfig.fir 203415:6]
    node _a_sizes_set_interm_T_1 = or(_a_sizes_set_interm_T, UInt<3>("h1")) @[Monitor.scala 655:59 chipyard.TestHarness.TinyRocketConfig.fir 203416:6]
    node _GEN_78 = shl(io_in_a_bits_source, 2) @[Monitor.scala 656:79 chipyard.TestHarness.TinyRocketConfig.fir 203418:6]
    node _a_opcodes_set_T = pad(_GEN_78, 10) @[Monitor.scala 656:79 chipyard.TestHarness.TinyRocketConfig.fir 203418:6]
    node a_opcodes_set_interm = mux(_T_597, _a_opcodes_set_interm_T_1, UInt<4>("h0")) @[Monitor.scala 652:72 chipyard.TestHarness.TinyRocketConfig.fir 203409:4 Monitor.scala 654:28 chipyard.TestHarness.TinyRocketConfig.fir 203414:6 chipyard.TestHarness.TinyRocketConfig.fir 203397:4]
    node _GEN_79 = pad(a_opcodes_set_interm, 1027) @[Monitor.scala 656:54 chipyard.TestHarness.TinyRocketConfig.fir 203419:6]
    node _a_opcodes_set_T_1 = dshlw(_GEN_79, _a_opcodes_set_T) @[Monitor.scala 656:54 chipyard.TestHarness.TinyRocketConfig.fir 203419:6]
    node a_sizes_set_interm = mux(_T_597, _a_sizes_set_interm_T_1, UInt<3>("h0")) @[Monitor.scala 652:72 chipyard.TestHarness.TinyRocketConfig.fir 203409:4 Monitor.scala 655:28 chipyard.TestHarness.TinyRocketConfig.fir 203417:6 chipyard.TestHarness.TinyRocketConfig.fir 203399:4]
    node _GEN_81 = pad(a_sizes_set_interm, 1026) @[Monitor.scala 657:52 chipyard.TestHarness.TinyRocketConfig.fir 203422:6]
    node _a_sizes_set_T_1 = dshlw(_GEN_81, _a_opcodes_set_T) @[Monitor.scala 657:52 chipyard.TestHarness.TinyRocketConfig.fir 203422:6]
    node _T_599 = dshr(inflight, io_in_a_bits_source) @[Monitor.scala 658:26 chipyard.TestHarness.TinyRocketConfig.fir 203424:6]
    node _T_600 = bits(_T_599, 0, 0) @[Monitor.scala 658:26 chipyard.TestHarness.TinyRocketConfig.fir 203425:6]
    node _T_601 = not(_T_600) @[Monitor.scala 658:17 chipyard.TestHarness.TinyRocketConfig.fir 203426:6]
    node _T_603 = or(_T_601, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 203428:6]
    node _T_604 = not(_T_603) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 203429:6]
    node _GEN_16 = mux(_T_597, _a_set_wo_ready_T, UInt<128>("h0")) @[Monitor.scala 652:72 chipyard.TestHarness.TinyRocketConfig.fir 203409:4 Monitor.scala 653:28 chipyard.TestHarness.TinyRocketConfig.fir 203411:6 chipyard.TestHarness.TinyRocketConfig.fir 203349:4]
    node _GEN_19 = mux(_T_597, _a_opcodes_set_T_1, UInt<1027>("h0")) @[Monitor.scala 652:72 chipyard.TestHarness.TinyRocketConfig.fir 203409:4 Monitor.scala 656:28 chipyard.TestHarness.TinyRocketConfig.fir 203420:6 chipyard.TestHarness.TinyRocketConfig.fir 203353:4]
    node _GEN_20 = mux(_T_597, _a_sizes_set_T_1, UInt<1026>("h0")) @[Monitor.scala 652:72 chipyard.TestHarness.TinyRocketConfig.fir 203409:4 Monitor.scala 657:28 chipyard.TestHarness.TinyRocketConfig.fir 203423:6 chipyard.TestHarness.TinyRocketConfig.fir 203355:4]
    node _T_605 = and(io_in_d_valid, d_first_1) @[Monitor.scala 671:26 chipyard.TestHarness.TinyRocketConfig.fir 203444:4]
    node _T_607 = not(_T_401) @[Monitor.scala 671:74 chipyard.TestHarness.TinyRocketConfig.fir 203446:4]
    node _T_608 = and(_T_605, _T_607) @[Monitor.scala 671:71 chipyard.TestHarness.TinyRocketConfig.fir 203447:4]
    node _d_clr_wo_ready_T = dshlw(UInt<128>("h1"), io_in_d_bits_source) @[OneHot.scala 58:35 chipyard.TestHarness.TinyRocketConfig.fir 203449:6]
    node _GEN_21 = mux(_T_608, _d_clr_wo_ready_T, UInt<128>("h0")) @[Monitor.scala 671:90 chipyard.TestHarness.TinyRocketConfig.fir 203448:4 Monitor.scala 672:22 chipyard.TestHarness.TinyRocketConfig.fir 203450:6 chipyard.TestHarness.TinyRocketConfig.fir 203438:4]
    node _T_610 = and(d_first_done, d_first_1) @[Monitor.scala 675:27 chipyard.TestHarness.TinyRocketConfig.fir 203453:4]
    node _T_613 = and(_T_610, _T_607) @[Monitor.scala 675:72 chipyard.TestHarness.TinyRocketConfig.fir 203456:4]
    node _GEN_83 = pad(_a_opcode_lookup_T_5, 1039) @[Monitor.scala 677:76 chipyard.TestHarness.TinyRocketConfig.fir 203465:6]
    node _d_opcodes_clr_T_5 = dshlw(_GEN_83, _a_opcode_lookup_T) @[Monitor.scala 677:76 chipyard.TestHarness.TinyRocketConfig.fir 203465:6]
    node _GEN_22 = mux(_T_613, _d_clr_wo_ready_T, UInt<128>("h0")) @[Monitor.scala 675:91 chipyard.TestHarness.TinyRocketConfig.fir 203457:4 Monitor.scala 676:21 chipyard.TestHarness.TinyRocketConfig.fir 203459:6 chipyard.TestHarness.TinyRocketConfig.fir 203436:4]
    node _GEN_23 = mux(_T_613, _d_opcodes_clr_T_5, UInt<1039>("h0")) @[Monitor.scala 675:91 chipyard.TestHarness.TinyRocketConfig.fir 203457:4 Monitor.scala 677:21 chipyard.TestHarness.TinyRocketConfig.fir 203466:6 chipyard.TestHarness.TinyRocketConfig.fir 203440:4]
    node _same_cycle_resp_T_2 = eq(io_in_a_bits_source, io_in_d_bits_source) @[Monitor.scala 681:113 chipyard.TestHarness.TinyRocketConfig.fir 203482:6]
    node same_cycle_resp = and(_T_594, _same_cycle_resp_T_2) @[Monitor.scala 681:88 chipyard.TestHarness.TinyRocketConfig.fir 203483:6]
    node _T_618 = dshr(inflight, io_in_d_bits_source) @[Monitor.scala 682:25 chipyard.TestHarness.TinyRocketConfig.fir 203484:6]
    node _T_619 = bits(_T_618, 0, 0) @[Monitor.scala 682:25 chipyard.TestHarness.TinyRocketConfig.fir 203485:6]
    node _T_620 = or(_T_619, same_cycle_resp) @[Monitor.scala 682:49 chipyard.TestHarness.TinyRocketConfig.fir 203486:6]
    node _T_622 = or(_T_620, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 203488:6]
    node _T_623 = not(_T_622) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 203489:6]
    node _GEN_27 = mux(eq(UInt<3>("h2"), io_in_a_bits_opcode), UInt<3>("h1"), UInt<3>("h0")) @[Monitor.scala 685:38 chipyard.TestHarness.TinyRocketConfig.fir 203495:8 Monitor.scala 685:38 chipyard.TestHarness.TinyRocketConfig.fir 203495:8]
    node _GEN_28 = mux(eq(UInt<3>("h3"), io_in_a_bits_opcode), UInt<3>("h1"), _GEN_27) @[Monitor.scala 685:38 chipyard.TestHarness.TinyRocketConfig.fir 203495:8 Monitor.scala 685:38 chipyard.TestHarness.TinyRocketConfig.fir 203495:8]
    node _GEN_29 = mux(eq(UInt<3>("h4"), io_in_a_bits_opcode), UInt<3>("h1"), _GEN_28) @[Monitor.scala 685:38 chipyard.TestHarness.TinyRocketConfig.fir 203495:8 Monitor.scala 685:38 chipyard.TestHarness.TinyRocketConfig.fir 203495:8]
    node _GEN_30 = mux(eq(UInt<3>("h5"), io_in_a_bits_opcode), UInt<3>("h2"), _GEN_29) @[Monitor.scala 685:38 chipyard.TestHarness.TinyRocketConfig.fir 203495:8 Monitor.scala 685:38 chipyard.TestHarness.TinyRocketConfig.fir 203495:8]
    node _GEN_31 = mux(eq(UInt<3>("h6"), io_in_a_bits_opcode), UInt<3>("h4"), _GEN_30) @[Monitor.scala 685:38 chipyard.TestHarness.TinyRocketConfig.fir 203495:8 Monitor.scala 685:38 chipyard.TestHarness.TinyRocketConfig.fir 203495:8]
    node _GEN_32 = mux(eq(UInt<3>("h7"), io_in_a_bits_opcode), UInt<3>("h4"), _GEN_31) @[Monitor.scala 685:38 chipyard.TestHarness.TinyRocketConfig.fir 203495:8 Monitor.scala 685:38 chipyard.TestHarness.TinyRocketConfig.fir 203495:8]
    node _T_624 = eq(io_in_d_bits_opcode, _GEN_32) @[Monitor.scala 685:38 chipyard.TestHarness.TinyRocketConfig.fir 203495:8]
    node _GEN_39 = mux(eq(UInt<3>("h6"), io_in_a_bits_opcode), UInt<3>("h5"), _GEN_30) @[Monitor.scala 686:39 chipyard.TestHarness.TinyRocketConfig.fir 203496:8 Monitor.scala 686:39 chipyard.TestHarness.TinyRocketConfig.fir 203496:8]
    node _GEN_40 = mux(eq(UInt<3>("h7"), io_in_a_bits_opcode), UInt<3>("h4"), _GEN_39) @[Monitor.scala 686:39 chipyard.TestHarness.TinyRocketConfig.fir 203496:8 Monitor.scala 686:39 chipyard.TestHarness.TinyRocketConfig.fir 203496:8]
    node _T_625 = eq(io_in_d_bits_opcode, _GEN_40) @[Monitor.scala 686:39 chipyard.TestHarness.TinyRocketConfig.fir 203496:8]
    node _T_626 = or(_T_624, _T_625) @[Monitor.scala 685:77 chipyard.TestHarness.TinyRocketConfig.fir 203497:8]
    node _T_628 = or(_T_626, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 203499:8]
    node _T_629 = not(_T_628) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 203500:8]
    node _T_630 = eq(io_in_a_bits_size, io_in_d_bits_size) @[Monitor.scala 687:36 chipyard.TestHarness.TinyRocketConfig.fir 203505:8]
    node _T_632 = or(_T_630, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 203507:8]
    node _T_633 = not(_T_632) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 203508:8]
    node a_opcode_lookup = bits(_a_opcode_lookup_T_7, 3, 0) @[chipyard.TestHarness.TinyRocketConfig.fir 203356:4 Monitor.scala 634:21 chipyard.TestHarness.TinyRocketConfig.fir 203366:4]
    node _T_634 = bits(a_opcode_lookup, 2, 0) @[chipyard.TestHarness.TinyRocketConfig.fir 203515:8]
    node _GEN_43 = mux(eq(UInt<3>("h2"), _T_634), UInt<3>("h1"), UInt<3>("h0")) @[Monitor.scala 689:38 chipyard.TestHarness.TinyRocketConfig.fir 203516:8 Monitor.scala 689:38 chipyard.TestHarness.TinyRocketConfig.fir 203516:8]
    node _GEN_44 = mux(eq(UInt<3>("h3"), _T_634), UInt<3>("h1"), _GEN_43) @[Monitor.scala 689:38 chipyard.TestHarness.TinyRocketConfig.fir 203516:8 Monitor.scala 689:38 chipyard.TestHarness.TinyRocketConfig.fir 203516:8]
    node _GEN_45 = mux(eq(UInt<3>("h4"), _T_634), UInt<3>("h1"), _GEN_44) @[Monitor.scala 689:38 chipyard.TestHarness.TinyRocketConfig.fir 203516:8 Monitor.scala 689:38 chipyard.TestHarness.TinyRocketConfig.fir 203516:8]
    node _GEN_46 = mux(eq(UInt<3>("h5"), _T_634), UInt<3>("h2"), _GEN_45) @[Monitor.scala 689:38 chipyard.TestHarness.TinyRocketConfig.fir 203516:8 Monitor.scala 689:38 chipyard.TestHarness.TinyRocketConfig.fir 203516:8]
    node _GEN_47 = mux(eq(UInt<3>("h6"), _T_634), UInt<3>("h4"), _GEN_46) @[Monitor.scala 689:38 chipyard.TestHarness.TinyRocketConfig.fir 203516:8 Monitor.scala 689:38 chipyard.TestHarness.TinyRocketConfig.fir 203516:8]
    node _GEN_48 = mux(eq(UInt<3>("h7"), _T_634), UInt<3>("h4"), _GEN_47) @[Monitor.scala 689:38 chipyard.TestHarness.TinyRocketConfig.fir 203516:8 Monitor.scala 689:38 chipyard.TestHarness.TinyRocketConfig.fir 203516:8]
    node _T_635 = eq(io_in_d_bits_opcode, _GEN_48) @[Monitor.scala 689:38 chipyard.TestHarness.TinyRocketConfig.fir 203516:8]
    node _GEN_55 = mux(eq(UInt<3>("h6"), _T_634), UInt<3>("h5"), _GEN_46) @[Monitor.scala 690:38 chipyard.TestHarness.TinyRocketConfig.fir 203518:8 Monitor.scala 690:38 chipyard.TestHarness.TinyRocketConfig.fir 203518:8]
    node _GEN_56 = mux(eq(UInt<3>("h7"), _T_634), UInt<3>("h4"), _GEN_55) @[Monitor.scala 690:38 chipyard.TestHarness.TinyRocketConfig.fir 203518:8 Monitor.scala 690:38 chipyard.TestHarness.TinyRocketConfig.fir 203518:8]
    node _T_637 = eq(io_in_d_bits_opcode, _GEN_56) @[Monitor.scala 690:38 chipyard.TestHarness.TinyRocketConfig.fir 203518:8]
    node _T_638 = or(_T_635, _T_637) @[Monitor.scala 689:72 chipyard.TestHarness.TinyRocketConfig.fir 203519:8]
    node _T_640 = or(_T_638, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 203521:8]
    node _T_641 = not(_T_640) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 203522:8]
    node a_size_lookup = bits(_a_size_lookup_T_7, 3, 0) @[chipyard.TestHarness.TinyRocketConfig.fir 203367:4 Monitor.scala 638:19 chipyard.TestHarness.TinyRocketConfig.fir 203377:4]
    node _GEN_86 = pad(io_in_d_bits_size, 4) @[Monitor.scala 691:36 chipyard.TestHarness.TinyRocketConfig.fir 203527:8]
    node _T_642 = eq(_GEN_86, a_size_lookup) @[Monitor.scala 691:36 chipyard.TestHarness.TinyRocketConfig.fir 203527:8]
    node _T_644 = or(_T_642, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 203529:8]
    node _T_645 = not(_T_644) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 203530:8]
    node _T_647 = and(_T_605, a_first_1) @[Monitor.scala 694:36 chipyard.TestHarness.TinyRocketConfig.fir 203538:4]
    node _T_648 = and(_T_647, io_in_a_valid) @[Monitor.scala 694:47 chipyard.TestHarness.TinyRocketConfig.fir 203539:4]
    node _T_650 = and(_T_648, _same_cycle_resp_T_2) @[Monitor.scala 694:65 chipyard.TestHarness.TinyRocketConfig.fir 203541:4]
    node _T_652 = and(_T_650, _T_607) @[Monitor.scala 694:116 chipyard.TestHarness.TinyRocketConfig.fir 203543:4]
    node _T_653 = not(io_in_d_ready) @[Monitor.scala 695:15 chipyard.TestHarness.TinyRocketConfig.fir 203545:6]
    node _T_654 = or(_T_653, io_in_a_ready) @[Monitor.scala 695:32 chipyard.TestHarness.TinyRocketConfig.fir 203546:6]
    node _T_656 = or(_T_654, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 203548:6]
    node _T_657 = not(_T_656) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 203549:6]
    node a_set_wo_ready = bits(_GEN_15, 95, 0) @[chipyard.TestHarness.TinyRocketConfig.fir 203350:4]
    node d_clr_wo_ready = bits(_GEN_21, 95, 0) @[chipyard.TestHarness.TinyRocketConfig.fir 203437:4]
    node _T_658 = neq(a_set_wo_ready, d_clr_wo_ready) @[Monitor.scala 699:29 chipyard.TestHarness.TinyRocketConfig.fir 203555:4]
    node _T_659 = orr(a_set_wo_ready) @[Monitor.scala 699:67 chipyard.TestHarness.TinyRocketConfig.fir 203556:4]
    node _T_660 = not(_T_659) @[Monitor.scala 699:51 chipyard.TestHarness.TinyRocketConfig.fir 203557:4]
    node _T_661 = or(_T_658, _T_660) @[Monitor.scala 699:48 chipyard.TestHarness.TinyRocketConfig.fir 203558:4]
    node _T_663 = or(_T_661, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 203560:4]
    node _T_664 = not(_T_663) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 203561:4]
    node a_set = bits(_GEN_16, 95, 0) @[chipyard.TestHarness.TinyRocketConfig.fir 203348:4]
    node _inflight_T = or(inflight, a_set) @[Monitor.scala 702:27 chipyard.TestHarness.TinyRocketConfig.fir 203566:4]
    node d_clr = bits(_GEN_22, 95, 0) @[chipyard.TestHarness.TinyRocketConfig.fir 203435:4]
    node _inflight_T_1 = not(d_clr) @[Monitor.scala 702:38 chipyard.TestHarness.TinyRocketConfig.fir 203567:4]
    node _inflight_T_2 = and(_inflight_T, _inflight_T_1) @[Monitor.scala 702:36 chipyard.TestHarness.TinyRocketConfig.fir 203568:4]
    node a_opcodes_set = bits(_GEN_19, 383, 0) @[chipyard.TestHarness.TinyRocketConfig.fir 203352:4]
    node _inflight_opcodes_T = or(inflight_opcodes, a_opcodes_set) @[Monitor.scala 703:43 chipyard.TestHarness.TinyRocketConfig.fir 203570:4]
    node d_opcodes_clr = bits(_GEN_23, 383, 0) @[chipyard.TestHarness.TinyRocketConfig.fir 203439:4]
    node _inflight_opcodes_T_1 = not(d_opcodes_clr) @[Monitor.scala 703:62 chipyard.TestHarness.TinyRocketConfig.fir 203571:4]
    node _inflight_opcodes_T_2 = and(_inflight_opcodes_T, _inflight_opcodes_T_1) @[Monitor.scala 703:60 chipyard.TestHarness.TinyRocketConfig.fir 203572:4]
    node a_sizes_set = bits(_GEN_20, 383, 0) @[chipyard.TestHarness.TinyRocketConfig.fir 203354:4]
    node _inflight_sizes_T = or(inflight_sizes, a_sizes_set) @[Monitor.scala 704:39 chipyard.TestHarness.TinyRocketConfig.fir 203574:4]
    node _inflight_sizes_T_2 = and(_inflight_sizes_T, _inflight_opcodes_T_1) @[Monitor.scala 704:54 chipyard.TestHarness.TinyRocketConfig.fir 203576:4]
    reg watchdog : UInt<32>, clock with :
      reset => (UInt<1>("h0"), watchdog) @[Monitor.scala 706:27 chipyard.TestHarness.TinyRocketConfig.fir 203578:4]
    node _T_665 = orr(inflight) @[Monitor.scala 709:26 chipyard.TestHarness.TinyRocketConfig.fir 203581:4]
    node _T_666 = not(_T_665) @[Monitor.scala 709:16 chipyard.TestHarness.TinyRocketConfig.fir 203582:4]
    node _T_667 = eq(plusarg_reader.out, UInt<32>("h0")) @[Monitor.scala 709:39 chipyard.TestHarness.TinyRocketConfig.fir 203583:4]
    node _T_668 = or(_T_666, _T_667) @[Monitor.scala 709:30 chipyard.TestHarness.TinyRocketConfig.fir 203584:4]
    node _T_669 = lt(watchdog, plusarg_reader.out) @[Monitor.scala 709:59 chipyard.TestHarness.TinyRocketConfig.fir 203585:4]
    node _T_670 = or(_T_668, _T_669) @[Monitor.scala 709:47 chipyard.TestHarness.TinyRocketConfig.fir 203586:4]
    node _T_672 = or(_T_670, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 203588:4]
    node _T_673 = not(_T_672) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 203589:4]
    node _watchdog_T = add(watchdog, UInt<32>("h1")) @[Monitor.scala 711:26 chipyard.TestHarness.TinyRocketConfig.fir 203594:4]
    node _watchdog_T_1 = tail(_watchdog_T, 1) @[Monitor.scala 711:26 chipyard.TestHarness.TinyRocketConfig.fir 203595:4]
    node _T_676 = or(a_first_done, d_first_done) @[Monitor.scala 712:27 chipyard.TestHarness.TinyRocketConfig.fir 203599:4]
    node _GEN_57 = mux(_T_676, UInt<32>("h0"), _watchdog_T_1) @[Monitor.scala 712:47 chipyard.TestHarness.TinyRocketConfig.fir 203600:4 Monitor.scala 712:58 chipyard.TestHarness.TinyRocketConfig.fir 203601:6 Monitor.scala 711:14 chipyard.TestHarness.TinyRocketConfig.fir 203596:4]
    reg inflight_1 : UInt<96>, clock with :
      reset => (UInt<1>("h0"), inflight_1) @[Monitor.scala 723:35 chipyard.TestHarness.TinyRocketConfig.fir 203603:4]
    reg inflight_sizes_1 : UInt<384>, clock with :
      reset => (UInt<1>("h0"), inflight_sizes_1) @[Monitor.scala 725:35 chipyard.TestHarness.TinyRocketConfig.fir 203605:4]
    reg d_first_counter_2 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), d_first_counter_2) @[Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 203640:4]
    node _d_first_counter1_T_2 = sub(d_first_counter_2, UInt<1>("h1")) @[Edges.scala 229:28 chipyard.TestHarness.TinyRocketConfig.fir 203641:4]
    node d_first_counter1_2 = tail(_d_first_counter1_T_2, 1) @[Edges.scala 229:28 chipyard.TestHarness.TinyRocketConfig.fir 203642:4]
    node d_first_2 = not(d_first_counter_2) @[Edges.scala 230:25 chipyard.TestHarness.TinyRocketConfig.fir 203643:4]
    node _d_first_counter_T_2 = mux(d_first_2, UInt<1>("h0"), d_first_counter1_2) @[Edges.scala 235:21 chipyard.TestHarness.TinyRocketConfig.fir 203651:6]
    node _GEN_59 = mux(d_first_done, _d_first_counter_T_2, d_first_counter_2) @[Edges.scala 234:17 chipyard.TestHarness.TinyRocketConfig.fir 203650:4 Edges.scala 235:15 chipyard.TestHarness.TinyRocketConfig.fir 203652:6 Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 203640:4]
    node _c_size_lookup_T_1 = dshr(inflight_sizes_1, _a_opcode_lookup_T) @[Monitor.scala 747:42 chipyard.TestHarness.TinyRocketConfig.fir 203676:4]
    node _c_size_lookup_T_6 = and(_c_size_lookup_T_1, _GEN_73) @[Monitor.scala 747:93 chipyard.TestHarness.TinyRocketConfig.fir 203681:4]
    node _GEN_92 = shr(_c_size_lookup_T_6, 1) @[Monitor.scala 747:146 chipyard.TestHarness.TinyRocketConfig.fir 203682:4]
    node _c_size_lookup_T_7 = pad(_GEN_92, 384) @[Monitor.scala 747:146 chipyard.TestHarness.TinyRocketConfig.fir 203682:4]
    node _T_694 = and(io_in_d_valid, d_first_2) @[Monitor.scala 779:26 chipyard.TestHarness.TinyRocketConfig.fir 203760:4]
    node _T_696 = and(_T_694, _T_401) @[Monitor.scala 779:71 chipyard.TestHarness.TinyRocketConfig.fir 203762:4]
    node _T_698 = and(d_first_done, d_first_2) @[Monitor.scala 783:27 chipyard.TestHarness.TinyRocketConfig.fir 203768:4]
    node _T_700 = and(_T_698, _T_401) @[Monitor.scala 783:72 chipyard.TestHarness.TinyRocketConfig.fir 203770:4]
    node _GEN_67 = mux(_T_700, _d_clr_wo_ready_T, UInt<128>("h0")) @[Monitor.scala 783:90 chipyard.TestHarness.TinyRocketConfig.fir 203771:4 Monitor.scala 784:21 chipyard.TestHarness.TinyRocketConfig.fir 203773:6 chipyard.TestHarness.TinyRocketConfig.fir 203752:4]
    node _GEN_68 = mux(_T_700, _d_opcodes_clr_T_5, UInt<1039>("h0")) @[Monitor.scala 783:90 chipyard.TestHarness.TinyRocketConfig.fir 203771:4 Monitor.scala 785:21 chipyard.TestHarness.TinyRocketConfig.fir 203780:6 chipyard.TestHarness.TinyRocketConfig.fir 203756:4]
    node _T_704 = dshr(inflight_1, io_in_d_bits_source) @[Monitor.scala 791:25 chipyard.TestHarness.TinyRocketConfig.fir 203806:6]
    node _T_705 = bits(_T_704, 0, 0) @[Monitor.scala 791:25 chipyard.TestHarness.TinyRocketConfig.fir 203807:6]
    node _T_708 = or(_T_705, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 203810:6]
    node _T_709 = not(_T_708) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 203811:6]
    node c_size_lookup = bits(_c_size_lookup_T_7, 3, 0) @[chipyard.TestHarness.TinyRocketConfig.fir 203664:4 Monitor.scala 747:21 chipyard.TestHarness.TinyRocketConfig.fir 203683:4]
    node _T_714 = eq(_GEN_86, c_size_lookup) @[Monitor.scala 795:36 chipyard.TestHarness.TinyRocketConfig.fir 203829:8]
    node _T_716 = or(_T_714, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 203831:8]
    node _T_717 = not(_T_716) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 203832:8]
    node d_clr_1 = bits(_GEN_67, 95, 0) @[chipyard.TestHarness.TinyRocketConfig.fir 203751:4]
    node _inflight_T_4 = not(d_clr_1) @[Monitor.scala 809:46 chipyard.TestHarness.TinyRocketConfig.fir 203874:4]
    node _inflight_T_5 = and(inflight_1, _inflight_T_4) @[Monitor.scala 809:44 chipyard.TestHarness.TinyRocketConfig.fir 203875:4]
    node d_opcodes_clr_1 = bits(_GEN_68, 383, 0) @[chipyard.TestHarness.TinyRocketConfig.fir 203755:4]
    node _inflight_opcodes_T_4 = not(d_opcodes_clr_1) @[Monitor.scala 810:62 chipyard.TestHarness.TinyRocketConfig.fir 203878:4]
    node _inflight_sizes_T_5 = and(inflight_sizes_1, _inflight_opcodes_T_4) @[Monitor.scala 811:56 chipyard.TestHarness.TinyRocketConfig.fir 203883:4]
    reg watchdog_1 : UInt<32>, clock with :
      reset => (UInt<1>("h0"), watchdog_1) @[Monitor.scala 813:27 chipyard.TestHarness.TinyRocketConfig.fir 203885:4]
    node _T_734 = orr(inflight_1) @[Monitor.scala 816:26 chipyard.TestHarness.TinyRocketConfig.fir 203888:4]
    node _T_735 = not(_T_734) @[Monitor.scala 816:16 chipyard.TestHarness.TinyRocketConfig.fir 203889:4]
    node _T_736 = eq(plusarg_reader_1.out, UInt<32>("h0")) @[Monitor.scala 816:39 chipyard.TestHarness.TinyRocketConfig.fir 203890:4]
    node _T_737 = or(_T_735, _T_736) @[Monitor.scala 816:30 chipyard.TestHarness.TinyRocketConfig.fir 203891:4]
    node _T_738 = lt(watchdog_1, plusarg_reader_1.out) @[Monitor.scala 816:59 chipyard.TestHarness.TinyRocketConfig.fir 203892:4]
    node _T_739 = or(_T_737, _T_738) @[Monitor.scala 816:47 chipyard.TestHarness.TinyRocketConfig.fir 203893:4]
    node _T_741 = or(_T_739, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 203895:4]
    node _T_742 = not(_T_741) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 203896:4]
    node _watchdog_T_2 = add(watchdog_1, UInt<32>("h1")) @[Monitor.scala 818:26 chipyard.TestHarness.TinyRocketConfig.fir 203901:4]
    node _watchdog_T_3 = tail(_watchdog_T_2, 1) @[Monitor.scala 818:26 chipyard.TestHarness.TinyRocketConfig.fir 203902:4]
    node _GEN_70 = mux(d_first_done, UInt<32>("h0"), _watchdog_T_3) @[Monitor.scala 819:47 chipyard.TestHarness.TinyRocketConfig.fir 203909:4 Monitor.scala 819:58 chipyard.TestHarness.TinyRocketConfig.fir 203910:6 Monitor.scala 818:14 chipyard.TestHarness.TinyRocketConfig.fir 203903:4]
    a_first_counter <= mux(reset, UInt<1>("h0"), _GEN_0) @[Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 203138:4 Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 203138:4]
    opcode <= mux(_T_565, io_in_a_bits_opcode, opcode) @[Monitor.scala 396:32 chipyard.TestHarness.TinyRocketConfig.fir 203203:4 Monitor.scala 397:15 chipyard.TestHarness.TinyRocketConfig.fir 203204:6 Monitor.scala 384:22 chipyard.TestHarness.TinyRocketConfig.fir 203152:4]
    param <= mux(_T_565, io_in_a_bits_param, param) @[Monitor.scala 396:32 chipyard.TestHarness.TinyRocketConfig.fir 203203:4 Monitor.scala 398:15 chipyard.TestHarness.TinyRocketConfig.fir 203205:6 Monitor.scala 385:22 chipyard.TestHarness.TinyRocketConfig.fir 203153:4]
    size <= mux(_T_565, io_in_a_bits_size, size) @[Monitor.scala 396:32 chipyard.TestHarness.TinyRocketConfig.fir 203203:4 Monitor.scala 399:15 chipyard.TestHarness.TinyRocketConfig.fir 203206:6 Monitor.scala 386:22 chipyard.TestHarness.TinyRocketConfig.fir 203154:4]
    source <= mux(_T_565, io_in_a_bits_source, source) @[Monitor.scala 396:32 chipyard.TestHarness.TinyRocketConfig.fir 203203:4 Monitor.scala 400:15 chipyard.TestHarness.TinyRocketConfig.fir 203207:6 Monitor.scala 387:22 chipyard.TestHarness.TinyRocketConfig.fir 203155:4]
    address <= mux(_T_565, io_in_a_bits_address, address) @[Monitor.scala 396:32 chipyard.TestHarness.TinyRocketConfig.fir 203203:4 Monitor.scala 401:15 chipyard.TestHarness.TinyRocketConfig.fir 203208:6 Monitor.scala 388:22 chipyard.TestHarness.TinyRocketConfig.fir 203156:4]
    d_first_counter <= mux(reset, UInt<1>("h0"), _GEN_6) @[Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 203218:4 Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 203218:4]
    opcode_1 <= mux(_T_593, io_in_d_bits_opcode, opcode_1) @[Monitor.scala 549:32 chipyard.TestHarness.TinyRocketConfig.fir 203292:4 Monitor.scala 550:15 chipyard.TestHarness.TinyRocketConfig.fir 203293:6 Monitor.scala 535:22 chipyard.TestHarness.TinyRocketConfig.fir 203232:4]
    param_1 <= mux(_T_593, io_in_d_bits_param, param_1) @[Monitor.scala 549:32 chipyard.TestHarness.TinyRocketConfig.fir 203292:4 Monitor.scala 551:15 chipyard.TestHarness.TinyRocketConfig.fir 203294:6 Monitor.scala 536:22 chipyard.TestHarness.TinyRocketConfig.fir 203233:4]
    size_1 <= mux(_T_593, io_in_d_bits_size, size_1) @[Monitor.scala 549:32 chipyard.TestHarness.TinyRocketConfig.fir 203292:4 Monitor.scala 552:15 chipyard.TestHarness.TinyRocketConfig.fir 203295:6 Monitor.scala 537:22 chipyard.TestHarness.TinyRocketConfig.fir 203234:4]
    source_1 <= mux(_T_593, io_in_d_bits_source, source_1) @[Monitor.scala 549:32 chipyard.TestHarness.TinyRocketConfig.fir 203292:4 Monitor.scala 553:15 chipyard.TestHarness.TinyRocketConfig.fir 203296:6 Monitor.scala 538:22 chipyard.TestHarness.TinyRocketConfig.fir 203235:4]
    sink <= mux(_T_593, io_in_d_bits_sink, sink) @[Monitor.scala 549:32 chipyard.TestHarness.TinyRocketConfig.fir 203292:4 Monitor.scala 554:15 chipyard.TestHarness.TinyRocketConfig.fir 203297:6 Monitor.scala 539:22 chipyard.TestHarness.TinyRocketConfig.fir 203236:4]
    denied <= mux(_T_593, io_in_d_bits_denied, denied) @[Monitor.scala 549:32 chipyard.TestHarness.TinyRocketConfig.fir 203292:4 Monitor.scala 555:15 chipyard.TestHarness.TinyRocketConfig.fir 203298:6 Monitor.scala 540:22 chipyard.TestHarness.TinyRocketConfig.fir 203237:4]
    inflight <= mux(reset, UInt<96>("h0"), _inflight_T_2) @[Monitor.scala 611:27 chipyard.TestHarness.TinyRocketConfig.fir 203300:4 Monitor.scala 611:27 chipyard.TestHarness.TinyRocketConfig.fir 203300:4 Monitor.scala 702:14 chipyard.TestHarness.TinyRocketConfig.fir 203569:4]
    inflight_opcodes <= mux(reset, UInt<384>("h0"), _inflight_opcodes_T_2) @[Monitor.scala 613:35 chipyard.TestHarness.TinyRocketConfig.fir 203301:4 Monitor.scala 613:35 chipyard.TestHarness.TinyRocketConfig.fir 203301:4 Monitor.scala 703:22 chipyard.TestHarness.TinyRocketConfig.fir 203573:4]
    inflight_sizes <= mux(reset, UInt<384>("h0"), _inflight_sizes_T_2) @[Monitor.scala 615:33 chipyard.TestHarness.TinyRocketConfig.fir 203302:4 Monitor.scala 615:33 chipyard.TestHarness.TinyRocketConfig.fir 203302:4 Monitor.scala 704:20 chipyard.TestHarness.TinyRocketConfig.fir 203577:4]
    a_first_counter_1 <= mux(reset, UInt<1>("h0"), _GEN_13) @[Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 203312:4 Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 203312:4]
    d_first_counter_1 <= mux(reset, UInt<1>("h0"), _GEN_14) @[Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 203334:4 Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 203334:4]
    watchdog <= mux(reset, UInt<32>("h0"), _GEN_57) @[Monitor.scala 706:27 chipyard.TestHarness.TinyRocketConfig.fir 203578:4 Monitor.scala 706:27 chipyard.TestHarness.TinyRocketConfig.fir 203578:4]
    inflight_1 <= mux(reset, UInt<96>("h0"), _inflight_T_5) @[Monitor.scala 723:35 chipyard.TestHarness.TinyRocketConfig.fir 203603:4 Monitor.scala 723:35 chipyard.TestHarness.TinyRocketConfig.fir 203603:4 Monitor.scala 809:22 chipyard.TestHarness.TinyRocketConfig.fir 203876:4]
    inflight_sizes_1 <= mux(reset, UInt<384>("h0"), _inflight_sizes_T_5) @[Monitor.scala 725:35 chipyard.TestHarness.TinyRocketConfig.fir 203605:4 Monitor.scala 725:35 chipyard.TestHarness.TinyRocketConfig.fir 203605:4 Monitor.scala 811:22 chipyard.TestHarness.TinyRocketConfig.fir 203884:4]
    d_first_counter_2 <= mux(reset, UInt<1>("h0"), _GEN_59) @[Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 203640:4 Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 203640:4]
    watchdog_1 <= mux(reset, UInt<32>("h0"), _GEN_70) @[Monitor.scala 813:27 chipyard.TestHarness.TinyRocketConfig.fir 203885:4 Monitor.scala 813:27 chipyard.TestHarness.TinyRocketConfig.fir 203885:4]
    node _GEN_98 = and(io_in_a_valid, _T_20) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202230:10]
    printf(clock, and(_GEN_98, _T_43), "Assertion failed: 'A' channel carries AcquireBlock type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202230:10]
    stop(clock, and(_GEN_98, _T_43), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202231:10]
    printf(clock, and(_GEN_98, _T_43), "Assertion failed: 'A' channel carries AcquireBlock from a client which does not support Probe (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202249:10]
    stop(clock, and(_GEN_98, _T_43), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202250:10]
    printf(clock, and(_GEN_98, _T_61), "Assertion failed: 'A' channel AcquireBlock carries invalid source ID (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202256:10]
    stop(clock, and(_GEN_98, _T_61), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202257:10]
    printf(clock, and(_GEN_98, _T_65), "Assertion failed: 'A' channel AcquireBlock smaller than a beat (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202264:10]
    stop(clock, and(_GEN_98, _T_65), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202265:10]
    printf(clock, and(_GEN_98, _T_68), "Assertion failed: 'A' channel AcquireBlock address not aligned to size (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202271:10]
    stop(clock, and(_GEN_98, _T_68), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202272:10]
    printf(clock, and(_GEN_98, _T_72), "Assertion failed: 'A' channel AcquireBlock carries invalid grow param (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202279:10]
    stop(clock, and(_GEN_98, _T_72), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202280:10]
    printf(clock, and(_GEN_98, _T_77), "Assertion failed: 'A' channel AcquireBlock contains invalid mask (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202288:10]
    stop(clock, and(_GEN_98, _T_77), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202289:10]
    printf(clock, and(_GEN_98, _T_81), "Assertion failed: 'A' channel AcquireBlock is corrupt (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202296:10]
    stop(clock, and(_GEN_98, _T_81), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202297:10]
    node _GEN_114 = and(io_in_a_valid, _T_82) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202328:10]
    printf(clock, and(_GEN_114, _T_43), "Assertion failed: 'A' channel carries AcquirePerm type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202328:10]
    stop(clock, and(_GEN_114, _T_43), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202329:10]
    printf(clock, and(_GEN_114, _T_43), "Assertion failed: 'A' channel carries AcquirePerm from a client which does not support Probe (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202347:10]
    stop(clock, and(_GEN_114, _T_43), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202348:10]
    printf(clock, and(_GEN_114, _T_61), "Assertion failed: 'A' channel AcquirePerm carries invalid source ID (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202354:10]
    stop(clock, and(_GEN_114, _T_61), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202355:10]
    printf(clock, and(_GEN_114, _T_65), "Assertion failed: 'A' channel AcquirePerm smaller than a beat (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202362:10]
    stop(clock, and(_GEN_114, _T_65), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202363:10]
    printf(clock, and(_GEN_114, _T_68), "Assertion failed: 'A' channel AcquirePerm address not aligned to size (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202369:10]
    stop(clock, and(_GEN_114, _T_68), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202370:10]
    printf(clock, and(_GEN_114, _T_72), "Assertion failed: 'A' channel AcquirePerm carries invalid grow param (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202377:10]
    stop(clock, and(_GEN_114, _T_72), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202378:10]
    printf(clock, and(_GEN_114, _T_138), "Assertion failed: 'A' channel AcquirePerm requests NtoB (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202385:10]
    stop(clock, and(_GEN_114, _T_138), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202386:10]
    printf(clock, and(_GEN_114, _T_77), "Assertion failed: 'A' channel AcquirePerm contains invalid mask (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202394:10]
    stop(clock, and(_GEN_114, _T_77), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202395:10]
    printf(clock, and(_GEN_114, _T_81), "Assertion failed: 'A' channel AcquirePerm is corrupt (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202402:10]
    stop(clock, and(_GEN_114, _T_81), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202403:10]
    node _GEN_132 = and(io_in_a_valid, _T_148) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202425:10]
    printf(clock, and(_GEN_132, _T_61), "Assertion failed: 'A' channel carries Get type which master claims it can't emit (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202425:10]
    stop(clock, and(_GEN_132, _T_61), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202426:10]
    printf(clock, and(_GEN_132, _T_176), "Assertion failed: 'A' channel carries Get type which slave claims it can't support (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202443:10]
    stop(clock, and(_GEN_132, _T_176), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202444:10]
    printf(clock, and(_GEN_132, _T_61), "Assertion failed: 'A' channel Get carries invalid source ID (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202450:10]
    stop(clock, and(_GEN_132, _T_61), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202451:10]
    printf(clock, and(_GEN_132, _T_68), "Assertion failed: 'A' channel Get address not aligned to size (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202457:10]
    stop(clock, and(_GEN_132, _T_68), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202458:10]
    printf(clock, and(_GEN_132, _T_186), "Assertion failed: 'A' channel Get carries invalid param (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202465:10]
    stop(clock, and(_GEN_132, _T_186), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202466:10]
    printf(clock, and(_GEN_132, _T_190), "Assertion failed: 'A' channel Get contains invalid mask (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202473:10]
    stop(clock, and(_GEN_132, _T_190), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202474:10]
    printf(clock, and(_GEN_132, _T_81), "Assertion failed: 'A' channel Get is corrupt (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202481:10]
    stop(clock, and(_GEN_132, _T_81), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202482:10]
    node _GEN_146 = and(io_in_a_valid, _T_195) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202516:10]
    printf(clock, and(_GEN_146, _T_221), "Assertion failed: 'A' channel carries PutFull type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202516:10]
    stop(clock, and(_GEN_146, _T_221), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202517:10]
    printf(clock, and(_GEN_146, _T_61), "Assertion failed: 'A' channel PutFull carries invalid source ID (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202523:10]
    stop(clock, and(_GEN_146, _T_61), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202524:10]
    printf(clock, and(_GEN_146, _T_68), "Assertion failed: 'A' channel PutFull address not aligned to size (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202530:10]
    stop(clock, and(_GEN_146, _T_68), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202531:10]
    printf(clock, and(_GEN_146, _T_186), "Assertion failed: 'A' channel PutFull carries invalid param (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202538:10]
    stop(clock, and(_GEN_146, _T_186), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202539:10]
    printf(clock, and(_GEN_146, _T_190), "Assertion failed: 'A' channel PutFull contains invalid mask (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202546:10]
    stop(clock, and(_GEN_146, _T_190), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202547:10]
    node _GEN_156 = and(io_in_a_valid, _T_236) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202581:10]
    printf(clock, and(_GEN_156, _T_221), "Assertion failed: 'A' channel carries PutPartial type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202581:10]
    stop(clock, and(_GEN_156, _T_221), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202582:10]
    printf(clock, and(_GEN_156, _T_61), "Assertion failed: 'A' channel PutPartial carries invalid source ID (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202588:10]
    stop(clock, and(_GEN_156, _T_61), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202589:10]
    printf(clock, and(_GEN_156, _T_68), "Assertion failed: 'A' channel PutPartial address not aligned to size (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202595:10]
    stop(clock, and(_GEN_156, _T_68), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202596:10]
    printf(clock, and(_GEN_156, _T_186), "Assertion failed: 'A' channel PutPartial carries invalid param (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202603:10]
    stop(clock, and(_GEN_156, _T_186), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202604:10]
    printf(clock, and(_GEN_156, _T_278), "Assertion failed: 'A' channel PutPartial contains invalid mask (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202613:10]
    stop(clock, and(_GEN_156, _T_278), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202614:10]
    node _GEN_166 = and(io_in_a_valid, _T_279) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202645:10]
    printf(clock, and(_GEN_166, _T_43), "Assertion failed: 'A' channel carries Arithmetic type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202645:10]
    stop(clock, and(_GEN_166, _T_43), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202646:10]
    printf(clock, and(_GEN_166, _T_61), "Assertion failed: 'A' channel Arithmetic carries invalid source ID (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202652:10]
    stop(clock, and(_GEN_166, _T_61), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202653:10]
    printf(clock, and(_GEN_166, _T_68), "Assertion failed: 'A' channel Arithmetic address not aligned to size (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202659:10]
    stop(clock, and(_GEN_166, _T_68), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202660:10]
    printf(clock, and(_GEN_166, _T_312), "Assertion failed: 'A' channel Arithmetic carries invalid opcode param (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202667:10]
    stop(clock, and(_GEN_166, _T_312), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202668:10]
    printf(clock, and(_GEN_166, _T_190), "Assertion failed: 'A' channel Arithmetic contains invalid mask (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202675:10]
    stop(clock, and(_GEN_166, _T_190), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202676:10]
    node _GEN_176 = and(io_in_a_valid, _T_317) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202707:10]
    printf(clock, and(_GEN_176, _T_43), "Assertion failed: 'A' channel carries Logical type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202707:10]
    stop(clock, and(_GEN_176, _T_43), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202708:10]
    printf(clock, and(_GEN_176, _T_61), "Assertion failed: 'A' channel Logical carries invalid source ID (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202714:10]
    stop(clock, and(_GEN_176, _T_61), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202715:10]
    printf(clock, and(_GEN_176, _T_68), "Assertion failed: 'A' channel Logical address not aligned to size (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202721:10]
    stop(clock, and(_GEN_176, _T_68), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202722:10]
    printf(clock, and(_GEN_176, _T_350), "Assertion failed: 'A' channel Logical carries invalid opcode param (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202729:10]
    stop(clock, and(_GEN_176, _T_350), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202730:10]
    printf(clock, and(_GEN_176, _T_190), "Assertion failed: 'A' channel Logical contains invalid mask (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202737:10]
    stop(clock, and(_GEN_176, _T_190), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202738:10]
    node _GEN_186 = and(io_in_a_valid, _T_355) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202769:10]
    printf(clock, and(_GEN_186, _T_43), "Assertion failed: 'A' channel carries Hint type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202769:10]
    stop(clock, and(_GEN_186, _T_43), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202770:10]
    printf(clock, and(_GEN_186, _T_61), "Assertion failed: 'A' channel Hint carries invalid source ID (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202776:10]
    stop(clock, and(_GEN_186, _T_61), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202777:10]
    printf(clock, and(_GEN_186, _T_68), "Assertion failed: 'A' channel Hint address not aligned to size (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202783:10]
    stop(clock, and(_GEN_186, _T_68), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202784:10]
    printf(clock, and(_GEN_186, _T_388), "Assertion failed: 'A' channel Hint carries invalid opcode param (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202791:10]
    stop(clock, and(_GEN_186, _T_388), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202792:10]
    printf(clock, and(_GEN_186, _T_190), "Assertion failed: 'A' channel Hint contains invalid mask (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202799:10]
    stop(clock, and(_GEN_186, _T_190), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202800:10]
    printf(clock, and(_GEN_186, _T_81), "Assertion failed: 'A' channel Hint is corrupt (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202807:10]
    stop(clock, and(_GEN_186, _T_81), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 202808:10]
    printf(clock, and(io_in_d_valid, _T_400), "Assertion failed: 'D' channel has invalid opcode (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 202818:8]
    stop(clock, and(io_in_d_valid, _T_400), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 202819:8]
    node _GEN_198 = and(io_in_d_valid, _T_401) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 202839:10]
    printf(clock, and(_GEN_198, _T_404), "Assertion failed: 'D' channel ReleaseAck carries invalid source ID (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 202839:10]
    stop(clock, and(_GEN_198, _T_404), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 202840:10]
    printf(clock, and(_GEN_198, _T_408), "Assertion failed: 'D' channel ReleaseAck smaller than a beat (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 202847:10]
    stop(clock, and(_GEN_198, _T_408), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 202848:10]
    printf(clock, and(_GEN_198, _T_412), "Assertion failed: 'D' channel ReleaseeAck carries invalid param (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 202855:10]
    stop(clock, and(_GEN_198, _T_412), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 202856:10]
    printf(clock, and(_GEN_198, _T_416), "Assertion failed: 'D' channel ReleaseAck is corrupt (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 202863:10]
    stop(clock, and(_GEN_198, _T_416), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 202864:10]
    printf(clock, and(_GEN_198, _T_420), "Assertion failed: 'D' channel ReleaseAck is denied (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 202871:10]
    stop(clock, and(_GEN_198, _T_420), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 202872:10]
    node _GEN_208 = and(io_in_d_valid, _T_421) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 202881:10]
    printf(clock, and(_GEN_208, _T_404), "Assertion failed: 'D' channel Grant carries invalid source ID (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 202881:10]
    stop(clock, and(_GEN_208, _T_404), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 202882:10]
    printf(clock, and(_GEN_208, _T_43), "Assertion failed: 'D' channel Grant carries invalid sink ID (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 202888:10]
    stop(clock, and(_GEN_208, _T_43), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 202889:10]
    printf(clock, and(_GEN_208, _T_408), "Assertion failed: 'D' channel Grant smaller than a beat (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 202896:10]
    stop(clock, and(_GEN_208, _T_408), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 202897:10]
    printf(clock, and(_GEN_208, _T_435), "Assertion failed: 'D' channel Grant carries invalid cap param (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 202904:10]
    stop(clock, and(_GEN_208, _T_435), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 202905:10]
    printf(clock, and(_GEN_208, _T_439), "Assertion failed: 'D' channel Grant carries toN param (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 202912:10]
    stop(clock, and(_GEN_208, _T_439), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 202913:10]
    printf(clock, and(_GEN_208, _T_416), "Assertion failed: 'D' channel Grant is corrupt (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 202920:10]
    stop(clock, and(_GEN_208, _T_416), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 202921:10]
    printf(clock, and(_GEN_208, _T_420), "Assertion failed: 'D' channel Grant is denied (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 202929:10]
    stop(clock, and(_GEN_208, _T_420), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 202930:10]
    node _GEN_222 = and(io_in_d_valid, _T_449) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 202939:10]
    printf(clock, and(_GEN_222, _T_404), "Assertion failed: 'D' channel GrantData carries invalid source ID (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 202939:10]
    stop(clock, and(_GEN_222, _T_404), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 202940:10]
    printf(clock, and(_GEN_222, _T_43), "Assertion failed: 'D' channel GrantData carries invalid sink ID (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 202946:10]
    stop(clock, and(_GEN_222, _T_43), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 202947:10]
    printf(clock, and(_GEN_222, _T_408), "Assertion failed: 'D' channel GrantData smaller than a beat (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 202954:10]
    stop(clock, and(_GEN_222, _T_408), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 202955:10]
    printf(clock, and(_GEN_222, _T_435), "Assertion failed: 'D' channel GrantData carries invalid cap param (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 202962:10]
    stop(clock, and(_GEN_222, _T_435), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 202963:10]
    printf(clock, and(_GEN_222, _T_439), "Assertion failed: 'D' channel GrantData carries toN param (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 202970:10]
    stop(clock, and(_GEN_222, _T_439), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 202971:10]
    printf(clock, and(_GEN_222, _T_472), "Assertion failed: 'D' channel GrantData is denied but not corrupt (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 202979:10]
    stop(clock, and(_GEN_222, _T_472), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 202980:10]
    printf(clock, and(_GEN_222, _T_420), "Assertion failed: 'D' channel GrantData is denied (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 202988:10]
    stop(clock, and(_GEN_222, _T_420), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 202989:10]
    node _GEN_236 = and(io_in_d_valid, _T_478) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 202998:10]
    printf(clock, and(_GEN_236, _T_404), "Assertion failed: 'D' channel AccessAck carries invalid source ID (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 202998:10]
    stop(clock, and(_GEN_236, _T_404), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 202999:10]
    printf(clock, and(_GEN_236, _T_412), "Assertion failed: 'D' channel AccessAck carries invalid param (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 203006:10]
    stop(clock, and(_GEN_236, _T_412), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 203007:10]
    printf(clock, and(_GEN_236, _T_416), "Assertion failed: 'D' channel AccessAck is corrupt (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 203014:10]
    stop(clock, and(_GEN_236, _T_416), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 203015:10]
    printf(clock, and(_GEN_236, _T_420), "Assertion failed: 'D' channel AccessAck is denied (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 203023:10]
    stop(clock, and(_GEN_236, _T_420), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 203024:10]
    node _GEN_244 = and(io_in_d_valid, _T_495) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 203033:10]
    printf(clock, and(_GEN_244, _T_404), "Assertion failed: 'D' channel AccessAckData carries invalid source ID (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 203033:10]
    stop(clock, and(_GEN_244, _T_404), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 203034:10]
    printf(clock, and(_GEN_244, _T_412), "Assertion failed: 'D' channel AccessAckData carries invalid param (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 203041:10]
    stop(clock, and(_GEN_244, _T_412), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 203042:10]
    printf(clock, and(_GEN_244, _T_472), "Assertion failed: 'D' channel AccessAckData is denied but not corrupt (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 203050:10]
    stop(clock, and(_GEN_244, _T_472), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 203051:10]
    printf(clock, and(_GEN_244, _T_420), "Assertion failed: 'D' channel AccessAckData is denied (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 203059:10]
    stop(clock, and(_GEN_244, _T_420), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 203060:10]
    node _GEN_252 = and(io_in_d_valid, _T_513) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 203069:10]
    printf(clock, and(_GEN_252, _T_404), "Assertion failed: 'D' channel HintAck carries invalid source ID (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 203069:10]
    stop(clock, and(_GEN_252, _T_404), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 203070:10]
    printf(clock, and(_GEN_252, _T_412), "Assertion failed: 'D' channel HintAck carries invalid param (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 203077:10]
    stop(clock, and(_GEN_252, _T_412), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 203078:10]
    printf(clock, and(_GEN_252, _T_416), "Assertion failed: 'D' channel HintAck is corrupt (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 203085:10]
    stop(clock, and(_GEN_252, _T_416), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 203086:10]
    printf(clock, and(_GEN_252, _T_420), "Assertion failed: 'D' channel HintAck is denied (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 203094:10]
    stop(clock, and(_GEN_252, _T_420), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 203095:10]
    printf(clock, and(_T_543, _T_547), "Assertion failed: 'A' channel opcode changed within multibeat operation (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 203165:8]
    stop(clock, and(_T_543, _T_547), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 203166:8]
    printf(clock, and(_T_543, _T_551), "Assertion failed: 'A' channel param changed within multibeat operation (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 203173:8]
    stop(clock, and(_T_543, _T_551), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 203174:8]
    printf(clock, and(_T_543, _T_555), "Assertion failed: 'A' channel size changed within multibeat operation (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 203181:8]
    stop(clock, and(_T_543, _T_555), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 203182:8]
    printf(clock, and(_T_543, _T_559), "Assertion failed: 'A' channel source changed within multibeat operation (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 203189:8]
    stop(clock, and(_T_543, _T_559), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 203190:8]
    printf(clock, and(_T_543, _T_563), "Assertion failed: 'A' channel address changed with multibeat operation (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 203197:8]
    stop(clock, and(_T_543, _T_563), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 203198:8]
    printf(clock, and(_T_567, _T_571), "Assertion failed: 'D' channel opcode changed within multibeat operation (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 203246:8]
    stop(clock, and(_T_567, _T_571), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 203247:8]
    printf(clock, and(_T_567, _T_575), "Assertion failed: 'D' channel param changed within multibeat operation (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 203254:8]
    stop(clock, and(_T_567, _T_575), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 203255:8]
    printf(clock, and(_T_567, _T_579), "Assertion failed: 'D' channel size changed within multibeat operation (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 203262:8]
    stop(clock, and(_T_567, _T_579), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 203263:8]
    printf(clock, and(_T_567, _T_583), "Assertion failed: 'D' channel source changed within multibeat operation (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 203270:8]
    stop(clock, and(_T_567, _T_583), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 203271:8]
    printf(clock, and(_T_567, _T_587), "Assertion failed: 'D' channel sink changed with multibeat operation (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 203278:8]
    stop(clock, and(_T_567, _T_587), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 203279:8]
    printf(clock, and(_T_567, _T_591), "Assertion failed: 'D' channel denied changed with multibeat operation (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 203286:8]
    stop(clock, and(_T_567, _T_591), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 203287:8]
    printf(clock, and(_T_597, _T_604), "Assertion failed: 'A' channel re-used a source ID (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 203431:8]
    stop(clock, and(_T_597, _T_604), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 203432:8]
    printf(clock, and(_T_608, _T_623), "Assertion failed: 'D' channel acknowledged for nothing inflight (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 203491:8]
    stop(clock, and(_T_608, _T_623), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 203492:8]
    node _GEN_260 = and(_T_608, same_cycle_resp) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 203502:10]
    printf(clock, and(_GEN_260, _T_629), "Assertion failed: 'D' channel contains improper opcode response (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 203502:10]
    stop(clock, and(_GEN_260, _T_629), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 203503:10]
    printf(clock, and(_GEN_260, _T_633), "Assertion failed: 'D' channel contains improper response size (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 203510:10]
    stop(clock, and(_GEN_260, _T_633), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 203511:10]
    node _GEN_264 = not(same_cycle_resp) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 203524:10]
    node _GEN_265 = and(_T_608, _GEN_264) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 203524:10]
    printf(clock, and(_GEN_265, _T_641), "Assertion failed: 'D' channel contains improper opcode response (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 203524:10]
    stop(clock, and(_GEN_265, _T_641), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 203525:10]
    printf(clock, and(_GEN_265, _T_645), "Assertion failed: 'D' channel contains improper response size (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 203532:10]
    stop(clock, and(_GEN_265, _T_645), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 203533:10]
    printf(clock, and(_T_652, _T_657), "Assertion failed: ready check\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 203551:8]
    stop(clock, and(_T_652, _T_657), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 203552:8]
    printf(clock, _T_664, "Assertion failed: 'A' and 'D' concurrent, despite minlatency 3 (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 203563:6]
    stop(clock, _T_664, 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 203564:6]
    printf(clock, _T_673, "Assertion failed: TileLink timeout expired (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 203591:6]
    stop(clock, _T_673, 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 203592:6]
    printf(clock, and(_T_696, _T_709), "Assertion failed: 'D' channel acknowledged for nothing inflight (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 203813:8]
    stop(clock, and(_T_696, _T_709), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 203814:8]
    printf(clock, and(_T_696, _T_717), "Assertion failed: 'D' channel contains improper response size (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 203834:10]
    stop(clock, and(_T_696, _T_717), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 203835:10]
    printf(clock, _T_742, "Assertion failed: TileLink timeout expired (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 203898:6]
    stop(clock, _T_742, 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 203899:6]

  module Queue_22_inTestHarness : @[chipyard.TestHarness.TinyRocketConfig.fir 203913:2]
    input clock : Clock @[chipyard.TestHarness.TinyRocketConfig.fir 203914:4]
    input reset : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 203915:4]
    output io_enq_ready : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 203916:4]
    input io_enq_valid : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 203916:4]
    input io_enq_bits_opcode : UInt<3> @[chipyard.TestHarness.TinyRocketConfig.fir 203916:4]
    input io_enq_bits_param : UInt<3> @[chipyard.TestHarness.TinyRocketConfig.fir 203916:4]
    input io_enq_bits_size : UInt<2> @[chipyard.TestHarness.TinyRocketConfig.fir 203916:4]
    input io_enq_bits_source : UInt<7> @[chipyard.TestHarness.TinyRocketConfig.fir 203916:4]
    input io_enq_bits_address : UInt<29> @[chipyard.TestHarness.TinyRocketConfig.fir 203916:4]
    input io_enq_bits_mask : UInt<4> @[chipyard.TestHarness.TinyRocketConfig.fir 203916:4]
    input io_enq_bits_data : UInt<32> @[chipyard.TestHarness.TinyRocketConfig.fir 203916:4]
    input io_enq_bits_corrupt : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 203916:4]
    input io_deq_ready : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 203916:4]
    output io_deq_valid : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 203916:4]
    output io_deq_bits_opcode : UInt<3> @[chipyard.TestHarness.TinyRocketConfig.fir 203916:4]
    output io_deq_bits_param : UInt<3> @[chipyard.TestHarness.TinyRocketConfig.fir 203916:4]
    output io_deq_bits_size : UInt<2> @[chipyard.TestHarness.TinyRocketConfig.fir 203916:4]
    output io_deq_bits_source : UInt<7> @[chipyard.TestHarness.TinyRocketConfig.fir 203916:4]
    output io_deq_bits_address : UInt<29> @[chipyard.TestHarness.TinyRocketConfig.fir 203916:4]
    output io_deq_bits_mask : UInt<4> @[chipyard.TestHarness.TinyRocketConfig.fir 203916:4]
    output io_deq_bits_data : UInt<32> @[chipyard.TestHarness.TinyRocketConfig.fir 203916:4]
    output io_deq_bits_corrupt : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 203916:4]

    mem ram_opcode : @[Decoupled.scala 218:16 chipyard.TestHarness.TinyRocketConfig.fir 203918:4]
      data-type => UInt<3>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    mem ram_param : @[Decoupled.scala 218:16 chipyard.TestHarness.TinyRocketConfig.fir 203918:4]
      data-type => UInt<3>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    mem ram_size : @[Decoupled.scala 218:16 chipyard.TestHarness.TinyRocketConfig.fir 203918:4]
      data-type => UInt<2>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    mem ram_source : @[Decoupled.scala 218:16 chipyard.TestHarness.TinyRocketConfig.fir 203918:4]
      data-type => UInt<7>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    mem ram_address : @[Decoupled.scala 218:16 chipyard.TestHarness.TinyRocketConfig.fir 203918:4]
      data-type => UInt<29>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    mem ram_mask : @[Decoupled.scala 218:16 chipyard.TestHarness.TinyRocketConfig.fir 203918:4]
      data-type => UInt<4>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    mem ram_data : @[Decoupled.scala 218:16 chipyard.TestHarness.TinyRocketConfig.fir 203918:4]
      data-type => UInt<32>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    mem ram_corrupt : @[Decoupled.scala 218:16 chipyard.TestHarness.TinyRocketConfig.fir 203918:4]
      data-type => UInt<1>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    reg value : UInt<1>, clock with :
      reset => (UInt<1>("h0"), value) @[Counter.scala 60:40 chipyard.TestHarness.TinyRocketConfig.fir 203919:4]
    reg value_1 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), value_1) @[Counter.scala 60:40 chipyard.TestHarness.TinyRocketConfig.fir 203920:4]
    reg maybe_full : UInt<1>, clock with :
      reset => (UInt<1>("h0"), maybe_full) @[Decoupled.scala 221:27 chipyard.TestHarness.TinyRocketConfig.fir 203921:4]
    node ptr_match = eq(value, value_1) @[Decoupled.scala 223:33 chipyard.TestHarness.TinyRocketConfig.fir 203922:4]
    node _empty_T = not(maybe_full) @[Decoupled.scala 224:28 chipyard.TestHarness.TinyRocketConfig.fir 203923:4]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 224:25 chipyard.TestHarness.TinyRocketConfig.fir 203924:4]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24 chipyard.TestHarness.TinyRocketConfig.fir 203925:4]
    node do_enq = and(io_enq_ready, io_enq_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.TinyRocketConfig.fir 203926:4]
    node do_deq = and(io_deq_ready, io_deq_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.TinyRocketConfig.fir 203929:4]
    node _value_T = add(value, UInt<1>("h1")) @[Counter.scala 76:24 chipyard.TestHarness.TinyRocketConfig.fir 203943:6]
    node _value_T_1 = tail(_value_T, 1) @[Counter.scala 76:24 chipyard.TestHarness.TinyRocketConfig.fir 203944:6]
    node _GEN_12 = mux(do_enq, _value_T_1, value) @[Decoupled.scala 229:17 chipyard.TestHarness.TinyRocketConfig.fir 203932:4 Counter.scala 76:15 chipyard.TestHarness.TinyRocketConfig.fir 203945:6 Counter.scala 60:40 chipyard.TestHarness.TinyRocketConfig.fir 203919:4]
    node _value_T_2 = add(value_1, UInt<1>("h1")) @[Counter.scala 76:24 chipyard.TestHarness.TinyRocketConfig.fir 203949:6]
    node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 76:24 chipyard.TestHarness.TinyRocketConfig.fir 203950:6]
    node _GEN_13 = mux(do_deq, _value_T_3, value_1) @[Decoupled.scala 233:17 chipyard.TestHarness.TinyRocketConfig.fir 203947:4 Counter.scala 76:15 chipyard.TestHarness.TinyRocketConfig.fir 203951:6 Counter.scala 60:40 chipyard.TestHarness.TinyRocketConfig.fir 203920:4]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 236:16 chipyard.TestHarness.TinyRocketConfig.fir 203953:4]
    node _GEN_14 = mux(_T, do_enq, maybe_full) @[Decoupled.scala 236:28 chipyard.TestHarness.TinyRocketConfig.fir 203954:4 Decoupled.scala 237:16 chipyard.TestHarness.TinyRocketConfig.fir 203955:6 Decoupled.scala 221:27 chipyard.TestHarness.TinyRocketConfig.fir 203921:4]
    io_enq_ready <= not(full) @[Decoupled.scala 241:19 chipyard.TestHarness.TinyRocketConfig.fir 203959:4]
    io_deq_valid <= not(empty) @[Decoupled.scala 240:19 chipyard.TestHarness.TinyRocketConfig.fir 203957:4]
    io_deq_bits_opcode <= ram_opcode.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.TinyRocketConfig.fir 203969:4]
    io_deq_bits_param <= ram_param.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.TinyRocketConfig.fir 203968:4]
    io_deq_bits_size <= ram_size.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.TinyRocketConfig.fir 203967:4]
    io_deq_bits_source <= ram_source.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.TinyRocketConfig.fir 203966:4]
    io_deq_bits_address <= ram_address.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.TinyRocketConfig.fir 203965:4]
    io_deq_bits_mask <= ram_mask.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.TinyRocketConfig.fir 203964:4]
    io_deq_bits_data <= ram_data.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.TinyRocketConfig.fir 203963:4]
    io_deq_bits_corrupt <= ram_corrupt.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.TinyRocketConfig.fir 203962:4]
    value <= mux(reset, UInt<1>("h0"), _GEN_12) @[Counter.scala 60:40 chipyard.TestHarness.TinyRocketConfig.fir 203919:4 Counter.scala 60:40 chipyard.TestHarness.TinyRocketConfig.fir 203919:4]
    value_1 <= mux(reset, UInt<1>("h0"), _GEN_13) @[Counter.scala 60:40 chipyard.TestHarness.TinyRocketConfig.fir 203920:4 Counter.scala 60:40 chipyard.TestHarness.TinyRocketConfig.fir 203920:4]
    maybe_full <= mux(reset, UInt<1>("h0"), _GEN_14) @[Decoupled.scala 221:27 chipyard.TestHarness.TinyRocketConfig.fir 203921:4 Decoupled.scala 221:27 chipyard.TestHarness.TinyRocketConfig.fir 203921:4]
    ram_opcode.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_opcode.io_deq_bits_MPORT.addr <= value_1
    ram_opcode.io_deq_bits_MPORT.clk <= clock
    ram_opcode.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_opcode.MPORT.addr <= value
    ram_opcode.MPORT.mask <= UInt<1>("h1")
    ram_opcode.MPORT.data <= io_enq_bits_opcode
    ram_opcode.MPORT.clk <= clock
    ram_param.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_param.io_deq_bits_MPORT.addr <= value_1
    ram_param.io_deq_bits_MPORT.clk <= clock
    ram_param.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_param.MPORT.addr <= value
    ram_param.MPORT.mask <= UInt<1>("h1")
    ram_param.MPORT.data <= io_enq_bits_param
    ram_param.MPORT.clk <= clock
    ram_size.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_size.io_deq_bits_MPORT.addr <= value_1
    ram_size.io_deq_bits_MPORT.clk <= clock
    ram_size.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_size.MPORT.addr <= value
    ram_size.MPORT.mask <= UInt<1>("h1")
    ram_size.MPORT.data <= io_enq_bits_size
    ram_size.MPORT.clk <= clock
    ram_source.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_source.io_deq_bits_MPORT.addr <= value_1
    ram_source.io_deq_bits_MPORT.clk <= clock
    ram_source.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_source.MPORT.addr <= value
    ram_source.MPORT.mask <= UInt<1>("h1")
    ram_source.MPORT.data <= io_enq_bits_source
    ram_source.MPORT.clk <= clock
    ram_address.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_address.io_deq_bits_MPORT.addr <= value_1
    ram_address.io_deq_bits_MPORT.clk <= clock
    ram_address.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_address.MPORT.addr <= value
    ram_address.MPORT.mask <= UInt<1>("h1")
    ram_address.MPORT.data <= io_enq_bits_address
    ram_address.MPORT.clk <= clock
    ram_mask.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_mask.io_deq_bits_MPORT.addr <= value_1
    ram_mask.io_deq_bits_MPORT.clk <= clock
    ram_mask.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_mask.MPORT.addr <= value
    ram_mask.MPORT.mask <= UInt<1>("h1")
    ram_mask.MPORT.data <= io_enq_bits_mask
    ram_mask.MPORT.clk <= clock
    ram_data.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_data.io_deq_bits_MPORT.addr <= value_1
    ram_data.io_deq_bits_MPORT.clk <= clock
    ram_data.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_data.MPORT.addr <= value
    ram_data.MPORT.mask <= UInt<1>("h1")
    ram_data.MPORT.data <= io_enq_bits_data
    ram_data.MPORT.clk <= clock
    ram_corrupt.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_corrupt.io_deq_bits_MPORT.addr <= value_1
    ram_corrupt.io_deq_bits_MPORT.clk <= clock
    ram_corrupt.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_corrupt.MPORT.addr <= value
    ram_corrupt.MPORT.mask <= UInt<1>("h1")
    ram_corrupt.MPORT.data <= io_enq_bits_corrupt
    ram_corrupt.MPORT.clk <= clock

  module TLBuffer_16_inTestHarness : @[chipyard.TestHarness.TinyRocketConfig.fir 204041:2]
    input clock : Clock @[chipyard.TestHarness.TinyRocketConfig.fir 204042:4]
    input reset : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 204043:4]
    output auto_in_a_ready : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 204044:4]
    input auto_in_a_valid : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 204044:4]
    input auto_in_a_bits_opcode : UInt<3> @[chipyard.TestHarness.TinyRocketConfig.fir 204044:4]
    input auto_in_a_bits_param : UInt<3> @[chipyard.TestHarness.TinyRocketConfig.fir 204044:4]
    input auto_in_a_bits_size : UInt<2> @[chipyard.TestHarness.TinyRocketConfig.fir 204044:4]
    input auto_in_a_bits_source : UInt<7> @[chipyard.TestHarness.TinyRocketConfig.fir 204044:4]
    input auto_in_a_bits_address : UInt<29> @[chipyard.TestHarness.TinyRocketConfig.fir 204044:4]
    input auto_in_a_bits_mask : UInt<4> @[chipyard.TestHarness.TinyRocketConfig.fir 204044:4]
    input auto_in_a_bits_data : UInt<32> @[chipyard.TestHarness.TinyRocketConfig.fir 204044:4]
    input auto_in_a_bits_corrupt : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 204044:4]
    input auto_in_d_ready : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 204044:4]
    output auto_in_d_valid : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 204044:4]
    output auto_in_d_bits_opcode : UInt<3> @[chipyard.TestHarness.TinyRocketConfig.fir 204044:4]
    output auto_in_d_bits_param : UInt<2> @[chipyard.TestHarness.TinyRocketConfig.fir 204044:4]
    output auto_in_d_bits_size : UInt<2> @[chipyard.TestHarness.TinyRocketConfig.fir 204044:4]
    output auto_in_d_bits_source : UInt<7> @[chipyard.TestHarness.TinyRocketConfig.fir 204044:4]
    output auto_in_d_bits_sink : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 204044:4]
    output auto_in_d_bits_denied : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 204044:4]
    output auto_in_d_bits_data : UInt<32> @[chipyard.TestHarness.TinyRocketConfig.fir 204044:4]
    output auto_in_d_bits_corrupt : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 204044:4]
    input auto_out_a_ready : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 204044:4]
    output auto_out_a_valid : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 204044:4]
    output auto_out_a_bits_opcode : UInt<3> @[chipyard.TestHarness.TinyRocketConfig.fir 204044:4]
    output auto_out_a_bits_param : UInt<3> @[chipyard.TestHarness.TinyRocketConfig.fir 204044:4]
    output auto_out_a_bits_size : UInt<2> @[chipyard.TestHarness.TinyRocketConfig.fir 204044:4]
    output auto_out_a_bits_source : UInt<7> @[chipyard.TestHarness.TinyRocketConfig.fir 204044:4]
    output auto_out_a_bits_address : UInt<29> @[chipyard.TestHarness.TinyRocketConfig.fir 204044:4]
    output auto_out_a_bits_mask : UInt<4> @[chipyard.TestHarness.TinyRocketConfig.fir 204044:4]
    output auto_out_a_bits_data : UInt<32> @[chipyard.TestHarness.TinyRocketConfig.fir 204044:4]
    output auto_out_a_bits_corrupt : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 204044:4]
    output auto_out_d_ready : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 204044:4]
    input auto_out_d_valid : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 204044:4]
    input auto_out_d_bits_opcode : UInt<3> @[chipyard.TestHarness.TinyRocketConfig.fir 204044:4]
    input auto_out_d_bits_size : UInt<2> @[chipyard.TestHarness.TinyRocketConfig.fir 204044:4]
    input auto_out_d_bits_source : UInt<7> @[chipyard.TestHarness.TinyRocketConfig.fir 204044:4]
    input auto_out_d_bits_data : UInt<32> @[chipyard.TestHarness.TinyRocketConfig.fir 204044:4]

    inst monitor of TLMonitor_43_inTestHarness @[Nodes.scala 24:25 chipyard.TestHarness.TinyRocketConfig.fir 204051:4]
    inst bundleOut_0_a_q of Queue_22_inTestHarness @[Decoupled.scala 296:21 chipyard.TestHarness.TinyRocketConfig.fir 204078:4]
    inst bundleIn_0_d_q of Queue_5_inTestHarness @[Decoupled.scala 296:21 chipyard.TestHarness.TinyRocketConfig.fir 204092:4]
    auto_in_a_ready <= bundleOut_0_a_q.io_enq_ready @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 204049:4 Decoupled.scala 299:17 chipyard.TestHarness.TinyRocketConfig.fir 204090:4]
    auto_in_d_valid <= bundleIn_0_d_q.io_deq_valid @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 204049:4 Buffer.scala 38:13 chipyard.TestHarness.TinyRocketConfig.fir 204105:4]
    auto_in_d_bits_opcode <= bundleIn_0_d_q.io_deq_bits_opcode @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 204049:4 Buffer.scala 38:13 chipyard.TestHarness.TinyRocketConfig.fir 204105:4]
    auto_in_d_bits_param <= bundleIn_0_d_q.io_deq_bits_param @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 204049:4 Buffer.scala 38:13 chipyard.TestHarness.TinyRocketConfig.fir 204105:4]
    auto_in_d_bits_size <= bundleIn_0_d_q.io_deq_bits_size @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 204049:4 Buffer.scala 38:13 chipyard.TestHarness.TinyRocketConfig.fir 204105:4]
    auto_in_d_bits_source <= bundleIn_0_d_q.io_deq_bits_source @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 204049:4 Buffer.scala 38:13 chipyard.TestHarness.TinyRocketConfig.fir 204105:4]
    auto_in_d_bits_sink <= bundleIn_0_d_q.io_deq_bits_sink @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 204049:4 Buffer.scala 38:13 chipyard.TestHarness.TinyRocketConfig.fir 204105:4]
    auto_in_d_bits_denied <= bundleIn_0_d_q.io_deq_bits_denied @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 204049:4 Buffer.scala 38:13 chipyard.TestHarness.TinyRocketConfig.fir 204105:4]
    auto_in_d_bits_data <= bundleIn_0_d_q.io_deq_bits_data @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 204049:4 Buffer.scala 38:13 chipyard.TestHarness.TinyRocketConfig.fir 204105:4]
    auto_in_d_bits_corrupt <= bundleIn_0_d_q.io_deq_bits_corrupt @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 204049:4 Buffer.scala 38:13 chipyard.TestHarness.TinyRocketConfig.fir 204105:4]
    auto_out_a_valid <= bundleOut_0_a_q.io_deq_valid @[Nodes.scala 1207:84 chipyard.TestHarness.TinyRocketConfig.fir 204074:4 Buffer.scala 37:13 chipyard.TestHarness.TinyRocketConfig.fir 204091:4]
    auto_out_a_bits_opcode <= bundleOut_0_a_q.io_deq_bits_opcode @[Nodes.scala 1207:84 chipyard.TestHarness.TinyRocketConfig.fir 204074:4 Buffer.scala 37:13 chipyard.TestHarness.TinyRocketConfig.fir 204091:4]
    auto_out_a_bits_param <= bundleOut_0_a_q.io_deq_bits_param @[Nodes.scala 1207:84 chipyard.TestHarness.TinyRocketConfig.fir 204074:4 Buffer.scala 37:13 chipyard.TestHarness.TinyRocketConfig.fir 204091:4]
    auto_out_a_bits_size <= bundleOut_0_a_q.io_deq_bits_size @[Nodes.scala 1207:84 chipyard.TestHarness.TinyRocketConfig.fir 204074:4 Buffer.scala 37:13 chipyard.TestHarness.TinyRocketConfig.fir 204091:4]
    auto_out_a_bits_source <= bundleOut_0_a_q.io_deq_bits_source @[Nodes.scala 1207:84 chipyard.TestHarness.TinyRocketConfig.fir 204074:4 Buffer.scala 37:13 chipyard.TestHarness.TinyRocketConfig.fir 204091:4]
    auto_out_a_bits_address <= bundleOut_0_a_q.io_deq_bits_address @[Nodes.scala 1207:84 chipyard.TestHarness.TinyRocketConfig.fir 204074:4 Buffer.scala 37:13 chipyard.TestHarness.TinyRocketConfig.fir 204091:4]
    auto_out_a_bits_mask <= bundleOut_0_a_q.io_deq_bits_mask @[Nodes.scala 1207:84 chipyard.TestHarness.TinyRocketConfig.fir 204074:4 Buffer.scala 37:13 chipyard.TestHarness.TinyRocketConfig.fir 204091:4]
    auto_out_a_bits_data <= bundleOut_0_a_q.io_deq_bits_data @[Nodes.scala 1207:84 chipyard.TestHarness.TinyRocketConfig.fir 204074:4 Buffer.scala 37:13 chipyard.TestHarness.TinyRocketConfig.fir 204091:4]
    auto_out_a_bits_corrupt <= bundleOut_0_a_q.io_deq_bits_corrupt @[Nodes.scala 1207:84 chipyard.TestHarness.TinyRocketConfig.fir 204074:4 Buffer.scala 37:13 chipyard.TestHarness.TinyRocketConfig.fir 204091:4]
    auto_out_d_ready <= bundleIn_0_d_q.io_enq_ready @[Nodes.scala 1207:84 chipyard.TestHarness.TinyRocketConfig.fir 204074:4 Decoupled.scala 299:17 chipyard.TestHarness.TinyRocketConfig.fir 204104:4]
    monitor.clock <= clock @[chipyard.TestHarness.TinyRocketConfig.fir 204052:4]
    monitor.reset <= reset @[chipyard.TestHarness.TinyRocketConfig.fir 204053:4]
    monitor.io_in_a_ready <= bundleOut_0_a_q.io_enq_ready @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 204049:4 Decoupled.scala 299:17 chipyard.TestHarness.TinyRocketConfig.fir 204090:4]
    monitor.io_in_a_valid <= auto_in_a_valid @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 204049:4 LazyModule.scala 309:16 chipyard.TestHarness.TinyRocketConfig.fir 204077:4]
    monitor.io_in_a_bits_opcode <= auto_in_a_bits_opcode @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 204049:4 LazyModule.scala 309:16 chipyard.TestHarness.TinyRocketConfig.fir 204077:4]
    monitor.io_in_a_bits_param <= auto_in_a_bits_param @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 204049:4 LazyModule.scala 309:16 chipyard.TestHarness.TinyRocketConfig.fir 204077:4]
    monitor.io_in_a_bits_size <= auto_in_a_bits_size @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 204049:4 LazyModule.scala 309:16 chipyard.TestHarness.TinyRocketConfig.fir 204077:4]
    monitor.io_in_a_bits_source <= auto_in_a_bits_source @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 204049:4 LazyModule.scala 309:16 chipyard.TestHarness.TinyRocketConfig.fir 204077:4]
    monitor.io_in_a_bits_address <= auto_in_a_bits_address @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 204049:4 LazyModule.scala 309:16 chipyard.TestHarness.TinyRocketConfig.fir 204077:4]
    monitor.io_in_a_bits_mask <= auto_in_a_bits_mask @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 204049:4 LazyModule.scala 309:16 chipyard.TestHarness.TinyRocketConfig.fir 204077:4]
    monitor.io_in_a_bits_corrupt <= auto_in_a_bits_corrupt @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 204049:4 LazyModule.scala 309:16 chipyard.TestHarness.TinyRocketConfig.fir 204077:4]
    monitor.io_in_d_ready <= auto_in_d_ready @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 204049:4 LazyModule.scala 309:16 chipyard.TestHarness.TinyRocketConfig.fir 204077:4]
    monitor.io_in_d_valid <= bundleIn_0_d_q.io_deq_valid @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 204049:4 Buffer.scala 38:13 chipyard.TestHarness.TinyRocketConfig.fir 204105:4]
    monitor.io_in_d_bits_opcode <= bundleIn_0_d_q.io_deq_bits_opcode @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 204049:4 Buffer.scala 38:13 chipyard.TestHarness.TinyRocketConfig.fir 204105:4]
    monitor.io_in_d_bits_param <= bundleIn_0_d_q.io_deq_bits_param @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 204049:4 Buffer.scala 38:13 chipyard.TestHarness.TinyRocketConfig.fir 204105:4]
    monitor.io_in_d_bits_size <= bundleIn_0_d_q.io_deq_bits_size @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 204049:4 Buffer.scala 38:13 chipyard.TestHarness.TinyRocketConfig.fir 204105:4]
    monitor.io_in_d_bits_source <= bundleIn_0_d_q.io_deq_bits_source @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 204049:4 Buffer.scala 38:13 chipyard.TestHarness.TinyRocketConfig.fir 204105:4]
    monitor.io_in_d_bits_sink <= bundleIn_0_d_q.io_deq_bits_sink @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 204049:4 Buffer.scala 38:13 chipyard.TestHarness.TinyRocketConfig.fir 204105:4]
    monitor.io_in_d_bits_denied <= bundleIn_0_d_q.io_deq_bits_denied @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 204049:4 Buffer.scala 38:13 chipyard.TestHarness.TinyRocketConfig.fir 204105:4]
    monitor.io_in_d_bits_corrupt <= bundleIn_0_d_q.io_deq_bits_corrupt @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 204049:4 Buffer.scala 38:13 chipyard.TestHarness.TinyRocketConfig.fir 204105:4]
    bundleOut_0_a_q.clock <= clock @[chipyard.TestHarness.TinyRocketConfig.fir 204079:4]
    bundleOut_0_a_q.reset <= reset @[chipyard.TestHarness.TinyRocketConfig.fir 204080:4]
    bundleOut_0_a_q.io_enq_valid <= auto_in_a_valid @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 204049:4 LazyModule.scala 309:16 chipyard.TestHarness.TinyRocketConfig.fir 204077:4]
    bundleOut_0_a_q.io_enq_bits_opcode <= auto_in_a_bits_opcode @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 204049:4 LazyModule.scala 309:16 chipyard.TestHarness.TinyRocketConfig.fir 204077:4]
    bundleOut_0_a_q.io_enq_bits_param <= auto_in_a_bits_param @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 204049:4 LazyModule.scala 309:16 chipyard.TestHarness.TinyRocketConfig.fir 204077:4]
    bundleOut_0_a_q.io_enq_bits_size <= auto_in_a_bits_size @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 204049:4 LazyModule.scala 309:16 chipyard.TestHarness.TinyRocketConfig.fir 204077:4]
    bundleOut_0_a_q.io_enq_bits_source <= auto_in_a_bits_source @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 204049:4 LazyModule.scala 309:16 chipyard.TestHarness.TinyRocketConfig.fir 204077:4]
    bundleOut_0_a_q.io_enq_bits_address <= auto_in_a_bits_address @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 204049:4 LazyModule.scala 309:16 chipyard.TestHarness.TinyRocketConfig.fir 204077:4]
    bundleOut_0_a_q.io_enq_bits_mask <= auto_in_a_bits_mask @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 204049:4 LazyModule.scala 309:16 chipyard.TestHarness.TinyRocketConfig.fir 204077:4]
    bundleOut_0_a_q.io_enq_bits_data <= auto_in_a_bits_data @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 204049:4 LazyModule.scala 309:16 chipyard.TestHarness.TinyRocketConfig.fir 204077:4]
    bundleOut_0_a_q.io_enq_bits_corrupt <= auto_in_a_bits_corrupt @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 204049:4 LazyModule.scala 309:16 chipyard.TestHarness.TinyRocketConfig.fir 204077:4]
    bundleOut_0_a_q.io_deq_ready <= auto_out_a_ready @[Nodes.scala 1207:84 chipyard.TestHarness.TinyRocketConfig.fir 204074:4 LazyModule.scala 311:12 chipyard.TestHarness.TinyRocketConfig.fir 204076:4]
    bundleIn_0_d_q.clock <= clock @[chipyard.TestHarness.TinyRocketConfig.fir 204093:4]
    bundleIn_0_d_q.reset <= reset @[chipyard.TestHarness.TinyRocketConfig.fir 204094:4]
    bundleIn_0_d_q.io_enq_valid <= auto_out_d_valid @[Nodes.scala 1207:84 chipyard.TestHarness.TinyRocketConfig.fir 204074:4 LazyModule.scala 311:12 chipyard.TestHarness.TinyRocketConfig.fir 204076:4]
    bundleIn_0_d_q.io_enq_bits_opcode <= auto_out_d_bits_opcode @[Nodes.scala 1207:84 chipyard.TestHarness.TinyRocketConfig.fir 204074:4 LazyModule.scala 311:12 chipyard.TestHarness.TinyRocketConfig.fir 204076:4]
    bundleIn_0_d_q.io_enq_bits_size <= auto_out_d_bits_size @[Nodes.scala 1207:84 chipyard.TestHarness.TinyRocketConfig.fir 204074:4 LazyModule.scala 311:12 chipyard.TestHarness.TinyRocketConfig.fir 204076:4]
    bundleIn_0_d_q.io_enq_bits_source <= auto_out_d_bits_source @[Nodes.scala 1207:84 chipyard.TestHarness.TinyRocketConfig.fir 204074:4 LazyModule.scala 311:12 chipyard.TestHarness.TinyRocketConfig.fir 204076:4]
    bundleIn_0_d_q.io_enq_bits_data <= auto_out_d_bits_data @[Nodes.scala 1207:84 chipyard.TestHarness.TinyRocketConfig.fir 204074:4 LazyModule.scala 311:12 chipyard.TestHarness.TinyRocketConfig.fir 204076:4]
    bundleIn_0_d_q.io_deq_ready <= auto_in_d_ready @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 204049:4 LazyModule.scala 309:16 chipyard.TestHarness.TinyRocketConfig.fir 204077:4]

  module TLMonitor_44_inTestHarness : @[chipyard.TestHarness.TinyRocketConfig.fir 204141:2]
    input clock : Clock @[chipyard.TestHarness.TinyRocketConfig.fir 204142:4]
    input reset : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 204143:4]
    input io_in_a_ready : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 204144:4]
    input io_in_a_valid : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 204144:4]
    input io_in_a_bits_opcode : UInt<3> @[chipyard.TestHarness.TinyRocketConfig.fir 204144:4]
    input io_in_a_bits_param : UInt<3> @[chipyard.TestHarness.TinyRocketConfig.fir 204144:4]
    input io_in_a_bits_size : UInt<3> @[chipyard.TestHarness.TinyRocketConfig.fir 204144:4]
    input io_in_a_bits_source : UInt<2> @[chipyard.TestHarness.TinyRocketConfig.fir 204144:4]
    input io_in_a_bits_address : UInt<29> @[chipyard.TestHarness.TinyRocketConfig.fir 204144:4]
    input io_in_a_bits_mask : UInt<4> @[chipyard.TestHarness.TinyRocketConfig.fir 204144:4]
    input io_in_a_bits_corrupt : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 204144:4]
    input io_in_d_ready : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 204144:4]
    input io_in_d_valid : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 204144:4]
    input io_in_d_bits_opcode : UInt<3> @[chipyard.TestHarness.TinyRocketConfig.fir 204144:4]
    input io_in_d_bits_param : UInt<2> @[chipyard.TestHarness.TinyRocketConfig.fir 204144:4]
    input io_in_d_bits_size : UInt<3> @[chipyard.TestHarness.TinyRocketConfig.fir 204144:4]
    input io_in_d_bits_source : UInt<2> @[chipyard.TestHarness.TinyRocketConfig.fir 204144:4]
    input io_in_d_bits_sink : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 204144:4]
    input io_in_d_bits_denied : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 204144:4]
    input io_in_d_bits_corrupt : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 204144:4]

    inst plusarg_reader of plusarg_reader @[PlusArg.scala 80:11 chipyard.TestHarness.TinyRocketConfig.fir 205589:4]
    inst plusarg_reader_1 of plusarg_reader @[PlusArg.scala 80:11 chipyard.TestHarness.TinyRocketConfig.fir 205896:4]
    node _source_ok_T = eq(io_in_a_bits_source, UInt<2>("h2")) @[Parameters.scala 46:9 chipyard.TestHarness.TinyRocketConfig.fir 204155:6]
    node _source_ok_T_1 = eq(io_in_a_bits_source, UInt<2>("h1")) @[Parameters.scala 46:9 chipyard.TestHarness.TinyRocketConfig.fir 204156:6]
    node _source_ok_T_2 = eq(io_in_a_bits_source, UInt<2>("h0")) @[Parameters.scala 46:9 chipyard.TestHarness.TinyRocketConfig.fir 204157:6]
    node _source_ok_T_3 = or(_source_ok_T, _source_ok_T_1) @[Parameters.scala 1125:46 chipyard.TestHarness.TinyRocketConfig.fir 204163:6]
    node source_ok = or(_source_ok_T_3, _source_ok_T_2) @[Parameters.scala 1125:46 chipyard.TestHarness.TinyRocketConfig.fir 204164:6]
    node _is_aligned_mask_T_1 = dshlw(UInt<13>("h3f"), io_in_a_bits_size) @[package.scala 234:77 chipyard.TestHarness.TinyRocketConfig.fir 204166:6]
    node _is_aligned_mask_T_2 = bits(_is_aligned_mask_T_1, 5, 0) @[package.scala 234:82 chipyard.TestHarness.TinyRocketConfig.fir 204167:6]
    node is_aligned_mask = not(_is_aligned_mask_T_2) @[package.scala 234:46 chipyard.TestHarness.TinyRocketConfig.fir 204168:6]
    node _GEN_71 = pad(is_aligned_mask, 29) @[Edges.scala 20:16 chipyard.TestHarness.TinyRocketConfig.fir 204169:6]
    node _is_aligned_T = and(io_in_a_bits_address, _GEN_71) @[Edges.scala 20:16 chipyard.TestHarness.TinyRocketConfig.fir 204169:6]
    node is_aligned = eq(_is_aligned_T, UInt<29>("h0")) @[Edges.scala 20:24 chipyard.TestHarness.TinyRocketConfig.fir 204170:6]
    node mask_sizeOH_shiftAmount = bits(io_in_a_bits_size, 0, 0) @[OneHot.scala 64:49 chipyard.TestHarness.TinyRocketConfig.fir 204172:6]
    node _mask_sizeOH_T_1 = dshlw(UInt<2>("h1"), mask_sizeOH_shiftAmount) @[OneHot.scala 65:12 chipyard.TestHarness.TinyRocketConfig.fir 204173:6]
    node mask_sizeOH = or(_mask_sizeOH_T_1, UInt<2>("h1")) @[Misc.scala 201:81 chipyard.TestHarness.TinyRocketConfig.fir 204175:6]
    node _mask_T = geq(io_in_a_bits_size, UInt<3>("h2")) @[Misc.scala 205:21 chipyard.TestHarness.TinyRocketConfig.fir 204176:6]
    node mask_size = bits(mask_sizeOH, 1, 1) @[Misc.scala 208:26 chipyard.TestHarness.TinyRocketConfig.fir 204177:6]
    node mask_bit = bits(io_in_a_bits_address, 1, 1) @[Misc.scala 209:26 chipyard.TestHarness.TinyRocketConfig.fir 204178:6]
    node mask_nbit = not(mask_bit) @[Misc.scala 210:20 chipyard.TestHarness.TinyRocketConfig.fir 204179:6]
    node _mask_acc_T = and(mask_size, mask_nbit) @[Misc.scala 214:38 chipyard.TestHarness.TinyRocketConfig.fir 204181:6]
    node mask_acc = or(_mask_T, _mask_acc_T) @[Misc.scala 214:29 chipyard.TestHarness.TinyRocketConfig.fir 204182:6]
    node _mask_acc_T_1 = and(mask_size, mask_bit) @[Misc.scala 214:38 chipyard.TestHarness.TinyRocketConfig.fir 204184:6]
    node mask_acc_1 = or(_mask_T, _mask_acc_T_1) @[Misc.scala 214:29 chipyard.TestHarness.TinyRocketConfig.fir 204185:6]
    node mask_size_1 = bits(mask_sizeOH, 0, 0) @[Misc.scala 208:26 chipyard.TestHarness.TinyRocketConfig.fir 204186:6]
    node mask_bit_1 = bits(io_in_a_bits_address, 0, 0) @[Misc.scala 209:26 chipyard.TestHarness.TinyRocketConfig.fir 204187:6]
    node mask_nbit_1 = not(mask_bit_1) @[Misc.scala 210:20 chipyard.TestHarness.TinyRocketConfig.fir 204188:6]
    node mask_eq_2 = and(mask_nbit, mask_nbit_1) @[Misc.scala 213:27 chipyard.TestHarness.TinyRocketConfig.fir 204189:6]
    node _mask_acc_T_2 = and(mask_size_1, mask_eq_2) @[Misc.scala 214:38 chipyard.TestHarness.TinyRocketConfig.fir 204190:6]
    node mask_lo_lo = or(mask_acc, _mask_acc_T_2) @[Misc.scala 214:29 chipyard.TestHarness.TinyRocketConfig.fir 204191:6]
    node mask_eq_3 = and(mask_nbit, mask_bit_1) @[Misc.scala 213:27 chipyard.TestHarness.TinyRocketConfig.fir 204192:6]
    node _mask_acc_T_3 = and(mask_size_1, mask_eq_3) @[Misc.scala 214:38 chipyard.TestHarness.TinyRocketConfig.fir 204193:6]
    node mask_lo_hi = or(mask_acc, _mask_acc_T_3) @[Misc.scala 214:29 chipyard.TestHarness.TinyRocketConfig.fir 204194:6]
    node mask_eq_4 = and(mask_bit, mask_nbit_1) @[Misc.scala 213:27 chipyard.TestHarness.TinyRocketConfig.fir 204195:6]
    node _mask_acc_T_4 = and(mask_size_1, mask_eq_4) @[Misc.scala 214:38 chipyard.TestHarness.TinyRocketConfig.fir 204196:6]
    node mask_hi_lo = or(mask_acc_1, _mask_acc_T_4) @[Misc.scala 214:29 chipyard.TestHarness.TinyRocketConfig.fir 204197:6]
    node mask_eq_5 = and(mask_bit, mask_bit_1) @[Misc.scala 213:27 chipyard.TestHarness.TinyRocketConfig.fir 204198:6]
    node _mask_acc_T_5 = and(mask_size_1, mask_eq_5) @[Misc.scala 214:38 chipyard.TestHarness.TinyRocketConfig.fir 204199:6]
    node mask_hi_hi = or(mask_acc_1, _mask_acc_T_5) @[Misc.scala 214:29 chipyard.TestHarness.TinyRocketConfig.fir 204200:6]
    node mask = cat(cat(mask_hi_hi, mask_hi_lo), cat(mask_lo_hi, mask_lo_lo)) @[Cat.scala 30:58 chipyard.TestHarness.TinyRocketConfig.fir 204203:6]
    node _T_33 = eq(io_in_a_bits_opcode, UInt<3>("h6")) @[Monitor.scala 81:25 chipyard.TestHarness.TinyRocketConfig.fir 204237:6]
    node _T_45 = xor(io_in_a_bits_address, UInt<29>("h10000000")) @[Parameters.scala 137:31 chipyard.TestHarness.TinyRocketConfig.fir 204250:8]
    node _T_46 = cvt(_T_45) @[Parameters.scala 137:49 chipyard.TestHarness.TinyRocketConfig.fir 204251:8]
    node _T_47 = and(_T_46, SInt<30>("h-1000")) @[Parameters.scala 137:52 chipyard.TestHarness.TinyRocketConfig.fir 204252:8]
    node _T_48 = asSInt(_T_47) @[Parameters.scala 137:52 chipyard.TestHarness.TinyRocketConfig.fir 204253:8]
    node _T_49 = eq(_T_48, SInt<30>("h0")) @[Parameters.scala 137:67 chipyard.TestHarness.TinyRocketConfig.fir 204254:8]
    node _T_55 = not(reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204260:8]
    node _T_72 = or(source_ok, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204285:8]
    node _T_73 = not(_T_72) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204286:8]
    node _T_76 = or(_mask_T, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204293:8]
    node _T_77 = not(_T_76) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204294:8]
    node _T_79 = or(is_aligned, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204300:8]
    node _T_80 = not(_T_79) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204301:8]
    node _T_81 = leq(io_in_a_bits_param, UInt<3>("h2")) @[Bundles.scala 108:27 chipyard.TestHarness.TinyRocketConfig.fir 204306:8]
    node _T_83 = or(_T_81, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204308:8]
    node _T_84 = not(_T_83) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204309:8]
    node _T_85 = not(io_in_a_bits_mask) @[Monitor.scala 88:18 chipyard.TestHarness.TinyRocketConfig.fir 204314:8]
    node _T_86 = eq(_T_85, UInt<4>("h0")) @[Monitor.scala 88:31 chipyard.TestHarness.TinyRocketConfig.fir 204315:8]
    node _T_88 = or(_T_86, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204317:8]
    node _T_89 = not(_T_88) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204318:8]
    node _T_90 = not(io_in_a_bits_corrupt) @[Monitor.scala 89:18 chipyard.TestHarness.TinyRocketConfig.fir 204323:8]
    node _T_92 = or(_T_90, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204325:8]
    node _T_93 = not(_T_92) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204326:8]
    node _T_94 = eq(io_in_a_bits_opcode, UInt<3>("h7")) @[Monitor.scala 92:25 chipyard.TestHarness.TinyRocketConfig.fir 204332:6]
    node _T_146 = neq(io_in_a_bits_param, UInt<3>("h0")) @[Monitor.scala 99:31 chipyard.TestHarness.TinyRocketConfig.fir 204409:8]
    node _T_148 = or(_T_146, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204411:8]
    node _T_149 = not(_T_148) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204412:8]
    node _T_159 = eq(io_in_a_bits_opcode, UInt<3>("h4")) @[Monitor.scala 104:25 chipyard.TestHarness.TinyRocketConfig.fir 204435:6]
    node _T_174 = leq(io_in_a_bits_size, UInt<3>("h6")) @[Parameters.scala 92:42 chipyard.TestHarness.TinyRocketConfig.fir 204455:8]
    node _T_182 = and(_T_174, _T_49) @[Parameters.scala 670:56 chipyard.TestHarness.TinyRocketConfig.fir 204463:8]
    node _T_185 = or(_T_182, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204466:8]
    node _T_186 = not(_T_185) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204467:8]
    node _T_193 = eq(io_in_a_bits_param, UInt<3>("h0")) @[Monitor.scala 109:31 chipyard.TestHarness.TinyRocketConfig.fir 204486:8]
    node _T_195 = or(_T_193, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204488:8]
    node _T_196 = not(_T_195) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204489:8]
    node _T_197 = eq(io_in_a_bits_mask, mask) @[Monitor.scala 110:30 chipyard.TestHarness.TinyRocketConfig.fir 204494:8]
    node _T_199 = or(_T_197, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204496:8]
    node _T_200 = not(_T_199) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204497:8]
    node _T_205 = eq(io_in_a_bits_opcode, UInt<3>("h0")) @[Monitor.scala 114:25 chipyard.TestHarness.TinyRocketConfig.fir 204511:6]
    node _T_227 = and(source_ok, _T_182) @[Monitor.scala 115:71 chipyard.TestHarness.TinyRocketConfig.fir 204534:8]
    node _T_229 = or(_T_227, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204536:8]
    node _T_230 = not(_T_229) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204537:8]
    node _T_245 = eq(io_in_a_bits_opcode, UInt<3>("h1")) @[Monitor.scala 122:25 chipyard.TestHarness.TinyRocketConfig.fir 204573:6]
    node _T_281 = not(mask) @[Monitor.scala 127:33 chipyard.TestHarness.TinyRocketConfig.fir 204626:8]
    node _T_282 = and(io_in_a_bits_mask, _T_281) @[Monitor.scala 127:31 chipyard.TestHarness.TinyRocketConfig.fir 204627:8]
    node _T_283 = eq(_T_282, UInt<4>("h0")) @[Monitor.scala 127:40 chipyard.TestHarness.TinyRocketConfig.fir 204628:8]
    node _T_285 = or(_T_283, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204630:8]
    node _T_286 = not(_T_285) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204631:8]
    node _T_287 = eq(io_in_a_bits_opcode, UInt<3>("h2")) @[Monitor.scala 130:25 chipyard.TestHarness.TinyRocketConfig.fir 204637:6]
    node _T_316 = leq(io_in_a_bits_param, UInt<3>("h4")) @[Bundles.scala 138:33 chipyard.TestHarness.TinyRocketConfig.fir 204679:8]
    node _T_318 = or(_T_316, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204681:8]
    node _T_319 = not(_T_318) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204682:8]
    node _T_324 = eq(io_in_a_bits_opcode, UInt<3>("h3")) @[Monitor.scala 138:25 chipyard.TestHarness.TinyRocketConfig.fir 204696:6]
    node _T_353 = leq(io_in_a_bits_param, UInt<3>("h3")) @[Bundles.scala 145:30 chipyard.TestHarness.TinyRocketConfig.fir 204738:8]
    node _T_355 = or(_T_353, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204740:8]
    node _T_356 = not(_T_355) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204741:8]
    node _T_361 = eq(io_in_a_bits_opcode, UInt<3>("h5")) @[Monitor.scala 146:25 chipyard.TestHarness.TinyRocketConfig.fir 204755:6]
    node _T_390 = leq(io_in_a_bits_param, UInt<3>("h1")) @[Bundles.scala 158:28 chipyard.TestHarness.TinyRocketConfig.fir 204797:8]
    node _T_392 = or(_T_390, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204799:8]
    node _T_393 = not(_T_392) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204800:8]
    node _T_402 = leq(io_in_d_bits_opcode, UInt<3>("h6")) @[Bundles.scala 42:24 chipyard.TestHarness.TinyRocketConfig.fir 204824:6]
    node _T_404 = or(_T_402, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 204826:6]
    node _T_405 = not(_T_404) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 204827:6]
    node _source_ok_T_4 = eq(io_in_d_bits_source, UInt<2>("h2")) @[Parameters.scala 46:9 chipyard.TestHarness.TinyRocketConfig.fir 204832:6]
    node _source_ok_T_5 = eq(io_in_d_bits_source, UInt<2>("h1")) @[Parameters.scala 46:9 chipyard.TestHarness.TinyRocketConfig.fir 204833:6]
    node _source_ok_T_6 = eq(io_in_d_bits_source, UInt<2>("h0")) @[Parameters.scala 46:9 chipyard.TestHarness.TinyRocketConfig.fir 204834:6]
    node _source_ok_T_7 = or(_source_ok_T_4, _source_ok_T_5) @[Parameters.scala 1125:46 chipyard.TestHarness.TinyRocketConfig.fir 204840:6]
    node source_ok_1 = or(_source_ok_T_7, _source_ok_T_6) @[Parameters.scala 1125:46 chipyard.TestHarness.TinyRocketConfig.fir 204841:6]
    node _T_406 = eq(io_in_d_bits_opcode, UInt<3>("h6")) @[Monitor.scala 310:25 chipyard.TestHarness.TinyRocketConfig.fir 204843:6]
    node _T_408 = or(source_ok_1, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 204846:8]
    node _T_409 = not(_T_408) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 204847:8]
    node _T_410 = geq(io_in_d_bits_size, UInt<3>("h2")) @[Monitor.scala 312:27 chipyard.TestHarness.TinyRocketConfig.fir 204852:8]
    node _T_412 = or(_T_410, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 204854:8]
    node _T_413 = not(_T_412) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 204855:8]
    node _T_414 = eq(io_in_d_bits_param, UInt<2>("h0")) @[Monitor.scala 313:28 chipyard.TestHarness.TinyRocketConfig.fir 204860:8]
    node _T_416 = or(_T_414, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 204862:8]
    node _T_417 = not(_T_416) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 204863:8]
    node _T_418 = not(io_in_d_bits_corrupt) @[Monitor.scala 314:15 chipyard.TestHarness.TinyRocketConfig.fir 204868:8]
    node _T_420 = or(_T_418, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 204870:8]
    node _T_421 = not(_T_420) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 204871:8]
    node _T_422 = not(io_in_d_bits_denied) @[Monitor.scala 315:15 chipyard.TestHarness.TinyRocketConfig.fir 204876:8]
    node _T_424 = or(_T_422, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 204878:8]
    node _T_425 = not(_T_424) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 204879:8]
    node _T_426 = eq(io_in_d_bits_opcode, UInt<3>("h4")) @[Monitor.scala 318:25 chipyard.TestHarness.TinyRocketConfig.fir 204885:6]
    node _T_437 = leq(io_in_d_bits_param, UInt<2>("h2")) @[Bundles.scala 102:26 chipyard.TestHarness.TinyRocketConfig.fir 204909:8]
    node _T_439 = or(_T_437, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 204911:8]
    node _T_440 = not(_T_439) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 204912:8]
    node _T_441 = neq(io_in_d_bits_param, UInt<2>("h2")) @[Monitor.scala 323:28 chipyard.TestHarness.TinyRocketConfig.fir 204917:8]
    node _T_443 = or(_T_441, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 204919:8]
    node _T_444 = not(_T_443) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 204920:8]
    node _T_454 = eq(io_in_d_bits_opcode, UInt<3>("h5")) @[Monitor.scala 328:25 chipyard.TestHarness.TinyRocketConfig.fir 204943:6]
    node _T_474 = or(_T_422, io_in_d_bits_corrupt) @[Monitor.scala 334:30 chipyard.TestHarness.TinyRocketConfig.fir 204984:8]
    node _T_476 = or(_T_474, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 204986:8]
    node _T_477 = not(_T_476) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 204987:8]
    node _T_483 = eq(io_in_d_bits_opcode, UInt<3>("h0")) @[Monitor.scala 338:25 chipyard.TestHarness.TinyRocketConfig.fir 205002:6]
    node _T_500 = eq(io_in_d_bits_opcode, UInt<3>("h1")) @[Monitor.scala 346:25 chipyard.TestHarness.TinyRocketConfig.fir 205037:6]
    node _T_518 = eq(io_in_d_bits_opcode, UInt<3>("h2")) @[Monitor.scala 354:25 chipyard.TestHarness.TinyRocketConfig.fir 205073:6]
    node _a_first_T = and(io_in_a_ready, io_in_a_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.TinyRocketConfig.fir 205139:4]
    node a_first_beats1_decode = shr(is_aligned_mask, 2) @[Edges.scala 219:59 chipyard.TestHarness.TinyRocketConfig.fir 205144:4]
    node _a_first_beats1_opdata_T = bits(io_in_a_bits_opcode, 2, 2) @[Edges.scala 91:37 chipyard.TestHarness.TinyRocketConfig.fir 205145:4]
    node a_first_beats1_opdata = not(_a_first_beats1_opdata_T) @[Edges.scala 91:28 chipyard.TestHarness.TinyRocketConfig.fir 205146:4]
    node a_first_beats1 = mux(a_first_beats1_opdata, a_first_beats1_decode, UInt<4>("h0")) @[Edges.scala 220:14 chipyard.TestHarness.TinyRocketConfig.fir 205147:4]
    reg a_first_counter : UInt<4>, clock with :
      reset => (UInt<1>("h0"), a_first_counter) @[Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 205148:4]
    node _a_first_counter1_T = sub(a_first_counter, UInt<4>("h1")) @[Edges.scala 229:28 chipyard.TestHarness.TinyRocketConfig.fir 205149:4]
    node a_first_counter1 = tail(_a_first_counter1_T, 1) @[Edges.scala 229:28 chipyard.TestHarness.TinyRocketConfig.fir 205150:4]
    node a_first = eq(a_first_counter, UInt<4>("h0")) @[Edges.scala 230:25 chipyard.TestHarness.TinyRocketConfig.fir 205151:4]
    node _a_first_counter_T = mux(a_first, a_first_beats1, a_first_counter1) @[Edges.scala 235:21 chipyard.TestHarness.TinyRocketConfig.fir 205159:6]
    node _GEN_0 = mux(_a_first_T, _a_first_counter_T, a_first_counter) @[Edges.scala 234:17 chipyard.TestHarness.TinyRocketConfig.fir 205158:4 Edges.scala 235:15 chipyard.TestHarness.TinyRocketConfig.fir 205160:6 Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 205148:4]
    reg opcode : UInt<3>, clock with :
      reset => (UInt<1>("h0"), opcode) @[Monitor.scala 384:22 chipyard.TestHarness.TinyRocketConfig.fir 205162:4]
    reg param : UInt<3>, clock with :
      reset => (UInt<1>("h0"), param) @[Monitor.scala 385:22 chipyard.TestHarness.TinyRocketConfig.fir 205163:4]
    reg size : UInt<3>, clock with :
      reset => (UInt<1>("h0"), size) @[Monitor.scala 386:22 chipyard.TestHarness.TinyRocketConfig.fir 205164:4]
    reg source : UInt<2>, clock with :
      reset => (UInt<1>("h0"), source) @[Monitor.scala 387:22 chipyard.TestHarness.TinyRocketConfig.fir 205165:4]
    reg address : UInt<29>, clock with :
      reset => (UInt<1>("h0"), address) @[Monitor.scala 388:22 chipyard.TestHarness.TinyRocketConfig.fir 205166:4]
    node _T_547 = not(a_first) @[Monitor.scala 389:22 chipyard.TestHarness.TinyRocketConfig.fir 205167:4]
    node _T_548 = and(io_in_a_valid, _T_547) @[Monitor.scala 389:19 chipyard.TestHarness.TinyRocketConfig.fir 205168:4]
    node _T_549 = eq(io_in_a_bits_opcode, opcode) @[Monitor.scala 390:32 chipyard.TestHarness.TinyRocketConfig.fir 205170:6]
    node _T_551 = or(_T_549, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 205172:6]
    node _T_552 = not(_T_551) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 205173:6]
    node _T_553 = eq(io_in_a_bits_param, param) @[Monitor.scala 391:32 chipyard.TestHarness.TinyRocketConfig.fir 205178:6]
    node _T_555 = or(_T_553, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 205180:6]
    node _T_556 = not(_T_555) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 205181:6]
    node _T_557 = eq(io_in_a_bits_size, size) @[Monitor.scala 392:32 chipyard.TestHarness.TinyRocketConfig.fir 205186:6]
    node _T_559 = or(_T_557, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 205188:6]
    node _T_560 = not(_T_559) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 205189:6]
    node _T_561 = eq(io_in_a_bits_source, source) @[Monitor.scala 393:32 chipyard.TestHarness.TinyRocketConfig.fir 205194:6]
    node _T_563 = or(_T_561, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 205196:6]
    node _T_564 = not(_T_563) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 205197:6]
    node _T_565 = eq(io_in_a_bits_address, address) @[Monitor.scala 394:32 chipyard.TestHarness.TinyRocketConfig.fir 205202:6]
    node _T_567 = or(_T_565, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 205204:6]
    node _T_568 = not(_T_567) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 205205:6]
    node _T_570 = and(_a_first_T, a_first) @[Monitor.scala 396:20 chipyard.TestHarness.TinyRocketConfig.fir 205212:4]
    node _d_first_T = and(io_in_d_ready, io_in_d_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.TinyRocketConfig.fir 205220:4]
    node _d_first_beats1_decode_T_1 = dshlw(UInt<13>("h3f"), io_in_d_bits_size) @[package.scala 234:77 chipyard.TestHarness.TinyRocketConfig.fir 205222:4]
    node _d_first_beats1_decode_T_2 = bits(_d_first_beats1_decode_T_1, 5, 0) @[package.scala 234:82 chipyard.TestHarness.TinyRocketConfig.fir 205223:4]
    node _d_first_beats1_decode_T_3 = not(_d_first_beats1_decode_T_2) @[package.scala 234:46 chipyard.TestHarness.TinyRocketConfig.fir 205224:4]
    node d_first_beats1_decode = shr(_d_first_beats1_decode_T_3, 2) @[Edges.scala 219:59 chipyard.TestHarness.TinyRocketConfig.fir 205225:4]
    node d_first_beats1_opdata = bits(io_in_d_bits_opcode, 0, 0) @[Edges.scala 105:36 chipyard.TestHarness.TinyRocketConfig.fir 205226:4]
    node d_first_beats1 = mux(d_first_beats1_opdata, d_first_beats1_decode, UInt<4>("h0")) @[Edges.scala 220:14 chipyard.TestHarness.TinyRocketConfig.fir 205227:4]
    reg d_first_counter : UInt<4>, clock with :
      reset => (UInt<1>("h0"), d_first_counter) @[Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 205228:4]
    node _d_first_counter1_T = sub(d_first_counter, UInt<4>("h1")) @[Edges.scala 229:28 chipyard.TestHarness.TinyRocketConfig.fir 205229:4]
    node d_first_counter1 = tail(_d_first_counter1_T, 1) @[Edges.scala 229:28 chipyard.TestHarness.TinyRocketConfig.fir 205230:4]
    node d_first = eq(d_first_counter, UInt<4>("h0")) @[Edges.scala 230:25 chipyard.TestHarness.TinyRocketConfig.fir 205231:4]
    node _d_first_counter_T = mux(d_first, d_first_beats1, d_first_counter1) @[Edges.scala 235:21 chipyard.TestHarness.TinyRocketConfig.fir 205239:6]
    node _GEN_6 = mux(_d_first_T, _d_first_counter_T, d_first_counter) @[Edges.scala 234:17 chipyard.TestHarness.TinyRocketConfig.fir 205238:4 Edges.scala 235:15 chipyard.TestHarness.TinyRocketConfig.fir 205240:6 Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 205228:4]
    reg opcode_1 : UInt<3>, clock with :
      reset => (UInt<1>("h0"), opcode_1) @[Monitor.scala 535:22 chipyard.TestHarness.TinyRocketConfig.fir 205242:4]
    reg param_1 : UInt<2>, clock with :
      reset => (UInt<1>("h0"), param_1) @[Monitor.scala 536:22 chipyard.TestHarness.TinyRocketConfig.fir 205243:4]
    reg size_1 : UInt<3>, clock with :
      reset => (UInt<1>("h0"), size_1) @[Monitor.scala 537:22 chipyard.TestHarness.TinyRocketConfig.fir 205244:4]
    reg source_1 : UInt<2>, clock with :
      reset => (UInt<1>("h0"), source_1) @[Monitor.scala 538:22 chipyard.TestHarness.TinyRocketConfig.fir 205245:4]
    reg sink : UInt<1>, clock with :
      reset => (UInt<1>("h0"), sink) @[Monitor.scala 539:22 chipyard.TestHarness.TinyRocketConfig.fir 205246:4]
    reg denied : UInt<1>, clock with :
      reset => (UInt<1>("h0"), denied) @[Monitor.scala 540:22 chipyard.TestHarness.TinyRocketConfig.fir 205247:4]
    node _T_571 = not(d_first) @[Monitor.scala 541:22 chipyard.TestHarness.TinyRocketConfig.fir 205248:4]
    node _T_572 = and(io_in_d_valid, _T_571) @[Monitor.scala 541:19 chipyard.TestHarness.TinyRocketConfig.fir 205249:4]
    node _T_573 = eq(io_in_d_bits_opcode, opcode_1) @[Monitor.scala 542:29 chipyard.TestHarness.TinyRocketConfig.fir 205251:6]
    node _T_575 = or(_T_573, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 205253:6]
    node _T_576 = not(_T_575) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 205254:6]
    node _T_577 = eq(io_in_d_bits_param, param_1) @[Monitor.scala 543:29 chipyard.TestHarness.TinyRocketConfig.fir 205259:6]
    node _T_579 = or(_T_577, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 205261:6]
    node _T_580 = not(_T_579) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 205262:6]
    node _T_581 = eq(io_in_d_bits_size, size_1) @[Monitor.scala 544:29 chipyard.TestHarness.TinyRocketConfig.fir 205267:6]
    node _T_583 = or(_T_581, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 205269:6]
    node _T_584 = not(_T_583) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 205270:6]
    node _T_585 = eq(io_in_d_bits_source, source_1) @[Monitor.scala 545:29 chipyard.TestHarness.TinyRocketConfig.fir 205275:6]
    node _T_587 = or(_T_585, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 205277:6]
    node _T_588 = not(_T_587) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 205278:6]
    node _T_589 = eq(io_in_d_bits_sink, sink) @[Monitor.scala 546:29 chipyard.TestHarness.TinyRocketConfig.fir 205283:6]
    node _T_591 = or(_T_589, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 205285:6]
    node _T_592 = not(_T_591) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 205286:6]
    node _T_593 = eq(io_in_d_bits_denied, denied) @[Monitor.scala 547:29 chipyard.TestHarness.TinyRocketConfig.fir 205291:6]
    node _T_595 = or(_T_593, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 205293:6]
    node _T_596 = not(_T_595) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 205294:6]
    node _T_598 = and(_d_first_T, d_first) @[Monitor.scala 549:20 chipyard.TestHarness.TinyRocketConfig.fir 205301:4]
    reg inflight : UInt<3>, clock with :
      reset => (UInt<1>("h0"), inflight) @[Monitor.scala 611:27 chipyard.TestHarness.TinyRocketConfig.fir 205310:4]
    reg inflight_opcodes : UInt<12>, clock with :
      reset => (UInt<1>("h0"), inflight_opcodes) @[Monitor.scala 613:35 chipyard.TestHarness.TinyRocketConfig.fir 205311:4]
    reg inflight_sizes : UInt<12>, clock with :
      reset => (UInt<1>("h0"), inflight_sizes) @[Monitor.scala 615:33 chipyard.TestHarness.TinyRocketConfig.fir 205312:4]
    reg a_first_counter_1 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), a_first_counter_1) @[Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 205322:4]
    node _a_first_counter1_T_1 = sub(a_first_counter_1, UInt<4>("h1")) @[Edges.scala 229:28 chipyard.TestHarness.TinyRocketConfig.fir 205323:4]
    node a_first_counter1_1 = tail(_a_first_counter1_T_1, 1) @[Edges.scala 229:28 chipyard.TestHarness.TinyRocketConfig.fir 205324:4]
    node a_first_1 = eq(a_first_counter_1, UInt<4>("h0")) @[Edges.scala 230:25 chipyard.TestHarness.TinyRocketConfig.fir 205325:4]
    node _a_first_counter_T_1 = mux(a_first_1, a_first_beats1, a_first_counter1_1) @[Edges.scala 235:21 chipyard.TestHarness.TinyRocketConfig.fir 205333:6]
    node _GEN_13 = mux(_a_first_T, _a_first_counter_T_1, a_first_counter_1) @[Edges.scala 234:17 chipyard.TestHarness.TinyRocketConfig.fir 205332:4 Edges.scala 235:15 chipyard.TestHarness.TinyRocketConfig.fir 205334:6 Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 205322:4]
    reg d_first_counter_1 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), d_first_counter_1) @[Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 205344:4]
    node _d_first_counter1_T_1 = sub(d_first_counter_1, UInt<4>("h1")) @[Edges.scala 229:28 chipyard.TestHarness.TinyRocketConfig.fir 205345:4]
    node d_first_counter1_1 = tail(_d_first_counter1_T_1, 1) @[Edges.scala 229:28 chipyard.TestHarness.TinyRocketConfig.fir 205346:4]
    node d_first_1 = eq(d_first_counter_1, UInt<4>("h0")) @[Edges.scala 230:25 chipyard.TestHarness.TinyRocketConfig.fir 205347:4]
    node _d_first_counter_T_1 = mux(d_first_1, d_first_beats1, d_first_counter1_1) @[Edges.scala 235:21 chipyard.TestHarness.TinyRocketConfig.fir 205355:6]
    node _GEN_14 = mux(_d_first_T, _d_first_counter_T_1, d_first_counter_1) @[Edges.scala 234:17 chipyard.TestHarness.TinyRocketConfig.fir 205354:4 Edges.scala 235:15 chipyard.TestHarness.TinyRocketConfig.fir 205356:6 Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 205344:4]
    node _GEN_72 = shl(io_in_d_bits_source, 2) @[Monitor.scala 634:69 chipyard.TestHarness.TinyRocketConfig.fir 205368:4]
    node _a_opcode_lookup_T = pad(_GEN_72, 5) @[Monitor.scala 634:69 chipyard.TestHarness.TinyRocketConfig.fir 205368:4]
    node _a_opcode_lookup_T_1 = dshr(inflight_opcodes, _a_opcode_lookup_T) @[Monitor.scala 634:44 chipyard.TestHarness.TinyRocketConfig.fir 205369:4]
    node _a_opcode_lookup_T_4 = sub(UInt<16>("h10"), UInt<16>("h1")) @[Monitor.scala 609:57 chipyard.TestHarness.TinyRocketConfig.fir 205372:4]
    node _a_opcode_lookup_T_5 = tail(_a_opcode_lookup_T_4, 1) @[Monitor.scala 609:57 chipyard.TestHarness.TinyRocketConfig.fir 205373:4]
    node _GEN_73 = pad(_a_opcode_lookup_T_1, 16) @[Monitor.scala 634:97 chipyard.TestHarness.TinyRocketConfig.fir 205374:4]
    node _a_opcode_lookup_T_6 = and(_GEN_73, _a_opcode_lookup_T_5) @[Monitor.scala 634:97 chipyard.TestHarness.TinyRocketConfig.fir 205374:4]
    node _GEN_74 = shr(_a_opcode_lookup_T_6, 1) @[Monitor.scala 634:152 chipyard.TestHarness.TinyRocketConfig.fir 205375:4]
    node _a_opcode_lookup_T_7 = pad(_GEN_74, 16) @[Monitor.scala 634:152 chipyard.TestHarness.TinyRocketConfig.fir 205375:4]
    node _a_size_lookup_T_1 = dshr(inflight_sizes, _a_opcode_lookup_T) @[Monitor.scala 638:40 chipyard.TestHarness.TinyRocketConfig.fir 205380:4]
    node _GEN_76 = pad(_a_size_lookup_T_1, 16) @[Monitor.scala 638:91 chipyard.TestHarness.TinyRocketConfig.fir 205385:4]
    node _a_size_lookup_T_6 = and(_GEN_76, _a_opcode_lookup_T_5) @[Monitor.scala 638:91 chipyard.TestHarness.TinyRocketConfig.fir 205385:4]
    node _GEN_77 = shr(_a_size_lookup_T_6, 1) @[Monitor.scala 638:144 chipyard.TestHarness.TinyRocketConfig.fir 205386:4]
    node _a_size_lookup_T_7 = pad(_GEN_77, 16) @[Monitor.scala 638:144 chipyard.TestHarness.TinyRocketConfig.fir 205386:4]
    node _T_599 = and(io_in_a_valid, a_first_1) @[Monitor.scala 648:26 chipyard.TestHarness.TinyRocketConfig.fir 205410:4]
    node _a_set_wo_ready_T = dshlw(UInt<4>("h1"), io_in_a_bits_source) @[OneHot.scala 58:35 chipyard.TestHarness.TinyRocketConfig.fir 205413:6]
    node _GEN_15 = mux(_T_599, _a_set_wo_ready_T, UInt<4>("h0")) @[Monitor.scala 648:71 chipyard.TestHarness.TinyRocketConfig.fir 205412:4 Monitor.scala 649:22 chipyard.TestHarness.TinyRocketConfig.fir 205414:6 chipyard.TestHarness.TinyRocketConfig.fir 205361:4]
    node _T_602 = and(_a_first_T, a_first_1) @[Monitor.scala 652:27 chipyard.TestHarness.TinyRocketConfig.fir 205417:4]
    node _a_opcodes_set_interm_T = shl(io_in_a_bits_opcode, 1) @[Monitor.scala 654:53 chipyard.TestHarness.TinyRocketConfig.fir 205422:6]
    node _a_opcodes_set_interm_T_1 = or(_a_opcodes_set_interm_T, UInt<4>("h1")) @[Monitor.scala 654:61 chipyard.TestHarness.TinyRocketConfig.fir 205423:6]
    node _a_sizes_set_interm_T = shl(io_in_a_bits_size, 1) @[Monitor.scala 655:51 chipyard.TestHarness.TinyRocketConfig.fir 205425:6]
    node _a_sizes_set_interm_T_1 = or(_a_sizes_set_interm_T, UInt<4>("h1")) @[Monitor.scala 655:59 chipyard.TestHarness.TinyRocketConfig.fir 205426:6]
    node _GEN_78 = shl(io_in_a_bits_source, 2) @[Monitor.scala 656:79 chipyard.TestHarness.TinyRocketConfig.fir 205428:6]
    node _a_opcodes_set_T = pad(_GEN_78, 5) @[Monitor.scala 656:79 chipyard.TestHarness.TinyRocketConfig.fir 205428:6]
    node a_opcodes_set_interm = mux(_T_602, _a_opcodes_set_interm_T_1, UInt<4>("h0")) @[Monitor.scala 652:72 chipyard.TestHarness.TinyRocketConfig.fir 205419:4 Monitor.scala 654:28 chipyard.TestHarness.TinyRocketConfig.fir 205424:6 chipyard.TestHarness.TinyRocketConfig.fir 205407:4]
    node _GEN_79 = pad(a_opcodes_set_interm, 35) @[Monitor.scala 656:54 chipyard.TestHarness.TinyRocketConfig.fir 205429:6]
    node _a_opcodes_set_T_1 = dshlw(_GEN_79, _a_opcodes_set_T) @[Monitor.scala 656:54 chipyard.TestHarness.TinyRocketConfig.fir 205429:6]
    node a_sizes_set_interm = mux(_T_602, _a_sizes_set_interm_T_1, UInt<4>("h0")) @[Monitor.scala 652:72 chipyard.TestHarness.TinyRocketConfig.fir 205419:4 Monitor.scala 655:28 chipyard.TestHarness.TinyRocketConfig.fir 205427:6 chipyard.TestHarness.TinyRocketConfig.fir 205409:4]
    node _GEN_81 = pad(a_sizes_set_interm, 35) @[Monitor.scala 657:52 chipyard.TestHarness.TinyRocketConfig.fir 205432:6]
    node _a_sizes_set_T_1 = dshlw(_GEN_81, _a_opcodes_set_T) @[Monitor.scala 657:52 chipyard.TestHarness.TinyRocketConfig.fir 205432:6]
    node _T_604 = dshr(inflight, io_in_a_bits_source) @[Monitor.scala 658:26 chipyard.TestHarness.TinyRocketConfig.fir 205434:6]
    node _T_605 = bits(_T_604, 0, 0) @[Monitor.scala 658:26 chipyard.TestHarness.TinyRocketConfig.fir 205435:6]
    node _T_606 = not(_T_605) @[Monitor.scala 658:17 chipyard.TestHarness.TinyRocketConfig.fir 205436:6]
    node _T_608 = or(_T_606, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 205438:6]
    node _T_609 = not(_T_608) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 205439:6]
    node _GEN_16 = mux(_T_602, _a_set_wo_ready_T, UInt<4>("h0")) @[Monitor.scala 652:72 chipyard.TestHarness.TinyRocketConfig.fir 205419:4 Monitor.scala 653:28 chipyard.TestHarness.TinyRocketConfig.fir 205421:6 chipyard.TestHarness.TinyRocketConfig.fir 205359:4]
    node _GEN_19 = mux(_T_602, _a_opcodes_set_T_1, UInt<35>("h0")) @[Monitor.scala 652:72 chipyard.TestHarness.TinyRocketConfig.fir 205419:4 Monitor.scala 656:28 chipyard.TestHarness.TinyRocketConfig.fir 205430:6 chipyard.TestHarness.TinyRocketConfig.fir 205363:4]
    node _GEN_20 = mux(_T_602, _a_sizes_set_T_1, UInt<35>("h0")) @[Monitor.scala 652:72 chipyard.TestHarness.TinyRocketConfig.fir 205419:4 Monitor.scala 657:28 chipyard.TestHarness.TinyRocketConfig.fir 205433:6 chipyard.TestHarness.TinyRocketConfig.fir 205365:4]
    node _T_610 = and(io_in_d_valid, d_first_1) @[Monitor.scala 671:26 chipyard.TestHarness.TinyRocketConfig.fir 205454:4]
    node _T_612 = not(_T_406) @[Monitor.scala 671:74 chipyard.TestHarness.TinyRocketConfig.fir 205456:4]
    node _T_613 = and(_T_610, _T_612) @[Monitor.scala 671:71 chipyard.TestHarness.TinyRocketConfig.fir 205457:4]
    node _d_clr_wo_ready_T = dshlw(UInt<4>("h1"), io_in_d_bits_source) @[OneHot.scala 58:35 chipyard.TestHarness.TinyRocketConfig.fir 205459:6]
    node _GEN_21 = mux(_T_613, _d_clr_wo_ready_T, UInt<4>("h0")) @[Monitor.scala 671:90 chipyard.TestHarness.TinyRocketConfig.fir 205458:4 Monitor.scala 672:22 chipyard.TestHarness.TinyRocketConfig.fir 205460:6 chipyard.TestHarness.TinyRocketConfig.fir 205448:4]
    node _T_615 = and(_d_first_T, d_first_1) @[Monitor.scala 675:27 chipyard.TestHarness.TinyRocketConfig.fir 205463:4]
    node _T_618 = and(_T_615, _T_612) @[Monitor.scala 675:72 chipyard.TestHarness.TinyRocketConfig.fir 205466:4]
    node _GEN_83 = pad(_a_opcode_lookup_T_5, 47) @[Monitor.scala 677:76 chipyard.TestHarness.TinyRocketConfig.fir 205475:6]
    node _d_opcodes_clr_T_5 = dshlw(_GEN_83, _a_opcode_lookup_T) @[Monitor.scala 677:76 chipyard.TestHarness.TinyRocketConfig.fir 205475:6]
    node _GEN_22 = mux(_T_618, _d_clr_wo_ready_T, UInt<4>("h0")) @[Monitor.scala 675:91 chipyard.TestHarness.TinyRocketConfig.fir 205467:4 Monitor.scala 676:21 chipyard.TestHarness.TinyRocketConfig.fir 205469:6 chipyard.TestHarness.TinyRocketConfig.fir 205446:4]
    node _GEN_23 = mux(_T_618, _d_opcodes_clr_T_5, UInt<47>("h0")) @[Monitor.scala 675:91 chipyard.TestHarness.TinyRocketConfig.fir 205467:4 Monitor.scala 677:21 chipyard.TestHarness.TinyRocketConfig.fir 205476:6 chipyard.TestHarness.TinyRocketConfig.fir 205450:4]
    node _same_cycle_resp_T_2 = eq(io_in_a_bits_source, io_in_d_bits_source) @[Monitor.scala 681:113 chipyard.TestHarness.TinyRocketConfig.fir 205492:6]
    node same_cycle_resp = and(_T_599, _same_cycle_resp_T_2) @[Monitor.scala 681:88 chipyard.TestHarness.TinyRocketConfig.fir 205493:6]
    node _T_623 = dshr(inflight, io_in_d_bits_source) @[Monitor.scala 682:25 chipyard.TestHarness.TinyRocketConfig.fir 205494:6]
    node _T_624 = bits(_T_623, 0, 0) @[Monitor.scala 682:25 chipyard.TestHarness.TinyRocketConfig.fir 205495:6]
    node _T_625 = or(_T_624, same_cycle_resp) @[Monitor.scala 682:49 chipyard.TestHarness.TinyRocketConfig.fir 205496:6]
    node _T_627 = or(_T_625, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 205498:6]
    node _T_628 = not(_T_627) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 205499:6]
    node _GEN_27 = mux(eq(UInt<3>("h2"), io_in_a_bits_opcode), UInt<3>("h1"), UInt<3>("h0")) @[Monitor.scala 685:38 chipyard.TestHarness.TinyRocketConfig.fir 205505:8 Monitor.scala 685:38 chipyard.TestHarness.TinyRocketConfig.fir 205505:8]
    node _GEN_28 = mux(eq(UInt<3>("h3"), io_in_a_bits_opcode), UInt<3>("h1"), _GEN_27) @[Monitor.scala 685:38 chipyard.TestHarness.TinyRocketConfig.fir 205505:8 Monitor.scala 685:38 chipyard.TestHarness.TinyRocketConfig.fir 205505:8]
    node _GEN_29 = mux(eq(UInt<3>("h4"), io_in_a_bits_opcode), UInt<3>("h1"), _GEN_28) @[Monitor.scala 685:38 chipyard.TestHarness.TinyRocketConfig.fir 205505:8 Monitor.scala 685:38 chipyard.TestHarness.TinyRocketConfig.fir 205505:8]
    node _GEN_30 = mux(eq(UInt<3>("h5"), io_in_a_bits_opcode), UInt<3>("h2"), _GEN_29) @[Monitor.scala 685:38 chipyard.TestHarness.TinyRocketConfig.fir 205505:8 Monitor.scala 685:38 chipyard.TestHarness.TinyRocketConfig.fir 205505:8]
    node _GEN_31 = mux(eq(UInt<3>("h6"), io_in_a_bits_opcode), UInt<3>("h4"), _GEN_30) @[Monitor.scala 685:38 chipyard.TestHarness.TinyRocketConfig.fir 205505:8 Monitor.scala 685:38 chipyard.TestHarness.TinyRocketConfig.fir 205505:8]
    node _GEN_32 = mux(eq(UInt<3>("h7"), io_in_a_bits_opcode), UInt<3>("h4"), _GEN_31) @[Monitor.scala 685:38 chipyard.TestHarness.TinyRocketConfig.fir 205505:8 Monitor.scala 685:38 chipyard.TestHarness.TinyRocketConfig.fir 205505:8]
    node _T_629 = eq(io_in_d_bits_opcode, _GEN_32) @[Monitor.scala 685:38 chipyard.TestHarness.TinyRocketConfig.fir 205505:8]
    node _GEN_39 = mux(eq(UInt<3>("h6"), io_in_a_bits_opcode), UInt<3>("h5"), _GEN_30) @[Monitor.scala 686:39 chipyard.TestHarness.TinyRocketConfig.fir 205506:8 Monitor.scala 686:39 chipyard.TestHarness.TinyRocketConfig.fir 205506:8]
    node _GEN_40 = mux(eq(UInt<3>("h7"), io_in_a_bits_opcode), UInt<3>("h4"), _GEN_39) @[Monitor.scala 686:39 chipyard.TestHarness.TinyRocketConfig.fir 205506:8 Monitor.scala 686:39 chipyard.TestHarness.TinyRocketConfig.fir 205506:8]
    node _T_630 = eq(io_in_d_bits_opcode, _GEN_40) @[Monitor.scala 686:39 chipyard.TestHarness.TinyRocketConfig.fir 205506:8]
    node _T_631 = or(_T_629, _T_630) @[Monitor.scala 685:77 chipyard.TestHarness.TinyRocketConfig.fir 205507:8]
    node _T_633 = or(_T_631, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 205509:8]
    node _T_634 = not(_T_633) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 205510:8]
    node _T_635 = eq(io_in_a_bits_size, io_in_d_bits_size) @[Monitor.scala 687:36 chipyard.TestHarness.TinyRocketConfig.fir 205515:8]
    node _T_637 = or(_T_635, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 205517:8]
    node _T_638 = not(_T_637) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 205518:8]
    node a_opcode_lookup = bits(_a_opcode_lookup_T_7, 3, 0) @[chipyard.TestHarness.TinyRocketConfig.fir 205366:4 Monitor.scala 634:21 chipyard.TestHarness.TinyRocketConfig.fir 205376:4]
    node _T_639 = bits(a_opcode_lookup, 2, 0) @[chipyard.TestHarness.TinyRocketConfig.fir 205525:8]
    node _GEN_43 = mux(eq(UInt<3>("h2"), _T_639), UInt<3>("h1"), UInt<3>("h0")) @[Monitor.scala 689:38 chipyard.TestHarness.TinyRocketConfig.fir 205526:8 Monitor.scala 689:38 chipyard.TestHarness.TinyRocketConfig.fir 205526:8]
    node _GEN_44 = mux(eq(UInt<3>("h3"), _T_639), UInt<3>("h1"), _GEN_43) @[Monitor.scala 689:38 chipyard.TestHarness.TinyRocketConfig.fir 205526:8 Monitor.scala 689:38 chipyard.TestHarness.TinyRocketConfig.fir 205526:8]
    node _GEN_45 = mux(eq(UInt<3>("h4"), _T_639), UInt<3>("h1"), _GEN_44) @[Monitor.scala 689:38 chipyard.TestHarness.TinyRocketConfig.fir 205526:8 Monitor.scala 689:38 chipyard.TestHarness.TinyRocketConfig.fir 205526:8]
    node _GEN_46 = mux(eq(UInt<3>("h5"), _T_639), UInt<3>("h2"), _GEN_45) @[Monitor.scala 689:38 chipyard.TestHarness.TinyRocketConfig.fir 205526:8 Monitor.scala 689:38 chipyard.TestHarness.TinyRocketConfig.fir 205526:8]
    node _GEN_47 = mux(eq(UInt<3>("h6"), _T_639), UInt<3>("h4"), _GEN_46) @[Monitor.scala 689:38 chipyard.TestHarness.TinyRocketConfig.fir 205526:8 Monitor.scala 689:38 chipyard.TestHarness.TinyRocketConfig.fir 205526:8]
    node _GEN_48 = mux(eq(UInt<3>("h7"), _T_639), UInt<3>("h4"), _GEN_47) @[Monitor.scala 689:38 chipyard.TestHarness.TinyRocketConfig.fir 205526:8 Monitor.scala 689:38 chipyard.TestHarness.TinyRocketConfig.fir 205526:8]
    node _T_640 = eq(io_in_d_bits_opcode, _GEN_48) @[Monitor.scala 689:38 chipyard.TestHarness.TinyRocketConfig.fir 205526:8]
    node _GEN_55 = mux(eq(UInt<3>("h6"), _T_639), UInt<3>("h5"), _GEN_46) @[Monitor.scala 690:38 chipyard.TestHarness.TinyRocketConfig.fir 205528:8 Monitor.scala 690:38 chipyard.TestHarness.TinyRocketConfig.fir 205528:8]
    node _GEN_56 = mux(eq(UInt<3>("h7"), _T_639), UInt<3>("h4"), _GEN_55) @[Monitor.scala 690:38 chipyard.TestHarness.TinyRocketConfig.fir 205528:8 Monitor.scala 690:38 chipyard.TestHarness.TinyRocketConfig.fir 205528:8]
    node _T_642 = eq(io_in_d_bits_opcode, _GEN_56) @[Monitor.scala 690:38 chipyard.TestHarness.TinyRocketConfig.fir 205528:8]
    node _T_643 = or(_T_640, _T_642) @[Monitor.scala 689:72 chipyard.TestHarness.TinyRocketConfig.fir 205529:8]
    node _T_645 = or(_T_643, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 205531:8]
    node _T_646 = not(_T_645) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 205532:8]
    node a_size_lookup = bits(_a_size_lookup_T_7, 3, 0) @[chipyard.TestHarness.TinyRocketConfig.fir 205377:4 Monitor.scala 638:19 chipyard.TestHarness.TinyRocketConfig.fir 205387:4]
    node _GEN_86 = pad(io_in_d_bits_size, 4) @[Monitor.scala 691:36 chipyard.TestHarness.TinyRocketConfig.fir 205537:8]
    node _T_647 = eq(_GEN_86, a_size_lookup) @[Monitor.scala 691:36 chipyard.TestHarness.TinyRocketConfig.fir 205537:8]
    node _T_649 = or(_T_647, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 205539:8]
    node _T_650 = not(_T_649) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 205540:8]
    node _T_652 = and(_T_610, a_first_1) @[Monitor.scala 694:36 chipyard.TestHarness.TinyRocketConfig.fir 205548:4]
    node _T_653 = and(_T_652, io_in_a_valid) @[Monitor.scala 694:47 chipyard.TestHarness.TinyRocketConfig.fir 205549:4]
    node _T_655 = and(_T_653, _same_cycle_resp_T_2) @[Monitor.scala 694:65 chipyard.TestHarness.TinyRocketConfig.fir 205551:4]
    node _T_657 = and(_T_655, _T_612) @[Monitor.scala 694:116 chipyard.TestHarness.TinyRocketConfig.fir 205553:4]
    node _T_658 = not(io_in_d_ready) @[Monitor.scala 695:15 chipyard.TestHarness.TinyRocketConfig.fir 205555:6]
    node _T_659 = or(_T_658, io_in_a_ready) @[Monitor.scala 695:32 chipyard.TestHarness.TinyRocketConfig.fir 205556:6]
    node _T_661 = or(_T_659, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 205558:6]
    node _T_662 = not(_T_661) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 205559:6]
    node a_set_wo_ready = bits(_GEN_15, 2, 0) @[chipyard.TestHarness.TinyRocketConfig.fir 205360:4]
    node d_clr_wo_ready = bits(_GEN_21, 2, 0) @[chipyard.TestHarness.TinyRocketConfig.fir 205447:4]
    node _T_663 = neq(a_set_wo_ready, d_clr_wo_ready) @[Monitor.scala 699:29 chipyard.TestHarness.TinyRocketConfig.fir 205565:4]
    node _T_664 = orr(a_set_wo_ready) @[Monitor.scala 699:67 chipyard.TestHarness.TinyRocketConfig.fir 205566:4]
    node _T_665 = not(_T_664) @[Monitor.scala 699:51 chipyard.TestHarness.TinyRocketConfig.fir 205567:4]
    node _T_666 = or(_T_663, _T_665) @[Monitor.scala 699:48 chipyard.TestHarness.TinyRocketConfig.fir 205568:4]
    node _T_668 = or(_T_666, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 205570:4]
    node _T_669 = not(_T_668) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 205571:4]
    node a_set = bits(_GEN_16, 2, 0) @[chipyard.TestHarness.TinyRocketConfig.fir 205358:4]
    node _inflight_T = or(inflight, a_set) @[Monitor.scala 702:27 chipyard.TestHarness.TinyRocketConfig.fir 205576:4]
    node d_clr = bits(_GEN_22, 2, 0) @[chipyard.TestHarness.TinyRocketConfig.fir 205445:4]
    node _inflight_T_1 = not(d_clr) @[Monitor.scala 702:38 chipyard.TestHarness.TinyRocketConfig.fir 205577:4]
    node _inflight_T_2 = and(_inflight_T, _inflight_T_1) @[Monitor.scala 702:36 chipyard.TestHarness.TinyRocketConfig.fir 205578:4]
    node a_opcodes_set = bits(_GEN_19, 11, 0) @[chipyard.TestHarness.TinyRocketConfig.fir 205362:4]
    node _inflight_opcodes_T = or(inflight_opcodes, a_opcodes_set) @[Monitor.scala 703:43 chipyard.TestHarness.TinyRocketConfig.fir 205580:4]
    node d_opcodes_clr = bits(_GEN_23, 11, 0) @[chipyard.TestHarness.TinyRocketConfig.fir 205449:4]
    node _inflight_opcodes_T_1 = not(d_opcodes_clr) @[Monitor.scala 703:62 chipyard.TestHarness.TinyRocketConfig.fir 205581:4]
    node _inflight_opcodes_T_2 = and(_inflight_opcodes_T, _inflight_opcodes_T_1) @[Monitor.scala 703:60 chipyard.TestHarness.TinyRocketConfig.fir 205582:4]
    node a_sizes_set = bits(_GEN_20, 11, 0) @[chipyard.TestHarness.TinyRocketConfig.fir 205364:4]
    node _inflight_sizes_T = or(inflight_sizes, a_sizes_set) @[Monitor.scala 704:39 chipyard.TestHarness.TinyRocketConfig.fir 205584:4]
    node _inflight_sizes_T_2 = and(_inflight_sizes_T, _inflight_opcodes_T_1) @[Monitor.scala 704:54 chipyard.TestHarness.TinyRocketConfig.fir 205586:4]
    reg watchdog : UInt<32>, clock with :
      reset => (UInt<1>("h0"), watchdog) @[Monitor.scala 706:27 chipyard.TestHarness.TinyRocketConfig.fir 205588:4]
    node _T_670 = orr(inflight) @[Monitor.scala 709:26 chipyard.TestHarness.TinyRocketConfig.fir 205591:4]
    node _T_671 = not(_T_670) @[Monitor.scala 709:16 chipyard.TestHarness.TinyRocketConfig.fir 205592:4]
    node _T_672 = eq(plusarg_reader.out, UInt<32>("h0")) @[Monitor.scala 709:39 chipyard.TestHarness.TinyRocketConfig.fir 205593:4]
    node _T_673 = or(_T_671, _T_672) @[Monitor.scala 709:30 chipyard.TestHarness.TinyRocketConfig.fir 205594:4]
    node _T_674 = lt(watchdog, plusarg_reader.out) @[Monitor.scala 709:59 chipyard.TestHarness.TinyRocketConfig.fir 205595:4]
    node _T_675 = or(_T_673, _T_674) @[Monitor.scala 709:47 chipyard.TestHarness.TinyRocketConfig.fir 205596:4]
    node _T_677 = or(_T_675, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 205598:4]
    node _T_678 = not(_T_677) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 205599:4]
    node _watchdog_T = add(watchdog, UInt<32>("h1")) @[Monitor.scala 711:26 chipyard.TestHarness.TinyRocketConfig.fir 205604:4]
    node _watchdog_T_1 = tail(_watchdog_T, 1) @[Monitor.scala 711:26 chipyard.TestHarness.TinyRocketConfig.fir 205605:4]
    node _T_681 = or(_a_first_T, _d_first_T) @[Monitor.scala 712:27 chipyard.TestHarness.TinyRocketConfig.fir 205609:4]
    node _GEN_57 = mux(_T_681, UInt<32>("h0"), _watchdog_T_1) @[Monitor.scala 712:47 chipyard.TestHarness.TinyRocketConfig.fir 205610:4 Monitor.scala 712:58 chipyard.TestHarness.TinyRocketConfig.fir 205611:6 Monitor.scala 711:14 chipyard.TestHarness.TinyRocketConfig.fir 205606:4]
    reg inflight_1 : UInt<3>, clock with :
      reset => (UInt<1>("h0"), inflight_1) @[Monitor.scala 723:35 chipyard.TestHarness.TinyRocketConfig.fir 205613:4]
    reg inflight_sizes_1 : UInt<12>, clock with :
      reset => (UInt<1>("h0"), inflight_sizes_1) @[Monitor.scala 725:35 chipyard.TestHarness.TinyRocketConfig.fir 205615:4]
    reg d_first_counter_2 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), d_first_counter_2) @[Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 205650:4]
    node _d_first_counter1_T_2 = sub(d_first_counter_2, UInt<4>("h1")) @[Edges.scala 229:28 chipyard.TestHarness.TinyRocketConfig.fir 205651:4]
    node d_first_counter1_2 = tail(_d_first_counter1_T_2, 1) @[Edges.scala 229:28 chipyard.TestHarness.TinyRocketConfig.fir 205652:4]
    node d_first_2 = eq(d_first_counter_2, UInt<4>("h0")) @[Edges.scala 230:25 chipyard.TestHarness.TinyRocketConfig.fir 205653:4]
    node _d_first_counter_T_2 = mux(d_first_2, d_first_beats1, d_first_counter1_2) @[Edges.scala 235:21 chipyard.TestHarness.TinyRocketConfig.fir 205661:6]
    node _GEN_59 = mux(_d_first_T, _d_first_counter_T_2, d_first_counter_2) @[Edges.scala 234:17 chipyard.TestHarness.TinyRocketConfig.fir 205660:4 Edges.scala 235:15 chipyard.TestHarness.TinyRocketConfig.fir 205662:6 Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 205650:4]
    node _c_size_lookup_T_1 = dshr(inflight_sizes_1, _a_opcode_lookup_T) @[Monitor.scala 747:42 chipyard.TestHarness.TinyRocketConfig.fir 205686:4]
    node _GEN_91 = pad(_c_size_lookup_T_1, 16) @[Monitor.scala 747:93 chipyard.TestHarness.TinyRocketConfig.fir 205691:4]
    node _c_size_lookup_T_6 = and(_GEN_91, _a_opcode_lookup_T_5) @[Monitor.scala 747:93 chipyard.TestHarness.TinyRocketConfig.fir 205691:4]
    node _GEN_92 = shr(_c_size_lookup_T_6, 1) @[Monitor.scala 747:146 chipyard.TestHarness.TinyRocketConfig.fir 205692:4]
    node _c_size_lookup_T_7 = pad(_GEN_92, 16) @[Monitor.scala 747:146 chipyard.TestHarness.TinyRocketConfig.fir 205692:4]
    node _T_699 = and(io_in_d_valid, d_first_2) @[Monitor.scala 779:26 chipyard.TestHarness.TinyRocketConfig.fir 205770:4]
    node _T_701 = and(_T_699, _T_406) @[Monitor.scala 779:71 chipyard.TestHarness.TinyRocketConfig.fir 205772:4]
    node _T_703 = and(_d_first_T, d_first_2) @[Monitor.scala 783:27 chipyard.TestHarness.TinyRocketConfig.fir 205778:4]
    node _T_705 = and(_T_703, _T_406) @[Monitor.scala 783:72 chipyard.TestHarness.TinyRocketConfig.fir 205780:4]
    node _GEN_67 = mux(_T_705, _d_clr_wo_ready_T, UInt<4>("h0")) @[Monitor.scala 783:90 chipyard.TestHarness.TinyRocketConfig.fir 205781:4 Monitor.scala 784:21 chipyard.TestHarness.TinyRocketConfig.fir 205783:6 chipyard.TestHarness.TinyRocketConfig.fir 205762:4]
    node _GEN_68 = mux(_T_705, _d_opcodes_clr_T_5, UInt<47>("h0")) @[Monitor.scala 783:90 chipyard.TestHarness.TinyRocketConfig.fir 205781:4 Monitor.scala 785:21 chipyard.TestHarness.TinyRocketConfig.fir 205790:6 chipyard.TestHarness.TinyRocketConfig.fir 205766:4]
    node _T_709 = dshr(inflight_1, io_in_d_bits_source) @[Monitor.scala 791:25 chipyard.TestHarness.TinyRocketConfig.fir 205816:6]
    node _T_710 = bits(_T_709, 0, 0) @[Monitor.scala 791:25 chipyard.TestHarness.TinyRocketConfig.fir 205817:6]
    node _T_713 = or(_T_710, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 205820:6]
    node _T_714 = not(_T_713) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 205821:6]
    node c_size_lookup = bits(_c_size_lookup_T_7, 3, 0) @[chipyard.TestHarness.TinyRocketConfig.fir 205674:4 Monitor.scala 747:21 chipyard.TestHarness.TinyRocketConfig.fir 205693:4]
    node _T_719 = eq(_GEN_86, c_size_lookup) @[Monitor.scala 795:36 chipyard.TestHarness.TinyRocketConfig.fir 205839:8]
    node _T_721 = or(_T_719, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 205841:8]
    node _T_722 = not(_T_721) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 205842:8]
    node d_clr_1 = bits(_GEN_67, 2, 0) @[chipyard.TestHarness.TinyRocketConfig.fir 205761:4]
    node _inflight_T_4 = not(d_clr_1) @[Monitor.scala 809:46 chipyard.TestHarness.TinyRocketConfig.fir 205884:4]
    node _inflight_T_5 = and(inflight_1, _inflight_T_4) @[Monitor.scala 809:44 chipyard.TestHarness.TinyRocketConfig.fir 205885:4]
    node d_opcodes_clr_1 = bits(_GEN_68, 11, 0) @[chipyard.TestHarness.TinyRocketConfig.fir 205765:4]
    node _inflight_opcodes_T_4 = not(d_opcodes_clr_1) @[Monitor.scala 810:62 chipyard.TestHarness.TinyRocketConfig.fir 205888:4]
    node _inflight_sizes_T_5 = and(inflight_sizes_1, _inflight_opcodes_T_4) @[Monitor.scala 811:56 chipyard.TestHarness.TinyRocketConfig.fir 205893:4]
    reg watchdog_1 : UInt<32>, clock with :
      reset => (UInt<1>("h0"), watchdog_1) @[Monitor.scala 813:27 chipyard.TestHarness.TinyRocketConfig.fir 205895:4]
    node _T_739 = orr(inflight_1) @[Monitor.scala 816:26 chipyard.TestHarness.TinyRocketConfig.fir 205898:4]
    node _T_740 = not(_T_739) @[Monitor.scala 816:16 chipyard.TestHarness.TinyRocketConfig.fir 205899:4]
    node _T_741 = eq(plusarg_reader_1.out, UInt<32>("h0")) @[Monitor.scala 816:39 chipyard.TestHarness.TinyRocketConfig.fir 205900:4]
    node _T_742 = or(_T_740, _T_741) @[Monitor.scala 816:30 chipyard.TestHarness.TinyRocketConfig.fir 205901:4]
    node _T_743 = lt(watchdog_1, plusarg_reader_1.out) @[Monitor.scala 816:59 chipyard.TestHarness.TinyRocketConfig.fir 205902:4]
    node _T_744 = or(_T_742, _T_743) @[Monitor.scala 816:47 chipyard.TestHarness.TinyRocketConfig.fir 205903:4]
    node _T_746 = or(_T_744, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 205905:4]
    node _T_747 = not(_T_746) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 205906:4]
    node _watchdog_T_2 = add(watchdog_1, UInt<32>("h1")) @[Monitor.scala 818:26 chipyard.TestHarness.TinyRocketConfig.fir 205911:4]
    node _watchdog_T_3 = tail(_watchdog_T_2, 1) @[Monitor.scala 818:26 chipyard.TestHarness.TinyRocketConfig.fir 205912:4]
    node _GEN_70 = mux(_d_first_T, UInt<32>("h0"), _watchdog_T_3) @[Monitor.scala 819:47 chipyard.TestHarness.TinyRocketConfig.fir 205919:4 Monitor.scala 819:58 chipyard.TestHarness.TinyRocketConfig.fir 205920:6 Monitor.scala 818:14 chipyard.TestHarness.TinyRocketConfig.fir 205913:4]
    a_first_counter <= mux(reset, UInt<4>("h0"), _GEN_0) @[Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 205148:4 Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 205148:4]
    opcode <= mux(_T_570, io_in_a_bits_opcode, opcode) @[Monitor.scala 396:32 chipyard.TestHarness.TinyRocketConfig.fir 205213:4 Monitor.scala 397:15 chipyard.TestHarness.TinyRocketConfig.fir 205214:6 Monitor.scala 384:22 chipyard.TestHarness.TinyRocketConfig.fir 205162:4]
    param <= mux(_T_570, io_in_a_bits_param, param) @[Monitor.scala 396:32 chipyard.TestHarness.TinyRocketConfig.fir 205213:4 Monitor.scala 398:15 chipyard.TestHarness.TinyRocketConfig.fir 205215:6 Monitor.scala 385:22 chipyard.TestHarness.TinyRocketConfig.fir 205163:4]
    size <= mux(_T_570, io_in_a_bits_size, size) @[Monitor.scala 396:32 chipyard.TestHarness.TinyRocketConfig.fir 205213:4 Monitor.scala 399:15 chipyard.TestHarness.TinyRocketConfig.fir 205216:6 Monitor.scala 386:22 chipyard.TestHarness.TinyRocketConfig.fir 205164:4]
    source <= mux(_T_570, io_in_a_bits_source, source) @[Monitor.scala 396:32 chipyard.TestHarness.TinyRocketConfig.fir 205213:4 Monitor.scala 400:15 chipyard.TestHarness.TinyRocketConfig.fir 205217:6 Monitor.scala 387:22 chipyard.TestHarness.TinyRocketConfig.fir 205165:4]
    address <= mux(_T_570, io_in_a_bits_address, address) @[Monitor.scala 396:32 chipyard.TestHarness.TinyRocketConfig.fir 205213:4 Monitor.scala 401:15 chipyard.TestHarness.TinyRocketConfig.fir 205218:6 Monitor.scala 388:22 chipyard.TestHarness.TinyRocketConfig.fir 205166:4]
    d_first_counter <= mux(reset, UInt<4>("h0"), _GEN_6) @[Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 205228:4 Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 205228:4]
    opcode_1 <= mux(_T_598, io_in_d_bits_opcode, opcode_1) @[Monitor.scala 549:32 chipyard.TestHarness.TinyRocketConfig.fir 205302:4 Monitor.scala 550:15 chipyard.TestHarness.TinyRocketConfig.fir 205303:6 Monitor.scala 535:22 chipyard.TestHarness.TinyRocketConfig.fir 205242:4]
    param_1 <= mux(_T_598, io_in_d_bits_param, param_1) @[Monitor.scala 549:32 chipyard.TestHarness.TinyRocketConfig.fir 205302:4 Monitor.scala 551:15 chipyard.TestHarness.TinyRocketConfig.fir 205304:6 Monitor.scala 536:22 chipyard.TestHarness.TinyRocketConfig.fir 205243:4]
    size_1 <= mux(_T_598, io_in_d_bits_size, size_1) @[Monitor.scala 549:32 chipyard.TestHarness.TinyRocketConfig.fir 205302:4 Monitor.scala 552:15 chipyard.TestHarness.TinyRocketConfig.fir 205305:6 Monitor.scala 537:22 chipyard.TestHarness.TinyRocketConfig.fir 205244:4]
    source_1 <= mux(_T_598, io_in_d_bits_source, source_1) @[Monitor.scala 549:32 chipyard.TestHarness.TinyRocketConfig.fir 205302:4 Monitor.scala 553:15 chipyard.TestHarness.TinyRocketConfig.fir 205306:6 Monitor.scala 538:22 chipyard.TestHarness.TinyRocketConfig.fir 205245:4]
    sink <= mux(_T_598, io_in_d_bits_sink, sink) @[Monitor.scala 549:32 chipyard.TestHarness.TinyRocketConfig.fir 205302:4 Monitor.scala 554:15 chipyard.TestHarness.TinyRocketConfig.fir 205307:6 Monitor.scala 539:22 chipyard.TestHarness.TinyRocketConfig.fir 205246:4]
    denied <= mux(_T_598, io_in_d_bits_denied, denied) @[Monitor.scala 549:32 chipyard.TestHarness.TinyRocketConfig.fir 205302:4 Monitor.scala 555:15 chipyard.TestHarness.TinyRocketConfig.fir 205308:6 Monitor.scala 540:22 chipyard.TestHarness.TinyRocketConfig.fir 205247:4]
    inflight <= mux(reset, UInt<3>("h0"), _inflight_T_2) @[Monitor.scala 611:27 chipyard.TestHarness.TinyRocketConfig.fir 205310:4 Monitor.scala 611:27 chipyard.TestHarness.TinyRocketConfig.fir 205310:4 Monitor.scala 702:14 chipyard.TestHarness.TinyRocketConfig.fir 205579:4]
    inflight_opcodes <= mux(reset, UInt<12>("h0"), _inflight_opcodes_T_2) @[Monitor.scala 613:35 chipyard.TestHarness.TinyRocketConfig.fir 205311:4 Monitor.scala 613:35 chipyard.TestHarness.TinyRocketConfig.fir 205311:4 Monitor.scala 703:22 chipyard.TestHarness.TinyRocketConfig.fir 205583:4]
    inflight_sizes <= mux(reset, UInt<12>("h0"), _inflight_sizes_T_2) @[Monitor.scala 615:33 chipyard.TestHarness.TinyRocketConfig.fir 205312:4 Monitor.scala 615:33 chipyard.TestHarness.TinyRocketConfig.fir 205312:4 Monitor.scala 704:20 chipyard.TestHarness.TinyRocketConfig.fir 205587:4]
    a_first_counter_1 <= mux(reset, UInt<4>("h0"), _GEN_13) @[Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 205322:4 Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 205322:4]
    d_first_counter_1 <= mux(reset, UInt<4>("h0"), _GEN_14) @[Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 205344:4 Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 205344:4]
    watchdog <= mux(reset, UInt<32>("h0"), _GEN_57) @[Monitor.scala 706:27 chipyard.TestHarness.TinyRocketConfig.fir 205588:4 Monitor.scala 706:27 chipyard.TestHarness.TinyRocketConfig.fir 205588:4]
    inflight_1 <= mux(reset, UInt<3>("h0"), _inflight_T_5) @[Monitor.scala 723:35 chipyard.TestHarness.TinyRocketConfig.fir 205613:4 Monitor.scala 723:35 chipyard.TestHarness.TinyRocketConfig.fir 205613:4 Monitor.scala 809:22 chipyard.TestHarness.TinyRocketConfig.fir 205886:4]
    inflight_sizes_1 <= mux(reset, UInt<12>("h0"), _inflight_sizes_T_5) @[Monitor.scala 725:35 chipyard.TestHarness.TinyRocketConfig.fir 205615:4 Monitor.scala 725:35 chipyard.TestHarness.TinyRocketConfig.fir 205615:4 Monitor.scala 811:22 chipyard.TestHarness.TinyRocketConfig.fir 205894:4]
    d_first_counter_2 <= mux(reset, UInt<4>("h0"), _GEN_59) @[Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 205650:4 Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 205650:4]
    watchdog_1 <= mux(reset, UInt<32>("h0"), _GEN_70) @[Monitor.scala 813:27 chipyard.TestHarness.TinyRocketConfig.fir 205895:4 Monitor.scala 813:27 chipyard.TestHarness.TinyRocketConfig.fir 205895:4]
    node _GEN_98 = and(io_in_a_valid, _T_33) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204262:10]
    printf(clock, and(_GEN_98, _T_55), "Assertion failed: 'A' channel carries AcquireBlock type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204262:10]
    stop(clock, and(_GEN_98, _T_55), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204263:10]
    printf(clock, and(_GEN_98, _T_55), "Assertion failed: 'A' channel carries AcquireBlock from a client which does not support Probe (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204281:10]
    stop(clock, and(_GEN_98, _T_55), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204282:10]
    printf(clock, and(_GEN_98, _T_73), "Assertion failed: 'A' channel AcquireBlock carries invalid source ID (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204288:10]
    stop(clock, and(_GEN_98, _T_73), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204289:10]
    printf(clock, and(_GEN_98, _T_77), "Assertion failed: 'A' channel AcquireBlock smaller than a beat (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204296:10]
    stop(clock, and(_GEN_98, _T_77), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204297:10]
    printf(clock, and(_GEN_98, _T_80), "Assertion failed: 'A' channel AcquireBlock address not aligned to size (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204303:10]
    stop(clock, and(_GEN_98, _T_80), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204304:10]
    printf(clock, and(_GEN_98, _T_84), "Assertion failed: 'A' channel AcquireBlock carries invalid grow param (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204311:10]
    stop(clock, and(_GEN_98, _T_84), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204312:10]
    printf(clock, and(_GEN_98, _T_89), "Assertion failed: 'A' channel AcquireBlock contains invalid mask (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204320:10]
    stop(clock, and(_GEN_98, _T_89), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204321:10]
    printf(clock, and(_GEN_98, _T_93), "Assertion failed: 'A' channel AcquireBlock is corrupt (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204328:10]
    stop(clock, and(_GEN_98, _T_93), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204329:10]
    node _GEN_114 = and(io_in_a_valid, _T_94) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204357:10]
    printf(clock, and(_GEN_114, _T_55), "Assertion failed: 'A' channel carries AcquirePerm type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204357:10]
    stop(clock, and(_GEN_114, _T_55), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204358:10]
    printf(clock, and(_GEN_114, _T_55), "Assertion failed: 'A' channel carries AcquirePerm from a client which does not support Probe (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204376:10]
    stop(clock, and(_GEN_114, _T_55), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204377:10]
    printf(clock, and(_GEN_114, _T_73), "Assertion failed: 'A' channel AcquirePerm carries invalid source ID (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204383:10]
    stop(clock, and(_GEN_114, _T_73), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204384:10]
    printf(clock, and(_GEN_114, _T_77), "Assertion failed: 'A' channel AcquirePerm smaller than a beat (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204391:10]
    stop(clock, and(_GEN_114, _T_77), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204392:10]
    printf(clock, and(_GEN_114, _T_80), "Assertion failed: 'A' channel AcquirePerm address not aligned to size (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204398:10]
    stop(clock, and(_GEN_114, _T_80), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204399:10]
    printf(clock, and(_GEN_114, _T_84), "Assertion failed: 'A' channel AcquirePerm carries invalid grow param (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204406:10]
    stop(clock, and(_GEN_114, _T_84), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204407:10]
    printf(clock, and(_GEN_114, _T_149), "Assertion failed: 'A' channel AcquirePerm requests NtoB (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204414:10]
    stop(clock, and(_GEN_114, _T_149), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204415:10]
    printf(clock, and(_GEN_114, _T_89), "Assertion failed: 'A' channel AcquirePerm contains invalid mask (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204423:10]
    stop(clock, and(_GEN_114, _T_89), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204424:10]
    printf(clock, and(_GEN_114, _T_93), "Assertion failed: 'A' channel AcquirePerm is corrupt (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204431:10]
    stop(clock, and(_GEN_114, _T_93), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204432:10]
    node _GEN_132 = and(io_in_a_valid, _T_159) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204451:10]
    printf(clock, and(_GEN_132, _T_73), "Assertion failed: 'A' channel carries Get type which master claims it can't emit (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204451:10]
    stop(clock, and(_GEN_132, _T_73), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204452:10]
    printf(clock, and(_GEN_132, _T_186), "Assertion failed: 'A' channel carries Get type which slave claims it can't support (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204469:10]
    stop(clock, and(_GEN_132, _T_186), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204470:10]
    printf(clock, and(_GEN_132, _T_73), "Assertion failed: 'A' channel Get carries invalid source ID (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204476:10]
    stop(clock, and(_GEN_132, _T_73), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204477:10]
    printf(clock, and(_GEN_132, _T_80), "Assertion failed: 'A' channel Get address not aligned to size (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204483:10]
    stop(clock, and(_GEN_132, _T_80), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204484:10]
    printf(clock, and(_GEN_132, _T_196), "Assertion failed: 'A' channel Get carries invalid param (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204491:10]
    stop(clock, and(_GEN_132, _T_196), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204492:10]
    printf(clock, and(_GEN_132, _T_200), "Assertion failed: 'A' channel Get contains invalid mask (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204499:10]
    stop(clock, and(_GEN_132, _T_200), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204500:10]
    printf(clock, and(_GEN_132, _T_93), "Assertion failed: 'A' channel Get is corrupt (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204507:10]
    stop(clock, and(_GEN_132, _T_93), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204508:10]
    node _GEN_146 = and(io_in_a_valid, _T_205) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204539:10]
    printf(clock, and(_GEN_146, _T_230), "Assertion failed: 'A' channel carries PutFull type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204539:10]
    stop(clock, and(_GEN_146, _T_230), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204540:10]
    printf(clock, and(_GEN_146, _T_73), "Assertion failed: 'A' channel PutFull carries invalid source ID (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204546:10]
    stop(clock, and(_GEN_146, _T_73), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204547:10]
    printf(clock, and(_GEN_146, _T_80), "Assertion failed: 'A' channel PutFull address not aligned to size (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204553:10]
    stop(clock, and(_GEN_146, _T_80), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204554:10]
    printf(clock, and(_GEN_146, _T_196), "Assertion failed: 'A' channel PutFull carries invalid param (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204561:10]
    stop(clock, and(_GEN_146, _T_196), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204562:10]
    printf(clock, and(_GEN_146, _T_200), "Assertion failed: 'A' channel PutFull contains invalid mask (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204569:10]
    stop(clock, and(_GEN_146, _T_200), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204570:10]
    node _GEN_156 = and(io_in_a_valid, _T_245) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204601:10]
    printf(clock, and(_GEN_156, _T_230), "Assertion failed: 'A' channel carries PutPartial type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204601:10]
    stop(clock, and(_GEN_156, _T_230), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204602:10]
    printf(clock, and(_GEN_156, _T_73), "Assertion failed: 'A' channel PutPartial carries invalid source ID (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204608:10]
    stop(clock, and(_GEN_156, _T_73), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204609:10]
    printf(clock, and(_GEN_156, _T_80), "Assertion failed: 'A' channel PutPartial address not aligned to size (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204615:10]
    stop(clock, and(_GEN_156, _T_80), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204616:10]
    printf(clock, and(_GEN_156, _T_196), "Assertion failed: 'A' channel PutPartial carries invalid param (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204623:10]
    stop(clock, and(_GEN_156, _T_196), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204624:10]
    printf(clock, and(_GEN_156, _T_286), "Assertion failed: 'A' channel PutPartial contains invalid mask (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204633:10]
    stop(clock, and(_GEN_156, _T_286), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204634:10]
    node _GEN_166 = and(io_in_a_valid, _T_287) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204662:10]
    printf(clock, and(_GEN_166, _T_55), "Assertion failed: 'A' channel carries Arithmetic type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204662:10]
    stop(clock, and(_GEN_166, _T_55), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204663:10]
    printf(clock, and(_GEN_166, _T_73), "Assertion failed: 'A' channel Arithmetic carries invalid source ID (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204669:10]
    stop(clock, and(_GEN_166, _T_73), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204670:10]
    printf(clock, and(_GEN_166, _T_80), "Assertion failed: 'A' channel Arithmetic address not aligned to size (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204676:10]
    stop(clock, and(_GEN_166, _T_80), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204677:10]
    printf(clock, and(_GEN_166, _T_319), "Assertion failed: 'A' channel Arithmetic carries invalid opcode param (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204684:10]
    stop(clock, and(_GEN_166, _T_319), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204685:10]
    printf(clock, and(_GEN_166, _T_200), "Assertion failed: 'A' channel Arithmetic contains invalid mask (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204692:10]
    stop(clock, and(_GEN_166, _T_200), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204693:10]
    node _GEN_176 = and(io_in_a_valid, _T_324) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204721:10]
    printf(clock, and(_GEN_176, _T_55), "Assertion failed: 'A' channel carries Logical type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204721:10]
    stop(clock, and(_GEN_176, _T_55), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204722:10]
    printf(clock, and(_GEN_176, _T_73), "Assertion failed: 'A' channel Logical carries invalid source ID (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204728:10]
    stop(clock, and(_GEN_176, _T_73), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204729:10]
    printf(clock, and(_GEN_176, _T_80), "Assertion failed: 'A' channel Logical address not aligned to size (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204735:10]
    stop(clock, and(_GEN_176, _T_80), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204736:10]
    printf(clock, and(_GEN_176, _T_356), "Assertion failed: 'A' channel Logical carries invalid opcode param (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204743:10]
    stop(clock, and(_GEN_176, _T_356), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204744:10]
    printf(clock, and(_GEN_176, _T_200), "Assertion failed: 'A' channel Logical contains invalid mask (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204751:10]
    stop(clock, and(_GEN_176, _T_200), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204752:10]
    node _GEN_186 = and(io_in_a_valid, _T_361) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204780:10]
    printf(clock, and(_GEN_186, _T_55), "Assertion failed: 'A' channel carries Hint type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204780:10]
    stop(clock, and(_GEN_186, _T_55), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204781:10]
    printf(clock, and(_GEN_186, _T_73), "Assertion failed: 'A' channel Hint carries invalid source ID (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204787:10]
    stop(clock, and(_GEN_186, _T_73), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204788:10]
    printf(clock, and(_GEN_186, _T_80), "Assertion failed: 'A' channel Hint address not aligned to size (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204794:10]
    stop(clock, and(_GEN_186, _T_80), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204795:10]
    printf(clock, and(_GEN_186, _T_393), "Assertion failed: 'A' channel Hint carries invalid opcode param (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204802:10]
    stop(clock, and(_GEN_186, _T_393), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204803:10]
    printf(clock, and(_GEN_186, _T_200), "Assertion failed: 'A' channel Hint contains invalid mask (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204810:10]
    stop(clock, and(_GEN_186, _T_200), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204811:10]
    printf(clock, and(_GEN_186, _T_93), "Assertion failed: 'A' channel Hint is corrupt (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204818:10]
    stop(clock, and(_GEN_186, _T_93), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 204819:10]
    printf(clock, and(io_in_d_valid, _T_405), "Assertion failed: 'D' channel has invalid opcode (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 204829:8]
    stop(clock, and(io_in_d_valid, _T_405), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 204830:8]
    node _GEN_198 = and(io_in_d_valid, _T_406) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 204849:10]
    printf(clock, and(_GEN_198, _T_409), "Assertion failed: 'D' channel ReleaseAck carries invalid source ID (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 204849:10]
    stop(clock, and(_GEN_198, _T_409), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 204850:10]
    printf(clock, and(_GEN_198, _T_413), "Assertion failed: 'D' channel ReleaseAck smaller than a beat (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 204857:10]
    stop(clock, and(_GEN_198, _T_413), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 204858:10]
    printf(clock, and(_GEN_198, _T_417), "Assertion failed: 'D' channel ReleaseeAck carries invalid param (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 204865:10]
    stop(clock, and(_GEN_198, _T_417), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 204866:10]
    printf(clock, and(_GEN_198, _T_421), "Assertion failed: 'D' channel ReleaseAck is corrupt (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 204873:10]
    stop(clock, and(_GEN_198, _T_421), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 204874:10]
    printf(clock, and(_GEN_198, _T_425), "Assertion failed: 'D' channel ReleaseAck is denied (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 204881:10]
    stop(clock, and(_GEN_198, _T_425), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 204882:10]
    node _GEN_208 = and(io_in_d_valid, _T_426) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 204891:10]
    printf(clock, and(_GEN_208, _T_409), "Assertion failed: 'D' channel Grant carries invalid source ID (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 204891:10]
    stop(clock, and(_GEN_208, _T_409), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 204892:10]
    printf(clock, and(_GEN_208, _T_55), "Assertion failed: 'D' channel Grant carries invalid sink ID (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 204898:10]
    stop(clock, and(_GEN_208, _T_55), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 204899:10]
    printf(clock, and(_GEN_208, _T_413), "Assertion failed: 'D' channel Grant smaller than a beat (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 204906:10]
    stop(clock, and(_GEN_208, _T_413), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 204907:10]
    printf(clock, and(_GEN_208, _T_440), "Assertion failed: 'D' channel Grant carries invalid cap param (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 204914:10]
    stop(clock, and(_GEN_208, _T_440), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 204915:10]
    printf(clock, and(_GEN_208, _T_444), "Assertion failed: 'D' channel Grant carries toN param (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 204922:10]
    stop(clock, and(_GEN_208, _T_444), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 204923:10]
    printf(clock, and(_GEN_208, _T_421), "Assertion failed: 'D' channel Grant is corrupt (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 204930:10]
    stop(clock, and(_GEN_208, _T_421), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 204931:10]
    printf(clock, and(_GEN_208, _T_425), "Assertion failed: 'D' channel Grant is denied (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 204939:10]
    stop(clock, and(_GEN_208, _T_425), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 204940:10]
    node _GEN_222 = and(io_in_d_valid, _T_454) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 204949:10]
    printf(clock, and(_GEN_222, _T_409), "Assertion failed: 'D' channel GrantData carries invalid source ID (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 204949:10]
    stop(clock, and(_GEN_222, _T_409), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 204950:10]
    printf(clock, and(_GEN_222, _T_55), "Assertion failed: 'D' channel GrantData carries invalid sink ID (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 204956:10]
    stop(clock, and(_GEN_222, _T_55), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 204957:10]
    printf(clock, and(_GEN_222, _T_413), "Assertion failed: 'D' channel GrantData smaller than a beat (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 204964:10]
    stop(clock, and(_GEN_222, _T_413), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 204965:10]
    printf(clock, and(_GEN_222, _T_440), "Assertion failed: 'D' channel GrantData carries invalid cap param (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 204972:10]
    stop(clock, and(_GEN_222, _T_440), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 204973:10]
    printf(clock, and(_GEN_222, _T_444), "Assertion failed: 'D' channel GrantData carries toN param (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 204980:10]
    stop(clock, and(_GEN_222, _T_444), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 204981:10]
    printf(clock, and(_GEN_222, _T_477), "Assertion failed: 'D' channel GrantData is denied but not corrupt (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 204989:10]
    stop(clock, and(_GEN_222, _T_477), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 204990:10]
    printf(clock, and(_GEN_222, _T_425), "Assertion failed: 'D' channel GrantData is denied (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 204998:10]
    stop(clock, and(_GEN_222, _T_425), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 204999:10]
    node _GEN_236 = and(io_in_d_valid, _T_483) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 205008:10]
    printf(clock, and(_GEN_236, _T_409), "Assertion failed: 'D' channel AccessAck carries invalid source ID (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 205008:10]
    stop(clock, and(_GEN_236, _T_409), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 205009:10]
    printf(clock, and(_GEN_236, _T_417), "Assertion failed: 'D' channel AccessAck carries invalid param (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 205016:10]
    stop(clock, and(_GEN_236, _T_417), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 205017:10]
    printf(clock, and(_GEN_236, _T_421), "Assertion failed: 'D' channel AccessAck is corrupt (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 205024:10]
    stop(clock, and(_GEN_236, _T_421), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 205025:10]
    printf(clock, and(_GEN_236, _T_425), "Assertion failed: 'D' channel AccessAck is denied (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 205033:10]
    stop(clock, and(_GEN_236, _T_425), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 205034:10]
    node _GEN_244 = and(io_in_d_valid, _T_500) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 205043:10]
    printf(clock, and(_GEN_244, _T_409), "Assertion failed: 'D' channel AccessAckData carries invalid source ID (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 205043:10]
    stop(clock, and(_GEN_244, _T_409), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 205044:10]
    printf(clock, and(_GEN_244, _T_417), "Assertion failed: 'D' channel AccessAckData carries invalid param (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 205051:10]
    stop(clock, and(_GEN_244, _T_417), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 205052:10]
    printf(clock, and(_GEN_244, _T_477), "Assertion failed: 'D' channel AccessAckData is denied but not corrupt (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 205060:10]
    stop(clock, and(_GEN_244, _T_477), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 205061:10]
    printf(clock, and(_GEN_244, _T_425), "Assertion failed: 'D' channel AccessAckData is denied (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 205069:10]
    stop(clock, and(_GEN_244, _T_425), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 205070:10]
    node _GEN_252 = and(io_in_d_valid, _T_518) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 205079:10]
    printf(clock, and(_GEN_252, _T_409), "Assertion failed: 'D' channel HintAck carries invalid source ID (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 205079:10]
    stop(clock, and(_GEN_252, _T_409), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 205080:10]
    printf(clock, and(_GEN_252, _T_417), "Assertion failed: 'D' channel HintAck carries invalid param (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 205087:10]
    stop(clock, and(_GEN_252, _T_417), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 205088:10]
    printf(clock, and(_GEN_252, _T_421), "Assertion failed: 'D' channel HintAck is corrupt (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 205095:10]
    stop(clock, and(_GEN_252, _T_421), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 205096:10]
    printf(clock, and(_GEN_252, _T_425), "Assertion failed: 'D' channel HintAck is denied (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 205104:10]
    stop(clock, and(_GEN_252, _T_425), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 205105:10]
    printf(clock, and(_T_548, _T_552), "Assertion failed: 'A' channel opcode changed within multibeat operation (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 205175:8]
    stop(clock, and(_T_548, _T_552), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 205176:8]
    printf(clock, and(_T_548, _T_556), "Assertion failed: 'A' channel param changed within multibeat operation (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 205183:8]
    stop(clock, and(_T_548, _T_556), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 205184:8]
    printf(clock, and(_T_548, _T_560), "Assertion failed: 'A' channel size changed within multibeat operation (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 205191:8]
    stop(clock, and(_T_548, _T_560), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 205192:8]
    printf(clock, and(_T_548, _T_564), "Assertion failed: 'A' channel source changed within multibeat operation (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 205199:8]
    stop(clock, and(_T_548, _T_564), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 205200:8]
    printf(clock, and(_T_548, _T_568), "Assertion failed: 'A' channel address changed with multibeat operation (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 205207:8]
    stop(clock, and(_T_548, _T_568), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 205208:8]
    printf(clock, and(_T_572, _T_576), "Assertion failed: 'D' channel opcode changed within multibeat operation (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 205256:8]
    stop(clock, and(_T_572, _T_576), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 205257:8]
    printf(clock, and(_T_572, _T_580), "Assertion failed: 'D' channel param changed within multibeat operation (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 205264:8]
    stop(clock, and(_T_572, _T_580), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 205265:8]
    printf(clock, and(_T_572, _T_584), "Assertion failed: 'D' channel size changed within multibeat operation (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 205272:8]
    stop(clock, and(_T_572, _T_584), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 205273:8]
    printf(clock, and(_T_572, _T_588), "Assertion failed: 'D' channel source changed within multibeat operation (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 205280:8]
    stop(clock, and(_T_572, _T_588), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 205281:8]
    printf(clock, and(_T_572, _T_592), "Assertion failed: 'D' channel sink changed with multibeat operation (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 205288:8]
    stop(clock, and(_T_572, _T_592), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 205289:8]
    printf(clock, and(_T_572, _T_596), "Assertion failed: 'D' channel denied changed with multibeat operation (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 205296:8]
    stop(clock, and(_T_572, _T_596), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 205297:8]
    printf(clock, and(_T_602, _T_609), "Assertion failed: 'A' channel re-used a source ID (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 205441:8]
    stop(clock, and(_T_602, _T_609), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 205442:8]
    printf(clock, and(_T_613, _T_628), "Assertion failed: 'D' channel acknowledged for nothing inflight (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 205501:8]
    stop(clock, and(_T_613, _T_628), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 205502:8]
    node _GEN_260 = and(_T_613, same_cycle_resp) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 205512:10]
    printf(clock, and(_GEN_260, _T_634), "Assertion failed: 'D' channel contains improper opcode response (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 205512:10]
    stop(clock, and(_GEN_260, _T_634), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 205513:10]
    printf(clock, and(_GEN_260, _T_638), "Assertion failed: 'D' channel contains improper response size (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 205520:10]
    stop(clock, and(_GEN_260, _T_638), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 205521:10]
    node _GEN_264 = not(same_cycle_resp) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 205534:10]
    node _GEN_265 = and(_T_613, _GEN_264) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 205534:10]
    printf(clock, and(_GEN_265, _T_646), "Assertion failed: 'D' channel contains improper opcode response (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 205534:10]
    stop(clock, and(_GEN_265, _T_646), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 205535:10]
    printf(clock, and(_GEN_265, _T_650), "Assertion failed: 'D' channel contains improper response size (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 205542:10]
    stop(clock, and(_GEN_265, _T_650), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 205543:10]
    printf(clock, and(_T_657, _T_662), "Assertion failed: ready check\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 205561:8]
    stop(clock, and(_T_657, _T_662), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 205562:8]
    printf(clock, _T_669, "Assertion failed: 'A' and 'D' concurrent, despite minlatency 3 (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 205573:6]
    stop(clock, _T_669, 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 205574:6]
    printf(clock, _T_678, "Assertion failed: TileLink timeout expired (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 205601:6]
    stop(clock, _T_678, 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 205602:6]
    printf(clock, and(_T_701, _T_714), "Assertion failed: 'D' channel acknowledged for nothing inflight (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 205823:8]
    stop(clock, and(_T_701, _T_714), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 205824:8]
    printf(clock, and(_T_701, _T_722), "Assertion failed: 'D' channel contains improper response size (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 205844:10]
    stop(clock, and(_T_701, _T_722), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 205845:10]
    printf(clock, _T_747, "Assertion failed: TileLink timeout expired (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 205908:6]
    stop(clock, _T_747, 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 205909:6]

  module Repeater_7_inTestHarness : @[chipyard.TestHarness.TinyRocketConfig.fir 205923:2]
    input clock : Clock @[chipyard.TestHarness.TinyRocketConfig.fir 205924:4]
    input reset : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 205925:4]
    input io_repeat : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 205926:4]
    output io_full : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 205926:4]
    output io_enq_ready : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 205926:4]
    input io_enq_valid : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 205926:4]
    input io_enq_bits_opcode : UInt<3> @[chipyard.TestHarness.TinyRocketConfig.fir 205926:4]
    input io_enq_bits_param : UInt<3> @[chipyard.TestHarness.TinyRocketConfig.fir 205926:4]
    input io_enq_bits_size : UInt<3> @[chipyard.TestHarness.TinyRocketConfig.fir 205926:4]
    input io_enq_bits_source : UInt<2> @[chipyard.TestHarness.TinyRocketConfig.fir 205926:4]
    input io_enq_bits_address : UInt<29> @[chipyard.TestHarness.TinyRocketConfig.fir 205926:4]
    input io_enq_bits_mask : UInt<4> @[chipyard.TestHarness.TinyRocketConfig.fir 205926:4]
    input io_enq_bits_corrupt : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 205926:4]
    input io_deq_ready : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 205926:4]
    output io_deq_valid : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 205926:4]
    output io_deq_bits_opcode : UInt<3> @[chipyard.TestHarness.TinyRocketConfig.fir 205926:4]
    output io_deq_bits_param : UInt<3> @[chipyard.TestHarness.TinyRocketConfig.fir 205926:4]
    output io_deq_bits_size : UInt<3> @[chipyard.TestHarness.TinyRocketConfig.fir 205926:4]
    output io_deq_bits_source : UInt<2> @[chipyard.TestHarness.TinyRocketConfig.fir 205926:4]
    output io_deq_bits_address : UInt<29> @[chipyard.TestHarness.TinyRocketConfig.fir 205926:4]
    output io_deq_bits_mask : UInt<4> @[chipyard.TestHarness.TinyRocketConfig.fir 205926:4]
    output io_deq_bits_corrupt : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 205926:4]

    reg full : UInt<1>, clock with :
      reset => (UInt<1>("h0"), full) @[Repeater.scala 19:21 chipyard.TestHarness.TinyRocketConfig.fir 205928:4]
    reg saved_opcode : UInt<3>, clock with :
      reset => (UInt<1>("h0"), saved_opcode) @[Repeater.scala 20:18 chipyard.TestHarness.TinyRocketConfig.fir 205929:4]
    reg saved_param : UInt<3>, clock with :
      reset => (UInt<1>("h0"), saved_param) @[Repeater.scala 20:18 chipyard.TestHarness.TinyRocketConfig.fir 205929:4]
    reg saved_size : UInt<3>, clock with :
      reset => (UInt<1>("h0"), saved_size) @[Repeater.scala 20:18 chipyard.TestHarness.TinyRocketConfig.fir 205929:4]
    reg saved_source : UInt<2>, clock with :
      reset => (UInt<1>("h0"), saved_source) @[Repeater.scala 20:18 chipyard.TestHarness.TinyRocketConfig.fir 205929:4]
    reg saved_address : UInt<29>, clock with :
      reset => (UInt<1>("h0"), saved_address) @[Repeater.scala 20:18 chipyard.TestHarness.TinyRocketConfig.fir 205929:4]
    reg saved_mask : UInt<4>, clock with :
      reset => (UInt<1>("h0"), saved_mask) @[Repeater.scala 20:18 chipyard.TestHarness.TinyRocketConfig.fir 205929:4]
    reg saved_corrupt : UInt<1>, clock with :
      reset => (UInt<1>("h0"), saved_corrupt) @[Repeater.scala 20:18 chipyard.TestHarness.TinyRocketConfig.fir 205929:4]
    node _io_enq_ready_T = not(full) @[Repeater.scala 24:35 chipyard.TestHarness.TinyRocketConfig.fir 205932:4]
    node _T = and(io_enq_ready, io_enq_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.TinyRocketConfig.fir 205945:4]
    node _T_1 = and(_T, io_repeat) @[Repeater.scala 28:23 chipyard.TestHarness.TinyRocketConfig.fir 205946:4]
    node _GEN_0 = or(_T_1, full) @[Repeater.scala 28:38 chipyard.TestHarness.TinyRocketConfig.fir 205947:4 Repeater.scala 28:45 chipyard.TestHarness.TinyRocketConfig.fir 205948:6 Repeater.scala 19:21 chipyard.TestHarness.TinyRocketConfig.fir 205928:4]
    node _T_2 = and(io_deq_ready, io_deq_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.TinyRocketConfig.fir 205958:4]
    node _T_3 = not(io_repeat) @[Repeater.scala 29:26 chipyard.TestHarness.TinyRocketConfig.fir 205959:4]
    node _T_4 = and(_T_2, _T_3) @[Repeater.scala 29:23 chipyard.TestHarness.TinyRocketConfig.fir 205960:4]
    node _GEN_9 = mux(_T_4, UInt<1>("h0"), _GEN_0) @[Repeater.scala 29:38 chipyard.TestHarness.TinyRocketConfig.fir 205961:4 Repeater.scala 29:45 chipyard.TestHarness.TinyRocketConfig.fir 205962:6]
    io_full <= full @[Repeater.scala 26:11 chipyard.TestHarness.TinyRocketConfig.fir 205944:4]
    io_enq_ready <= and(io_deq_ready, _io_enq_ready_T) @[Repeater.scala 24:32 chipyard.TestHarness.TinyRocketConfig.fir 205933:4]
    io_deq_valid <= or(io_enq_valid, full) @[Repeater.scala 23:32 chipyard.TestHarness.TinyRocketConfig.fir 205930:4]
    io_deq_bits_opcode <= mux(full, saved_opcode, io_enq_bits_opcode) @[Repeater.scala 25:21 chipyard.TestHarness.TinyRocketConfig.fir 205935:4]
    io_deq_bits_param <= mux(full, saved_param, io_enq_bits_param) @[Repeater.scala 25:21 chipyard.TestHarness.TinyRocketConfig.fir 205935:4]
    io_deq_bits_size <= mux(full, saved_size, io_enq_bits_size) @[Repeater.scala 25:21 chipyard.TestHarness.TinyRocketConfig.fir 205935:4]
    io_deq_bits_source <= mux(full, saved_source, io_enq_bits_source) @[Repeater.scala 25:21 chipyard.TestHarness.TinyRocketConfig.fir 205935:4]
    io_deq_bits_address <= mux(full, saved_address, io_enq_bits_address) @[Repeater.scala 25:21 chipyard.TestHarness.TinyRocketConfig.fir 205935:4]
    io_deq_bits_mask <= mux(full, saved_mask, io_enq_bits_mask) @[Repeater.scala 25:21 chipyard.TestHarness.TinyRocketConfig.fir 205935:4]
    io_deq_bits_corrupt <= mux(full, saved_corrupt, io_enq_bits_corrupt) @[Repeater.scala 25:21 chipyard.TestHarness.TinyRocketConfig.fir 205935:4]
    full <= mux(reset, UInt<1>("h0"), _GEN_9) @[Repeater.scala 19:21 chipyard.TestHarness.TinyRocketConfig.fir 205928:4 Repeater.scala 19:21 chipyard.TestHarness.TinyRocketConfig.fir 205928:4]
    saved_opcode <= mux(_T_1, io_enq_bits_opcode, saved_opcode) @[Repeater.scala 28:38 chipyard.TestHarness.TinyRocketConfig.fir 205947:4 Repeater.scala 28:62 chipyard.TestHarness.TinyRocketConfig.fir 205956:6 Repeater.scala 20:18 chipyard.TestHarness.TinyRocketConfig.fir 205929:4]
    saved_param <= mux(_T_1, io_enq_bits_param, saved_param) @[Repeater.scala 28:38 chipyard.TestHarness.TinyRocketConfig.fir 205947:4 Repeater.scala 28:62 chipyard.TestHarness.TinyRocketConfig.fir 205955:6 Repeater.scala 20:18 chipyard.TestHarness.TinyRocketConfig.fir 205929:4]
    saved_size <= mux(_T_1, io_enq_bits_size, saved_size) @[Repeater.scala 28:38 chipyard.TestHarness.TinyRocketConfig.fir 205947:4 Repeater.scala 28:62 chipyard.TestHarness.TinyRocketConfig.fir 205954:6 Repeater.scala 20:18 chipyard.TestHarness.TinyRocketConfig.fir 205929:4]
    saved_source <= mux(_T_1, io_enq_bits_source, saved_source) @[Repeater.scala 28:38 chipyard.TestHarness.TinyRocketConfig.fir 205947:4 Repeater.scala 28:62 chipyard.TestHarness.TinyRocketConfig.fir 205953:6 Repeater.scala 20:18 chipyard.TestHarness.TinyRocketConfig.fir 205929:4]
    saved_address <= mux(_T_1, io_enq_bits_address, saved_address) @[Repeater.scala 28:38 chipyard.TestHarness.TinyRocketConfig.fir 205947:4 Repeater.scala 28:62 chipyard.TestHarness.TinyRocketConfig.fir 205952:6 Repeater.scala 20:18 chipyard.TestHarness.TinyRocketConfig.fir 205929:4]
    saved_mask <= mux(_T_1, io_enq_bits_mask, saved_mask) @[Repeater.scala 28:38 chipyard.TestHarness.TinyRocketConfig.fir 205947:4 Repeater.scala 28:62 chipyard.TestHarness.TinyRocketConfig.fir 205951:6 Repeater.scala 20:18 chipyard.TestHarness.TinyRocketConfig.fir 205929:4]
    saved_corrupt <= mux(_T_1, io_enq_bits_corrupt, saved_corrupt) @[Repeater.scala 28:38 chipyard.TestHarness.TinyRocketConfig.fir 205947:4 Repeater.scala 28:62 chipyard.TestHarness.TinyRocketConfig.fir 205949:6 Repeater.scala 20:18 chipyard.TestHarness.TinyRocketConfig.fir 205929:4]

  module TLFragmenter_8_inTestHarness : @[chipyard.TestHarness.TinyRocketConfig.fir 205965:2]
    input clock : Clock @[chipyard.TestHarness.TinyRocketConfig.fir 205966:4]
    input reset : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 205967:4]
    output auto_in_a_ready : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 205968:4]
    input auto_in_a_valid : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 205968:4]
    input auto_in_a_bits_opcode : UInt<3> @[chipyard.TestHarness.TinyRocketConfig.fir 205968:4]
    input auto_in_a_bits_param : UInt<3> @[chipyard.TestHarness.TinyRocketConfig.fir 205968:4]
    input auto_in_a_bits_size : UInt<3> @[chipyard.TestHarness.TinyRocketConfig.fir 205968:4]
    input auto_in_a_bits_source : UInt<2> @[chipyard.TestHarness.TinyRocketConfig.fir 205968:4]
    input auto_in_a_bits_address : UInt<29> @[chipyard.TestHarness.TinyRocketConfig.fir 205968:4]
    input auto_in_a_bits_mask : UInt<4> @[chipyard.TestHarness.TinyRocketConfig.fir 205968:4]
    input auto_in_a_bits_data : UInt<32> @[chipyard.TestHarness.TinyRocketConfig.fir 205968:4]
    input auto_in_a_bits_corrupt : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 205968:4]
    input auto_in_d_ready : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 205968:4]
    output auto_in_d_valid : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 205968:4]
    output auto_in_d_bits_opcode : UInt<3> @[chipyard.TestHarness.TinyRocketConfig.fir 205968:4]
    output auto_in_d_bits_param : UInt<2> @[chipyard.TestHarness.TinyRocketConfig.fir 205968:4]
    output auto_in_d_bits_size : UInt<3> @[chipyard.TestHarness.TinyRocketConfig.fir 205968:4]
    output auto_in_d_bits_source : UInt<2> @[chipyard.TestHarness.TinyRocketConfig.fir 205968:4]
    output auto_in_d_bits_sink : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 205968:4]
    output auto_in_d_bits_denied : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 205968:4]
    output auto_in_d_bits_data : UInt<32> @[chipyard.TestHarness.TinyRocketConfig.fir 205968:4]
    output auto_in_d_bits_corrupt : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 205968:4]
    input auto_out_a_ready : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 205968:4]
    output auto_out_a_valid : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 205968:4]
    output auto_out_a_bits_opcode : UInt<3> @[chipyard.TestHarness.TinyRocketConfig.fir 205968:4]
    output auto_out_a_bits_param : UInt<3> @[chipyard.TestHarness.TinyRocketConfig.fir 205968:4]
    output auto_out_a_bits_size : UInt<2> @[chipyard.TestHarness.TinyRocketConfig.fir 205968:4]
    output auto_out_a_bits_source : UInt<7> @[chipyard.TestHarness.TinyRocketConfig.fir 205968:4]
    output auto_out_a_bits_address : UInt<29> @[chipyard.TestHarness.TinyRocketConfig.fir 205968:4]
    output auto_out_a_bits_mask : UInt<4> @[chipyard.TestHarness.TinyRocketConfig.fir 205968:4]
    output auto_out_a_bits_data : UInt<32> @[chipyard.TestHarness.TinyRocketConfig.fir 205968:4]
    output auto_out_a_bits_corrupt : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 205968:4]
    output auto_out_d_ready : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 205968:4]
    input auto_out_d_valid : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 205968:4]
    input auto_out_d_bits_opcode : UInt<3> @[chipyard.TestHarness.TinyRocketConfig.fir 205968:4]
    input auto_out_d_bits_param : UInt<2> @[chipyard.TestHarness.TinyRocketConfig.fir 205968:4]
    input auto_out_d_bits_size : UInt<2> @[chipyard.TestHarness.TinyRocketConfig.fir 205968:4]
    input auto_out_d_bits_source : UInt<7> @[chipyard.TestHarness.TinyRocketConfig.fir 205968:4]
    input auto_out_d_bits_sink : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 205968:4]
    input auto_out_d_bits_denied : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 205968:4]
    input auto_out_d_bits_data : UInt<32> @[chipyard.TestHarness.TinyRocketConfig.fir 205968:4]
    input auto_out_d_bits_corrupt : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 205968:4]

    inst monitor of TLMonitor_44_inTestHarness @[Nodes.scala 24:25 chipyard.TestHarness.TinyRocketConfig.fir 205975:4]
    inst repeater of Repeater_7_inTestHarness @[Fragmenter.scala 262:30 chipyard.TestHarness.TinyRocketConfig.fir 206077:4]
    reg acknum : UInt<4>, clock with :
      reset => (UInt<1>("h0"), acknum) @[Fragmenter.scala 189:29 chipyard.TestHarness.TinyRocketConfig.fir 206002:4]
    reg dOrig : UInt<3>, clock with :
      reset => (UInt<1>("h0"), dOrig) @[Fragmenter.scala 190:24 chipyard.TestHarness.TinyRocketConfig.fir 206003:4]
    reg dToggle : UInt<1>, clock with :
      reset => (UInt<1>("h0"), dToggle) @[Fragmenter.scala 191:30 chipyard.TestHarness.TinyRocketConfig.fir 206004:4]
    node dFragnum = bits(auto_out_d_bits_source, 3, 0) @[Fragmenter.scala 192:41 chipyard.TestHarness.TinyRocketConfig.fir 206005:4]
    node dFirst = eq(acknum, UInt<4>("h0")) @[Fragmenter.scala 193:29 chipyard.TestHarness.TinyRocketConfig.fir 206006:4]
    node dLast = eq(dFragnum, UInt<4>("h0")) @[Fragmenter.scala 194:30 chipyard.TestHarness.TinyRocketConfig.fir 206007:4]
    node _dsizeOH_T = dshlw(UInt<4>("h1"), auto_out_d_bits_size) @[OneHot.scala 65:12 chipyard.TestHarness.TinyRocketConfig.fir 206009:4]
    node dsizeOH = bits(_dsizeOH_T, 2, 0) @[OneHot.scala 65:27 chipyard.TestHarness.TinyRocketConfig.fir 206010:4]
    node _dsizeOH1_T_1 = dshlw(UInt<5>("h3"), auto_out_d_bits_size) @[package.scala 234:77 chipyard.TestHarness.TinyRocketConfig.fir 206012:4]
    node _dsizeOH1_T_2 = bits(_dsizeOH1_T_1, 1, 0) @[package.scala 234:82 chipyard.TestHarness.TinyRocketConfig.fir 206013:4]
    node dsizeOH1 = not(_dsizeOH1_T_2) @[package.scala 234:46 chipyard.TestHarness.TinyRocketConfig.fir 206014:4]
    node dHasData = bits(auto_out_d_bits_opcode, 0, 0) @[Edges.scala 105:36 chipyard.TestHarness.TinyRocketConfig.fir 206015:4]
    node _ack_decrement_T = shr(dsizeOH, 2) @[Fragmenter.scala 204:60 chipyard.TestHarness.TinyRocketConfig.fir 206031:4]
    node ack_decrement = or(dHasData, _ack_decrement_T) @[Fragmenter.scala 204:32 chipyard.TestHarness.TinyRocketConfig.fir 206032:4]
    node _dFirst_size_T = shl(dFragnum, 2) @[Fragmenter.scala 206:47 chipyard.TestHarness.TinyRocketConfig.fir 206033:4]
    node _GEN_7 = pad(dsizeOH1, 6) @[Fragmenter.scala 206:69 chipyard.TestHarness.TinyRocketConfig.fir 206034:4]
    node dFirst_size_lo = or(_dFirst_size_T, _GEN_7) @[Fragmenter.scala 206:69 chipyard.TestHarness.TinyRocketConfig.fir 206034:4]
    node _dFirst_size_T_1 = shl(dFirst_size_lo, 1) @[package.scala 232:35 chipyard.TestHarness.TinyRocketConfig.fir 206035:4]
    node _dFirst_size_T_2 = or(_dFirst_size_T_1, UInt<7>("h1")) @[package.scala 232:40 chipyard.TestHarness.TinyRocketConfig.fir 206036:4]
    node _dFirst_size_T_3 = cat(UInt<1>("h0"), dFirst_size_lo) @[Cat.scala 30:58 chipyard.TestHarness.TinyRocketConfig.fir 206037:4]
    node _dFirst_size_T_4 = not(_dFirst_size_T_3) @[package.scala 232:53 chipyard.TestHarness.TinyRocketConfig.fir 206038:4]
    node _dFirst_size_T_5 = and(_dFirst_size_T_2, _dFirst_size_T_4) @[package.scala 232:51 chipyard.TestHarness.TinyRocketConfig.fir 206039:4]
    node dFirst_size_hi = bits(_dFirst_size_T_5, 6, 4) @[OneHot.scala 30:18 chipyard.TestHarness.TinyRocketConfig.fir 206040:4]
    node dFirst_size_lo_1 = bits(_dFirst_size_T_5, 3, 0) @[OneHot.scala 31:18 chipyard.TestHarness.TinyRocketConfig.fir 206041:4]
    node dFirst_size_hi_1 = orr(dFirst_size_hi) @[OneHot.scala 32:14 chipyard.TestHarness.TinyRocketConfig.fir 206042:4]
    node _GEN_8 = pad(dFirst_size_hi, 4) @[OneHot.scala 32:28 chipyard.TestHarness.TinyRocketConfig.fir 206043:4]
    node _dFirst_size_T_6 = or(_GEN_8, dFirst_size_lo_1) @[OneHot.scala 32:28 chipyard.TestHarness.TinyRocketConfig.fir 206043:4]
    node dFirst_size_hi_2 = bits(_dFirst_size_T_6, 3, 2) @[OneHot.scala 30:18 chipyard.TestHarness.TinyRocketConfig.fir 206044:4]
    node dFirst_size_lo_2 = bits(_dFirst_size_T_6, 1, 0) @[OneHot.scala 31:18 chipyard.TestHarness.TinyRocketConfig.fir 206045:4]
    node dFirst_size_hi_3 = orr(dFirst_size_hi_2) @[OneHot.scala 32:14 chipyard.TestHarness.TinyRocketConfig.fir 206046:4]
    node _dFirst_size_T_7 = or(dFirst_size_hi_2, dFirst_size_lo_2) @[OneHot.scala 32:28 chipyard.TestHarness.TinyRocketConfig.fir 206047:4]
    node dFirst_size_lo_3 = bits(_dFirst_size_T_7, 1, 1) @[CircuitMath.scala 30:8 chipyard.TestHarness.TinyRocketConfig.fir 206048:4]
    node dFirst_size = cat(dFirst_size_hi_1, cat(dFirst_size_hi_3, dFirst_size_lo_3)) @[Cat.scala 30:58 chipyard.TestHarness.TinyRocketConfig.fir 206050:4]
    node _drop_T = not(dHasData) @[Fragmenter.scala 222:20 chipyard.TestHarness.TinyRocketConfig.fir 206063:4]
    node _drop_T_2 = not(dLast) @[Fragmenter.scala 222:33 chipyard.TestHarness.TinyRocketConfig.fir 206065:4]
    node drop = and(_drop_T, _drop_T_2) @[Fragmenter.scala 222:30 chipyard.TestHarness.TinyRocketConfig.fir 206066:4]
    node bundleOut_0_d_ready = or(auto_in_d_ready, drop) @[Fragmenter.scala 223:35 chipyard.TestHarness.TinyRocketConfig.fir 206067:4]
    node _T_7 = and(bundleOut_0_d_ready, auto_out_d_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.TinyRocketConfig.fir 206051:4]
    node _GEN_9 = pad(ack_decrement, 4) @[Fragmenter.scala 209:55 chipyard.TestHarness.TinyRocketConfig.fir 206053:6]
    node _acknum_T = sub(acknum, _GEN_9) @[Fragmenter.scala 209:55 chipyard.TestHarness.TinyRocketConfig.fir 206053:6]
    node _acknum_T_1 = tail(_acknum_T, 1) @[Fragmenter.scala 209:55 chipyard.TestHarness.TinyRocketConfig.fir 206054:6]
    node _acknum_T_2 = mux(dFirst, dFragnum, _acknum_T_1) @[Fragmenter.scala 209:24 chipyard.TestHarness.TinyRocketConfig.fir 206055:6]
    node _dToggle_T = bits(auto_out_d_bits_source, 4, 4) @[Fragmenter.scala 212:41 chipyard.TestHarness.TinyRocketConfig.fir 206059:8]
    node _GEN_0 = mux(dFirst, dFirst_size, dOrig) @[Fragmenter.scala 210:25 chipyard.TestHarness.TinyRocketConfig.fir 206057:6 Fragmenter.scala 211:19 chipyard.TestHarness.TinyRocketConfig.fir 206058:8 Fragmenter.scala 190:24 chipyard.TestHarness.TinyRocketConfig.fir 206003:4]
    node _GEN_1 = mux(dFirst, _dToggle_T, dToggle) @[Fragmenter.scala 210:25 chipyard.TestHarness.TinyRocketConfig.fir 206057:6 Fragmenter.scala 212:21 chipyard.TestHarness.TinyRocketConfig.fir 206060:8 Fragmenter.scala 191:30 chipyard.TestHarness.TinyRocketConfig.fir 206004:4]
    node _GEN_2 = mux(_T_7, _acknum_T_2, acknum) @[Fragmenter.scala 208:29 chipyard.TestHarness.TinyRocketConfig.fir 206052:4 Fragmenter.scala 209:18 chipyard.TestHarness.TinyRocketConfig.fir 206056:6 Fragmenter.scala 189:29 chipyard.TestHarness.TinyRocketConfig.fir 206002:4]
    node _GEN_4 = mux(_T_7, _GEN_1, dToggle) @[Fragmenter.scala 208:29 chipyard.TestHarness.TinyRocketConfig.fir 206052:4 Fragmenter.scala 191:30 chipyard.TestHarness.TinyRocketConfig.fir 206004:4]
    node _bundleIn_0_d_valid_T = not(drop) @[Fragmenter.scala 224:39 chipyard.TestHarness.TinyRocketConfig.fir 206069:4]
    node _aFrag_T = gt(repeater.io_deq_bits_size, UInt<3>("h2")) @[Fragmenter.scala 285:31 chipyard.TestHarness.TinyRocketConfig.fir 206102:4]
    node aFrag = mux(_aFrag_T, UInt<3>("h2"), repeater.io_deq_bits_size) @[Fragmenter.scala 285:24 chipyard.TestHarness.TinyRocketConfig.fir 206103:4]
    node _aOrigOH1_T_1 = dshlw(UInt<13>("h3f"), repeater.io_deq_bits_size) @[package.scala 234:77 chipyard.TestHarness.TinyRocketConfig.fir 206105:4]
    node _aOrigOH1_T_2 = bits(_aOrigOH1_T_1, 5, 0) @[package.scala 234:82 chipyard.TestHarness.TinyRocketConfig.fir 206106:4]
    node aOrigOH1 = not(_aOrigOH1_T_2) @[package.scala 234:46 chipyard.TestHarness.TinyRocketConfig.fir 206107:4]
    node _aFragOH1_T_1 = dshlw(UInt<9>("h3"), aFrag) @[package.scala 234:77 chipyard.TestHarness.TinyRocketConfig.fir 206109:4]
    node _aFragOH1_T_2 = bits(_aFragOH1_T_1, 1, 0) @[package.scala 234:82 chipyard.TestHarness.TinyRocketConfig.fir 206110:4]
    node aFragOH1 = not(_aFragOH1_T_2) @[package.scala 234:46 chipyard.TestHarness.TinyRocketConfig.fir 206111:4]
    node _aHasData_opdata_T = bits(repeater.io_deq_bits_opcode, 2, 2) @[Edges.scala 91:37 chipyard.TestHarness.TinyRocketConfig.fir 206112:4]
    node aHasData = not(_aHasData_opdata_T) @[Edges.scala 91:28 chipyard.TestHarness.TinyRocketConfig.fir 206113:4]
    reg gennum : UInt<4>, clock with :
      reset => (UInt<1>("h0"), gennum) @[Fragmenter.scala 291:29 chipyard.TestHarness.TinyRocketConfig.fir 206115:4]
    node aFirst = eq(gennum, UInt<4>("h0")) @[Fragmenter.scala 292:29 chipyard.TestHarness.TinyRocketConfig.fir 206116:4]
    node _old_gennum1_T = shr(aOrigOH1, 2) @[Fragmenter.scala 293:48 chipyard.TestHarness.TinyRocketConfig.fir 206117:4]
    node _old_gennum1_T_1 = sub(gennum, UInt<4>("h1")) @[Fragmenter.scala 293:79 chipyard.TestHarness.TinyRocketConfig.fir 206118:4]
    node _old_gennum1_T_2 = tail(_old_gennum1_T_1, 1) @[Fragmenter.scala 293:79 chipyard.TestHarness.TinyRocketConfig.fir 206119:4]
    node old_gennum1 = mux(aFirst, _old_gennum1_T, _old_gennum1_T_2) @[Fragmenter.scala 293:30 chipyard.TestHarness.TinyRocketConfig.fir 206120:4]
    node _new_gennum_T = not(old_gennum1) @[Fragmenter.scala 294:28 chipyard.TestHarness.TinyRocketConfig.fir 206121:4]
    node new_gennum = not(_new_gennum_T) @[Fragmenter.scala 294:26 chipyard.TestHarness.TinyRocketConfig.fir 206124:4]
    reg aToggle_r : UInt<1>, clock with :
      reset => (UInt<1>("h0"), aToggle_r) @[Reg.scala 15:16 chipyard.TestHarness.TinyRocketConfig.fir 206131:4]
    node _GEN_5 = mux(aFirst, dToggle, aToggle_r) @[Reg.scala 16:19 chipyard.TestHarness.TinyRocketConfig.fir 206132:4 Reg.scala 16:23 chipyard.TestHarness.TinyRocketConfig.fir 206133:6 Reg.scala 15:16 chipyard.TestHarness.TinyRocketConfig.fir 206131:4]
    node bundleOut_0_a_bits_source_hi_lo = not(_GEN_5) @[Fragmenter.scala 297:23 chipyard.TestHarness.TinyRocketConfig.fir 206136:4]
    node bundleOut_0_a_valid = repeater.io_deq_valid @[Nodes.scala 1207:84 chipyard.TestHarness.TinyRocketConfig.fir 205998:4 Fragmenter.scala 303:15 chipyard.TestHarness.TinyRocketConfig.fir 206145:4]
    node _T_8 = and(auto_out_a_ready, bundleOut_0_a_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.TinyRocketConfig.fir 206137:4]
    node _GEN_6 = mux(_T_8, new_gennum, gennum) @[Fragmenter.scala 300:29 chipyard.TestHarness.TinyRocketConfig.fir 206138:4 Fragmenter.scala 300:38 chipyard.TestHarness.TinyRocketConfig.fir 206139:6 Fragmenter.scala 291:29 chipyard.TestHarness.TinyRocketConfig.fir 206115:4]
    node _repeater_io_repeat_T = not(aHasData) @[Fragmenter.scala 302:31 chipyard.TestHarness.TinyRocketConfig.fir 206141:4]
    node _repeater_io_repeat_T_1 = neq(new_gennum, UInt<4>("h0")) @[Fragmenter.scala 302:53 chipyard.TestHarness.TinyRocketConfig.fir 206142:4]
    node _bundleOut_0_a_bits_address_T = shl(old_gennum1, 2) @[Fragmenter.scala 304:65 chipyard.TestHarness.TinyRocketConfig.fir 206146:4]
    node _bundleOut_0_a_bits_address_T_1 = not(aOrigOH1) @[Fragmenter.scala 304:90 chipyard.TestHarness.TinyRocketConfig.fir 206147:4]
    node _bundleOut_0_a_bits_address_T_2 = or(_bundleOut_0_a_bits_address_T, _bundleOut_0_a_bits_address_T_1) @[Fragmenter.scala 304:88 chipyard.TestHarness.TinyRocketConfig.fir 206148:4]
    node _GEN_10 = pad(aFragOH1, 6) @[Fragmenter.scala 304:100 chipyard.TestHarness.TinyRocketConfig.fir 206149:4]
    node _bundleOut_0_a_bits_address_T_3 = or(_bundleOut_0_a_bits_address_T_2, _GEN_10) @[Fragmenter.scala 304:100 chipyard.TestHarness.TinyRocketConfig.fir 206149:4]
    node _bundleOut_0_a_bits_address_T_4 = or(_bundleOut_0_a_bits_address_T_3, UInt<6>("h3")) @[Fragmenter.scala 304:111 chipyard.TestHarness.TinyRocketConfig.fir 206150:4]
    node _bundleOut_0_a_bits_address_T_5 = not(_bundleOut_0_a_bits_address_T_4) @[Fragmenter.scala 304:51 chipyard.TestHarness.TinyRocketConfig.fir 206151:4]
    node _GEN_11 = pad(_bundleOut_0_a_bits_address_T_5, 29) @[Fragmenter.scala 304:49 chipyard.TestHarness.TinyRocketConfig.fir 206152:4]
    node bundleOut_0_a_bits_source_hi = cat(repeater.io_deq_bits_source, bundleOut_0_a_bits_source_hi_lo) @[Cat.scala 30:58 chipyard.TestHarness.TinyRocketConfig.fir 206154:4]
    node _T_9 = not(repeater.io_full) @[Fragmenter.scala 309:17 chipyard.TestHarness.TinyRocketConfig.fir 206158:4]
    node _T_11 = or(_T_9, _repeater_io_repeat_T) @[Fragmenter.scala 309:35 chipyard.TestHarness.TinyRocketConfig.fir 206160:4]
    node _T_13 = or(_T_11, reset) @[Fragmenter.scala 309:16 chipyard.TestHarness.TinyRocketConfig.fir 206162:4]
    node _T_14 = not(_T_13) @[Fragmenter.scala 309:16 chipyard.TestHarness.TinyRocketConfig.fir 206163:4]
    node _T_16 = eq(repeater.io_deq_bits_mask, UInt<4>("hf")) @[Fragmenter.scala 312:53 chipyard.TestHarness.TinyRocketConfig.fir 206170:4]
    node _T_17 = or(_T_9, _T_16) @[Fragmenter.scala 312:35 chipyard.TestHarness.TinyRocketConfig.fir 206171:4]
    node _T_19 = or(_T_17, reset) @[Fragmenter.scala 312:16 chipyard.TestHarness.TinyRocketConfig.fir 206173:4]
    node _T_20 = not(_T_19) @[Fragmenter.scala 312:16 chipyard.TestHarness.TinyRocketConfig.fir 206174:4]
    auto_in_a_ready <= repeater.io_enq_ready @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 205973:4 Fragmenter.scala 263:25 chipyard.TestHarness.TinyRocketConfig.fir 206081:4]
    auto_in_d_valid <= and(auto_out_d_valid, _bundleIn_0_d_valid_T) @[Fragmenter.scala 224:36 chipyard.TestHarness.TinyRocketConfig.fir 206070:4]
    auto_in_d_bits_opcode <= auto_out_d_bits_opcode @[Nodes.scala 1207:84 chipyard.TestHarness.TinyRocketConfig.fir 205998:4 LazyModule.scala 311:12 chipyard.TestHarness.TinyRocketConfig.fir 206000:4]
    auto_in_d_bits_param <= auto_out_d_bits_param @[Nodes.scala 1207:84 chipyard.TestHarness.TinyRocketConfig.fir 205998:4 LazyModule.scala 311:12 chipyard.TestHarness.TinyRocketConfig.fir 206000:4]
    auto_in_d_bits_size <= mux(dFirst, dFirst_size, dOrig) @[Fragmenter.scala 227:32 chipyard.TestHarness.TinyRocketConfig.fir 206075:4]
    auto_in_d_bits_source <= shr(auto_out_d_bits_source, 5) @[Fragmenter.scala 226:47 chipyard.TestHarness.TinyRocketConfig.fir 206073:4]
    auto_in_d_bits_sink <= auto_out_d_bits_sink @[Nodes.scala 1207:84 chipyard.TestHarness.TinyRocketConfig.fir 205998:4 LazyModule.scala 311:12 chipyard.TestHarness.TinyRocketConfig.fir 206000:4]
    auto_in_d_bits_denied <= auto_out_d_bits_denied @[Nodes.scala 1207:84 chipyard.TestHarness.TinyRocketConfig.fir 205998:4 LazyModule.scala 311:12 chipyard.TestHarness.TinyRocketConfig.fir 206000:4]
    auto_in_d_bits_data <= auto_out_d_bits_data @[Nodes.scala 1207:84 chipyard.TestHarness.TinyRocketConfig.fir 205998:4 LazyModule.scala 311:12 chipyard.TestHarness.TinyRocketConfig.fir 206000:4]
    auto_in_d_bits_corrupt <= auto_out_d_bits_corrupt @[Nodes.scala 1207:84 chipyard.TestHarness.TinyRocketConfig.fir 205998:4 LazyModule.scala 311:12 chipyard.TestHarness.TinyRocketConfig.fir 206000:4]
    auto_out_a_valid <= repeater.io_deq_valid @[Nodes.scala 1207:84 chipyard.TestHarness.TinyRocketConfig.fir 205998:4 Fragmenter.scala 303:15 chipyard.TestHarness.TinyRocketConfig.fir 206145:4]
    auto_out_a_bits_opcode <= repeater.io_deq_bits_opcode @[Nodes.scala 1207:84 chipyard.TestHarness.TinyRocketConfig.fir 205998:4 Fragmenter.scala 303:15 chipyard.TestHarness.TinyRocketConfig.fir 206145:4]
    auto_out_a_bits_param <= repeater.io_deq_bits_param @[Nodes.scala 1207:84 chipyard.TestHarness.TinyRocketConfig.fir 205998:4 Fragmenter.scala 303:15 chipyard.TestHarness.TinyRocketConfig.fir 206145:4]
    auto_out_a_bits_size <= bits(aFrag, 1, 0) @[Nodes.scala 1207:84 chipyard.TestHarness.TinyRocketConfig.fir 205998:4 Fragmenter.scala 306:25 chipyard.TestHarness.TinyRocketConfig.fir 206157:4]
    auto_out_a_bits_source <= cat(bundleOut_0_a_bits_source_hi, new_gennum) @[Cat.scala 30:58 chipyard.TestHarness.TinyRocketConfig.fir 206155:4]
    auto_out_a_bits_address <= or(repeater.io_deq_bits_address, _GEN_11) @[Fragmenter.scala 304:49 chipyard.TestHarness.TinyRocketConfig.fir 206152:4]
    auto_out_a_bits_mask <= mux(repeater.io_full, UInt<4>("hf"), auto_in_a_bits_mask) @[Fragmenter.scala 313:31 chipyard.TestHarness.TinyRocketConfig.fir 206179:4]
    auto_out_a_bits_data <= auto_in_a_bits_data @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 205973:4 LazyModule.scala 309:16 chipyard.TestHarness.TinyRocketConfig.fir 206001:4]
    auto_out_a_bits_corrupt <= repeater.io_deq_bits_corrupt @[Nodes.scala 1207:84 chipyard.TestHarness.TinyRocketConfig.fir 205998:4 Fragmenter.scala 303:15 chipyard.TestHarness.TinyRocketConfig.fir 206145:4]
    auto_out_d_ready <= or(auto_in_d_ready, drop) @[Fragmenter.scala 223:35 chipyard.TestHarness.TinyRocketConfig.fir 206067:4]
    monitor.clock <= clock @[chipyard.TestHarness.TinyRocketConfig.fir 205976:4]
    monitor.reset <= reset @[chipyard.TestHarness.TinyRocketConfig.fir 205977:4]
    monitor.io_in_a_ready <= repeater.io_enq_ready @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 205973:4 Fragmenter.scala 263:25 chipyard.TestHarness.TinyRocketConfig.fir 206081:4]
    monitor.io_in_a_valid <= auto_in_a_valid @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 205973:4 LazyModule.scala 309:16 chipyard.TestHarness.TinyRocketConfig.fir 206001:4]
    monitor.io_in_a_bits_opcode <= auto_in_a_bits_opcode @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 205973:4 LazyModule.scala 309:16 chipyard.TestHarness.TinyRocketConfig.fir 206001:4]
    monitor.io_in_a_bits_param <= auto_in_a_bits_param @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 205973:4 LazyModule.scala 309:16 chipyard.TestHarness.TinyRocketConfig.fir 206001:4]
    monitor.io_in_a_bits_size <= auto_in_a_bits_size @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 205973:4 LazyModule.scala 309:16 chipyard.TestHarness.TinyRocketConfig.fir 206001:4]
    monitor.io_in_a_bits_source <= auto_in_a_bits_source @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 205973:4 LazyModule.scala 309:16 chipyard.TestHarness.TinyRocketConfig.fir 206001:4]
    monitor.io_in_a_bits_address <= auto_in_a_bits_address @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 205973:4 LazyModule.scala 309:16 chipyard.TestHarness.TinyRocketConfig.fir 206001:4]
    monitor.io_in_a_bits_mask <= auto_in_a_bits_mask @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 205973:4 LazyModule.scala 309:16 chipyard.TestHarness.TinyRocketConfig.fir 206001:4]
    monitor.io_in_a_bits_corrupt <= auto_in_a_bits_corrupt @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 205973:4 LazyModule.scala 309:16 chipyard.TestHarness.TinyRocketConfig.fir 206001:4]
    monitor.io_in_d_ready <= auto_in_d_ready @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 205973:4 LazyModule.scala 309:16 chipyard.TestHarness.TinyRocketConfig.fir 206001:4]
    monitor.io_in_d_valid <= and(auto_out_d_valid, _bundleIn_0_d_valid_T) @[Fragmenter.scala 224:36 chipyard.TestHarness.TinyRocketConfig.fir 206070:4]
    monitor.io_in_d_bits_opcode <= auto_out_d_bits_opcode @[Nodes.scala 1207:84 chipyard.TestHarness.TinyRocketConfig.fir 205998:4 LazyModule.scala 311:12 chipyard.TestHarness.TinyRocketConfig.fir 206000:4]
    monitor.io_in_d_bits_param <= auto_out_d_bits_param @[Nodes.scala 1207:84 chipyard.TestHarness.TinyRocketConfig.fir 205998:4 LazyModule.scala 311:12 chipyard.TestHarness.TinyRocketConfig.fir 206000:4]
    monitor.io_in_d_bits_size <= mux(dFirst, dFirst_size, dOrig) @[Fragmenter.scala 227:32 chipyard.TestHarness.TinyRocketConfig.fir 206075:4]
    monitor.io_in_d_bits_source <= shr(auto_out_d_bits_source, 5) @[Fragmenter.scala 226:47 chipyard.TestHarness.TinyRocketConfig.fir 206073:4]
    monitor.io_in_d_bits_sink <= auto_out_d_bits_sink @[Nodes.scala 1207:84 chipyard.TestHarness.TinyRocketConfig.fir 205998:4 LazyModule.scala 311:12 chipyard.TestHarness.TinyRocketConfig.fir 206000:4]
    monitor.io_in_d_bits_denied <= auto_out_d_bits_denied @[Nodes.scala 1207:84 chipyard.TestHarness.TinyRocketConfig.fir 205998:4 LazyModule.scala 311:12 chipyard.TestHarness.TinyRocketConfig.fir 206000:4]
    monitor.io_in_d_bits_corrupt <= auto_out_d_bits_corrupt @[Nodes.scala 1207:84 chipyard.TestHarness.TinyRocketConfig.fir 205998:4 LazyModule.scala 311:12 chipyard.TestHarness.TinyRocketConfig.fir 206000:4]
    acknum <= mux(reset, UInt<4>("h0"), _GEN_2) @[Fragmenter.scala 189:29 chipyard.TestHarness.TinyRocketConfig.fir 206002:4 Fragmenter.scala 189:29 chipyard.TestHarness.TinyRocketConfig.fir 206002:4]
    dOrig <= mux(_T_7, _GEN_0, dOrig) @[Fragmenter.scala 208:29 chipyard.TestHarness.TinyRocketConfig.fir 206052:4 Fragmenter.scala 190:24 chipyard.TestHarness.TinyRocketConfig.fir 206003:4]
    dToggle <= mux(reset, UInt<1>("h0"), _GEN_4) @[Fragmenter.scala 191:30 chipyard.TestHarness.TinyRocketConfig.fir 206004:4 Fragmenter.scala 191:30 chipyard.TestHarness.TinyRocketConfig.fir 206004:4]
    repeater.clock <= clock @[chipyard.TestHarness.TinyRocketConfig.fir 206079:4]
    repeater.reset <= reset @[chipyard.TestHarness.TinyRocketConfig.fir 206080:4]
    repeater.io_repeat <= and(_repeater_io_repeat_T, _repeater_io_repeat_T_1) @[Fragmenter.scala 302:41 chipyard.TestHarness.TinyRocketConfig.fir 206143:4]
    repeater.io_enq_valid <= auto_in_a_valid @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 205973:4 LazyModule.scala 309:16 chipyard.TestHarness.TinyRocketConfig.fir 206001:4]
    repeater.io_enq_bits_opcode <= auto_in_a_bits_opcode @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 205973:4 LazyModule.scala 309:16 chipyard.TestHarness.TinyRocketConfig.fir 206001:4]
    repeater.io_enq_bits_param <= auto_in_a_bits_param @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 205973:4 LazyModule.scala 309:16 chipyard.TestHarness.TinyRocketConfig.fir 206001:4]
    repeater.io_enq_bits_size <= auto_in_a_bits_size @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 205973:4 LazyModule.scala 309:16 chipyard.TestHarness.TinyRocketConfig.fir 206001:4]
    repeater.io_enq_bits_source <= auto_in_a_bits_source @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 205973:4 LazyModule.scala 309:16 chipyard.TestHarness.TinyRocketConfig.fir 206001:4]
    repeater.io_enq_bits_address <= auto_in_a_bits_address @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 205973:4 LazyModule.scala 309:16 chipyard.TestHarness.TinyRocketConfig.fir 206001:4]
    repeater.io_enq_bits_mask <= auto_in_a_bits_mask @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 205973:4 LazyModule.scala 309:16 chipyard.TestHarness.TinyRocketConfig.fir 206001:4]
    repeater.io_enq_bits_corrupt <= auto_in_a_bits_corrupt @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 205973:4 LazyModule.scala 309:16 chipyard.TestHarness.TinyRocketConfig.fir 206001:4]
    repeater.io_deq_ready <= auto_out_a_ready @[Nodes.scala 1207:84 chipyard.TestHarness.TinyRocketConfig.fir 205998:4 LazyModule.scala 311:12 chipyard.TestHarness.TinyRocketConfig.fir 206000:4]
    gennum <= mux(reset, UInt<4>("h0"), _GEN_6) @[Fragmenter.scala 291:29 chipyard.TestHarness.TinyRocketConfig.fir 206115:4 Fragmenter.scala 291:29 chipyard.TestHarness.TinyRocketConfig.fir 206115:4]
    aToggle_r <= mux(aFirst, dToggle, aToggle_r) @[Reg.scala 16:19 chipyard.TestHarness.TinyRocketConfig.fir 206132:4 Reg.scala 16:23 chipyard.TestHarness.TinyRocketConfig.fir 206133:6 Reg.scala 15:16 chipyard.TestHarness.TinyRocketConfig.fir 206131:4]
    printf(clock, _T_14, "Assertion failed\n    at Fragmenter.scala:309 assert (!repeater.io.full || !aHasData)\n") @[Fragmenter.scala 309:16 chipyard.TestHarness.TinyRocketConfig.fir 206165:6]
    stop(clock, _T_14, 1) @[Fragmenter.scala 309:16 chipyard.TestHarness.TinyRocketConfig.fir 206166:6]
    printf(clock, _T_20, "Assertion failed\n    at Fragmenter.scala:312 assert (!repeater.io.full || in_a.bits.mask === fullMask)\n") @[Fragmenter.scala 312:16 chipyard.TestHarness.TinyRocketConfig.fir 206176:6]
    stop(clock, _T_20, 1) @[Fragmenter.scala 312:16 chipyard.TestHarness.TinyRocketConfig.fir 206177:6]

  module TLMonitor_45_inTestHarness : @[chipyard.TestHarness.TinyRocketConfig.fir 206217:2]
    input clock : Clock @[chipyard.TestHarness.TinyRocketConfig.fir 206218:4]
    input reset : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 206219:4]
    input io_in_a_ready : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 206220:4]
    input io_in_a_valid : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 206220:4]
    input io_in_a_bits_opcode : UInt<3> @[chipyard.TestHarness.TinyRocketConfig.fir 206220:4]
    input io_in_a_bits_size : UInt<4> @[chipyard.TestHarness.TinyRocketConfig.fir 206220:4]
    input io_in_a_bits_address : UInt<32> @[chipyard.TestHarness.TinyRocketConfig.fir 206220:4]
    input io_in_a_bits_mask : UInt<4> @[chipyard.TestHarness.TinyRocketConfig.fir 206220:4]
    input io_in_d_ready : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 206220:4]
    input io_in_d_valid : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 206220:4]
    input io_in_d_bits_opcode : UInt<3> @[chipyard.TestHarness.TinyRocketConfig.fir 206220:4]
    input io_in_d_bits_param : UInt<2> @[chipyard.TestHarness.TinyRocketConfig.fir 206220:4]
    input io_in_d_bits_size : UInt<4> @[chipyard.TestHarness.TinyRocketConfig.fir 206220:4]
    input io_in_d_bits_source : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 206220:4]
    input io_in_d_bits_sink : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 206220:4]
    input io_in_d_bits_denied : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 206220:4]
    input io_in_d_bits_corrupt : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 206220:4]

    inst plusarg_reader of plusarg_reader @[PlusArg.scala 80:11 chipyard.TestHarness.TinyRocketConfig.fir 208057:4]
    inst plusarg_reader_1 of plusarg_reader @[PlusArg.scala 80:11 chipyard.TestHarness.TinyRocketConfig.fir 208364:4]
    node _is_aligned_mask_T_1 = dshlw(UInt<27>("hfff"), io_in_a_bits_size) @[package.scala 234:77 chipyard.TestHarness.TinyRocketConfig.fir 206236:6]
    node _is_aligned_mask_T_2 = bits(_is_aligned_mask_T_1, 11, 0) @[package.scala 234:82 chipyard.TestHarness.TinyRocketConfig.fir 206237:6]
    node is_aligned_mask = not(_is_aligned_mask_T_2) @[package.scala 234:46 chipyard.TestHarness.TinyRocketConfig.fir 206238:6]
    node _GEN_71 = pad(is_aligned_mask, 32) @[Edges.scala 20:16 chipyard.TestHarness.TinyRocketConfig.fir 206239:6]
    node _is_aligned_T = and(io_in_a_bits_address, _GEN_71) @[Edges.scala 20:16 chipyard.TestHarness.TinyRocketConfig.fir 206239:6]
    node is_aligned = eq(_is_aligned_T, UInt<32>("h0")) @[Edges.scala 20:24 chipyard.TestHarness.TinyRocketConfig.fir 206240:6]
    node mask_sizeOH_shiftAmount = bits(io_in_a_bits_size, 0, 0) @[OneHot.scala 64:49 chipyard.TestHarness.TinyRocketConfig.fir 206242:6]
    node _mask_sizeOH_T_1 = dshlw(UInt<2>("h1"), mask_sizeOH_shiftAmount) @[OneHot.scala 65:12 chipyard.TestHarness.TinyRocketConfig.fir 206243:6]
    node mask_sizeOH = or(_mask_sizeOH_T_1, UInt<2>("h1")) @[Misc.scala 201:81 chipyard.TestHarness.TinyRocketConfig.fir 206245:6]
    node _mask_T = geq(io_in_a_bits_size, UInt<4>("h2")) @[Misc.scala 205:21 chipyard.TestHarness.TinyRocketConfig.fir 206246:6]
    node mask_size = bits(mask_sizeOH, 1, 1) @[Misc.scala 208:26 chipyard.TestHarness.TinyRocketConfig.fir 206247:6]
    node mask_bit = bits(io_in_a_bits_address, 1, 1) @[Misc.scala 209:26 chipyard.TestHarness.TinyRocketConfig.fir 206248:6]
    node mask_nbit = not(mask_bit) @[Misc.scala 210:20 chipyard.TestHarness.TinyRocketConfig.fir 206249:6]
    node _mask_acc_T = and(mask_size, mask_nbit) @[Misc.scala 214:38 chipyard.TestHarness.TinyRocketConfig.fir 206251:6]
    node mask_acc = or(_mask_T, _mask_acc_T) @[Misc.scala 214:29 chipyard.TestHarness.TinyRocketConfig.fir 206252:6]
    node _mask_acc_T_1 = and(mask_size, mask_bit) @[Misc.scala 214:38 chipyard.TestHarness.TinyRocketConfig.fir 206254:6]
    node mask_acc_1 = or(_mask_T, _mask_acc_T_1) @[Misc.scala 214:29 chipyard.TestHarness.TinyRocketConfig.fir 206255:6]
    node mask_size_1 = bits(mask_sizeOH, 0, 0) @[Misc.scala 208:26 chipyard.TestHarness.TinyRocketConfig.fir 206256:6]
    node mask_bit_1 = bits(io_in_a_bits_address, 0, 0) @[Misc.scala 209:26 chipyard.TestHarness.TinyRocketConfig.fir 206257:6]
    node mask_nbit_1 = not(mask_bit_1) @[Misc.scala 210:20 chipyard.TestHarness.TinyRocketConfig.fir 206258:6]
    node mask_eq_2 = and(mask_nbit, mask_nbit_1) @[Misc.scala 213:27 chipyard.TestHarness.TinyRocketConfig.fir 206259:6]
    node _mask_acc_T_2 = and(mask_size_1, mask_eq_2) @[Misc.scala 214:38 chipyard.TestHarness.TinyRocketConfig.fir 206260:6]
    node mask_lo_lo = or(mask_acc, _mask_acc_T_2) @[Misc.scala 214:29 chipyard.TestHarness.TinyRocketConfig.fir 206261:6]
    node mask_eq_3 = and(mask_nbit, mask_bit_1) @[Misc.scala 213:27 chipyard.TestHarness.TinyRocketConfig.fir 206262:6]
    node _mask_acc_T_3 = and(mask_size_1, mask_eq_3) @[Misc.scala 214:38 chipyard.TestHarness.TinyRocketConfig.fir 206263:6]
    node mask_lo_hi = or(mask_acc, _mask_acc_T_3) @[Misc.scala 214:29 chipyard.TestHarness.TinyRocketConfig.fir 206264:6]
    node mask_eq_4 = and(mask_bit, mask_nbit_1) @[Misc.scala 213:27 chipyard.TestHarness.TinyRocketConfig.fir 206265:6]
    node _mask_acc_T_4 = and(mask_size_1, mask_eq_4) @[Misc.scala 214:38 chipyard.TestHarness.TinyRocketConfig.fir 206266:6]
    node mask_hi_lo = or(mask_acc_1, _mask_acc_T_4) @[Misc.scala 214:29 chipyard.TestHarness.TinyRocketConfig.fir 206267:6]
    node mask_eq_5 = and(mask_bit, mask_bit_1) @[Misc.scala 213:27 chipyard.TestHarness.TinyRocketConfig.fir 206268:6]
    node _mask_acc_T_5 = and(mask_size_1, mask_eq_5) @[Misc.scala 214:38 chipyard.TestHarness.TinyRocketConfig.fir 206269:6]
    node mask_hi_hi = or(mask_acc_1, _mask_acc_T_5) @[Misc.scala 214:29 chipyard.TestHarness.TinyRocketConfig.fir 206270:6]
    node mask = cat(cat(mask_hi_hi, mask_hi_lo), cat(mask_lo_hi, mask_lo_lo)) @[Cat.scala 30:58 chipyard.TestHarness.TinyRocketConfig.fir 206273:6]
    node _T_7 = cvt(io_in_a_bits_address) @[Parameters.scala 137:49 chipyard.TestHarness.TinyRocketConfig.fir 206277:6]
    node _T_15 = eq(io_in_a_bits_opcode, UInt<3>("h6")) @[Monitor.scala 81:25 chipyard.TestHarness.TinyRocketConfig.fir 206289:6]
    node _T_17 = leq(io_in_a_bits_size, UInt<4>("hc")) @[Parameters.scala 92:42 chipyard.TestHarness.TinyRocketConfig.fir 206292:8]
    node _T_25 = and(_T_7, SInt<33>("h-101000")) @[Parameters.scala 137:52 chipyard.TestHarness.TinyRocketConfig.fir 206300:8]
    node _T_26 = asSInt(_T_25) @[Parameters.scala 137:52 chipyard.TestHarness.TinyRocketConfig.fir 206301:8]
    node _T_27 = eq(_T_26, SInt<33>("h0")) @[Parameters.scala 137:67 chipyard.TestHarness.TinyRocketConfig.fir 206302:8]
    node _T_28 = xor(io_in_a_bits_address, UInt<32>("h3000")) @[Parameters.scala 137:31 chipyard.TestHarness.TinyRocketConfig.fir 206303:8]
    node _T_29 = cvt(_T_28) @[Parameters.scala 137:49 chipyard.TestHarness.TinyRocketConfig.fir 206304:8]
    node _T_30 = and(_T_29, SInt<33>("h-1000")) @[Parameters.scala 137:52 chipyard.TestHarness.TinyRocketConfig.fir 206305:8]
    node _T_31 = asSInt(_T_30) @[Parameters.scala 137:52 chipyard.TestHarness.TinyRocketConfig.fir 206306:8]
    node _T_32 = eq(_T_31, SInt<33>("h0")) @[Parameters.scala 137:67 chipyard.TestHarness.TinyRocketConfig.fir 206307:8]
    node _T_33 = xor(io_in_a_bits_address, UInt<32>("h10000")) @[Parameters.scala 137:31 chipyard.TestHarness.TinyRocketConfig.fir 206308:8]
    node _T_34 = cvt(_T_33) @[Parameters.scala 137:49 chipyard.TestHarness.TinyRocketConfig.fir 206309:8]
    node _T_35 = and(_T_34, SInt<33>("h-10000")) @[Parameters.scala 137:52 chipyard.TestHarness.TinyRocketConfig.fir 206310:8]
    node _T_36 = asSInt(_T_35) @[Parameters.scala 137:52 chipyard.TestHarness.TinyRocketConfig.fir 206311:8]
    node _T_37 = eq(_T_36, SInt<33>("h0")) @[Parameters.scala 137:67 chipyard.TestHarness.TinyRocketConfig.fir 206312:8]
    node _T_38 = xor(io_in_a_bits_address, UInt<32>("h2000000")) @[Parameters.scala 137:31 chipyard.TestHarness.TinyRocketConfig.fir 206313:8]
    node _T_39 = cvt(_T_38) @[Parameters.scala 137:49 chipyard.TestHarness.TinyRocketConfig.fir 206314:8]
    node _T_40 = and(_T_39, SInt<33>("h-10000")) @[Parameters.scala 137:52 chipyard.TestHarness.TinyRocketConfig.fir 206315:8]
    node _T_41 = asSInt(_T_40) @[Parameters.scala 137:52 chipyard.TestHarness.TinyRocketConfig.fir 206316:8]
    node _T_42 = eq(_T_41, SInt<33>("h0")) @[Parameters.scala 137:67 chipyard.TestHarness.TinyRocketConfig.fir 206317:8]
    node _T_43 = xor(io_in_a_bits_address, UInt<32>("hc000000")) @[Parameters.scala 137:31 chipyard.TestHarness.TinyRocketConfig.fir 206318:8]
    node _T_44 = cvt(_T_43) @[Parameters.scala 137:49 chipyard.TestHarness.TinyRocketConfig.fir 206319:8]
    node _T_45 = and(_T_44, SInt<33>("h-4000000")) @[Parameters.scala 137:52 chipyard.TestHarness.TinyRocketConfig.fir 206320:8]
    node _T_46 = asSInt(_T_45) @[Parameters.scala 137:52 chipyard.TestHarness.TinyRocketConfig.fir 206321:8]
    node _T_47 = eq(_T_46, SInt<33>("h0")) @[Parameters.scala 137:67 chipyard.TestHarness.TinyRocketConfig.fir 206322:8]
    node _T_48 = xor(io_in_a_bits_address, UInt<32>("h10000000")) @[Parameters.scala 137:31 chipyard.TestHarness.TinyRocketConfig.fir 206323:8]
    node _T_49 = cvt(_T_48) @[Parameters.scala 137:49 chipyard.TestHarness.TinyRocketConfig.fir 206324:8]
    node _T_50 = and(_T_49, SInt<33>("h-1000")) @[Parameters.scala 137:52 chipyard.TestHarness.TinyRocketConfig.fir 206325:8]
    node _T_51 = asSInt(_T_50) @[Parameters.scala 137:52 chipyard.TestHarness.TinyRocketConfig.fir 206326:8]
    node _T_52 = eq(_T_51, SInt<33>("h0")) @[Parameters.scala 137:67 chipyard.TestHarness.TinyRocketConfig.fir 206327:8]
    node _T_53 = xor(io_in_a_bits_address, UInt<32>("h54000000")) @[Parameters.scala 137:31 chipyard.TestHarness.TinyRocketConfig.fir 206328:8]
    node _T_54 = cvt(_T_53) @[Parameters.scala 137:49 chipyard.TestHarness.TinyRocketConfig.fir 206329:8]
    node _T_55 = and(_T_54, SInt<33>("h-1000")) @[Parameters.scala 137:52 chipyard.TestHarness.TinyRocketConfig.fir 206330:8]
    node _T_56 = asSInt(_T_55) @[Parameters.scala 137:52 chipyard.TestHarness.TinyRocketConfig.fir 206331:8]
    node _T_57 = eq(_T_56, SInt<33>("h0")) @[Parameters.scala 137:67 chipyard.TestHarness.TinyRocketConfig.fir 206332:8]
    node _T_58 = xor(io_in_a_bits_address, UInt<32>("h80000000")) @[Parameters.scala 137:31 chipyard.TestHarness.TinyRocketConfig.fir 206333:8]
    node _T_59 = cvt(_T_58) @[Parameters.scala 137:49 chipyard.TestHarness.TinyRocketConfig.fir 206334:8]
    node _T_60 = and(_T_59, SInt<33>("h-4000")) @[Parameters.scala 137:52 chipyard.TestHarness.TinyRocketConfig.fir 206335:8]
    node _T_61 = asSInt(_T_60) @[Parameters.scala 137:52 chipyard.TestHarness.TinyRocketConfig.fir 206336:8]
    node _T_62 = eq(_T_61, SInt<33>("h0")) @[Parameters.scala 137:67 chipyard.TestHarness.TinyRocketConfig.fir 206337:8]
    node _T_63 = or(_T_27, _T_32) @[Parameters.scala 671:42 chipyard.TestHarness.TinyRocketConfig.fir 206338:8]
    node _T_75 = not(reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 206350:8]
    node _T_138 = or(_mask_T, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 206425:8]
    node _T_139 = not(_T_138) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 206426:8]
    node _T_141 = or(is_aligned, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 206432:8]
    node _T_142 = not(_T_141) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 206433:8]
    node _T_147 = not(io_in_a_bits_mask) @[Monitor.scala 88:18 chipyard.TestHarness.TinyRocketConfig.fir 206446:8]
    node _T_148 = eq(_T_147, UInt<4>("h0")) @[Monitor.scala 88:31 chipyard.TestHarness.TinyRocketConfig.fir 206447:8]
    node _T_150 = or(_T_148, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 206449:8]
    node _T_151 = not(_T_150) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 206450:8]
    node _T_156 = eq(io_in_a_bits_opcode, UInt<3>("h7")) @[Monitor.scala 92:25 chipyard.TestHarness.TinyRocketConfig.fir 206464:6]
    node _T_301 = eq(io_in_a_bits_opcode, UInt<3>("h4")) @[Monitor.scala 104:25 chipyard.TestHarness.TinyRocketConfig.fir 206647:6]
    node _T_309 = or(_T_17, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 206656:8]
    node _T_310 = not(_T_309) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 206657:8]
    node _T_320 = and(_T_17, _T_32) @[Parameters.scala 670:56 chipyard.TestHarness.TinyRocketConfig.fir 206671:8]
    node _T_322 = leq(io_in_a_bits_size, UInt<4>("h6")) @[Parameters.scala 92:42 chipyard.TestHarness.TinyRocketConfig.fir 206673:8]
    node _T_360 = or(_T_27, _T_37) @[Parameters.scala 671:42 chipyard.TestHarness.TinyRocketConfig.fir 206711:8]
    node _T_361 = or(_T_360, _T_42) @[Parameters.scala 671:42 chipyard.TestHarness.TinyRocketConfig.fir 206712:8]
    node _T_362 = or(_T_361, _T_47) @[Parameters.scala 671:42 chipyard.TestHarness.TinyRocketConfig.fir 206713:8]
    node _T_363 = or(_T_362, _T_52) @[Parameters.scala 671:42 chipyard.TestHarness.TinyRocketConfig.fir 206714:8]
    node _T_364 = or(_T_363, _T_57) @[Parameters.scala 671:42 chipyard.TestHarness.TinyRocketConfig.fir 206715:8]
    node _T_365 = or(_T_364, _T_62) @[Parameters.scala 671:42 chipyard.TestHarness.TinyRocketConfig.fir 206716:8]
    node _T_366 = and(_T_322, _T_365) @[Parameters.scala 670:56 chipyard.TestHarness.TinyRocketConfig.fir 206717:8]
    node _T_368 = or(_T_320, _T_366) @[Parameters.scala 672:30 chipyard.TestHarness.TinyRocketConfig.fir 206719:8]
    node _T_370 = or(_T_368, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 206721:8]
    node _T_371 = not(_T_370) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 206722:8]
    node _T_382 = eq(io_in_a_bits_mask, mask) @[Monitor.scala 110:30 chipyard.TestHarness.TinyRocketConfig.fir 206749:8]
    node _T_384 = or(_T_382, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 206751:8]
    node _T_385 = not(_T_384) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 206752:8]
    node _T_390 = eq(io_in_a_bits_opcode, UInt<3>("h0")) @[Monitor.scala 114:25 chipyard.TestHarness.TinyRocketConfig.fir 206766:6]
    node _T_441 = or(_T_27, _T_42) @[Parameters.scala 671:42 chipyard.TestHarness.TinyRocketConfig.fir 206818:8]
    node _T_442 = or(_T_441, _T_47) @[Parameters.scala 671:42 chipyard.TestHarness.TinyRocketConfig.fir 206819:8]
    node _T_443 = or(_T_442, _T_52) @[Parameters.scala 671:42 chipyard.TestHarness.TinyRocketConfig.fir 206820:8]
    node _T_444 = or(_T_443, _T_57) @[Parameters.scala 671:42 chipyard.TestHarness.TinyRocketConfig.fir 206821:8]
    node _T_445 = or(_T_444, _T_62) @[Parameters.scala 671:42 chipyard.TestHarness.TinyRocketConfig.fir 206822:8]
    node _T_446 = and(_T_322, _T_445) @[Parameters.scala 670:56 chipyard.TestHarness.TinyRocketConfig.fir 206823:8]
    node _T_455 = or(_T_320, _T_446) @[Parameters.scala 672:30 chipyard.TestHarness.TinyRocketConfig.fir 206832:8]
    node _T_457 = and(_T_17, _T_455) @[Monitor.scala 115:71 chipyard.TestHarness.TinyRocketConfig.fir 206834:8]
    node _T_459 = or(_T_457, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 206836:8]
    node _T_460 = not(_T_459) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 206837:8]
    node _T_475 = eq(io_in_a_bits_opcode, UInt<3>("h1")) @[Monitor.scala 122:25 chipyard.TestHarness.TinyRocketConfig.fir 206873:6]
    node _T_556 = not(mask) @[Monitor.scala 127:33 chipyard.TestHarness.TinyRocketConfig.fir 206971:8]
    node _T_557 = and(io_in_a_bits_mask, _T_556) @[Monitor.scala 127:31 chipyard.TestHarness.TinyRocketConfig.fir 206972:8]
    node _T_558 = eq(_T_557, UInt<4>("h0")) @[Monitor.scala 127:40 chipyard.TestHarness.TinyRocketConfig.fir 206973:8]
    node _T_560 = or(_T_558, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 206975:8]
    node _T_561 = not(_T_560) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 206976:8]
    node _T_562 = eq(io_in_a_bits_opcode, UInt<3>("h2")) @[Monitor.scala 130:25 chipyard.TestHarness.TinyRocketConfig.fir 206982:6]
    node _T_570 = leq(io_in_a_bits_size, UInt<4>("h2")) @[Parameters.scala 92:42 chipyard.TestHarness.TinyRocketConfig.fir 206991:8]
    node _T_609 = or(_T_63, _T_42) @[Parameters.scala 671:42 chipyard.TestHarness.TinyRocketConfig.fir 207030:8]
    node _T_610 = or(_T_609, _T_47) @[Parameters.scala 671:42 chipyard.TestHarness.TinyRocketConfig.fir 207031:8]
    node _T_611 = or(_T_610, _T_52) @[Parameters.scala 671:42 chipyard.TestHarness.TinyRocketConfig.fir 207032:8]
    node _T_612 = or(_T_611, _T_57) @[Parameters.scala 671:42 chipyard.TestHarness.TinyRocketConfig.fir 207033:8]
    node _T_613 = or(_T_612, _T_62) @[Parameters.scala 671:42 chipyard.TestHarness.TinyRocketConfig.fir 207034:8]
    node _T_614 = and(_T_570, _T_613) @[Parameters.scala 670:56 chipyard.TestHarness.TinyRocketConfig.fir 207035:8]
    node _T_624 = and(_T_17, _T_614) @[Monitor.scala 131:74 chipyard.TestHarness.TinyRocketConfig.fir 207045:8]
    node _T_626 = or(_T_624, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 207047:8]
    node _T_627 = not(_T_626) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 207048:8]
    node _T_642 = eq(io_in_a_bits_opcode, UInt<3>("h3")) @[Monitor.scala 138:25 chipyard.TestHarness.TinyRocketConfig.fir 207084:6]
    node _T_722 = eq(io_in_a_bits_opcode, UInt<3>("h5")) @[Monitor.scala 146:25 chipyard.TestHarness.TinyRocketConfig.fir 207186:6]
    node _T_784 = and(_T_17, _T_320) @[Monitor.scala 147:68 chipyard.TestHarness.TinyRocketConfig.fir 207249:8]
    node _T_786 = or(_T_784, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 207251:8]
    node _T_787 = not(_T_786) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 207252:8]
    node _T_806 = leq(io_in_d_bits_opcode, UInt<3>("h6")) @[Bundles.scala 42:24 chipyard.TestHarness.TinyRocketConfig.fir 207298:6]
    node _T_808 = or(_T_806, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207300:6]
    node _T_809 = not(_T_808) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207301:6]
    node _source_ok_T_1 = not(io_in_d_bits_source) @[Parameters.scala 46:9 chipyard.TestHarness.TinyRocketConfig.fir 207306:6]
    node _T_810 = eq(io_in_d_bits_opcode, UInt<3>("h6")) @[Monitor.scala 310:25 chipyard.TestHarness.TinyRocketConfig.fir 207311:6]
    node _T_812 = or(_source_ok_T_1, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207314:8]
    node _T_813 = not(_T_812) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207315:8]
    node _T_814 = geq(io_in_d_bits_size, UInt<4>("h2")) @[Monitor.scala 312:27 chipyard.TestHarness.TinyRocketConfig.fir 207320:8]
    node _T_816 = or(_T_814, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207322:8]
    node _T_817 = not(_T_816) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207323:8]
    node _T_818 = eq(io_in_d_bits_param, UInt<2>("h0")) @[Monitor.scala 313:28 chipyard.TestHarness.TinyRocketConfig.fir 207328:8]
    node _T_820 = or(_T_818, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207330:8]
    node _T_821 = not(_T_820) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207331:8]
    node _T_822 = not(io_in_d_bits_corrupt) @[Monitor.scala 314:15 chipyard.TestHarness.TinyRocketConfig.fir 207336:8]
    node _T_824 = or(_T_822, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207338:8]
    node _T_825 = not(_T_824) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207339:8]
    node _T_826 = not(io_in_d_bits_denied) @[Monitor.scala 315:15 chipyard.TestHarness.TinyRocketConfig.fir 207344:8]
    node _T_828 = or(_T_826, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207346:8]
    node _T_829 = not(_T_828) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207347:8]
    node _T_830 = eq(io_in_d_bits_opcode, UInt<3>("h4")) @[Monitor.scala 318:25 chipyard.TestHarness.TinyRocketConfig.fir 207353:6]
    node _T_841 = leq(io_in_d_bits_param, UInt<2>("h2")) @[Bundles.scala 102:26 chipyard.TestHarness.TinyRocketConfig.fir 207377:8]
    node _T_843 = or(_T_841, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207379:8]
    node _T_844 = not(_T_843) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207380:8]
    node _T_845 = neq(io_in_d_bits_param, UInt<2>("h2")) @[Monitor.scala 323:28 chipyard.TestHarness.TinyRocketConfig.fir 207385:8]
    node _T_847 = or(_T_845, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207387:8]
    node _T_848 = not(_T_847) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207388:8]
    node _T_858 = eq(io_in_d_bits_opcode, UInt<3>("h5")) @[Monitor.scala 328:25 chipyard.TestHarness.TinyRocketConfig.fir 207411:6]
    node _T_878 = or(_T_826, io_in_d_bits_corrupt) @[Monitor.scala 334:30 chipyard.TestHarness.TinyRocketConfig.fir 207452:8]
    node _T_880 = or(_T_878, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207454:8]
    node _T_881 = not(_T_880) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207455:8]
    node _T_887 = eq(io_in_d_bits_opcode, UInt<3>("h0")) @[Monitor.scala 338:25 chipyard.TestHarness.TinyRocketConfig.fir 207470:6]
    node _T_904 = eq(io_in_d_bits_opcode, UInt<3>("h1")) @[Monitor.scala 346:25 chipyard.TestHarness.TinyRocketConfig.fir 207505:6]
    node _T_922 = eq(io_in_d_bits_opcode, UInt<3>("h2")) @[Monitor.scala 354:25 chipyard.TestHarness.TinyRocketConfig.fir 207541:6]
    node _a_first_T = and(io_in_a_ready, io_in_a_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.TinyRocketConfig.fir 207607:4]
    node a_first_beats1_decode = shr(is_aligned_mask, 2) @[Edges.scala 219:59 chipyard.TestHarness.TinyRocketConfig.fir 207612:4]
    node _a_first_beats1_opdata_T = bits(io_in_a_bits_opcode, 2, 2) @[Edges.scala 91:37 chipyard.TestHarness.TinyRocketConfig.fir 207613:4]
    node a_first_beats1_opdata = not(_a_first_beats1_opdata_T) @[Edges.scala 91:28 chipyard.TestHarness.TinyRocketConfig.fir 207614:4]
    node a_first_beats1 = mux(a_first_beats1_opdata, a_first_beats1_decode, UInt<10>("h0")) @[Edges.scala 220:14 chipyard.TestHarness.TinyRocketConfig.fir 207615:4]
    reg a_first_counter : UInt<10>, clock with :
      reset => (UInt<1>("h0"), a_first_counter) @[Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 207616:4]
    node _a_first_counter1_T = sub(a_first_counter, UInt<10>("h1")) @[Edges.scala 229:28 chipyard.TestHarness.TinyRocketConfig.fir 207617:4]
    node a_first_counter1 = tail(_a_first_counter1_T, 1) @[Edges.scala 229:28 chipyard.TestHarness.TinyRocketConfig.fir 207618:4]
    node a_first = eq(a_first_counter, UInt<10>("h0")) @[Edges.scala 230:25 chipyard.TestHarness.TinyRocketConfig.fir 207619:4]
    node _a_first_counter_T = mux(a_first, a_first_beats1, a_first_counter1) @[Edges.scala 235:21 chipyard.TestHarness.TinyRocketConfig.fir 207627:6]
    node _GEN_0 = mux(_a_first_T, _a_first_counter_T, a_first_counter) @[Edges.scala 234:17 chipyard.TestHarness.TinyRocketConfig.fir 207626:4 Edges.scala 235:15 chipyard.TestHarness.TinyRocketConfig.fir 207628:6 Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 207616:4]
    reg opcode : UInt<3>, clock with :
      reset => (UInt<1>("h0"), opcode) @[Monitor.scala 384:22 chipyard.TestHarness.TinyRocketConfig.fir 207630:4]
    reg size : UInt<4>, clock with :
      reset => (UInt<1>("h0"), size) @[Monitor.scala 386:22 chipyard.TestHarness.TinyRocketConfig.fir 207632:4]
    reg address : UInt<32>, clock with :
      reset => (UInt<1>("h0"), address) @[Monitor.scala 388:22 chipyard.TestHarness.TinyRocketConfig.fir 207634:4]
    node _T_951 = not(a_first) @[Monitor.scala 389:22 chipyard.TestHarness.TinyRocketConfig.fir 207635:4]
    node _T_952 = and(io_in_a_valid, _T_951) @[Monitor.scala 389:19 chipyard.TestHarness.TinyRocketConfig.fir 207636:4]
    node _T_953 = eq(io_in_a_bits_opcode, opcode) @[Monitor.scala 390:32 chipyard.TestHarness.TinyRocketConfig.fir 207638:6]
    node _T_955 = or(_T_953, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 207640:6]
    node _T_956 = not(_T_955) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 207641:6]
    node _T_961 = eq(io_in_a_bits_size, size) @[Monitor.scala 392:32 chipyard.TestHarness.TinyRocketConfig.fir 207654:6]
    node _T_963 = or(_T_961, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 207656:6]
    node _T_964 = not(_T_963) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 207657:6]
    node _T_969 = eq(io_in_a_bits_address, address) @[Monitor.scala 394:32 chipyard.TestHarness.TinyRocketConfig.fir 207670:6]
    node _T_971 = or(_T_969, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 207672:6]
    node _T_972 = not(_T_971) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 207673:6]
    node _T_974 = and(_a_first_T, a_first) @[Monitor.scala 396:20 chipyard.TestHarness.TinyRocketConfig.fir 207680:4]
    node _d_first_T = and(io_in_d_ready, io_in_d_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.TinyRocketConfig.fir 207688:4]
    node _d_first_beats1_decode_T_1 = dshlw(UInt<27>("hfff"), io_in_d_bits_size) @[package.scala 234:77 chipyard.TestHarness.TinyRocketConfig.fir 207690:4]
    node _d_first_beats1_decode_T_2 = bits(_d_first_beats1_decode_T_1, 11, 0) @[package.scala 234:82 chipyard.TestHarness.TinyRocketConfig.fir 207691:4]
    node _d_first_beats1_decode_T_3 = not(_d_first_beats1_decode_T_2) @[package.scala 234:46 chipyard.TestHarness.TinyRocketConfig.fir 207692:4]
    node d_first_beats1_decode = shr(_d_first_beats1_decode_T_3, 2) @[Edges.scala 219:59 chipyard.TestHarness.TinyRocketConfig.fir 207693:4]
    node d_first_beats1_opdata = bits(io_in_d_bits_opcode, 0, 0) @[Edges.scala 105:36 chipyard.TestHarness.TinyRocketConfig.fir 207694:4]
    node d_first_beats1 = mux(d_first_beats1_opdata, d_first_beats1_decode, UInt<10>("h0")) @[Edges.scala 220:14 chipyard.TestHarness.TinyRocketConfig.fir 207695:4]
    reg d_first_counter : UInt<10>, clock with :
      reset => (UInt<1>("h0"), d_first_counter) @[Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 207696:4]
    node _d_first_counter1_T = sub(d_first_counter, UInt<10>("h1")) @[Edges.scala 229:28 chipyard.TestHarness.TinyRocketConfig.fir 207697:4]
    node d_first_counter1 = tail(_d_first_counter1_T, 1) @[Edges.scala 229:28 chipyard.TestHarness.TinyRocketConfig.fir 207698:4]
    node d_first = eq(d_first_counter, UInt<10>("h0")) @[Edges.scala 230:25 chipyard.TestHarness.TinyRocketConfig.fir 207699:4]
    node _d_first_counter_T = mux(d_first, d_first_beats1, d_first_counter1) @[Edges.scala 235:21 chipyard.TestHarness.TinyRocketConfig.fir 207707:6]
    node _GEN_6 = mux(_d_first_T, _d_first_counter_T, d_first_counter) @[Edges.scala 234:17 chipyard.TestHarness.TinyRocketConfig.fir 207706:4 Edges.scala 235:15 chipyard.TestHarness.TinyRocketConfig.fir 207708:6 Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 207696:4]
    reg opcode_1 : UInt<3>, clock with :
      reset => (UInt<1>("h0"), opcode_1) @[Monitor.scala 535:22 chipyard.TestHarness.TinyRocketConfig.fir 207710:4]
    reg param_1 : UInt<2>, clock with :
      reset => (UInt<1>("h0"), param_1) @[Monitor.scala 536:22 chipyard.TestHarness.TinyRocketConfig.fir 207711:4]
    reg size_1 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), size_1) @[Monitor.scala 537:22 chipyard.TestHarness.TinyRocketConfig.fir 207712:4]
    reg source_1 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), source_1) @[Monitor.scala 538:22 chipyard.TestHarness.TinyRocketConfig.fir 207713:4]
    reg sink : UInt<1>, clock with :
      reset => (UInt<1>("h0"), sink) @[Monitor.scala 539:22 chipyard.TestHarness.TinyRocketConfig.fir 207714:4]
    reg denied : UInt<1>, clock with :
      reset => (UInt<1>("h0"), denied) @[Monitor.scala 540:22 chipyard.TestHarness.TinyRocketConfig.fir 207715:4]
    node _T_975 = not(d_first) @[Monitor.scala 541:22 chipyard.TestHarness.TinyRocketConfig.fir 207716:4]
    node _T_976 = and(io_in_d_valid, _T_975) @[Monitor.scala 541:19 chipyard.TestHarness.TinyRocketConfig.fir 207717:4]
    node _T_977 = eq(io_in_d_bits_opcode, opcode_1) @[Monitor.scala 542:29 chipyard.TestHarness.TinyRocketConfig.fir 207719:6]
    node _T_979 = or(_T_977, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207721:6]
    node _T_980 = not(_T_979) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207722:6]
    node _T_981 = eq(io_in_d_bits_param, param_1) @[Monitor.scala 543:29 chipyard.TestHarness.TinyRocketConfig.fir 207727:6]
    node _T_983 = or(_T_981, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207729:6]
    node _T_984 = not(_T_983) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207730:6]
    node _T_985 = eq(io_in_d_bits_size, size_1) @[Monitor.scala 544:29 chipyard.TestHarness.TinyRocketConfig.fir 207735:6]
    node _T_987 = or(_T_985, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207737:6]
    node _T_988 = not(_T_987) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207738:6]
    node _T_989 = eq(io_in_d_bits_source, source_1) @[Monitor.scala 545:29 chipyard.TestHarness.TinyRocketConfig.fir 207743:6]
    node _T_991 = or(_T_989, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207745:6]
    node _T_992 = not(_T_991) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207746:6]
    node _T_993 = eq(io_in_d_bits_sink, sink) @[Monitor.scala 546:29 chipyard.TestHarness.TinyRocketConfig.fir 207751:6]
    node _T_995 = or(_T_993, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207753:6]
    node _T_996 = not(_T_995) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207754:6]
    node _T_997 = eq(io_in_d_bits_denied, denied) @[Monitor.scala 547:29 chipyard.TestHarness.TinyRocketConfig.fir 207759:6]
    node _T_999 = or(_T_997, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207761:6]
    node _T_1000 = not(_T_999) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207762:6]
    node _T_1002 = and(_d_first_T, d_first) @[Monitor.scala 549:20 chipyard.TestHarness.TinyRocketConfig.fir 207769:4]
    reg inflight : UInt<1>, clock with :
      reset => (UInt<1>("h0"), inflight) @[Monitor.scala 611:27 chipyard.TestHarness.TinyRocketConfig.fir 207778:4]
    reg inflight_opcodes : UInt<4>, clock with :
      reset => (UInt<1>("h0"), inflight_opcodes) @[Monitor.scala 613:35 chipyard.TestHarness.TinyRocketConfig.fir 207779:4]
    reg inflight_sizes : UInt<8>, clock with :
      reset => (UInt<1>("h0"), inflight_sizes) @[Monitor.scala 615:33 chipyard.TestHarness.TinyRocketConfig.fir 207780:4]
    reg a_first_counter_1 : UInt<10>, clock with :
      reset => (UInt<1>("h0"), a_first_counter_1) @[Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 207790:4]
    node _a_first_counter1_T_1 = sub(a_first_counter_1, UInt<10>("h1")) @[Edges.scala 229:28 chipyard.TestHarness.TinyRocketConfig.fir 207791:4]
    node a_first_counter1_1 = tail(_a_first_counter1_T_1, 1) @[Edges.scala 229:28 chipyard.TestHarness.TinyRocketConfig.fir 207792:4]
    node a_first_1 = eq(a_first_counter_1, UInt<10>("h0")) @[Edges.scala 230:25 chipyard.TestHarness.TinyRocketConfig.fir 207793:4]
    node _a_first_counter_T_1 = mux(a_first_1, a_first_beats1, a_first_counter1_1) @[Edges.scala 235:21 chipyard.TestHarness.TinyRocketConfig.fir 207801:6]
    node _GEN_13 = mux(_a_first_T, _a_first_counter_T_1, a_first_counter_1) @[Edges.scala 234:17 chipyard.TestHarness.TinyRocketConfig.fir 207800:4 Edges.scala 235:15 chipyard.TestHarness.TinyRocketConfig.fir 207802:6 Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 207790:4]
    reg d_first_counter_1 : UInt<10>, clock with :
      reset => (UInt<1>("h0"), d_first_counter_1) @[Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 207812:4]
    node _d_first_counter1_T_1 = sub(d_first_counter_1, UInt<10>("h1")) @[Edges.scala 229:28 chipyard.TestHarness.TinyRocketConfig.fir 207813:4]
    node d_first_counter1_1 = tail(_d_first_counter1_T_1, 1) @[Edges.scala 229:28 chipyard.TestHarness.TinyRocketConfig.fir 207814:4]
    node d_first_1 = eq(d_first_counter_1, UInt<10>("h0")) @[Edges.scala 230:25 chipyard.TestHarness.TinyRocketConfig.fir 207815:4]
    node _d_first_counter_T_1 = mux(d_first_1, d_first_beats1, d_first_counter1_1) @[Edges.scala 235:21 chipyard.TestHarness.TinyRocketConfig.fir 207823:6]
    node _GEN_14 = mux(_d_first_T, _d_first_counter_T_1, d_first_counter_1) @[Edges.scala 234:17 chipyard.TestHarness.TinyRocketConfig.fir 207822:4 Edges.scala 235:15 chipyard.TestHarness.TinyRocketConfig.fir 207824:6 Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 207812:4]
    node _GEN_72 = shl(io_in_d_bits_source, 2) @[Monitor.scala 634:69 chipyard.TestHarness.TinyRocketConfig.fir 207836:4]
    node _a_opcode_lookup_T = pad(_GEN_72, 4) @[Monitor.scala 634:69 chipyard.TestHarness.TinyRocketConfig.fir 207836:4]
    node _a_opcode_lookup_T_1 = dshr(inflight_opcodes, _a_opcode_lookup_T) @[Monitor.scala 634:44 chipyard.TestHarness.TinyRocketConfig.fir 207837:4]
    node _a_opcode_lookup_T_4 = sub(UInt<16>("h10"), UInt<16>("h1")) @[Monitor.scala 609:57 chipyard.TestHarness.TinyRocketConfig.fir 207840:4]
    node _a_opcode_lookup_T_5 = tail(_a_opcode_lookup_T_4, 1) @[Monitor.scala 609:57 chipyard.TestHarness.TinyRocketConfig.fir 207841:4]
    node _GEN_73 = pad(_a_opcode_lookup_T_1, 16) @[Monitor.scala 634:97 chipyard.TestHarness.TinyRocketConfig.fir 207842:4]
    node _a_opcode_lookup_T_6 = and(_GEN_73, _a_opcode_lookup_T_5) @[Monitor.scala 634:97 chipyard.TestHarness.TinyRocketConfig.fir 207842:4]
    node _GEN_74 = shr(_a_opcode_lookup_T_6, 1) @[Monitor.scala 634:152 chipyard.TestHarness.TinyRocketConfig.fir 207843:4]
    node _a_opcode_lookup_T_7 = pad(_GEN_74, 16) @[Monitor.scala 634:152 chipyard.TestHarness.TinyRocketConfig.fir 207843:4]
    node _a_size_lookup_T = shl(io_in_d_bits_source, 3) @[Monitor.scala 638:65 chipyard.TestHarness.TinyRocketConfig.fir 207847:4]
    node _a_size_lookup_T_1 = dshr(inflight_sizes, _a_size_lookup_T) @[Monitor.scala 638:40 chipyard.TestHarness.TinyRocketConfig.fir 207848:4]
    node _a_size_lookup_T_4 = sub(UInt<16>("h100"), UInt<16>("h1")) @[Monitor.scala 609:57 chipyard.TestHarness.TinyRocketConfig.fir 207851:4]
    node _a_size_lookup_T_5 = tail(_a_size_lookup_T_4, 1) @[Monitor.scala 609:57 chipyard.TestHarness.TinyRocketConfig.fir 207852:4]
    node _GEN_75 = pad(_a_size_lookup_T_1, 16) @[Monitor.scala 638:91 chipyard.TestHarness.TinyRocketConfig.fir 207853:4]
    node _a_size_lookup_T_6 = and(_GEN_75, _a_size_lookup_T_5) @[Monitor.scala 638:91 chipyard.TestHarness.TinyRocketConfig.fir 207853:4]
    node _GEN_76 = shr(_a_size_lookup_T_6, 1) @[Monitor.scala 638:144 chipyard.TestHarness.TinyRocketConfig.fir 207854:4]
    node _a_size_lookup_T_7 = pad(_GEN_76, 16) @[Monitor.scala 638:144 chipyard.TestHarness.TinyRocketConfig.fir 207854:4]
    node _T_1003 = and(io_in_a_valid, a_first_1) @[Monitor.scala 648:26 chipyard.TestHarness.TinyRocketConfig.fir 207878:4]
    node _GEN_15 = mux(_T_1003, UInt<2>("h1"), UInt<2>("h0")) @[Monitor.scala 648:71 chipyard.TestHarness.TinyRocketConfig.fir 207880:4 Monitor.scala 649:22 chipyard.TestHarness.TinyRocketConfig.fir 207882:6 chipyard.TestHarness.TinyRocketConfig.fir 207829:4]
    node _T_1006 = and(_a_first_T, a_first_1) @[Monitor.scala 652:27 chipyard.TestHarness.TinyRocketConfig.fir 207885:4]
    node _a_opcodes_set_interm_T = shl(io_in_a_bits_opcode, 1) @[Monitor.scala 654:53 chipyard.TestHarness.TinyRocketConfig.fir 207890:6]
    node _a_opcodes_set_interm_T_1 = or(_a_opcodes_set_interm_T, UInt<4>("h1")) @[Monitor.scala 654:61 chipyard.TestHarness.TinyRocketConfig.fir 207891:6]
    node _a_sizes_set_interm_T = shl(io_in_a_bits_size, 1) @[Monitor.scala 655:51 chipyard.TestHarness.TinyRocketConfig.fir 207893:6]
    node _a_sizes_set_interm_T_1 = or(_a_sizes_set_interm_T, UInt<5>("h1")) @[Monitor.scala 655:59 chipyard.TestHarness.TinyRocketConfig.fir 207894:6]
    node a_opcodes_set_interm = mux(_T_1006, _a_opcodes_set_interm_T_1, UInt<4>("h0")) @[Monitor.scala 652:72 chipyard.TestHarness.TinyRocketConfig.fir 207887:4 Monitor.scala 654:28 chipyard.TestHarness.TinyRocketConfig.fir 207892:6 chipyard.TestHarness.TinyRocketConfig.fir 207875:4]
    node _a_opcodes_set_T_1 = pad(a_opcodes_set_interm, 19) @[Monitor.scala 656:54 chipyard.TestHarness.TinyRocketConfig.fir 207897:6]
    node a_sizes_set_interm = mux(_T_1006, _a_sizes_set_interm_T_1, UInt<5>("h0")) @[Monitor.scala 652:72 chipyard.TestHarness.TinyRocketConfig.fir 207887:4 Monitor.scala 655:28 chipyard.TestHarness.TinyRocketConfig.fir 207895:6 chipyard.TestHarness.TinyRocketConfig.fir 207877:4]
    node _a_sizes_set_T_1 = pad(a_sizes_set_interm, 20) @[Monitor.scala 657:52 chipyard.TestHarness.TinyRocketConfig.fir 207900:6]
    node _T_1010 = not(inflight) @[Monitor.scala 658:17 chipyard.TestHarness.TinyRocketConfig.fir 207904:6]
    node _T_1012 = or(_T_1010, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 207906:6]
    node _T_1013 = not(_T_1012) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 207907:6]
    node _GEN_16 = mux(_T_1006, UInt<2>("h1"), UInt<2>("h0")) @[Monitor.scala 652:72 chipyard.TestHarness.TinyRocketConfig.fir 207887:4 Monitor.scala 653:28 chipyard.TestHarness.TinyRocketConfig.fir 207889:6 chipyard.TestHarness.TinyRocketConfig.fir 207827:4]
    node _GEN_19 = mux(_T_1006, _a_opcodes_set_T_1, UInt<19>("h0")) @[Monitor.scala 652:72 chipyard.TestHarness.TinyRocketConfig.fir 207887:4 Monitor.scala 656:28 chipyard.TestHarness.TinyRocketConfig.fir 207898:6 chipyard.TestHarness.TinyRocketConfig.fir 207831:4]
    node _GEN_20 = mux(_T_1006, _a_sizes_set_T_1, UInt<20>("h0")) @[Monitor.scala 652:72 chipyard.TestHarness.TinyRocketConfig.fir 207887:4 Monitor.scala 657:28 chipyard.TestHarness.TinyRocketConfig.fir 207901:6 chipyard.TestHarness.TinyRocketConfig.fir 207833:4]
    node _T_1014 = and(io_in_d_valid, d_first_1) @[Monitor.scala 671:26 chipyard.TestHarness.TinyRocketConfig.fir 207922:4]
    node _T_1016 = not(_T_810) @[Monitor.scala 671:74 chipyard.TestHarness.TinyRocketConfig.fir 207924:4]
    node _T_1017 = and(_T_1014, _T_1016) @[Monitor.scala 671:71 chipyard.TestHarness.TinyRocketConfig.fir 207925:4]
    node _d_clr_wo_ready_T = dshlw(UInt<2>("h1"), io_in_d_bits_source) @[OneHot.scala 58:35 chipyard.TestHarness.TinyRocketConfig.fir 207927:6]
    node _GEN_21 = mux(_T_1017, _d_clr_wo_ready_T, UInt<2>("h0")) @[Monitor.scala 671:90 chipyard.TestHarness.TinyRocketConfig.fir 207926:4 Monitor.scala 672:22 chipyard.TestHarness.TinyRocketConfig.fir 207928:6 chipyard.TestHarness.TinyRocketConfig.fir 207916:4]
    node _T_1019 = and(_d_first_T, d_first_1) @[Monitor.scala 675:27 chipyard.TestHarness.TinyRocketConfig.fir 207931:4]
    node _T_1022 = and(_T_1019, _T_1016) @[Monitor.scala 675:72 chipyard.TestHarness.TinyRocketConfig.fir 207934:4]
    node _GEN_78 = pad(_a_opcode_lookup_T_5, 31) @[Monitor.scala 677:76 chipyard.TestHarness.TinyRocketConfig.fir 207943:6]
    node _d_opcodes_clr_T_5 = dshlw(_GEN_78, _a_opcode_lookup_T) @[Monitor.scala 677:76 chipyard.TestHarness.TinyRocketConfig.fir 207943:6]
    node _GEN_79 = pad(_a_size_lookup_T_5, 31) @[Monitor.scala 678:74 chipyard.TestHarness.TinyRocketConfig.fir 207950:6]
    node _d_sizes_clr_T_5 = dshlw(_GEN_79, _a_size_lookup_T) @[Monitor.scala 678:74 chipyard.TestHarness.TinyRocketConfig.fir 207950:6]
    node _GEN_22 = mux(_T_1022, _d_clr_wo_ready_T, UInt<2>("h0")) @[Monitor.scala 675:91 chipyard.TestHarness.TinyRocketConfig.fir 207935:4 Monitor.scala 676:21 chipyard.TestHarness.TinyRocketConfig.fir 207937:6 chipyard.TestHarness.TinyRocketConfig.fir 207914:4]
    node _GEN_23 = mux(_T_1022, _d_opcodes_clr_T_5, UInt<31>("h0")) @[Monitor.scala 675:91 chipyard.TestHarness.TinyRocketConfig.fir 207935:4 Monitor.scala 677:21 chipyard.TestHarness.TinyRocketConfig.fir 207944:6 chipyard.TestHarness.TinyRocketConfig.fir 207918:4]
    node _GEN_24 = mux(_T_1022, _d_sizes_clr_T_5, UInt<31>("h0")) @[Monitor.scala 675:91 chipyard.TestHarness.TinyRocketConfig.fir 207935:4 Monitor.scala 678:21 chipyard.TestHarness.TinyRocketConfig.fir 207951:6 chipyard.TestHarness.TinyRocketConfig.fir 207920:4]
    node same_cycle_resp = and(_T_1003, _source_ok_T_1) @[Monitor.scala 681:88 chipyard.TestHarness.TinyRocketConfig.fir 207961:6]
    node _T_1027 = dshr(inflight, io_in_d_bits_source) @[Monitor.scala 682:25 chipyard.TestHarness.TinyRocketConfig.fir 207962:6]
    node _T_1029 = or(_T_1027, same_cycle_resp) @[Monitor.scala 682:49 chipyard.TestHarness.TinyRocketConfig.fir 207964:6]
    node _T_1031 = or(_T_1029, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207966:6]
    node _T_1032 = not(_T_1031) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207967:6]
    node _GEN_27 = mux(eq(UInt<3>("h2"), io_in_a_bits_opcode), UInt<3>("h1"), UInt<3>("h0")) @[Monitor.scala 685:38 chipyard.TestHarness.TinyRocketConfig.fir 207973:8 Monitor.scala 685:38 chipyard.TestHarness.TinyRocketConfig.fir 207973:8]
    node _GEN_28 = mux(eq(UInt<3>("h3"), io_in_a_bits_opcode), UInt<3>("h1"), _GEN_27) @[Monitor.scala 685:38 chipyard.TestHarness.TinyRocketConfig.fir 207973:8 Monitor.scala 685:38 chipyard.TestHarness.TinyRocketConfig.fir 207973:8]
    node _GEN_29 = mux(eq(UInt<3>("h4"), io_in_a_bits_opcode), UInt<3>("h1"), _GEN_28) @[Monitor.scala 685:38 chipyard.TestHarness.TinyRocketConfig.fir 207973:8 Monitor.scala 685:38 chipyard.TestHarness.TinyRocketConfig.fir 207973:8]
    node _GEN_30 = mux(eq(UInt<3>("h5"), io_in_a_bits_opcode), UInt<3>("h2"), _GEN_29) @[Monitor.scala 685:38 chipyard.TestHarness.TinyRocketConfig.fir 207973:8 Monitor.scala 685:38 chipyard.TestHarness.TinyRocketConfig.fir 207973:8]
    node _GEN_31 = mux(eq(UInt<3>("h6"), io_in_a_bits_opcode), UInt<3>("h4"), _GEN_30) @[Monitor.scala 685:38 chipyard.TestHarness.TinyRocketConfig.fir 207973:8 Monitor.scala 685:38 chipyard.TestHarness.TinyRocketConfig.fir 207973:8]
    node _GEN_32 = mux(eq(UInt<3>("h7"), io_in_a_bits_opcode), UInt<3>("h4"), _GEN_31) @[Monitor.scala 685:38 chipyard.TestHarness.TinyRocketConfig.fir 207973:8 Monitor.scala 685:38 chipyard.TestHarness.TinyRocketConfig.fir 207973:8]
    node _T_1033 = eq(io_in_d_bits_opcode, _GEN_32) @[Monitor.scala 685:38 chipyard.TestHarness.TinyRocketConfig.fir 207973:8]
    node _GEN_39 = mux(eq(UInt<3>("h6"), io_in_a_bits_opcode), UInt<3>("h5"), _GEN_30) @[Monitor.scala 686:39 chipyard.TestHarness.TinyRocketConfig.fir 207974:8 Monitor.scala 686:39 chipyard.TestHarness.TinyRocketConfig.fir 207974:8]
    node _GEN_40 = mux(eq(UInt<3>("h7"), io_in_a_bits_opcode), UInt<3>("h4"), _GEN_39) @[Monitor.scala 686:39 chipyard.TestHarness.TinyRocketConfig.fir 207974:8 Monitor.scala 686:39 chipyard.TestHarness.TinyRocketConfig.fir 207974:8]
    node _T_1034 = eq(io_in_d_bits_opcode, _GEN_40) @[Monitor.scala 686:39 chipyard.TestHarness.TinyRocketConfig.fir 207974:8]
    node _T_1035 = or(_T_1033, _T_1034) @[Monitor.scala 685:77 chipyard.TestHarness.TinyRocketConfig.fir 207975:8]
    node _T_1037 = or(_T_1035, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207977:8]
    node _T_1038 = not(_T_1037) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207978:8]
    node _T_1039 = eq(io_in_a_bits_size, io_in_d_bits_size) @[Monitor.scala 687:36 chipyard.TestHarness.TinyRocketConfig.fir 207983:8]
    node _T_1041 = or(_T_1039, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207985:8]
    node _T_1042 = not(_T_1041) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207986:8]
    node a_opcode_lookup = bits(_a_opcode_lookup_T_7, 3, 0) @[chipyard.TestHarness.TinyRocketConfig.fir 207834:4 Monitor.scala 634:21 chipyard.TestHarness.TinyRocketConfig.fir 207844:4]
    node _T_1043 = bits(a_opcode_lookup, 2, 0) @[chipyard.TestHarness.TinyRocketConfig.fir 207993:8]
    node _GEN_43 = mux(eq(UInt<3>("h2"), _T_1043), UInt<3>("h1"), UInt<3>("h0")) @[Monitor.scala 689:38 chipyard.TestHarness.TinyRocketConfig.fir 207994:8 Monitor.scala 689:38 chipyard.TestHarness.TinyRocketConfig.fir 207994:8]
    node _GEN_44 = mux(eq(UInt<3>("h3"), _T_1043), UInt<3>("h1"), _GEN_43) @[Monitor.scala 689:38 chipyard.TestHarness.TinyRocketConfig.fir 207994:8 Monitor.scala 689:38 chipyard.TestHarness.TinyRocketConfig.fir 207994:8]
    node _GEN_45 = mux(eq(UInt<3>("h4"), _T_1043), UInt<3>("h1"), _GEN_44) @[Monitor.scala 689:38 chipyard.TestHarness.TinyRocketConfig.fir 207994:8 Monitor.scala 689:38 chipyard.TestHarness.TinyRocketConfig.fir 207994:8]
    node _GEN_46 = mux(eq(UInt<3>("h5"), _T_1043), UInt<3>("h2"), _GEN_45) @[Monitor.scala 689:38 chipyard.TestHarness.TinyRocketConfig.fir 207994:8 Monitor.scala 689:38 chipyard.TestHarness.TinyRocketConfig.fir 207994:8]
    node _GEN_47 = mux(eq(UInt<3>("h6"), _T_1043), UInt<3>("h4"), _GEN_46) @[Monitor.scala 689:38 chipyard.TestHarness.TinyRocketConfig.fir 207994:8 Monitor.scala 689:38 chipyard.TestHarness.TinyRocketConfig.fir 207994:8]
    node _GEN_48 = mux(eq(UInt<3>("h7"), _T_1043), UInt<3>("h4"), _GEN_47) @[Monitor.scala 689:38 chipyard.TestHarness.TinyRocketConfig.fir 207994:8 Monitor.scala 689:38 chipyard.TestHarness.TinyRocketConfig.fir 207994:8]
    node _T_1044 = eq(io_in_d_bits_opcode, _GEN_48) @[Monitor.scala 689:38 chipyard.TestHarness.TinyRocketConfig.fir 207994:8]
    node _GEN_55 = mux(eq(UInt<3>("h6"), _T_1043), UInt<3>("h5"), _GEN_46) @[Monitor.scala 690:38 chipyard.TestHarness.TinyRocketConfig.fir 207996:8 Monitor.scala 690:38 chipyard.TestHarness.TinyRocketConfig.fir 207996:8]
    node _GEN_56 = mux(eq(UInt<3>("h7"), _T_1043), UInt<3>("h4"), _GEN_55) @[Monitor.scala 690:38 chipyard.TestHarness.TinyRocketConfig.fir 207996:8 Monitor.scala 690:38 chipyard.TestHarness.TinyRocketConfig.fir 207996:8]
    node _T_1046 = eq(io_in_d_bits_opcode, _GEN_56) @[Monitor.scala 690:38 chipyard.TestHarness.TinyRocketConfig.fir 207996:8]
    node _T_1047 = or(_T_1044, _T_1046) @[Monitor.scala 689:72 chipyard.TestHarness.TinyRocketConfig.fir 207997:8]
    node _T_1049 = or(_T_1047, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207999:8]
    node _T_1050 = not(_T_1049) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 208000:8]
    node a_size_lookup = bits(_a_size_lookup_T_7, 7, 0) @[chipyard.TestHarness.TinyRocketConfig.fir 207845:4 Monitor.scala 638:19 chipyard.TestHarness.TinyRocketConfig.fir 207855:4]
    node _GEN_80 = pad(io_in_d_bits_size, 8) @[Monitor.scala 691:36 chipyard.TestHarness.TinyRocketConfig.fir 208005:8]
    node _T_1051 = eq(_GEN_80, a_size_lookup) @[Monitor.scala 691:36 chipyard.TestHarness.TinyRocketConfig.fir 208005:8]
    node _T_1053 = or(_T_1051, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 208007:8]
    node _T_1054 = not(_T_1053) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 208008:8]
    node _T_1056 = and(_T_1014, a_first_1) @[Monitor.scala 694:36 chipyard.TestHarness.TinyRocketConfig.fir 208016:4]
    node _T_1057 = and(_T_1056, io_in_a_valid) @[Monitor.scala 694:47 chipyard.TestHarness.TinyRocketConfig.fir 208017:4]
    node _T_1059 = and(_T_1057, _source_ok_T_1) @[Monitor.scala 694:65 chipyard.TestHarness.TinyRocketConfig.fir 208019:4]
    node _T_1061 = and(_T_1059, _T_1016) @[Monitor.scala 694:116 chipyard.TestHarness.TinyRocketConfig.fir 208021:4]
    node _T_1062 = not(io_in_d_ready) @[Monitor.scala 695:15 chipyard.TestHarness.TinyRocketConfig.fir 208023:6]
    node _T_1063 = or(_T_1062, io_in_a_ready) @[Monitor.scala 695:32 chipyard.TestHarness.TinyRocketConfig.fir 208024:6]
    node _T_1065 = or(_T_1063, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 208026:6]
    node _T_1066 = not(_T_1065) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 208027:6]
    node a_set_wo_ready = bits(_GEN_15, 0, 0) @[chipyard.TestHarness.TinyRocketConfig.fir 207828:4]
    node d_clr_wo_ready = bits(_GEN_21, 0, 0) @[chipyard.TestHarness.TinyRocketConfig.fir 207915:4]
    node _T_1067 = neq(a_set_wo_ready, d_clr_wo_ready) @[Monitor.scala 699:29 chipyard.TestHarness.TinyRocketConfig.fir 208033:4]
    node _T_1068 = orr(a_set_wo_ready) @[Monitor.scala 699:67 chipyard.TestHarness.TinyRocketConfig.fir 208034:4]
    node _T_1069 = not(_T_1068) @[Monitor.scala 699:51 chipyard.TestHarness.TinyRocketConfig.fir 208035:4]
    node _T_1070 = or(_T_1067, _T_1069) @[Monitor.scala 699:48 chipyard.TestHarness.TinyRocketConfig.fir 208036:4]
    node _T_1072 = or(_T_1070, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 208038:4]
    node _T_1073 = not(_T_1072) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 208039:4]
    node a_set = bits(_GEN_16, 0, 0) @[chipyard.TestHarness.TinyRocketConfig.fir 207826:4]
    node _inflight_T = or(inflight, a_set) @[Monitor.scala 702:27 chipyard.TestHarness.TinyRocketConfig.fir 208044:4]
    node d_clr = bits(_GEN_22, 0, 0) @[chipyard.TestHarness.TinyRocketConfig.fir 207913:4]
    node _inflight_T_1 = not(d_clr) @[Monitor.scala 702:38 chipyard.TestHarness.TinyRocketConfig.fir 208045:4]
    node _inflight_T_2 = and(_inflight_T, _inflight_T_1) @[Monitor.scala 702:36 chipyard.TestHarness.TinyRocketConfig.fir 208046:4]
    node a_opcodes_set = bits(_GEN_19, 3, 0) @[chipyard.TestHarness.TinyRocketConfig.fir 207830:4]
    node _inflight_opcodes_T = or(inflight_opcodes, a_opcodes_set) @[Monitor.scala 703:43 chipyard.TestHarness.TinyRocketConfig.fir 208048:4]
    node d_opcodes_clr = bits(_GEN_23, 3, 0) @[chipyard.TestHarness.TinyRocketConfig.fir 207917:4]
    node _inflight_opcodes_T_1 = not(d_opcodes_clr) @[Monitor.scala 703:62 chipyard.TestHarness.TinyRocketConfig.fir 208049:4]
    node _inflight_opcodes_T_2 = and(_inflight_opcodes_T, _inflight_opcodes_T_1) @[Monitor.scala 703:60 chipyard.TestHarness.TinyRocketConfig.fir 208050:4]
    node a_sizes_set = bits(_GEN_20, 7, 0) @[chipyard.TestHarness.TinyRocketConfig.fir 207832:4]
    node _inflight_sizes_T = or(inflight_sizes, a_sizes_set) @[Monitor.scala 704:39 chipyard.TestHarness.TinyRocketConfig.fir 208052:4]
    node d_sizes_clr = bits(_GEN_24, 7, 0) @[chipyard.TestHarness.TinyRocketConfig.fir 207919:4]
    node _inflight_sizes_T_1 = not(d_sizes_clr) @[Monitor.scala 704:56 chipyard.TestHarness.TinyRocketConfig.fir 208053:4]
    node _inflight_sizes_T_2 = and(_inflight_sizes_T, _inflight_sizes_T_1) @[Monitor.scala 704:54 chipyard.TestHarness.TinyRocketConfig.fir 208054:4]
    reg watchdog : UInt<32>, clock with :
      reset => (UInt<1>("h0"), watchdog) @[Monitor.scala 706:27 chipyard.TestHarness.TinyRocketConfig.fir 208056:4]
    node _T_1074 = orr(inflight) @[Monitor.scala 709:26 chipyard.TestHarness.TinyRocketConfig.fir 208059:4]
    node _T_1075 = not(_T_1074) @[Monitor.scala 709:16 chipyard.TestHarness.TinyRocketConfig.fir 208060:4]
    node _T_1076 = eq(plusarg_reader.out, UInt<32>("h0")) @[Monitor.scala 709:39 chipyard.TestHarness.TinyRocketConfig.fir 208061:4]
    node _T_1077 = or(_T_1075, _T_1076) @[Monitor.scala 709:30 chipyard.TestHarness.TinyRocketConfig.fir 208062:4]
    node _T_1078 = lt(watchdog, plusarg_reader.out) @[Monitor.scala 709:59 chipyard.TestHarness.TinyRocketConfig.fir 208063:4]
    node _T_1079 = or(_T_1077, _T_1078) @[Monitor.scala 709:47 chipyard.TestHarness.TinyRocketConfig.fir 208064:4]
    node _T_1081 = or(_T_1079, reset) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 208066:4]
    node _T_1082 = not(_T_1081) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 208067:4]
    node _watchdog_T = add(watchdog, UInt<32>("h1")) @[Monitor.scala 711:26 chipyard.TestHarness.TinyRocketConfig.fir 208072:4]
    node _watchdog_T_1 = tail(_watchdog_T, 1) @[Monitor.scala 711:26 chipyard.TestHarness.TinyRocketConfig.fir 208073:4]
    node _T_1085 = or(_a_first_T, _d_first_T) @[Monitor.scala 712:27 chipyard.TestHarness.TinyRocketConfig.fir 208077:4]
    node _GEN_57 = mux(_T_1085, UInt<32>("h0"), _watchdog_T_1) @[Monitor.scala 712:47 chipyard.TestHarness.TinyRocketConfig.fir 208078:4 Monitor.scala 712:58 chipyard.TestHarness.TinyRocketConfig.fir 208079:6 Monitor.scala 711:14 chipyard.TestHarness.TinyRocketConfig.fir 208074:4]
    reg inflight_sizes_1 : UInt<8>, clock with :
      reset => (UInt<1>("h0"), inflight_sizes_1) @[Monitor.scala 725:35 chipyard.TestHarness.TinyRocketConfig.fir 208083:4]
    reg d_first_counter_2 : UInt<10>, clock with :
      reset => (UInt<1>("h0"), d_first_counter_2) @[Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 208118:4]
    node _d_first_counter1_T_2 = sub(d_first_counter_2, UInt<10>("h1")) @[Edges.scala 229:28 chipyard.TestHarness.TinyRocketConfig.fir 208119:4]
    node d_first_counter1_2 = tail(_d_first_counter1_T_2, 1) @[Edges.scala 229:28 chipyard.TestHarness.TinyRocketConfig.fir 208120:4]
    node d_first_2 = eq(d_first_counter_2, UInt<10>("h0")) @[Edges.scala 230:25 chipyard.TestHarness.TinyRocketConfig.fir 208121:4]
    node _d_first_counter_T_2 = mux(d_first_2, d_first_beats1, d_first_counter1_2) @[Edges.scala 235:21 chipyard.TestHarness.TinyRocketConfig.fir 208129:6]
    node _GEN_59 = mux(_d_first_T, _d_first_counter_T_2, d_first_counter_2) @[Edges.scala 234:17 chipyard.TestHarness.TinyRocketConfig.fir 208128:4 Edges.scala 235:15 chipyard.TestHarness.TinyRocketConfig.fir 208130:6 Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 208118:4]
    node _c_size_lookup_T_1 = dshr(inflight_sizes_1, _a_size_lookup_T) @[Monitor.scala 747:42 chipyard.TestHarness.TinyRocketConfig.fir 208154:4]
    node _GEN_84 = pad(_c_size_lookup_T_1, 16) @[Monitor.scala 747:93 chipyard.TestHarness.TinyRocketConfig.fir 208159:4]
    node _c_size_lookup_T_6 = and(_GEN_84, _a_size_lookup_T_5) @[Monitor.scala 747:93 chipyard.TestHarness.TinyRocketConfig.fir 208159:4]
    node _GEN_85 = shr(_c_size_lookup_T_6, 1) @[Monitor.scala 747:146 chipyard.TestHarness.TinyRocketConfig.fir 208160:4]
    node _c_size_lookup_T_7 = pad(_GEN_85, 16) @[Monitor.scala 747:146 chipyard.TestHarness.TinyRocketConfig.fir 208160:4]
    node _T_1103 = and(io_in_d_valid, d_first_2) @[Monitor.scala 779:26 chipyard.TestHarness.TinyRocketConfig.fir 208238:4]
    node _T_1105 = and(_T_1103, _T_810) @[Monitor.scala 779:71 chipyard.TestHarness.TinyRocketConfig.fir 208240:4]
    node _T_1107 = and(_d_first_T, d_first_2) @[Monitor.scala 783:27 chipyard.TestHarness.TinyRocketConfig.fir 208246:4]
    node _T_1109 = and(_T_1107, _T_810) @[Monitor.scala 783:72 chipyard.TestHarness.TinyRocketConfig.fir 208248:4]
    node _GEN_69 = mux(_T_1109, _d_sizes_clr_T_5, UInt<31>("h0")) @[Monitor.scala 783:90 chipyard.TestHarness.TinyRocketConfig.fir 208249:4 Monitor.scala 786:21 chipyard.TestHarness.TinyRocketConfig.fir 208265:6 chipyard.TestHarness.TinyRocketConfig.fir 208236:4]
    node _T_1113 = dshr(UInt<1>("h0"), io_in_d_bits_source) @[Monitor.scala 791:25 chipyard.TestHarness.TinyRocketConfig.fir 208284:6]
    node _T_1117 = or(_T_1113, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 208288:6]
    node _T_1118 = not(_T_1117) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 208289:6]
    node c_size_lookup = bits(_c_size_lookup_T_7, 7, 0) @[chipyard.TestHarness.TinyRocketConfig.fir 208142:4 Monitor.scala 747:21 chipyard.TestHarness.TinyRocketConfig.fir 208161:4]
    node _T_1123 = eq(_GEN_80, c_size_lookup) @[Monitor.scala 795:36 chipyard.TestHarness.TinyRocketConfig.fir 208307:8]
    node _T_1125 = or(_T_1123, reset) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 208309:8]
    node _T_1126 = not(_T_1125) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 208310:8]
    node d_sizes_clr_1 = bits(_GEN_69, 7, 0) @[chipyard.TestHarness.TinyRocketConfig.fir 208235:4]
    node _inflight_sizes_T_4 = not(d_sizes_clr_1) @[Monitor.scala 811:58 chipyard.TestHarness.TinyRocketConfig.fir 208360:4]
    node _inflight_sizes_T_5 = and(inflight_sizes_1, _inflight_sizes_T_4) @[Monitor.scala 811:56 chipyard.TestHarness.TinyRocketConfig.fir 208361:4]
    a_first_counter <= mux(reset, UInt<10>("h0"), _GEN_0) @[Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 207616:4 Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 207616:4]
    opcode <= mux(_T_974, io_in_a_bits_opcode, opcode) @[Monitor.scala 396:32 chipyard.TestHarness.TinyRocketConfig.fir 207681:4 Monitor.scala 397:15 chipyard.TestHarness.TinyRocketConfig.fir 207682:6 Monitor.scala 384:22 chipyard.TestHarness.TinyRocketConfig.fir 207630:4]
    size <= mux(_T_974, io_in_a_bits_size, size) @[Monitor.scala 396:32 chipyard.TestHarness.TinyRocketConfig.fir 207681:4 Monitor.scala 399:15 chipyard.TestHarness.TinyRocketConfig.fir 207684:6 Monitor.scala 386:22 chipyard.TestHarness.TinyRocketConfig.fir 207632:4]
    address <= mux(_T_974, io_in_a_bits_address, address) @[Monitor.scala 396:32 chipyard.TestHarness.TinyRocketConfig.fir 207681:4 Monitor.scala 401:15 chipyard.TestHarness.TinyRocketConfig.fir 207686:6 Monitor.scala 388:22 chipyard.TestHarness.TinyRocketConfig.fir 207634:4]
    d_first_counter <= mux(reset, UInt<10>("h0"), _GEN_6) @[Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 207696:4 Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 207696:4]
    opcode_1 <= mux(_T_1002, io_in_d_bits_opcode, opcode_1) @[Monitor.scala 549:32 chipyard.TestHarness.TinyRocketConfig.fir 207770:4 Monitor.scala 550:15 chipyard.TestHarness.TinyRocketConfig.fir 207771:6 Monitor.scala 535:22 chipyard.TestHarness.TinyRocketConfig.fir 207710:4]
    param_1 <= mux(_T_1002, io_in_d_bits_param, param_1) @[Monitor.scala 549:32 chipyard.TestHarness.TinyRocketConfig.fir 207770:4 Monitor.scala 551:15 chipyard.TestHarness.TinyRocketConfig.fir 207772:6 Monitor.scala 536:22 chipyard.TestHarness.TinyRocketConfig.fir 207711:4]
    size_1 <= mux(_T_1002, io_in_d_bits_size, size_1) @[Monitor.scala 549:32 chipyard.TestHarness.TinyRocketConfig.fir 207770:4 Monitor.scala 552:15 chipyard.TestHarness.TinyRocketConfig.fir 207773:6 Monitor.scala 537:22 chipyard.TestHarness.TinyRocketConfig.fir 207712:4]
    source_1 <= mux(_T_1002, io_in_d_bits_source, source_1) @[Monitor.scala 549:32 chipyard.TestHarness.TinyRocketConfig.fir 207770:4 Monitor.scala 553:15 chipyard.TestHarness.TinyRocketConfig.fir 207774:6 Monitor.scala 538:22 chipyard.TestHarness.TinyRocketConfig.fir 207713:4]
    sink <= mux(_T_1002, io_in_d_bits_sink, sink) @[Monitor.scala 549:32 chipyard.TestHarness.TinyRocketConfig.fir 207770:4 Monitor.scala 554:15 chipyard.TestHarness.TinyRocketConfig.fir 207775:6 Monitor.scala 539:22 chipyard.TestHarness.TinyRocketConfig.fir 207714:4]
    denied <= mux(_T_1002, io_in_d_bits_denied, denied) @[Monitor.scala 549:32 chipyard.TestHarness.TinyRocketConfig.fir 207770:4 Monitor.scala 555:15 chipyard.TestHarness.TinyRocketConfig.fir 207776:6 Monitor.scala 540:22 chipyard.TestHarness.TinyRocketConfig.fir 207715:4]
    inflight <= mux(reset, UInt<1>("h0"), _inflight_T_2) @[Monitor.scala 611:27 chipyard.TestHarness.TinyRocketConfig.fir 207778:4 Monitor.scala 611:27 chipyard.TestHarness.TinyRocketConfig.fir 207778:4 Monitor.scala 702:14 chipyard.TestHarness.TinyRocketConfig.fir 208047:4]
    inflight_opcodes <= mux(reset, UInt<4>("h0"), _inflight_opcodes_T_2) @[Monitor.scala 613:35 chipyard.TestHarness.TinyRocketConfig.fir 207779:4 Monitor.scala 613:35 chipyard.TestHarness.TinyRocketConfig.fir 207779:4 Monitor.scala 703:22 chipyard.TestHarness.TinyRocketConfig.fir 208051:4]
    inflight_sizes <= mux(reset, UInt<8>("h0"), _inflight_sizes_T_2) @[Monitor.scala 615:33 chipyard.TestHarness.TinyRocketConfig.fir 207780:4 Monitor.scala 615:33 chipyard.TestHarness.TinyRocketConfig.fir 207780:4 Monitor.scala 704:20 chipyard.TestHarness.TinyRocketConfig.fir 208055:4]
    a_first_counter_1 <= mux(reset, UInt<10>("h0"), _GEN_13) @[Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 207790:4 Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 207790:4]
    d_first_counter_1 <= mux(reset, UInt<10>("h0"), _GEN_14) @[Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 207812:4 Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 207812:4]
    watchdog <= mux(reset, UInt<32>("h0"), _GEN_57) @[Monitor.scala 706:27 chipyard.TestHarness.TinyRocketConfig.fir 208056:4 Monitor.scala 706:27 chipyard.TestHarness.TinyRocketConfig.fir 208056:4]
    inflight_sizes_1 <= mux(reset, UInt<8>("h0"), _inflight_sizes_T_5) @[Monitor.scala 725:35 chipyard.TestHarness.TinyRocketConfig.fir 208083:4 Monitor.scala 725:35 chipyard.TestHarness.TinyRocketConfig.fir 208083:4 Monitor.scala 811:22 chipyard.TestHarness.TinyRocketConfig.fir 208362:4]
    d_first_counter_2 <= mux(reset, UInt<10>("h0"), _GEN_59) @[Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 208118:4 Edges.scala 228:27 chipyard.TestHarness.TinyRocketConfig.fir 208118:4]
    node _GEN_90 = and(io_in_a_valid, _T_15) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 206352:10]
    printf(clock, and(_GEN_90, _T_75), "Assertion failed: 'A' channel carries AcquireBlock type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 206352:10]
    stop(clock, and(_GEN_90, _T_75), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 206353:10]
    printf(clock, and(_GEN_90, _T_75), "Assertion failed: 'A' channel carries AcquireBlock from a client which does not support Probe (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 206413:10]
    stop(clock, and(_GEN_90, _T_75), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 206414:10]
    printf(clock, and(_GEN_90, _T_139), "Assertion failed: 'A' channel AcquireBlock smaller than a beat (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 206428:10]
    stop(clock, and(_GEN_90, _T_139), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 206429:10]
    printf(clock, and(_GEN_90, _T_142), "Assertion failed: 'A' channel AcquireBlock address not aligned to size (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 206435:10]
    stop(clock, and(_GEN_90, _T_142), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 206436:10]
    printf(clock, and(_GEN_90, _T_151), "Assertion failed: 'A' channel AcquireBlock contains invalid mask (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 206452:10]
    stop(clock, and(_GEN_90, _T_151), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 206453:10]
    node _GEN_100 = and(io_in_a_valid, _T_156) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 206527:10]
    printf(clock, and(_GEN_100, _T_75), "Assertion failed: 'A' channel carries AcquirePerm type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 206527:10]
    stop(clock, and(_GEN_100, _T_75), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 206528:10]
    printf(clock, and(_GEN_100, _T_75), "Assertion failed: 'A' channel carries AcquirePerm from a client which does not support Probe (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 206588:10]
    stop(clock, and(_GEN_100, _T_75), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 206589:10]
    printf(clock, and(_GEN_100, _T_139), "Assertion failed: 'A' channel AcquirePerm smaller than a beat (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 206603:10]
    stop(clock, and(_GEN_100, _T_139), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 206604:10]
    printf(clock, and(_GEN_100, _T_142), "Assertion failed: 'A' channel AcquirePerm address not aligned to size (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 206610:10]
    stop(clock, and(_GEN_100, _T_142), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 206611:10]
    printf(clock, and(_GEN_100, _T_75), "Assertion failed: 'A' channel AcquirePerm requests NtoB (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 206626:10]
    stop(clock, and(_GEN_100, _T_75), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 206627:10]
    printf(clock, and(_GEN_100, _T_151), "Assertion failed: 'A' channel AcquirePerm contains invalid mask (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 206635:10]
    stop(clock, and(_GEN_100, _T_151), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 206636:10]
    node _GEN_112 = and(io_in_a_valid, _T_301) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 206659:10]
    printf(clock, and(_GEN_112, _T_310), "Assertion failed: 'A' channel carries Get type which master claims it can't emit (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 206659:10]
    stop(clock, and(_GEN_112, _T_310), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 206660:10]
    printf(clock, and(_GEN_112, _T_371), "Assertion failed: 'A' channel carries Get type which slave claims it can't support (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 206724:10]
    stop(clock, and(_GEN_112, _T_371), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 206725:10]
    printf(clock, and(_GEN_112, _T_142), "Assertion failed: 'A' channel Get address not aligned to size (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 206738:10]
    stop(clock, and(_GEN_112, _T_142), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 206739:10]
    printf(clock, and(_GEN_112, _T_385), "Assertion failed: 'A' channel Get contains invalid mask (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 206754:10]
    stop(clock, and(_GEN_112, _T_385), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 206755:10]
    node _GEN_120 = and(io_in_a_valid, _T_390) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 206839:10]
    printf(clock, and(_GEN_120, _T_460), "Assertion failed: 'A' channel carries PutFull type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 206839:10]
    stop(clock, and(_GEN_120, _T_460), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 206840:10]
    printf(clock, and(_GEN_120, _T_142), "Assertion failed: 'A' channel PutFull address not aligned to size (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 206853:10]
    stop(clock, and(_GEN_120, _T_142), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 206854:10]
    printf(clock, and(_GEN_120, _T_385), "Assertion failed: 'A' channel PutFull contains invalid mask (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 206869:10]
    stop(clock, and(_GEN_120, _T_385), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 206870:10]
    node _GEN_126 = and(io_in_a_valid, _T_475) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 206946:10]
    printf(clock, and(_GEN_126, _T_460), "Assertion failed: 'A' channel carries PutPartial type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 206946:10]
    stop(clock, and(_GEN_126, _T_460), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 206947:10]
    printf(clock, and(_GEN_126, _T_142), "Assertion failed: 'A' channel PutPartial address not aligned to size (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 206960:10]
    stop(clock, and(_GEN_126, _T_142), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 206961:10]
    printf(clock, and(_GEN_126, _T_561), "Assertion failed: 'A' channel PutPartial contains invalid mask (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 206978:10]
    stop(clock, and(_GEN_126, _T_561), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 206979:10]
    node _GEN_132 = and(io_in_a_valid, _T_562) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 207050:10]
    printf(clock, and(_GEN_132, _T_627), "Assertion failed: 'A' channel carries Arithmetic type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 207050:10]
    stop(clock, and(_GEN_132, _T_627), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 207051:10]
    printf(clock, and(_GEN_132, _T_142), "Assertion failed: 'A' channel Arithmetic address not aligned to size (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 207064:10]
    stop(clock, and(_GEN_132, _T_142), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 207065:10]
    printf(clock, and(_GEN_132, _T_385), "Assertion failed: 'A' channel Arithmetic contains invalid mask (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 207080:10]
    stop(clock, and(_GEN_132, _T_385), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 207081:10]
    node _GEN_138 = and(io_in_a_valid, _T_642) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 207152:10]
    printf(clock, and(_GEN_138, _T_627), "Assertion failed: 'A' channel carries Logical type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 207152:10]
    stop(clock, and(_GEN_138, _T_627), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 207153:10]
    printf(clock, and(_GEN_138, _T_142), "Assertion failed: 'A' channel Logical address not aligned to size (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 207166:10]
    stop(clock, and(_GEN_138, _T_142), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 207167:10]
    printf(clock, and(_GEN_138, _T_385), "Assertion failed: 'A' channel Logical contains invalid mask (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 207182:10]
    stop(clock, and(_GEN_138, _T_385), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 207183:10]
    node _GEN_144 = and(io_in_a_valid, _T_722) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 207254:10]
    printf(clock, and(_GEN_144, _T_787), "Assertion failed: 'A' channel carries Hint type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 207254:10]
    stop(clock, and(_GEN_144, _T_787), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 207255:10]
    printf(clock, and(_GEN_144, _T_142), "Assertion failed: 'A' channel Hint address not aligned to size (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 207268:10]
    stop(clock, and(_GEN_144, _T_142), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 207269:10]
    printf(clock, and(_GEN_144, _T_385), "Assertion failed: 'A' channel Hint contains invalid mask (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 207284:10]
    stop(clock, and(_GEN_144, _T_385), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 207285:10]
    printf(clock, and(io_in_d_valid, _T_809), "Assertion failed: 'D' channel has invalid opcode (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207303:8]
    stop(clock, and(io_in_d_valid, _T_809), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207304:8]
    node _GEN_150 = and(io_in_d_valid, _T_810) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207317:10]
    printf(clock, and(_GEN_150, _T_813), "Assertion failed: 'D' channel ReleaseAck carries invalid source ID (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207317:10]
    stop(clock, and(_GEN_150, _T_813), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207318:10]
    printf(clock, and(_GEN_150, _T_817), "Assertion failed: 'D' channel ReleaseAck smaller than a beat (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207325:10]
    stop(clock, and(_GEN_150, _T_817), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207326:10]
    printf(clock, and(_GEN_150, _T_821), "Assertion failed: 'D' channel ReleaseeAck carries invalid param (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207333:10]
    stop(clock, and(_GEN_150, _T_821), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207334:10]
    printf(clock, and(_GEN_150, _T_825), "Assertion failed: 'D' channel ReleaseAck is corrupt (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207341:10]
    stop(clock, and(_GEN_150, _T_825), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207342:10]
    printf(clock, and(_GEN_150, _T_829), "Assertion failed: 'D' channel ReleaseAck is denied (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207349:10]
    stop(clock, and(_GEN_150, _T_829), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207350:10]
    node _GEN_160 = and(io_in_d_valid, _T_830) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207359:10]
    printf(clock, and(_GEN_160, _T_813), "Assertion failed: 'D' channel Grant carries invalid source ID (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207359:10]
    stop(clock, and(_GEN_160, _T_813), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207360:10]
    printf(clock, and(_GEN_160, _T_75), "Assertion failed: 'D' channel Grant carries invalid sink ID (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207366:10]
    stop(clock, and(_GEN_160, _T_75), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207367:10]
    printf(clock, and(_GEN_160, _T_817), "Assertion failed: 'D' channel Grant smaller than a beat (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207374:10]
    stop(clock, and(_GEN_160, _T_817), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207375:10]
    printf(clock, and(_GEN_160, _T_844), "Assertion failed: 'D' channel Grant carries invalid cap param (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207382:10]
    stop(clock, and(_GEN_160, _T_844), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207383:10]
    printf(clock, and(_GEN_160, _T_848), "Assertion failed: 'D' channel Grant carries toN param (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207390:10]
    stop(clock, and(_GEN_160, _T_848), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207391:10]
    printf(clock, and(_GEN_160, _T_825), "Assertion failed: 'D' channel Grant is corrupt (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207398:10]
    stop(clock, and(_GEN_160, _T_825), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207399:10]
    node _GEN_172 = and(io_in_d_valid, _T_858) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207417:10]
    printf(clock, and(_GEN_172, _T_813), "Assertion failed: 'D' channel GrantData carries invalid source ID (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207417:10]
    stop(clock, and(_GEN_172, _T_813), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207418:10]
    printf(clock, and(_GEN_172, _T_75), "Assertion failed: 'D' channel GrantData carries invalid sink ID (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207424:10]
    stop(clock, and(_GEN_172, _T_75), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207425:10]
    printf(clock, and(_GEN_172, _T_817), "Assertion failed: 'D' channel GrantData smaller than a beat (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207432:10]
    stop(clock, and(_GEN_172, _T_817), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207433:10]
    printf(clock, and(_GEN_172, _T_844), "Assertion failed: 'D' channel GrantData carries invalid cap param (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207440:10]
    stop(clock, and(_GEN_172, _T_844), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207441:10]
    printf(clock, and(_GEN_172, _T_848), "Assertion failed: 'D' channel GrantData carries toN param (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207448:10]
    stop(clock, and(_GEN_172, _T_848), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207449:10]
    printf(clock, and(_GEN_172, _T_881), "Assertion failed: 'D' channel GrantData is denied but not corrupt (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207457:10]
    stop(clock, and(_GEN_172, _T_881), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207458:10]
    node _GEN_184 = and(io_in_d_valid, _T_887) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207476:10]
    printf(clock, and(_GEN_184, _T_813), "Assertion failed: 'D' channel AccessAck carries invalid source ID (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207476:10]
    stop(clock, and(_GEN_184, _T_813), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207477:10]
    printf(clock, and(_GEN_184, _T_821), "Assertion failed: 'D' channel AccessAck carries invalid param (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207484:10]
    stop(clock, and(_GEN_184, _T_821), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207485:10]
    printf(clock, and(_GEN_184, _T_825), "Assertion failed: 'D' channel AccessAck is corrupt (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207492:10]
    stop(clock, and(_GEN_184, _T_825), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207493:10]
    node _GEN_190 = and(io_in_d_valid, _T_904) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207511:10]
    printf(clock, and(_GEN_190, _T_813), "Assertion failed: 'D' channel AccessAckData carries invalid source ID (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207511:10]
    stop(clock, and(_GEN_190, _T_813), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207512:10]
    printf(clock, and(_GEN_190, _T_821), "Assertion failed: 'D' channel AccessAckData carries invalid param (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207519:10]
    stop(clock, and(_GEN_190, _T_821), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207520:10]
    printf(clock, and(_GEN_190, _T_881), "Assertion failed: 'D' channel AccessAckData is denied but not corrupt (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207528:10]
    stop(clock, and(_GEN_190, _T_881), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207529:10]
    node _GEN_196 = and(io_in_d_valid, _T_922) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207547:10]
    printf(clock, and(_GEN_196, _T_813), "Assertion failed: 'D' channel HintAck carries invalid source ID (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207547:10]
    stop(clock, and(_GEN_196, _T_813), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207548:10]
    printf(clock, and(_GEN_196, _T_821), "Assertion failed: 'D' channel HintAck carries invalid param (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207555:10]
    stop(clock, and(_GEN_196, _T_821), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207556:10]
    printf(clock, and(_GEN_196, _T_825), "Assertion failed: 'D' channel HintAck is corrupt (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207563:10]
    stop(clock, and(_GEN_196, _T_825), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207564:10]
    printf(clock, and(_T_952, _T_956), "Assertion failed: 'A' channel opcode changed within multibeat operation (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 207643:8]
    stop(clock, and(_T_952, _T_956), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 207644:8]
    printf(clock, and(_T_952, _T_964), "Assertion failed: 'A' channel size changed within multibeat operation (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 207659:8]
    stop(clock, and(_T_952, _T_964), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 207660:8]
    printf(clock, and(_T_952, _T_972), "Assertion failed: 'A' channel address changed with multibeat operation (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 207675:8]
    stop(clock, and(_T_952, _T_972), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 207676:8]
    printf(clock, and(_T_976, _T_980), "Assertion failed: 'D' channel opcode changed within multibeat operation (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207724:8]
    stop(clock, and(_T_976, _T_980), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207725:8]
    printf(clock, and(_T_976, _T_984), "Assertion failed: 'D' channel param changed within multibeat operation (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207732:8]
    stop(clock, and(_T_976, _T_984), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207733:8]
    printf(clock, and(_T_976, _T_988), "Assertion failed: 'D' channel size changed within multibeat operation (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207740:8]
    stop(clock, and(_T_976, _T_988), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207741:8]
    printf(clock, and(_T_976, _T_992), "Assertion failed: 'D' channel source changed within multibeat operation (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207748:8]
    stop(clock, and(_T_976, _T_992), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207749:8]
    printf(clock, and(_T_976, _T_996), "Assertion failed: 'D' channel sink changed with multibeat operation (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207756:8]
    stop(clock, and(_T_976, _T_996), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207757:8]
    printf(clock, and(_T_976, _T_1000), "Assertion failed: 'D' channel denied changed with multibeat operation (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207764:8]
    stop(clock, and(_T_976, _T_1000), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207765:8]
    printf(clock, and(_T_1006, _T_1013), "Assertion failed: 'A' channel re-used a source ID (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 207909:8]
    stop(clock, and(_T_1006, _T_1013), 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 207910:8]
    printf(clock, and(_T_1017, _T_1032), "Assertion failed: 'D' channel acknowledged for nothing inflight (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207969:8]
    stop(clock, and(_T_1017, _T_1032), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207970:8]
    node _GEN_202 = and(_T_1017, same_cycle_resp) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207980:10]
    printf(clock, and(_GEN_202, _T_1038), "Assertion failed: 'D' channel contains improper opcode response (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207980:10]
    stop(clock, and(_GEN_202, _T_1038), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207981:10]
    printf(clock, and(_GEN_202, _T_1042), "Assertion failed: 'D' channel contains improper response size (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207988:10]
    stop(clock, and(_GEN_202, _T_1042), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 207989:10]
    node _GEN_206 = not(same_cycle_resp) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 208002:10]
    node _GEN_207 = and(_T_1017, _GEN_206) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 208002:10]
    printf(clock, and(_GEN_207, _T_1050), "Assertion failed: 'D' channel contains improper opcode response (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 208002:10]
    stop(clock, and(_GEN_207, _T_1050), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 208003:10]
    printf(clock, and(_GEN_207, _T_1054), "Assertion failed: 'D' channel contains improper response size (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 208010:10]
    stop(clock, and(_GEN_207, _T_1054), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 208011:10]
    printf(clock, and(_T_1061, _T_1066), "Assertion failed: ready check\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 208029:8]
    stop(clock, and(_T_1061, _T_1066), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 208030:8]
    printf(clock, _T_1073, "Assertion failed: 'A' and 'D' concurrent, despite minlatency 8 (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 208041:6]
    stop(clock, _T_1073, 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 208042:6]
    printf(clock, _T_1082, "Assertion failed: TileLink timeout expired (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 208069:6]
    stop(clock, _T_1082, 1) @[Monitor.scala 42:11 chipyard.TestHarness.TinyRocketConfig.fir 208070:6]
    printf(clock, and(_T_1105, _T_1118), "Assertion failed: 'D' channel acknowledged for nothing inflight (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 208291:8]
    stop(clock, and(_T_1105, _T_1118), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 208292:8]
    printf(clock, and(_T_1105, _T_1126), "Assertion failed: 'D' channel contains improper response size (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 208312:10]
    stop(clock, and(_T_1105, _T_1126), 1) @[Monitor.scala 49:11 chipyard.TestHarness.TinyRocketConfig.fir 208313:10]

  module TLBuffer_17_inTestHarness : @[chipyard.TestHarness.TinyRocketConfig.fir 208519:2]
    input clock : Clock @[chipyard.TestHarness.TinyRocketConfig.fir 208520:4]
    input reset : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 208521:4]
    output auto_in_a_ready : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 208522:4]
    input auto_in_a_valid : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 208522:4]
    input auto_in_a_bits_opcode : UInt<3> @[chipyard.TestHarness.TinyRocketConfig.fir 208522:4]
    input auto_in_a_bits_size : UInt<4> @[chipyard.TestHarness.TinyRocketConfig.fir 208522:4]
    input auto_in_a_bits_address : UInt<32> @[chipyard.TestHarness.TinyRocketConfig.fir 208522:4]
    input auto_in_a_bits_mask : UInt<4> @[chipyard.TestHarness.TinyRocketConfig.fir 208522:4]
    input auto_in_a_bits_data : UInt<32> @[chipyard.TestHarness.TinyRocketConfig.fir 208522:4]
    input auto_in_d_ready : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 208522:4]
    output auto_in_d_valid : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 208522:4]
    output auto_in_d_bits_data : UInt<32> @[chipyard.TestHarness.TinyRocketConfig.fir 208522:4]
    input auto_out_a_ready : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 208522:4]
    output auto_out_a_valid : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 208522:4]
    output auto_out_a_bits_opcode : UInt<3> @[chipyard.TestHarness.TinyRocketConfig.fir 208522:4]
    output auto_out_a_bits_param : UInt<3> @[chipyard.TestHarness.TinyRocketConfig.fir 208522:4]
    output auto_out_a_bits_size : UInt<4> @[chipyard.TestHarness.TinyRocketConfig.fir 208522:4]
    output auto_out_a_bits_source : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 208522:4]
    output auto_out_a_bits_address : UInt<32> @[chipyard.TestHarness.TinyRocketConfig.fir 208522:4]
    output auto_out_a_bits_mask : UInt<4> @[chipyard.TestHarness.TinyRocketConfig.fir 208522:4]
    output auto_out_a_bits_data : UInt<32> @[chipyard.TestHarness.TinyRocketConfig.fir 208522:4]
    output auto_out_a_bits_corrupt : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 208522:4]
    output auto_out_d_ready : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 208522:4]
    input auto_out_d_valid : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 208522:4]
    input auto_out_d_bits_opcode : UInt<3> @[chipyard.TestHarness.TinyRocketConfig.fir 208522:4]
    input auto_out_d_bits_param : UInt<2> @[chipyard.TestHarness.TinyRocketConfig.fir 208522:4]
    input auto_out_d_bits_size : UInt<4> @[chipyard.TestHarness.TinyRocketConfig.fir 208522:4]
    input auto_out_d_bits_source : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 208522:4]
    input auto_out_d_bits_sink : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 208522:4]
    input auto_out_d_bits_denied : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 208522:4]
    input auto_out_d_bits_data : UInt<32> @[chipyard.TestHarness.TinyRocketConfig.fir 208522:4]
    input auto_out_d_bits_corrupt : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 208522:4]

    inst monitor of TLMonitor_45_inTestHarness @[Nodes.scala 24:25 chipyard.TestHarness.TinyRocketConfig.fir 208529:4]
    inst bundleOut_0_a_q of Queue_6_inTestHarness @[Decoupled.scala 296:21 chipyard.TestHarness.TinyRocketConfig.fir 208556:4]
    inst bundleIn_0_d_q of Queue_7_inTestHarness @[Decoupled.scala 296:21 chipyard.TestHarness.TinyRocketConfig.fir 208570:4]
    auto_in_a_ready <= bundleOut_0_a_q.io_enq_ready @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 208527:4 Decoupled.scala 299:17 chipyard.TestHarness.TinyRocketConfig.fir 208568:4]
    auto_in_d_valid <= bundleIn_0_d_q.io_deq_valid @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 208527:4 Buffer.scala 38:13 chipyard.TestHarness.TinyRocketConfig.fir 208583:4]
    auto_in_d_bits_data <= bundleIn_0_d_q.io_deq_bits_data @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 208527:4 Buffer.scala 38:13 chipyard.TestHarness.TinyRocketConfig.fir 208583:4]
    auto_out_a_valid <= bundleOut_0_a_q.io_deq_valid @[Nodes.scala 1207:84 chipyard.TestHarness.TinyRocketConfig.fir 208552:4 Buffer.scala 37:13 chipyard.TestHarness.TinyRocketConfig.fir 208569:4]
    auto_out_a_bits_opcode <= bundleOut_0_a_q.io_deq_bits_opcode @[Nodes.scala 1207:84 chipyard.TestHarness.TinyRocketConfig.fir 208552:4 Buffer.scala 37:13 chipyard.TestHarness.TinyRocketConfig.fir 208569:4]
    auto_out_a_bits_param <= bundleOut_0_a_q.io_deq_bits_param @[Nodes.scala 1207:84 chipyard.TestHarness.TinyRocketConfig.fir 208552:4 Buffer.scala 37:13 chipyard.TestHarness.TinyRocketConfig.fir 208569:4]
    auto_out_a_bits_size <= bundleOut_0_a_q.io_deq_bits_size @[Nodes.scala 1207:84 chipyard.TestHarness.TinyRocketConfig.fir 208552:4 Buffer.scala 37:13 chipyard.TestHarness.TinyRocketConfig.fir 208569:4]
    auto_out_a_bits_source <= bundleOut_0_a_q.io_deq_bits_source @[Nodes.scala 1207:84 chipyard.TestHarness.TinyRocketConfig.fir 208552:4 Buffer.scala 37:13 chipyard.TestHarness.TinyRocketConfig.fir 208569:4]
    auto_out_a_bits_address <= bundleOut_0_a_q.io_deq_bits_address @[Nodes.scala 1207:84 chipyard.TestHarness.TinyRocketConfig.fir 208552:4 Buffer.scala 37:13 chipyard.TestHarness.TinyRocketConfig.fir 208569:4]
    auto_out_a_bits_mask <= bundleOut_0_a_q.io_deq_bits_mask @[Nodes.scala 1207:84 chipyard.TestHarness.TinyRocketConfig.fir 208552:4 Buffer.scala 37:13 chipyard.TestHarness.TinyRocketConfig.fir 208569:4]
    auto_out_a_bits_data <= bundleOut_0_a_q.io_deq_bits_data @[Nodes.scala 1207:84 chipyard.TestHarness.TinyRocketConfig.fir 208552:4 Buffer.scala 37:13 chipyard.TestHarness.TinyRocketConfig.fir 208569:4]
    auto_out_a_bits_corrupt <= bundleOut_0_a_q.io_deq_bits_corrupt @[Nodes.scala 1207:84 chipyard.TestHarness.TinyRocketConfig.fir 208552:4 Buffer.scala 37:13 chipyard.TestHarness.TinyRocketConfig.fir 208569:4]
    auto_out_d_ready <= bundleIn_0_d_q.io_enq_ready @[Nodes.scala 1207:84 chipyard.TestHarness.TinyRocketConfig.fir 208552:4 Decoupled.scala 299:17 chipyard.TestHarness.TinyRocketConfig.fir 208582:4]
    monitor.clock <= clock @[chipyard.TestHarness.TinyRocketConfig.fir 208530:4]
    monitor.reset <= reset @[chipyard.TestHarness.TinyRocketConfig.fir 208531:4]
    monitor.io_in_a_ready <= bundleOut_0_a_q.io_enq_ready @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 208527:4 Decoupled.scala 299:17 chipyard.TestHarness.TinyRocketConfig.fir 208568:4]
    monitor.io_in_a_valid <= auto_in_a_valid @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 208527:4 LazyModule.scala 309:16 chipyard.TestHarness.TinyRocketConfig.fir 208555:4]
    monitor.io_in_a_bits_opcode <= auto_in_a_bits_opcode @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 208527:4 LazyModule.scala 309:16 chipyard.TestHarness.TinyRocketConfig.fir 208555:4]
    monitor.io_in_a_bits_size <= auto_in_a_bits_size @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 208527:4 LazyModule.scala 309:16 chipyard.TestHarness.TinyRocketConfig.fir 208555:4]
    monitor.io_in_a_bits_address <= auto_in_a_bits_address @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 208527:4 LazyModule.scala 309:16 chipyard.TestHarness.TinyRocketConfig.fir 208555:4]
    monitor.io_in_a_bits_mask <= auto_in_a_bits_mask @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 208527:4 LazyModule.scala 309:16 chipyard.TestHarness.TinyRocketConfig.fir 208555:4]
    monitor.io_in_d_ready <= auto_in_d_ready @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 208527:4 LazyModule.scala 309:16 chipyard.TestHarness.TinyRocketConfig.fir 208555:4]
    monitor.io_in_d_valid <= bundleIn_0_d_q.io_deq_valid @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 208527:4 Buffer.scala 38:13 chipyard.TestHarness.TinyRocketConfig.fir 208583:4]
    monitor.io_in_d_bits_opcode <= bundleIn_0_d_q.io_deq_bits_opcode @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 208527:4 Buffer.scala 38:13 chipyard.TestHarness.TinyRocketConfig.fir 208583:4]
    monitor.io_in_d_bits_param <= bundleIn_0_d_q.io_deq_bits_param @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 208527:4 Buffer.scala 38:13 chipyard.TestHarness.TinyRocketConfig.fir 208583:4]
    monitor.io_in_d_bits_size <= bundleIn_0_d_q.io_deq_bits_size @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 208527:4 Buffer.scala 38:13 chipyard.TestHarness.TinyRocketConfig.fir 208583:4]
    monitor.io_in_d_bits_source <= bundleIn_0_d_q.io_deq_bits_source @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 208527:4 Buffer.scala 38:13 chipyard.TestHarness.TinyRocketConfig.fir 208583:4]
    monitor.io_in_d_bits_sink <= bundleIn_0_d_q.io_deq_bits_sink @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 208527:4 Buffer.scala 38:13 chipyard.TestHarness.TinyRocketConfig.fir 208583:4]
    monitor.io_in_d_bits_denied <= bundleIn_0_d_q.io_deq_bits_denied @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 208527:4 Buffer.scala 38:13 chipyard.TestHarness.TinyRocketConfig.fir 208583:4]
    monitor.io_in_d_bits_corrupt <= bundleIn_0_d_q.io_deq_bits_corrupt @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 208527:4 Buffer.scala 38:13 chipyard.TestHarness.TinyRocketConfig.fir 208583:4]
    bundleOut_0_a_q.clock <= clock @[chipyard.TestHarness.TinyRocketConfig.fir 208557:4]
    bundleOut_0_a_q.reset <= reset @[chipyard.TestHarness.TinyRocketConfig.fir 208558:4]
    bundleOut_0_a_q.io_enq_valid <= auto_in_a_valid @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 208527:4 LazyModule.scala 309:16 chipyard.TestHarness.TinyRocketConfig.fir 208555:4]
    bundleOut_0_a_q.io_enq_bits_opcode <= auto_in_a_bits_opcode @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 208527:4 LazyModule.scala 309:16 chipyard.TestHarness.TinyRocketConfig.fir 208555:4]
    bundleOut_0_a_q.io_enq_bits_size <= auto_in_a_bits_size @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 208527:4 LazyModule.scala 309:16 chipyard.TestHarness.TinyRocketConfig.fir 208555:4]
    bundleOut_0_a_q.io_enq_bits_address <= auto_in_a_bits_address @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 208527:4 LazyModule.scala 309:16 chipyard.TestHarness.TinyRocketConfig.fir 208555:4]
    bundleOut_0_a_q.io_enq_bits_mask <= auto_in_a_bits_mask @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 208527:4 LazyModule.scala 309:16 chipyard.TestHarness.TinyRocketConfig.fir 208555:4]
    bundleOut_0_a_q.io_enq_bits_data <= auto_in_a_bits_data @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 208527:4 LazyModule.scala 309:16 chipyard.TestHarness.TinyRocketConfig.fir 208555:4]
    bundleOut_0_a_q.io_deq_ready <= auto_out_a_ready @[Nodes.scala 1207:84 chipyard.TestHarness.TinyRocketConfig.fir 208552:4 LazyModule.scala 311:12 chipyard.TestHarness.TinyRocketConfig.fir 208554:4]
    bundleIn_0_d_q.clock <= clock @[chipyard.TestHarness.TinyRocketConfig.fir 208571:4]
    bundleIn_0_d_q.reset <= reset @[chipyard.TestHarness.TinyRocketConfig.fir 208572:4]
    bundleIn_0_d_q.io_enq_valid <= auto_out_d_valid @[Nodes.scala 1207:84 chipyard.TestHarness.TinyRocketConfig.fir 208552:4 LazyModule.scala 311:12 chipyard.TestHarness.TinyRocketConfig.fir 208554:4]
    bundleIn_0_d_q.io_enq_bits_opcode <= auto_out_d_bits_opcode @[Nodes.scala 1207:84 chipyard.TestHarness.TinyRocketConfig.fir 208552:4 LazyModule.scala 311:12 chipyard.TestHarness.TinyRocketConfig.fir 208554:4]
    bundleIn_0_d_q.io_enq_bits_param <= auto_out_d_bits_param @[Nodes.scala 1207:84 chipyard.TestHarness.TinyRocketConfig.fir 208552:4 LazyModule.scala 311:12 chipyard.TestHarness.TinyRocketConfig.fir 208554:4]
    bundleIn_0_d_q.io_enq_bits_size <= auto_out_d_bits_size @[Nodes.scala 1207:84 chipyard.TestHarness.TinyRocketConfig.fir 208552:4 LazyModule.scala 311:12 chipyard.TestHarness.TinyRocketConfig.fir 208554:4]
    bundleIn_0_d_q.io_enq_bits_source <= auto_out_d_bits_source @[Nodes.scala 1207:84 chipyard.TestHarness.TinyRocketConfig.fir 208552:4 LazyModule.scala 311:12 chipyard.TestHarness.TinyRocketConfig.fir 208554:4]
    bundleIn_0_d_q.io_enq_bits_sink <= auto_out_d_bits_sink @[Nodes.scala 1207:84 chipyard.TestHarness.TinyRocketConfig.fir 208552:4 LazyModule.scala 311:12 chipyard.TestHarness.TinyRocketConfig.fir 208554:4]
    bundleIn_0_d_q.io_enq_bits_denied <= auto_out_d_bits_denied @[Nodes.scala 1207:84 chipyard.TestHarness.TinyRocketConfig.fir 208552:4 LazyModule.scala 311:12 chipyard.TestHarness.TinyRocketConfig.fir 208554:4]
    bundleIn_0_d_q.io_enq_bits_data <= auto_out_d_bits_data @[Nodes.scala 1207:84 chipyard.TestHarness.TinyRocketConfig.fir 208552:4 LazyModule.scala 311:12 chipyard.TestHarness.TinyRocketConfig.fir 208554:4]
    bundleIn_0_d_q.io_enq_bits_corrupt <= auto_out_d_bits_corrupt @[Nodes.scala 1207:84 chipyard.TestHarness.TinyRocketConfig.fir 208552:4 LazyModule.scala 311:12 chipyard.TestHarness.TinyRocketConfig.fir 208554:4]
    bundleIn_0_d_q.io_deq_ready <= auto_in_d_ready @[Nodes.scala 1210:84 chipyard.TestHarness.TinyRocketConfig.fir 208527:4 LazyModule.scala 309:16 chipyard.TestHarness.TinyRocketConfig.fir 208555:4]

  module SerialRAM_inTestHarness : @[chipyard.TestHarness.TinyRocketConfig.fir 208603:2]
    input clock : Clock @[chipyard.TestHarness.TinyRocketConfig.fir 208604:4]
    input reset : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 208605:4]
    input io_ser_in_ready : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 208607:4]
    output io_ser_in_valid : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 208607:4]
    output io_ser_in_bits : UInt<4> @[chipyard.TestHarness.TinyRocketConfig.fir 208607:4]
    output io_ser_out_ready : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 208607:4]
    input io_ser_out_valid : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 208607:4]
    input io_ser_out_bits : UInt<4> @[chipyard.TestHarness.TinyRocketConfig.fir 208607:4]
    output io_tsi_ser_in_ready : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 208607:4]
    input io_tsi_ser_in_valid : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 208607:4]
    input io_tsi_ser_in_bits : UInt<32> @[chipyard.TestHarness.TinyRocketConfig.fir 208607:4]
    input io_tsi_ser_out_ready : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 208607:4]
    output io_tsi_ser_out_valid : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 208607:4]
    output io_tsi_ser_out_bits : UInt<32> @[chipyard.TestHarness.TinyRocketConfig.fir 208607:4]

    inst adapter of SerialAdapter_inTestHarness @[SerialAdapter.scala 311:27 chipyard.TestHarness.TinyRocketConfig.fir 208613:4]
    inst serdesser of TLSerdesser_1_inTestHarness @[SerialAdapter.scala 312:29 chipyard.TestHarness.TinyRocketConfig.fir 208620:4]
    inst srams of TLRAM_inTestHarness @[SerialAdapter.scala 322:15 chipyard.TestHarness.TinyRocketConfig.fir 208627:4]
    inst xbar of TLXbar_9_inTestHarness @[Xbar.scala 142:26 chipyard.TestHarness.TinyRocketConfig.fir 208633:4]
    inst buffer of TLBuffer_16_inTestHarness @[Buffer.scala 68:28 chipyard.TestHarness.TinyRocketConfig.fir 208639:4]
    inst fragmenter of TLFragmenter_8_inTestHarness @[Fragmenter.scala 333:34 chipyard.TestHarness.TinyRocketConfig.fir 208645:4]
    inst buffer_1 of TLBuffer_17_inTestHarness @[Buffer.scala 68:28 chipyard.TestHarness.TinyRocketConfig.fir 208651:4]
    io_ser_in_valid <= serdesser.io_ser_out_valid @[SerialAdapter.scala 340:15 chipyard.TestHarness.TinyRocketConfig.fir 208667:4]
    io_ser_in_bits <= serdesser.io_ser_out_bits @[SerialAdapter.scala 340:15 chipyard.TestHarness.TinyRocketConfig.fir 208666:4]
    io_ser_out_ready <= serdesser.io_ser_in_ready @[SerialAdapter.scala 339:32 chipyard.TestHarness.TinyRocketConfig.fir 208665:4]
    io_tsi_ser_in_ready <= adapter.io_serial_in_ready @[SerialAdapter.scala 341:16 chipyard.TestHarness.TinyRocketConfig.fir 208674:4]
    io_tsi_ser_out_valid <= adapter.io_serial_out_valid @[SerialAdapter.scala 341:16 chipyard.TestHarness.TinyRocketConfig.fir 208670:4]
    io_tsi_ser_out_bits <= adapter.io_serial_out_bits @[SerialAdapter.scala 341:16 chipyard.TestHarness.TinyRocketConfig.fir 208669:4]
    adapter.clock <= clock @[chipyard.TestHarness.TinyRocketConfig.fir 208618:4]
    adapter.reset <= reset @[chipyard.TestHarness.TinyRocketConfig.fir 208619:4]
    adapter.auto_out_a_ready <= buffer_1.auto_in_a_ready @[LazyModule.scala 298:16 chipyard.TestHarness.TinyRocketConfig.fir 208657:4]
    adapter.auto_out_d_valid <= buffer_1.auto_in_d_valid @[LazyModule.scala 298:16 chipyard.TestHarness.TinyRocketConfig.fir 208657:4]
    adapter.auto_out_d_bits_data <= buffer_1.auto_in_d_bits_data @[LazyModule.scala 298:16 chipyard.TestHarness.TinyRocketConfig.fir 208657:4]
    adapter.io_serial_in_valid <= io_tsi_ser_in_valid @[SerialAdapter.scala 341:16 chipyard.TestHarness.TinyRocketConfig.fir 208673:4]
    adapter.io_serial_in_bits <= io_tsi_ser_in_bits @[SerialAdapter.scala 341:16 chipyard.TestHarness.TinyRocketConfig.fir 208672:4]
    adapter.io_serial_out_ready <= io_tsi_ser_out_ready @[SerialAdapter.scala 341:16 chipyard.TestHarness.TinyRocketConfig.fir 208671:4]
    serdesser.clock <= clock @[chipyard.TestHarness.TinyRocketConfig.fir 208625:4]
    serdesser.reset <= reset @[chipyard.TestHarness.TinyRocketConfig.fir 208626:4]
    serdesser.auto_manager_in_a_valid <= buffer_1.auto_out_a_valid @[LazyModule.scala 296:16 chipyard.TestHarness.TinyRocketConfig.fir 208662:4]
    serdesser.auto_manager_in_a_bits_opcode <= buffer_1.auto_out_a_bits_opcode @[LazyModule.scala 296:16 chipyard.TestHarness.TinyRocketConfig.fir 208662:4]
    serdesser.auto_manager_in_a_bits_param <= buffer_1.auto_out_a_bits_param @[LazyModule.scala 296:16 chipyard.TestHarness.TinyRocketConfig.fir 208662:4]
    serdesser.auto_manager_in_a_bits_size <= buffer_1.auto_out_a_bits_size @[LazyModule.scala 296:16 chipyard.TestHarness.TinyRocketConfig.fir 208662:4]
    serdesser.auto_manager_in_a_bits_source <= buffer_1.auto_out_a_bits_source @[LazyModule.scala 296:16 chipyard.TestHarness.TinyRocketConfig.fir 208662:4]
    serdesser.auto_manager_in_a_bits_address <= buffer_1.auto_out_a_bits_address @[LazyModule.scala 296:16 chipyard.TestHarness.TinyRocketConfig.fir 208662:4]
    serdesser.auto_manager_in_a_bits_mask <= buffer_1.auto_out_a_bits_mask @[LazyModule.scala 296:16 chipyard.TestHarness.TinyRocketConfig.fir 208662:4]
    serdesser.auto_manager_in_a_bits_data <= buffer_1.auto_out_a_bits_data @[LazyModule.scala 296:16 chipyard.TestHarness.TinyRocketConfig.fir 208662:4]
    serdesser.auto_manager_in_a_bits_corrupt <= buffer_1.auto_out_a_bits_corrupt @[LazyModule.scala 296:16 chipyard.TestHarness.TinyRocketConfig.fir 208662:4]
    serdesser.auto_manager_in_d_ready <= buffer_1.auto_out_d_ready @[LazyModule.scala 296:16 chipyard.TestHarness.TinyRocketConfig.fir 208662:4]
    serdesser.auto_client_out_a_ready <= xbar.auto_in_a_ready @[LazyModule.scala 298:16 chipyard.TestHarness.TinyRocketConfig.fir 208658:4]
    serdesser.auto_client_out_d_valid <= xbar.auto_in_d_valid @[LazyModule.scala 298:16 chipyard.TestHarness.TinyRocketConfig.fir 208658:4]
    serdesser.auto_client_out_d_bits_opcode <= xbar.auto_in_d_bits_opcode @[LazyModule.scala 298:16 chipyard.TestHarness.TinyRocketConfig.fir 208658:4]
    serdesser.auto_client_out_d_bits_param <= xbar.auto_in_d_bits_param @[LazyModule.scala 298:16 chipyard.TestHarness.TinyRocketConfig.fir 208658:4]
    serdesser.auto_client_out_d_bits_size <= xbar.auto_in_d_bits_size @[LazyModule.scala 298:16 chipyard.TestHarness.TinyRocketConfig.fir 208658:4]
    serdesser.auto_client_out_d_bits_source <= xbar.auto_in_d_bits_source @[LazyModule.scala 298:16 chipyard.TestHarness.TinyRocketConfig.fir 208658:4]
    serdesser.auto_client_out_d_bits_sink <= xbar.auto_in_d_bits_sink @[LazyModule.scala 298:16 chipyard.TestHarness.TinyRocketConfig.fir 208658:4]
    serdesser.auto_client_out_d_bits_denied <= xbar.auto_in_d_bits_denied @[LazyModule.scala 298:16 chipyard.TestHarness.TinyRocketConfig.fir 208658:4]
    serdesser.auto_client_out_d_bits_data <= xbar.auto_in_d_bits_data @[LazyModule.scala 298:16 chipyard.TestHarness.TinyRocketConfig.fir 208658:4]
    serdesser.auto_client_out_d_bits_corrupt <= xbar.auto_in_d_bits_corrupt @[LazyModule.scala 298:16 chipyard.TestHarness.TinyRocketConfig.fir 208658:4]
    serdesser.io_ser_in_valid <= io_ser_out_valid @[SerialAdapter.scala 339:32 chipyard.TestHarness.TinyRocketConfig.fir 208664:4]
    serdesser.io_ser_in_bits <= io_ser_out_bits @[SerialAdapter.scala 339:32 chipyard.TestHarness.TinyRocketConfig.fir 208663:4]
    serdesser.io_ser_out_ready <= io_ser_in_ready @[SerialAdapter.scala 340:15 chipyard.TestHarness.TinyRocketConfig.fir 208668:4]
    srams.clock <= clock @[chipyard.TestHarness.TinyRocketConfig.fir 208631:4]
    srams.reset <= reset @[chipyard.TestHarness.TinyRocketConfig.fir 208632:4]
    srams.auto_in_a_valid <= buffer.auto_out_a_valid @[LazyModule.scala 296:16 chipyard.TestHarness.TinyRocketConfig.fir 208660:4]
    srams.auto_in_a_bits_opcode <= buffer.auto_out_a_bits_opcode @[LazyModule.scala 296:16 chipyard.TestHarness.TinyRocketConfig.fir 208660:4]
    srams.auto_in_a_bits_param <= buffer.auto_out_a_bits_param @[LazyModule.scala 296:16 chipyard.TestHarness.TinyRocketConfig.fir 208660:4]
    srams.auto_in_a_bits_size <= buffer.auto_out_a_bits_size @[LazyModule.scala 296:16 chipyard.TestHarness.TinyRocketConfig.fir 208660:4]
    srams.auto_in_a_bits_source <= buffer.auto_out_a_bits_source @[LazyModule.scala 296:16 chipyard.TestHarness.TinyRocketConfig.fir 208660:4]
    srams.auto_in_a_bits_address <= buffer.auto_out_a_bits_address @[LazyModule.scala 296:16 chipyard.TestHarness.TinyRocketConfig.fir 208660:4]
    srams.auto_in_a_bits_mask <= buffer.auto_out_a_bits_mask @[LazyModule.scala 296:16 chipyard.TestHarness.TinyRocketConfig.fir 208660:4]
    srams.auto_in_a_bits_data <= buffer.auto_out_a_bits_data @[LazyModule.scala 296:16 chipyard.TestHarness.TinyRocketConfig.fir 208660:4]
    srams.auto_in_a_bits_corrupt <= buffer.auto_out_a_bits_corrupt @[LazyModule.scala 296:16 chipyard.TestHarness.TinyRocketConfig.fir 208660:4]
    srams.auto_in_d_ready <= buffer.auto_out_d_ready @[LazyModule.scala 296:16 chipyard.TestHarness.TinyRocketConfig.fir 208660:4]
    xbar.auto_in_a_valid <= serdesser.auto_client_out_a_valid @[LazyModule.scala 298:16 chipyard.TestHarness.TinyRocketConfig.fir 208658:4]
    xbar.auto_in_a_bits_opcode <= serdesser.auto_client_out_a_bits_opcode @[LazyModule.scala 298:16 chipyard.TestHarness.TinyRocketConfig.fir 208658:4]
    xbar.auto_in_a_bits_param <= serdesser.auto_client_out_a_bits_param @[LazyModule.scala 298:16 chipyard.TestHarness.TinyRocketConfig.fir 208658:4]
    xbar.auto_in_a_bits_size <= serdesser.auto_client_out_a_bits_size @[LazyModule.scala 298:16 chipyard.TestHarness.TinyRocketConfig.fir 208658:4]
    xbar.auto_in_a_bits_source <= serdesser.auto_client_out_a_bits_source @[LazyModule.scala 298:16 chipyard.TestHarness.TinyRocketConfig.fir 208658:4]
    xbar.auto_in_a_bits_address <= serdesser.auto_client_out_a_bits_address @[LazyModule.scala 298:16 chipyard.TestHarness.TinyRocketConfig.fir 208658:4]
    xbar.auto_in_a_bits_mask <= serdesser.auto_client_out_a_bits_mask @[LazyModule.scala 298:16 chipyard.TestHarness.TinyRocketConfig.fir 208658:4]
    xbar.auto_in_a_bits_data <= serdesser.auto_client_out_a_bits_data @[LazyModule.scala 298:16 chipyard.TestHarness.TinyRocketConfig.fir 208658:4]
    xbar.auto_in_a_bits_corrupt <= serdesser.auto_client_out_a_bits_corrupt @[LazyModule.scala 298:16 chipyard.TestHarness.TinyRocketConfig.fir 208658:4]
    xbar.auto_in_d_ready <= serdesser.auto_client_out_d_ready @[LazyModule.scala 298:16 chipyard.TestHarness.TinyRocketConfig.fir 208658:4]
    xbar.auto_out_a_ready <= fragmenter.auto_in_a_ready @[LazyModule.scala 298:16 chipyard.TestHarness.TinyRocketConfig.fir 208659:4]
    xbar.auto_out_d_valid <= fragmenter.auto_in_d_valid @[LazyModule.scala 298:16 chipyard.TestHarness.TinyRocketConfig.fir 208659:4]
    xbar.auto_out_d_bits_opcode <= fragmenter.auto_in_d_bits_opcode @[LazyModule.scala 298:16 chipyard.TestHarness.TinyRocketConfig.fir 208659:4]
    xbar.auto_out_d_bits_param <= fragmenter.auto_in_d_bits_param @[LazyModule.scala 298:16 chipyard.TestHarness.TinyRocketConfig.fir 208659:4]
    xbar.auto_out_d_bits_size <= fragmenter.auto_in_d_bits_size @[LazyModule.scala 298:16 chipyard.TestHarness.TinyRocketConfig.fir 208659:4]
    xbar.auto_out_d_bits_source <= fragmenter.auto_in_d_bits_source @[LazyModule.scala 298:16 chipyard.TestHarness.TinyRocketConfig.fir 208659:4]
    xbar.auto_out_d_bits_sink <= fragmenter.auto_in_d_bits_sink @[LazyModule.scala 298:16 chipyard.TestHarness.TinyRocketConfig.fir 208659:4]
    xbar.auto_out_d_bits_denied <= fragmenter.auto_in_d_bits_denied @[LazyModule.scala 298:16 chipyard.TestHarness.TinyRocketConfig.fir 208659:4]
    xbar.auto_out_d_bits_data <= fragmenter.auto_in_d_bits_data @[LazyModule.scala 298:16 chipyard.TestHarness.TinyRocketConfig.fir 208659:4]
    xbar.auto_out_d_bits_corrupt <= fragmenter.auto_in_d_bits_corrupt @[LazyModule.scala 298:16 chipyard.TestHarness.TinyRocketConfig.fir 208659:4]
    buffer.clock <= clock @[chipyard.TestHarness.TinyRocketConfig.fir 208643:4]
    buffer.reset <= reset @[chipyard.TestHarness.TinyRocketConfig.fir 208644:4]
    buffer.auto_in_a_valid <= fragmenter.auto_out_a_valid @[LazyModule.scala 296:16 chipyard.TestHarness.TinyRocketConfig.fir 208661:4]
    buffer.auto_in_a_bits_opcode <= fragmenter.auto_out_a_bits_opcode @[LazyModule.scala 296:16 chipyard.TestHarness.TinyRocketConfig.fir 208661:4]
    buffer.auto_in_a_bits_param <= fragmenter.auto_out_a_bits_param @[LazyModule.scala 296:16 chipyard.TestHarness.TinyRocketConfig.fir 208661:4]
    buffer.auto_in_a_bits_size <= fragmenter.auto_out_a_bits_size @[LazyModule.scala 296:16 chipyard.TestHarness.TinyRocketConfig.fir 208661:4]
    buffer.auto_in_a_bits_source <= fragmenter.auto_out_a_bits_source @[LazyModule.scala 296:16 chipyard.TestHarness.TinyRocketConfig.fir 208661:4]
    buffer.auto_in_a_bits_address <= fragmenter.auto_out_a_bits_address @[LazyModule.scala 296:16 chipyard.TestHarness.TinyRocketConfig.fir 208661:4]
    buffer.auto_in_a_bits_mask <= fragmenter.auto_out_a_bits_mask @[LazyModule.scala 296:16 chipyard.TestHarness.TinyRocketConfig.fir 208661:4]
    buffer.auto_in_a_bits_data <= fragmenter.auto_out_a_bits_data @[LazyModule.scala 296:16 chipyard.TestHarness.TinyRocketConfig.fir 208661:4]
    buffer.auto_in_a_bits_corrupt <= fragmenter.auto_out_a_bits_corrupt @[LazyModule.scala 296:16 chipyard.TestHarness.TinyRocketConfig.fir 208661:4]
    buffer.auto_in_d_ready <= fragmenter.auto_out_d_ready @[LazyModule.scala 296:16 chipyard.TestHarness.TinyRocketConfig.fir 208661:4]
    buffer.auto_out_a_ready <= srams.auto_in_a_ready @[LazyModule.scala 296:16 chipyard.TestHarness.TinyRocketConfig.fir 208660:4]
    buffer.auto_out_d_valid <= srams.auto_in_d_valid @[LazyModule.scala 296:16 chipyard.TestHarness.TinyRocketConfig.fir 208660:4]
    buffer.auto_out_d_bits_opcode <= srams.auto_in_d_bits_opcode @[LazyModule.scala 296:16 chipyard.TestHarness.TinyRocketConfig.fir 208660:4]
    buffer.auto_out_d_bits_size <= srams.auto_in_d_bits_size @[LazyModule.scala 296:16 chipyard.TestHarness.TinyRocketConfig.fir 208660:4]
    buffer.auto_out_d_bits_source <= srams.auto_in_d_bits_source @[LazyModule.scala 296:16 chipyard.TestHarness.TinyRocketConfig.fir 208660:4]
    buffer.auto_out_d_bits_data <= srams.auto_in_d_bits_data @[LazyModule.scala 296:16 chipyard.TestHarness.TinyRocketConfig.fir 208660:4]
    fragmenter.clock <= clock @[chipyard.TestHarness.TinyRocketConfig.fir 208649:4]
    fragmenter.reset <= reset @[chipyard.TestHarness.TinyRocketConfig.fir 208650:4]
    fragmenter.auto_in_a_valid <= xbar.auto_out_a_valid @[LazyModule.scala 298:16 chipyard.TestHarness.TinyRocketConfig.fir 208659:4]
    fragmenter.auto_in_a_bits_opcode <= xbar.auto_out_a_bits_opcode @[LazyModule.scala 298:16 chipyard.TestHarness.TinyRocketConfig.fir 208659:4]
    fragmenter.auto_in_a_bits_param <= xbar.auto_out_a_bits_param @[LazyModule.scala 298:16 chipyard.TestHarness.TinyRocketConfig.fir 208659:4]
    fragmenter.auto_in_a_bits_size <= xbar.auto_out_a_bits_size @[LazyModule.scala 298:16 chipyard.TestHarness.TinyRocketConfig.fir 208659:4]
    fragmenter.auto_in_a_bits_source <= xbar.auto_out_a_bits_source @[LazyModule.scala 298:16 chipyard.TestHarness.TinyRocketConfig.fir 208659:4]
    fragmenter.auto_in_a_bits_address <= xbar.auto_out_a_bits_address @[LazyModule.scala 298:16 chipyard.TestHarness.TinyRocketConfig.fir 208659:4]
    fragmenter.auto_in_a_bits_mask <= xbar.auto_out_a_bits_mask @[LazyModule.scala 298:16 chipyard.TestHarness.TinyRocketConfig.fir 208659:4]
    fragmenter.auto_in_a_bits_data <= xbar.auto_out_a_bits_data @[LazyModule.scala 298:16 chipyard.TestHarness.TinyRocketConfig.fir 208659:4]
    fragmenter.auto_in_a_bits_corrupt <= xbar.auto_out_a_bits_corrupt @[LazyModule.scala 298:16 chipyard.TestHarness.TinyRocketConfig.fir 208659:4]
    fragmenter.auto_in_d_ready <= xbar.auto_out_d_ready @[LazyModule.scala 298:16 chipyard.TestHarness.TinyRocketConfig.fir 208659:4]
    fragmenter.auto_out_a_ready <= buffer.auto_in_a_ready @[LazyModule.scala 296:16 chipyard.TestHarness.TinyRocketConfig.fir 208661:4]
    fragmenter.auto_out_d_valid <= buffer.auto_in_d_valid @[LazyModule.scala 296:16 chipyard.TestHarness.TinyRocketConfig.fir 208661:4]
    fragmenter.auto_out_d_bits_opcode <= buffer.auto_in_d_bits_opcode @[LazyModule.scala 296:16 chipyard.TestHarness.TinyRocketConfig.fir 208661:4]
    fragmenter.auto_out_d_bits_param <= buffer.auto_in_d_bits_param @[LazyModule.scala 296:16 chipyard.TestHarness.TinyRocketConfig.fir 208661:4]
    fragmenter.auto_out_d_bits_size <= buffer.auto_in_d_bits_size @[LazyModule.scala 296:16 chipyard.TestHarness.TinyRocketConfig.fir 208661:4]
    fragmenter.auto_out_d_bits_source <= buffer.auto_in_d_bits_source @[LazyModule.scala 296:16 chipyard.TestHarness.TinyRocketConfig.fir 208661:4]
    fragmenter.auto_out_d_bits_sink <= buffer.auto_in_d_bits_sink @[LazyModule.scala 296:16 chipyard.TestHarness.TinyRocketConfig.fir 208661:4]
    fragmenter.auto_out_d_bits_denied <= buffer.auto_in_d_bits_denied @[LazyModule.scala 296:16 chipyard.TestHarness.TinyRocketConfig.fir 208661:4]
    fragmenter.auto_out_d_bits_data <= buffer.auto_in_d_bits_data @[LazyModule.scala 296:16 chipyard.TestHarness.TinyRocketConfig.fir 208661:4]
    fragmenter.auto_out_d_bits_corrupt <= buffer.auto_in_d_bits_corrupt @[LazyModule.scala 296:16 chipyard.TestHarness.TinyRocketConfig.fir 208661:4]
    buffer_1.clock <= clock @[chipyard.TestHarness.TinyRocketConfig.fir 208655:4]
    buffer_1.reset <= reset @[chipyard.TestHarness.TinyRocketConfig.fir 208656:4]
    buffer_1.auto_in_a_valid <= adapter.auto_out_a_valid @[LazyModule.scala 298:16 chipyard.TestHarness.TinyRocketConfig.fir 208657:4]
    buffer_1.auto_in_a_bits_opcode <= adapter.auto_out_a_bits_opcode @[LazyModule.scala 298:16 chipyard.TestHarness.TinyRocketConfig.fir 208657:4]
    buffer_1.auto_in_a_bits_size <= adapter.auto_out_a_bits_size @[LazyModule.scala 298:16 chipyard.TestHarness.TinyRocketConfig.fir 208657:4]
    buffer_1.auto_in_a_bits_address <= adapter.auto_out_a_bits_address @[LazyModule.scala 298:16 chipyard.TestHarness.TinyRocketConfig.fir 208657:4]
    buffer_1.auto_in_a_bits_mask <= adapter.auto_out_a_bits_mask @[LazyModule.scala 298:16 chipyard.TestHarness.TinyRocketConfig.fir 208657:4]
    buffer_1.auto_in_a_bits_data <= adapter.auto_out_a_bits_data @[LazyModule.scala 298:16 chipyard.TestHarness.TinyRocketConfig.fir 208657:4]
    buffer_1.auto_in_d_ready <= adapter.auto_out_d_ready @[LazyModule.scala 298:16 chipyard.TestHarness.TinyRocketConfig.fir 208657:4]
    buffer_1.auto_out_a_ready <= serdesser.auto_manager_in_a_ready @[LazyModule.scala 296:16 chipyard.TestHarness.TinyRocketConfig.fir 208662:4]
    buffer_1.auto_out_d_valid <= serdesser.auto_manager_in_d_valid @[LazyModule.scala 296:16 chipyard.TestHarness.TinyRocketConfig.fir 208662:4]
    buffer_1.auto_out_d_bits_opcode <= serdesser.auto_manager_in_d_bits_opcode @[LazyModule.scala 296:16 chipyard.TestHarness.TinyRocketConfig.fir 208662:4]
    buffer_1.auto_out_d_bits_param <= serdesser.auto_manager_in_d_bits_param @[LazyModule.scala 296:16 chipyard.TestHarness.TinyRocketConfig.fir 208662:4]
    buffer_1.auto_out_d_bits_size <= serdesser.auto_manager_in_d_bits_size @[LazyModule.scala 296:16 chipyard.TestHarness.TinyRocketConfig.fir 208662:4]
    buffer_1.auto_out_d_bits_source <= serdesser.auto_manager_in_d_bits_source @[LazyModule.scala 296:16 chipyard.TestHarness.TinyRocketConfig.fir 208662:4]
    buffer_1.auto_out_d_bits_sink <= serdesser.auto_manager_in_d_bits_sink @[LazyModule.scala 296:16 chipyard.TestHarness.TinyRocketConfig.fir 208662:4]
    buffer_1.auto_out_d_bits_denied <= serdesser.auto_manager_in_d_bits_denied @[LazyModule.scala 296:16 chipyard.TestHarness.TinyRocketConfig.fir 208662:4]
    buffer_1.auto_out_d_bits_data <= serdesser.auto_manager_in_d_bits_data @[LazyModule.scala 296:16 chipyard.TestHarness.TinyRocketConfig.fir 208662:4]
    buffer_1.auto_out_d_bits_corrupt <= serdesser.auto_manager_in_d_bits_corrupt @[LazyModule.scala 296:16 chipyard.TestHarness.TinyRocketConfig.fir 208662:4]

  extmodule SimSerial : @[chipyard.TestHarness.TinyRocketConfig.fir 208676:2]
    input clock : Clock @[chipyard.TestHarness.TinyRocketConfig.fir 208677:4]
    input reset : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 208678:4]
    input serial_in_ready : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 208679:4]
    output serial_in_valid : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 208679:4]
    output serial_in_bits : UInt<32> @[chipyard.TestHarness.TinyRocketConfig.fir 208679:4]
    output serial_out_ready : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 208679:4]
    input serial_out_valid : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 208679:4]
    input serial_out_bits : UInt<32> @[chipyard.TestHarness.TinyRocketConfig.fir 208679:4]
    output exit : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 208680:4]
    defname = SimSerial

  module Queue_26_inTestHarness : @[chipyard.TestHarness.TinyRocketConfig.fir 208685:2]
    input clock : Clock @[chipyard.TestHarness.TinyRocketConfig.fir 208686:4]
    input reset : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 208687:4]
    output io_enq_ready : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 208688:4]
    input io_enq_valid : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 208688:4]
    input io_enq_bits : UInt<8> @[chipyard.TestHarness.TinyRocketConfig.fir 208688:4]
    input io_deq_ready : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 208688:4]
    output io_deq_valid : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 208688:4]
    output io_deq_bits : UInt<8> @[chipyard.TestHarness.TinyRocketConfig.fir 208688:4]

    mem ram : @[Decoupled.scala 218:16 chipyard.TestHarness.TinyRocketConfig.fir 208690:4]
      data-type => UInt<8>
      depth => 128
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    reg enq_ptr_value : UInt<7>, clock with :
      reset => (UInt<1>("h0"), enq_ptr_value) @[Counter.scala 60:40 chipyard.TestHarness.TinyRocketConfig.fir 208691:4]
    reg deq_ptr_value : UInt<7>, clock with :
      reset => (UInt<1>("h0"), deq_ptr_value) @[Counter.scala 60:40 chipyard.TestHarness.TinyRocketConfig.fir 208692:4]
    reg maybe_full : UInt<1>, clock with :
      reset => (UInt<1>("h0"), maybe_full) @[Decoupled.scala 221:27 chipyard.TestHarness.TinyRocketConfig.fir 208693:4]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 223:33 chipyard.TestHarness.TinyRocketConfig.fir 208694:4]
    node _empty_T = not(maybe_full) @[Decoupled.scala 224:28 chipyard.TestHarness.TinyRocketConfig.fir 208695:4]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 224:25 chipyard.TestHarness.TinyRocketConfig.fir 208696:4]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24 chipyard.TestHarness.TinyRocketConfig.fir 208697:4]
    node do_enq = and(io_enq_ready, io_enq_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.TinyRocketConfig.fir 208698:4]
    node do_deq = and(io_deq_ready, io_deq_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.TinyRocketConfig.fir 208701:4]
    node _value_T = add(enq_ptr_value, UInt<7>("h1")) @[Counter.scala 76:24 chipyard.TestHarness.TinyRocketConfig.fir 208708:6]
    node _value_T_1 = tail(_value_T, 1) @[Counter.scala 76:24 chipyard.TestHarness.TinyRocketConfig.fir 208709:6]
    node _GEN_5 = mux(do_enq, _value_T_1, enq_ptr_value) @[Decoupled.scala 229:17 chipyard.TestHarness.TinyRocketConfig.fir 208704:4 Counter.scala 76:15 chipyard.TestHarness.TinyRocketConfig.fir 208710:6 Counter.scala 60:40 chipyard.TestHarness.TinyRocketConfig.fir 208691:4]
    node _value_T_2 = add(deq_ptr_value, UInt<7>("h1")) @[Counter.scala 76:24 chipyard.TestHarness.TinyRocketConfig.fir 208714:6]
    node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 76:24 chipyard.TestHarness.TinyRocketConfig.fir 208715:6]
    node _GEN_6 = mux(do_deq, _value_T_3, deq_ptr_value) @[Decoupled.scala 233:17 chipyard.TestHarness.TinyRocketConfig.fir 208712:4 Counter.scala 76:15 chipyard.TestHarness.TinyRocketConfig.fir 208716:6 Counter.scala 60:40 chipyard.TestHarness.TinyRocketConfig.fir 208692:4]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 236:16 chipyard.TestHarness.TinyRocketConfig.fir 208718:4]
    node _GEN_7 = mux(_T, do_enq, maybe_full) @[Decoupled.scala 236:28 chipyard.TestHarness.TinyRocketConfig.fir 208719:4 Decoupled.scala 237:16 chipyard.TestHarness.TinyRocketConfig.fir 208720:6 Decoupled.scala 221:27 chipyard.TestHarness.TinyRocketConfig.fir 208693:4]
    io_enq_ready <= not(full) @[Decoupled.scala 241:19 chipyard.TestHarness.TinyRocketConfig.fir 208724:4]
    io_deq_valid <= not(empty) @[Decoupled.scala 240:19 chipyard.TestHarness.TinyRocketConfig.fir 208722:4]
    io_deq_bits <= ram.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.TinyRocketConfig.fir 208727:4]
    enq_ptr_value <= mux(reset, UInt<7>("h0"), _GEN_5) @[Counter.scala 60:40 chipyard.TestHarness.TinyRocketConfig.fir 208691:4 Counter.scala 60:40 chipyard.TestHarness.TinyRocketConfig.fir 208691:4]
    deq_ptr_value <= mux(reset, UInt<7>("h0"), _GEN_6) @[Counter.scala 60:40 chipyard.TestHarness.TinyRocketConfig.fir 208692:4 Counter.scala 60:40 chipyard.TestHarness.TinyRocketConfig.fir 208692:4]
    maybe_full <= mux(reset, UInt<1>("h0"), _GEN_7) @[Decoupled.scala 221:27 chipyard.TestHarness.TinyRocketConfig.fir 208693:4 Decoupled.scala 221:27 chipyard.TestHarness.TinyRocketConfig.fir 208693:4]
    ram.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram.io_deq_bits_MPORT.addr <= deq_ptr_value
    ram.io_deq_bits_MPORT.clk <= clock
    ram.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram.MPORT.addr <= enq_ptr_value
    ram.MPORT.mask <= UInt<1>("h1")
    ram.MPORT.data <= io_enq_bits
    ram.MPORT.clk <= clock

  extmodule SimUART : @[chipyard.TestHarness.TinyRocketConfig.fir 208785:2]
    input clock : Clock @[chipyard.TestHarness.TinyRocketConfig.fir 208786:4]
    input reset : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 208787:4]
    input serial_in_ready : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 208788:4]
    output serial_in_valid : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 208788:4]
    output serial_in_bits : UInt<8> @[chipyard.TestHarness.TinyRocketConfig.fir 208788:4]
    output serial_out_ready : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 208788:4]
    input serial_out_valid : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 208788:4]
    input serial_out_bits : UInt<8> @[chipyard.TestHarness.TinyRocketConfig.fir 208788:4]
    defname = SimUART
    parameter UARTNO = 0

  module UARTAdapter_inTestHarness : @[chipyard.TestHarness.TinyRocketConfig.fir 208793:2]
    input clock : Clock @[chipyard.TestHarness.TinyRocketConfig.fir 208794:4]
    input reset : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 208795:4]
    input io_uart_txd : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 208796:4]
    output io_uart_rxd : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 208796:4]

    inst txfifo of Queue_26_inTestHarness @[UARTAdapter.scala 32:22 chipyard.TestHarness.TinyRocketConfig.fir 208798:4]
    inst rxfifo of Queue_26_inTestHarness @[UARTAdapter.scala 33:22 chipyard.TestHarness.TinyRocketConfig.fir 208801:4]
    inst sim of SimUART @[UARTAdapter.scala 108:19 chipyard.TestHarness.TinyRocketConfig.fir 208950:4]
    reg txState : UInt<2>, clock with :
      reset => (UInt<1>("h0"), txState) @[UARTAdapter.scala 38:24 chipyard.TestHarness.TinyRocketConfig.fir 208804:4]
    reg txData : UInt<8>, clock with :
      reset => (UInt<1>("h0"), txData) @[UARTAdapter.scala 39:19 chipyard.TestHarness.TinyRocketConfig.fir 208805:4]
    node _T = eq(txState, UInt<2>("h2")) @[UARTAdapter.scala 41:49 chipyard.TestHarness.TinyRocketConfig.fir 208806:4]
    node _T_1 = and(_T, txfifo.io_enq_ready) @[UARTAdapter.scala 41:61 chipyard.TestHarness.TinyRocketConfig.fir 208807:4]
    reg txDataIdx : UInt<3>, clock with :
      reset => (UInt<1>("h0"), txDataIdx) @[Counter.scala 60:40 chipyard.TestHarness.TinyRocketConfig.fir 208808:4]
    node wrap_wrap = eq(txDataIdx, UInt<3>("h7")) @[Counter.scala 72:24 chipyard.TestHarness.TinyRocketConfig.fir 208812:6]
    node _wrap_value_T = add(txDataIdx, UInt<3>("h1")) @[Counter.scala 76:24 chipyard.TestHarness.TinyRocketConfig.fir 208813:6]
    node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[Counter.scala 76:24 chipyard.TestHarness.TinyRocketConfig.fir 208814:6]
    node _GEN_0 = mux(_T_1, _wrap_value_T_1, txDataIdx) @[Counter.scala 118:17 chipyard.TestHarness.TinyRocketConfig.fir 208811:4 Counter.scala 76:15 chipyard.TestHarness.TinyRocketConfig.fir 208815:6 Counter.scala 60:40 chipyard.TestHarness.TinyRocketConfig.fir 208808:4]
    node txDataWrap = and(_T_1, wrap_wrap) @[Counter.scala 118:17 chipyard.TestHarness.TinyRocketConfig.fir 208811:4 Counter.scala 118:24 chipyard.TestHarness.TinyRocketConfig.fir 208816:6 chipyard.TestHarness.TinyRocketConfig.fir 208810:4]
    node _T_2 = eq(txState, UInt<2>("h1")) @[UARTAdapter.scala 43:51 chipyard.TestHarness.TinyRocketConfig.fir 208818:4]
    node _T_3 = and(_T_2, txfifo.io_enq_ready) @[UARTAdapter.scala 43:63 chipyard.TestHarness.TinyRocketConfig.fir 208819:4]
    reg txBaudCount : UInt<10>, clock with :
      reset => (UInt<1>("h0"), txBaudCount) @[Counter.scala 60:40 chipyard.TestHarness.TinyRocketConfig.fir 208820:4]
    node wrap_wrap_1 = eq(txBaudCount, UInt<10>("h363")) @[Counter.scala 72:24 chipyard.TestHarness.TinyRocketConfig.fir 208824:6]
    node _wrap_value_T_2 = add(txBaudCount, UInt<10>("h1")) @[Counter.scala 76:24 chipyard.TestHarness.TinyRocketConfig.fir 208825:6]
    node _wrap_value_T_3 = tail(_wrap_value_T_2, 1) @[Counter.scala 76:24 chipyard.TestHarness.TinyRocketConfig.fir 208826:6]
    node _GEN_2 = mux(wrap_wrap_1, UInt<10>("h0"), _wrap_value_T_3) @[Counter.scala 86:20 chipyard.TestHarness.TinyRocketConfig.fir 208828:6 Counter.scala 86:28 chipyard.TestHarness.TinyRocketConfig.fir 208829:8 Counter.scala 76:15 chipyard.TestHarness.TinyRocketConfig.fir 208827:6]
    node _GEN_3 = mux(_T_3, _GEN_2, txBaudCount) @[Counter.scala 118:17 chipyard.TestHarness.TinyRocketConfig.fir 208823:4 Counter.scala 60:40 chipyard.TestHarness.TinyRocketConfig.fir 208820:4]
    node txBaudWrap = and(_T_3, wrap_wrap_1) @[Counter.scala 118:17 chipyard.TestHarness.TinyRocketConfig.fir 208823:4 Counter.scala 118:24 chipyard.TestHarness.TinyRocketConfig.fir 208831:6 chipyard.TestHarness.TinyRocketConfig.fir 208822:4]
    node _T_4 = eq(txState, UInt<2>("h0")) @[UARTAdapter.scala 44:53 chipyard.TestHarness.TinyRocketConfig.fir 208833:4]
    node _T_5 = not(io_uart_txd) @[UARTAdapter.scala 44:80 chipyard.TestHarness.TinyRocketConfig.fir 208834:4]
    node _T_6 = and(_T_4, _T_5) @[UARTAdapter.scala 44:65 chipyard.TestHarness.TinyRocketConfig.fir 208835:4]
    node _T_7 = and(_T_6, txfifo.io_enq_ready) @[UARTAdapter.scala 44:88 chipyard.TestHarness.TinyRocketConfig.fir 208836:4]
    reg txSlackCount : UInt<2>, clock with :
      reset => (UInt<1>("h0"), txSlackCount) @[Counter.scala 60:40 chipyard.TestHarness.TinyRocketConfig.fir 208837:4]
    node wrap_wrap_2 = eq(txSlackCount, UInt<2>("h3")) @[Counter.scala 72:24 chipyard.TestHarness.TinyRocketConfig.fir 208841:6]
    node _wrap_value_T_4 = add(txSlackCount, UInt<2>("h1")) @[Counter.scala 76:24 chipyard.TestHarness.TinyRocketConfig.fir 208842:6]
    node _wrap_value_T_5 = tail(_wrap_value_T_4, 1) @[Counter.scala 76:24 chipyard.TestHarness.TinyRocketConfig.fir 208843:6]
    node _GEN_5 = mux(_T_7, _wrap_value_T_5, txSlackCount) @[Counter.scala 118:17 chipyard.TestHarness.TinyRocketConfig.fir 208840:4 Counter.scala 76:15 chipyard.TestHarness.TinyRocketConfig.fir 208844:6 Counter.scala 60:40 chipyard.TestHarness.TinyRocketConfig.fir 208837:4]
    node txSlackWrap = and(_T_7, wrap_wrap_2) @[Counter.scala 118:17 chipyard.TestHarness.TinyRocketConfig.fir 208840:4 Counter.scala 118:24 chipyard.TestHarness.TinyRocketConfig.fir 208845:6 chipyard.TestHarness.TinyRocketConfig.fir 208839:4]
    node _T_8 = eq(UInt<2>("h0"), txState) @[Conditional.scala 37:30 chipyard.TestHarness.TinyRocketConfig.fir 208847:4]
    node _GEN_7 = mux(txSlackWrap, UInt<8>("h0"), txData) @[UARTAdapter.scala 48:25 chipyard.TestHarness.TinyRocketConfig.fir 208849:6 UARTAdapter.scala 49:17 chipyard.TestHarness.TinyRocketConfig.fir 208850:8 UARTAdapter.scala 39:19 chipyard.TestHarness.TinyRocketConfig.fir 208805:4]
    node _GEN_8 = mux(txSlackWrap, UInt<2>("h1"), txState) @[UARTAdapter.scala 48:25 chipyard.TestHarness.TinyRocketConfig.fir 208849:6 UARTAdapter.scala 50:17 chipyard.TestHarness.TinyRocketConfig.fir 208851:8 UARTAdapter.scala 38:24 chipyard.TestHarness.TinyRocketConfig.fir 208804:4]
    node _T_9 = eq(UInt<2>("h1"), txState) @[Conditional.scala 37:30 chipyard.TestHarness.TinyRocketConfig.fir 208855:6]
    node _GEN_9 = mux(txBaudWrap, UInt<2>("h2"), txState) @[UARTAdapter.scala 54:24 chipyard.TestHarness.TinyRocketConfig.fir 208857:8 UARTAdapter.scala 55:17 chipyard.TestHarness.TinyRocketConfig.fir 208858:10 UARTAdapter.scala 38:24 chipyard.TestHarness.TinyRocketConfig.fir 208804:4]
    node _T_10 = eq(UInt<2>("h2"), txState) @[Conditional.scala 37:30 chipyard.TestHarness.TinyRocketConfig.fir 208862:8]
    node _GEN_35 = pad(io_uart_txd, 8) @[UARTAdapter.scala 60:41 chipyard.TestHarness.TinyRocketConfig.fir 208865:12]
    node _txData_T = dshlw(_GEN_35, txDataIdx) @[UARTAdapter.scala 60:41 chipyard.TestHarness.TinyRocketConfig.fir 208865:12]
    node _txData_T_1 = or(txData, _txData_T) @[UARTAdapter.scala 60:26 chipyard.TestHarness.TinyRocketConfig.fir 208866:12]
    node _GEN_10 = mux(txfifo.io_enq_ready, _txData_T_1, txData) @[UARTAdapter.scala 59:34 chipyard.TestHarness.TinyRocketConfig.fir 208864:10 UARTAdapter.scala 60:16 chipyard.TestHarness.TinyRocketConfig.fir 208867:12 UARTAdapter.scala 39:19 chipyard.TestHarness.TinyRocketConfig.fir 208805:4]
    node _txState_T_1 = mux(io_uart_txd, UInt<2>("h0"), UInt<2>("h3")) @[UARTAdapter.scala 63:23 chipyard.TestHarness.TinyRocketConfig.fir 208871:12]
    node _GEN_11 = mux(txfifo.io_enq_ready, UInt<2>("h1"), txState) @[UARTAdapter.scala 64:39 chipyard.TestHarness.TinyRocketConfig.fir 208875:12 UARTAdapter.scala 65:17 chipyard.TestHarness.TinyRocketConfig.fir 208876:14 UARTAdapter.scala 38:24 chipyard.TestHarness.TinyRocketConfig.fir 208804:4]
    node _GEN_12 = mux(txDataWrap, _txState_T_1, _GEN_11) @[UARTAdapter.scala 62:24 chipyard.TestHarness.TinyRocketConfig.fir 208869:10 UARTAdapter.scala 63:17 chipyard.TestHarness.TinyRocketConfig.fir 208872:12]
    node _T_11 = eq(UInt<2>("h3"), txState) @[Conditional.scala 37:30 chipyard.TestHarness.TinyRocketConfig.fir 208880:10]
    node _T_13 = and(io_uart_txd, txfifo.io_enq_ready) @[UARTAdapter.scala 69:32 chipyard.TestHarness.TinyRocketConfig.fir 208883:12]
    node _GEN_13 = mux(_T_13, UInt<2>("h0"), txState) @[UARTAdapter.scala 69:56 chipyard.TestHarness.TinyRocketConfig.fir 208884:12 UARTAdapter.scala 70:17 chipyard.TestHarness.TinyRocketConfig.fir 208885:14 UARTAdapter.scala 38:24 chipyard.TestHarness.TinyRocketConfig.fir 208804:4]
    node _GEN_14 = mux(_T_11, _GEN_13, txState) @[Conditional.scala 39:67 chipyard.TestHarness.TinyRocketConfig.fir 208881:10 UARTAdapter.scala 38:24 chipyard.TestHarness.TinyRocketConfig.fir 208804:4]
    node _GEN_15 = mux(_T_10, _GEN_10, txData) @[Conditional.scala 39:67 chipyard.TestHarness.TinyRocketConfig.fir 208863:8 UARTAdapter.scala 39:19 chipyard.TestHarness.TinyRocketConfig.fir 208805:4]
    node _GEN_16 = mux(_T_10, _GEN_12, _GEN_14) @[Conditional.scala 39:67 chipyard.TestHarness.TinyRocketConfig.fir 208863:8]
    node _GEN_17 = mux(_T_9, _GEN_9, _GEN_16) @[Conditional.scala 39:67 chipyard.TestHarness.TinyRocketConfig.fir 208856:6]
    node _GEN_18 = mux(_T_9, txData, _GEN_15) @[Conditional.scala 39:67 chipyard.TestHarness.TinyRocketConfig.fir 208856:6 UARTAdapter.scala 39:19 chipyard.TestHarness.TinyRocketConfig.fir 208805:4]
    node _GEN_20 = mux(_T_8, _GEN_8, _GEN_17) @[Conditional.scala 40:58 chipyard.TestHarness.TinyRocketConfig.fir 208848:4]
    reg rxState : UInt<2>, clock with :
      reset => (UInt<1>("h0"), rxState) @[UARTAdapter.scala 79:24 chipyard.TestHarness.TinyRocketConfig.fir 208890:4]
    reg rxBaudCount : UInt<10>, clock with :
      reset => (UInt<1>("h0"), rxBaudCount) @[Counter.scala 60:40 chipyard.TestHarness.TinyRocketConfig.fir 208891:4]
    node wrap_wrap_3 = eq(rxBaudCount, UInt<10>("h363")) @[Counter.scala 72:24 chipyard.TestHarness.TinyRocketConfig.fir 208895:6]
    node _wrap_value_T_6 = add(rxBaudCount, UInt<10>("h1")) @[Counter.scala 76:24 chipyard.TestHarness.TinyRocketConfig.fir 208896:6]
    node _wrap_value_T_7 = tail(_wrap_value_T_6, 1) @[Counter.scala 76:24 chipyard.TestHarness.TinyRocketConfig.fir 208897:6]
    node _GEN_21 = mux(wrap_wrap_3, UInt<10>("h0"), _wrap_value_T_7) @[Counter.scala 86:20 chipyard.TestHarness.TinyRocketConfig.fir 208899:6 Counter.scala 86:28 chipyard.TestHarness.TinyRocketConfig.fir 208900:8 Counter.scala 76:15 chipyard.TestHarness.TinyRocketConfig.fir 208898:6]
    node _GEN_22 = mux(txfifo.io_enq_ready, _GEN_21, rxBaudCount) @[Counter.scala 118:17 chipyard.TestHarness.TinyRocketConfig.fir 208894:4 Counter.scala 60:40 chipyard.TestHarness.TinyRocketConfig.fir 208891:4]
    node rxBaudWrap = and(txfifo.io_enq_ready, wrap_wrap_3) @[Counter.scala 118:17 chipyard.TestHarness.TinyRocketConfig.fir 208894:4 Counter.scala 118:24 chipyard.TestHarness.TinyRocketConfig.fir 208902:6 chipyard.TestHarness.TinyRocketConfig.fir 208893:4]
    node _T_14 = eq(rxState, UInt<2>("h2")) @[UARTAdapter.scala 83:49 chipyard.TestHarness.TinyRocketConfig.fir 208904:4]
    node _T_15 = and(_T_14, txfifo.io_enq_ready) @[UARTAdapter.scala 83:61 chipyard.TestHarness.TinyRocketConfig.fir 208905:4]
    node _T_16 = and(_T_15, rxBaudWrap) @[UARTAdapter.scala 83:84 chipyard.TestHarness.TinyRocketConfig.fir 208906:4]
    reg rxDataIdx : UInt<3>, clock with :
      reset => (UInt<1>("h0"), rxDataIdx) @[Counter.scala 60:40 chipyard.TestHarness.TinyRocketConfig.fir 208907:4]
    node wrap_wrap_4 = eq(rxDataIdx, UInt<3>("h7")) @[Counter.scala 72:24 chipyard.TestHarness.TinyRocketConfig.fir 208911:6]
    node _wrap_value_T_8 = add(rxDataIdx, UInt<3>("h1")) @[Counter.scala 76:24 chipyard.TestHarness.TinyRocketConfig.fir 208912:6]
    node _wrap_value_T_9 = tail(_wrap_value_T_8, 1) @[Counter.scala 76:24 chipyard.TestHarness.TinyRocketConfig.fir 208913:6]
    node _GEN_24 = mux(_T_16, _wrap_value_T_9, rxDataIdx) @[Counter.scala 118:17 chipyard.TestHarness.TinyRocketConfig.fir 208910:4 Counter.scala 76:15 chipyard.TestHarness.TinyRocketConfig.fir 208914:6 Counter.scala 60:40 chipyard.TestHarness.TinyRocketConfig.fir 208907:4]
    node rxDataWrap = and(_T_16, wrap_wrap_4) @[Counter.scala 118:17 chipyard.TestHarness.TinyRocketConfig.fir 208910:4 Counter.scala 118:24 chipyard.TestHarness.TinyRocketConfig.fir 208915:6 chipyard.TestHarness.TinyRocketConfig.fir 208909:4]
    node _T_17 = eq(UInt<2>("h0"), rxState) @[Conditional.scala 37:30 chipyard.TestHarness.TinyRocketConfig.fir 208918:4]
    node _T_18 = and(rxBaudWrap, rxfifo.io_deq_valid) @[UARTAdapter.scala 89:24 chipyard.TestHarness.TinyRocketConfig.fir 208921:6]
    node _GEN_26 = mux(_T_18, UInt<2>("h1"), rxState) @[UARTAdapter.scala 89:48 chipyard.TestHarness.TinyRocketConfig.fir 208922:6 UARTAdapter.scala 90:17 chipyard.TestHarness.TinyRocketConfig.fir 208923:8 UARTAdapter.scala 79:24 chipyard.TestHarness.TinyRocketConfig.fir 208890:4]
    node _T_19 = eq(UInt<2>("h1"), rxState) @[Conditional.scala 37:30 chipyard.TestHarness.TinyRocketConfig.fir 208927:6]
    node _GEN_27 = mux(rxBaudWrap, UInt<2>("h2"), rxState) @[UARTAdapter.scala 95:24 chipyard.TestHarness.TinyRocketConfig.fir 208930:8 UARTAdapter.scala 96:17 chipyard.TestHarness.TinyRocketConfig.fir 208931:10 UARTAdapter.scala 79:24 chipyard.TestHarness.TinyRocketConfig.fir 208890:4]
    node _T_20 = eq(UInt<2>("h2"), rxState) @[Conditional.scala 37:30 chipyard.TestHarness.TinyRocketConfig.fir 208935:8]
    node _io_uart_rxd_T = dshr(rxfifo.io_deq_bits, rxDataIdx) @[UARTAdapter.scala 100:42 chipyard.TestHarness.TinyRocketConfig.fir 208937:10]
    node _io_uart_rxd_T_1 = bits(_io_uart_rxd_T, 0, 0) @[UARTAdapter.scala 100:55 chipyard.TestHarness.TinyRocketConfig.fir 208938:10]
    node _T_21 = and(rxDataWrap, rxBaudWrap) @[UARTAdapter.scala 101:23 chipyard.TestHarness.TinyRocketConfig.fir 208940:10]
    node _GEN_28 = mux(_T_21, UInt<2>("h0"), rxState) @[UARTAdapter.scala 101:38 chipyard.TestHarness.TinyRocketConfig.fir 208941:10 UARTAdapter.scala 102:17 chipyard.TestHarness.TinyRocketConfig.fir 208942:12 UARTAdapter.scala 79:24 chipyard.TestHarness.TinyRocketConfig.fir 208890:4]
    node _GEN_29 = mux(_T_20, _io_uart_rxd_T_1, UInt<1>("h1")) @[Conditional.scala 39:67 chipyard.TestHarness.TinyRocketConfig.fir 208936:8 UARTAdapter.scala 100:19 chipyard.TestHarness.TinyRocketConfig.fir 208939:10 UARTAdapter.scala 85:15 chipyard.TestHarness.TinyRocketConfig.fir 208917:4]
    node _GEN_30 = mux(_T_20, _GEN_28, rxState) @[Conditional.scala 39:67 chipyard.TestHarness.TinyRocketConfig.fir 208936:8 UARTAdapter.scala 79:24 chipyard.TestHarness.TinyRocketConfig.fir 208890:4]
    node _GEN_31 = mux(_T_19, UInt<1>("h0"), _GEN_29) @[Conditional.scala 39:67 chipyard.TestHarness.TinyRocketConfig.fir 208928:6 UARTAdapter.scala 94:19 chipyard.TestHarness.TinyRocketConfig.fir 208929:8]
    node _GEN_32 = mux(_T_19, _GEN_27, _GEN_30) @[Conditional.scala 39:67 chipyard.TestHarness.TinyRocketConfig.fir 208928:6]
    node _GEN_34 = mux(_T_17, _GEN_26, _GEN_32) @[Conditional.scala 40:58 chipyard.TestHarness.TinyRocketConfig.fir 208919:4]
    node _rxfifo_io_deq_ready_T_1 = and(_T_14, rxDataWrap) @[UARTAdapter.scala 106:48 chipyard.TestHarness.TinyRocketConfig.fir 208946:4]
    node _rxfifo_io_deq_ready_T_2 = and(_rxfifo_io_deq_ready_T_1, rxBaudWrap) @[UARTAdapter.scala 106:62 chipyard.TestHarness.TinyRocketConfig.fir 208947:4]
    io_uart_rxd <= or(_T_17, _GEN_31) @[Conditional.scala 40:58 chipyard.TestHarness.TinyRocketConfig.fir 208919:4 UARTAdapter.scala 88:19 chipyard.TestHarness.TinyRocketConfig.fir 208920:6]
    txfifo.clock <= clock @[chipyard.TestHarness.TinyRocketConfig.fir 208799:4]
    txfifo.reset <= reset @[chipyard.TestHarness.TinyRocketConfig.fir 208800:4]
    txfifo.io_enq_valid <= and(_T_1, wrap_wrap) @[Counter.scala 118:17 chipyard.TestHarness.TinyRocketConfig.fir 208811:4 Counter.scala 118:24 chipyard.TestHarness.TinyRocketConfig.fir 208816:6 chipyard.TestHarness.TinyRocketConfig.fir 208810:4]
    txfifo.io_enq_bits <= txData @[UARTAdapter.scala 75:23 chipyard.TestHarness.TinyRocketConfig.fir 208888:4]
    txfifo.io_deq_ready <= sim.serial_out_ready @[UARTAdapter.scala 115:23 chipyard.TestHarness.TinyRocketConfig.fir 208959:4]
    rxfifo.clock <= clock @[chipyard.TestHarness.TinyRocketConfig.fir 208802:4]
    rxfifo.reset <= reset @[chipyard.TestHarness.TinyRocketConfig.fir 208803:4]
    rxfifo.io_enq_valid <= sim.serial_in_valid @[UARTAdapter.scala 118:23 chipyard.TestHarness.TinyRocketConfig.fir 208961:4]
    rxfifo.io_enq_bits <= sim.serial_in_bits @[UARTAdapter.scala 117:22 chipyard.TestHarness.TinyRocketConfig.fir 208960:4]
    rxfifo.io_deq_ready <= and(_rxfifo_io_deq_ready_T_2, txfifo.io_enq_ready) @[UARTAdapter.scala 106:76 chipyard.TestHarness.TinyRocketConfig.fir 208948:4]
    txState <= mux(reset, UInt<2>("h0"), _GEN_20) @[UARTAdapter.scala 38:24 chipyard.TestHarness.TinyRocketConfig.fir 208804:4 UARTAdapter.scala 38:24 chipyard.TestHarness.TinyRocketConfig.fir 208804:4]
    txData <= mux(_T_8, _GEN_7, _GEN_18) @[Conditional.scala 40:58 chipyard.TestHarness.TinyRocketConfig.fir 208848:4]
    txDataIdx <= mux(reset, UInt<3>("h0"), _GEN_0) @[Counter.scala 60:40 chipyard.TestHarness.TinyRocketConfig.fir 208808:4 Counter.scala 60:40 chipyard.TestHarness.TinyRocketConfig.fir 208808:4]
    txBaudCount <= mux(reset, UInt<10>("h0"), _GEN_3) @[Counter.scala 60:40 chipyard.TestHarness.TinyRocketConfig.fir 208820:4 Counter.scala 60:40 chipyard.TestHarness.TinyRocketConfig.fir 208820:4]
    txSlackCount <= mux(reset, UInt<2>("h0"), _GEN_5) @[Counter.scala 60:40 chipyard.TestHarness.TinyRocketConfig.fir 208837:4 Counter.scala 60:40 chipyard.TestHarness.TinyRocketConfig.fir 208837:4]
    rxState <= mux(reset, UInt<2>("h0"), _GEN_34) @[UARTAdapter.scala 79:24 chipyard.TestHarness.TinyRocketConfig.fir 208890:4 UARTAdapter.scala 79:24 chipyard.TestHarness.TinyRocketConfig.fir 208890:4]
    rxBaudCount <= mux(reset, UInt<10>("h0"), _GEN_22) @[Counter.scala 60:40 chipyard.TestHarness.TinyRocketConfig.fir 208891:4 Counter.scala 60:40 chipyard.TestHarness.TinyRocketConfig.fir 208891:4]
    rxDataIdx <= mux(reset, UInt<3>("h0"), _GEN_24) @[Counter.scala 60:40 chipyard.TestHarness.TinyRocketConfig.fir 208907:4 Counter.scala 60:40 chipyard.TestHarness.TinyRocketConfig.fir 208907:4]
    sim.clock <= clock @[UARTAdapter.scala 110:16 chipyard.TestHarness.TinyRocketConfig.fir 208954:4]
    sim.reset <= reset @[UARTAdapter.scala 111:25 chipyard.TestHarness.TinyRocketConfig.fir 208955:4]
    sim.serial_in_ready <= rxfifo.io_enq_ready @[UARTAdapter.scala 119:26 chipyard.TestHarness.TinyRocketConfig.fir 208962:4]
    sim.serial_out_valid <= txfifo.io_deq_valid @[UARTAdapter.scala 114:27 chipyard.TestHarness.TinyRocketConfig.fir 208958:4]
    sim.serial_out_bits <= txfifo.io_deq_bits @[UARTAdapter.scala 113:26 chipyard.TestHarness.TinyRocketConfig.fir 208957:4]

  module TestHarness : @[chipyard.TestHarness.TinyRocketConfig.fir 208964:2]
    input clock : Clock @[chipyard.TestHarness.TinyRocketConfig.fir 208965:4]
    input reset : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 208966:4]
    output io_success : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 208967:4]

    inst chiptop of ChipTop @[TestHarness.scala 34:19 chipyard.TestHarness.TinyRocketConfig.fir 208969:4]
    inst SimJTAG of SimJTAG @[HarnessBinders.scala 190:26 chipyard.TestHarness.TinyRocketConfig.fir 208981:4]
    inst plusarg_reader of plusarg_reader_84 @[PlusArg.scala 80:11 chipyard.TestHarness.TinyRocketConfig.fir 208998:4]
    inst ram of SerialRAM_inTestHarness @[SerialAdapter.scala 27:26 chipyard.TestHarness.TinyRocketConfig.fir 209018:4]
    inst success_sim of SimSerial @[SerialAdapter.scala 37:23 chipyard.TestHarness.TinyRocketConfig.fir 209028:4]
    inst uart_sim_0 of UARTAdapter_inTestHarness @[UARTAdapter.scala 132:28 chipyard.TestHarness.TinyRocketConfig.fir 209044:4]
    node dtm_success = eq(SimJTAG.exit, UInt<32>("h1")) @[Periphery.scala 233:26 chipyard.TestHarness.TinyRocketConfig.fir 209002:4]
    node _T_2 = not(reset) @[HarnessBinders.scala 190:105 chipyard.TestHarness.TinyRocketConfig.fir 208990:4]
    node _T_3 = geq(SimJTAG.exit, UInt<32>("h2")) @[Periphery.scala 234:19 chipyard.TestHarness.TinyRocketConfig.fir 209004:4]
    node _GEN_2 = shr(SimJTAG.exit, 1) @[Periphery.scala 235:59 chipyard.TestHarness.TinyRocketConfig.fir 209006:6]
    node _T_4 = pad(_GEN_2, 32) @[Periphery.scala 235:59 chipyard.TestHarness.TinyRocketConfig.fir 209006:6]
    io_success <= or(success_sim.exit, dtm_success) @[HarnessBinders.scala 236:22 chipyard.TestHarness.TinyRocketConfig.fir 209041:4 HarnessBinders.scala 236:35 chipyard.TestHarness.TinyRocketConfig.fir 209042:6]
    chiptop.jtag_TCK <= SimJTAG.jtag_TCK @[Periphery.scala 220:15 chipyard.TestHarness.TinyRocketConfig.fir 208991:4]
    chiptop.jtag_TMS <= SimJTAG.jtag_TMS @[Periphery.scala 221:15 chipyard.TestHarness.TinyRocketConfig.fir 208992:4]
    chiptop.jtag_TDI <= SimJTAG.jtag_TDI @[Periphery.scala 222:15 chipyard.TestHarness.TinyRocketConfig.fir 208993:4]
    chiptop.serial_tl_bits_in_valid <= ram.io_ser_in_valid @[SerialAdapter.scala 28:21 chipyard.TestHarness.TinyRocketConfig.fir 209025:4]
    chiptop.serial_tl_bits_in_bits <= ram.io_ser_in_bits @[SerialAdapter.scala 28:21 chipyard.TestHarness.TinyRocketConfig.fir 209024:4]
    chiptop.serial_tl_bits_out_ready <= ram.io_ser_out_ready @[SerialAdapter.scala 28:21 chipyard.TestHarness.TinyRocketConfig.fir 209023:4]
    chiptop.uart_0_rxd <= uart_sim_0.io_uart_rxd @[UARTAdapter.scala 135:18 chipyard.TestHarness.TinyRocketConfig.fir 209048:4]
    chiptop.reset_wire_reset <= asAsyncReset(reset) @[TestHarness.scala 41:24 chipyard.TestHarness.TinyRocketConfig.fir 208973:4]
    chiptop.clock <= clock @[Clocks.scala 106:18 chipyard.TestHarness.TinyRocketConfig.fir 208975:4]
    SimJTAG.clock <= clock @[Periphery.scala 225:14 chipyard.TestHarness.TinyRocketConfig.fir 208996:4]
    SimJTAG.reset <= reset @[HarnessBinders.scala 190:97 chipyard.TestHarness.TinyRocketConfig.fir 208988:4]
    SimJTAG.jtag_TDO_data <= chiptop.jtag_TDO_data @[Periphery.scala 223:17 chipyard.TestHarness.TinyRocketConfig.fir 208995:4]
    SimJTAG.jtag_TDO_driven <= chiptop.jtag_TDO_driven @[Periphery.scala 223:17 chipyard.TestHarness.TinyRocketConfig.fir 208994:4]
    SimJTAG.enable <= bits(plusarg_reader.out, 0, 0) @[Periphery.scala 228:18 chipyard.TestHarness.TinyRocketConfig.fir 209000:4]
    SimJTAG.init_done <= not(reset) @[HarnessBinders.scala 190:105 chipyard.TestHarness.TinyRocketConfig.fir 208990:4]
    ram.clock <= chiptop.serial_tl_clock @[chipyard.TestHarness.TinyRocketConfig.fir 209019:4]
    ram.reset <= reset @[chipyard.TestHarness.TinyRocketConfig.fir 208971:4 chipyard.TestHarness.TinyRocketConfig.fir 208972:4]
    ram.io_ser_in_ready <= chiptop.serial_tl_bits_in_ready @[SerialAdapter.scala 28:21 chipyard.TestHarness.TinyRocketConfig.fir 209026:4]
    ram.io_ser_out_valid <= chiptop.serial_tl_bits_out_valid @[SerialAdapter.scala 28:21 chipyard.TestHarness.TinyRocketConfig.fir 209022:4]
    ram.io_ser_out_bits <= chiptop.serial_tl_bits_out_bits @[SerialAdapter.scala 28:21 chipyard.TestHarness.TinyRocketConfig.fir 209021:4]
    ram.io_tsi_ser_in_valid <= success_sim.serial_in_valid @[SerialAdapter.scala 40:21 chipyard.TestHarness.TinyRocketConfig.fir 209039:4]
    ram.io_tsi_ser_in_bits <= success_sim.serial_in_bits @[SerialAdapter.scala 40:21 chipyard.TestHarness.TinyRocketConfig.fir 209038:4]
    ram.io_tsi_ser_out_ready <= success_sim.serial_out_ready @[SerialAdapter.scala 40:21 chipyard.TestHarness.TinyRocketConfig.fir 209037:4]
    success_sim.clock <= chiptop.serial_tl_clock @[SerialAdapter.scala 38:20 chipyard.TestHarness.TinyRocketConfig.fir 209033:4]
    success_sim.reset <= reset @[HarnessBinders.scala 235:103 chipyard.TestHarness.TinyRocketConfig.fir 209027:4]
    success_sim.serial_in_ready <= ram.io_tsi_ser_in_ready @[SerialAdapter.scala 40:21 chipyard.TestHarness.TinyRocketConfig.fir 209040:4]
    success_sim.serial_out_valid <= ram.io_tsi_ser_out_valid @[SerialAdapter.scala 40:21 chipyard.TestHarness.TinyRocketConfig.fir 209036:4]
    success_sim.serial_out_bits <= ram.io_tsi_ser_out_bits @[SerialAdapter.scala 40:21 chipyard.TestHarness.TinyRocketConfig.fir 209035:4]
    uart_sim_0.clock <= clock @[chipyard.TestHarness.TinyRocketConfig.fir 209045:4]
    uart_sim_0.reset <= reset @[chipyard.TestHarness.TinyRocketConfig.fir 209046:4]
    uart_sim_0.io_uart_txd <= chiptop.uart_0_txd @[UARTAdapter.scala 134:28 chipyard.TestHarness.TinyRocketConfig.fir 209047:4]
    printf(clock, and(_T_3, _T_2), "*** FAILED *** (exit code = %d)\n", _T_4) @[Periphery.scala 235:13 chipyard.TestHarness.TinyRocketConfig.fir 209010:8]
    stop(clock, and(_T_3, _T_2), 1) @[Periphery.scala 236:11 chipyard.TestHarness.TinyRocketConfig.fir 209015:8]

  extmodule plusarg_reader : @[chipyard.TestHarness.TinyRocketConfig.fir 129:2]
    output out : UInt<32> @[chipyard.TestHarness.TinyRocketConfig.fir 130:4]
    defname = plusarg_reader
    parameter FORMAT = "tilelink_timeout=%d"
    parameter DEFAULT = 0
    parameter WIDTH = 32

  extmodule plusarg_reader_52 : @[chipyard.TestHarness.TinyRocketConfig.fir 90716:2]
    output out : UInt<32> @[chipyard.TestHarness.TinyRocketConfig.fir 90717:4]
    defname = plusarg_reader
    parameter FORMAT = "max_core_cycles=%d"
    parameter DEFAULT = 0
    parameter WIDTH = 32

  extmodule plusarg_reader_81 : @[chipyard.TestHarness.TinyRocketConfig.fir 189543:2]
    output out : UInt<32> @[chipyard.TestHarness.TinyRocketConfig.fir 189544:4]
    defname = plusarg_reader
    parameter FORMAT = "uart_tx=%d"
    parameter DEFAULT = 1
    parameter WIDTH = 32

  extmodule ClockDividerN : @[chipyard.TestHarness.TinyRocketConfig.fir 195340:2]
    output clk_out : Clock @[chipyard.TestHarness.TinyRocketConfig.fir 195341:4]
    input clk_in : Clock @[chipyard.TestHarness.TinyRocketConfig.fir 195342:4]
    defname = ClockDividerN
    parameter DIV = 1

  extmodule EICG_wrapper : @[chipyard.TestHarness.TinyRocketConfig.fir 195436:2]
    input in : Clock @[chipyard.TestHarness.TinyRocketConfig.fir 195437:4]
    input test_en : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 195438:4]
    input en : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 195439:4]
    output out : Clock @[chipyard.TestHarness.TinyRocketConfig.fir 195440:4]
    defname = EICG_wrapper

  extmodule GenericDigitalOutIOCell : @[chipyard.TestHarness.TinyRocketConfig.fir 195445:2]
    output pad : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 195446:4]
    input o : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 195447:4]
    input oe : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 195448:4]
    defname = GenericDigitalOutIOCell

  extmodule GenericDigitalInIOCell : @[chipyard.TestHarness.TinyRocketConfig.fir 195461:2]
    input pad : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 195462:4]
    output i : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 195463:4]
    input ie : UInt<1> @[chipyard.TestHarness.TinyRocketConfig.fir 195464:4]
    defname = GenericDigitalInIOCell

  extmodule data_arrays_0_ext :
    input RW0_addr : UInt<12>
    input RW0_en : UInt<1>
    input RW0_clk : Clock
    input RW0_wmode : UInt<1>
    input RW0_wdata : UInt<32>
    output RW0_rdata : UInt<32>
    input RW0_wmask : UInt<4>
    defname = data_arrays_0_ext

  extmodule tag_array_ext :
    input RW0_addr : UInt<6>
    input RW0_en : UInt<1>
    input RW0_clk : Clock
    input RW0_wmode : UInt<1>
    input RW0_wdata : UInt<21>
    output RW0_rdata : UInt<21>
    input RW0_wmask : UInt<1>
    defname = tag_array_ext

  extmodule data_arrays_0_0_ext :
    input RW0_addr : UInt<10>
    input RW0_en : UInt<1>
    input RW0_clk : Clock
    input RW0_wmode : UInt<1>
    input RW0_wdata : UInt<32>
    output RW0_rdata : UInt<32>
    input RW0_wmask : UInt<1>
    defname = data_arrays_0_0_ext

  extmodule l2_tlb_ram_ext :
    input RW0_addr : UInt<10>
    input RW0_en : UInt<1>
    input RW0_clk : Clock
    input RW0_wmode : UInt<1>
    input RW0_wdata : UInt<37>
    output RW0_rdata : UInt<37>
    defname = l2_tlb_ram_ext

  extmodule mem_ext :
    input RW0_addr : UInt<10>
    input RW0_en : UInt<1>
    input RW0_clk : Clock
    input RW0_wmode : UInt<1>
    input RW0_wdata : UInt<32>
    output RW0_rdata : UInt<32>
    input RW0_wmask : UInt<4>
    defname = mem_ext

  module mem_inTestHarness :
    input RW0_addr : UInt<10>
    input RW0_en : UInt<1>
    input RW0_clk : Clock
    input RW0_wmode : UInt<1>
    input RW0_wdata_0 : UInt<8>
    input RW0_wdata_1 : UInt<8>
    input RW0_wdata_2 : UInt<8>
    input RW0_wdata_3 : UInt<8>
    output RW0_rdata_0 : UInt<8>
    output RW0_rdata_1 : UInt<8>
    output RW0_rdata_2 : UInt<8>
    output RW0_rdata_3 : UInt<8>
    input RW0_wmask_0 : UInt<1>
    input RW0_wmask_1 : UInt<1>
    input RW0_wmask_2 : UInt<1>
    input RW0_wmask_3 : UInt<1>

    inst mem_ext of mem_ext
    mem_ext.RW0_clk <= RW0_clk
    mem_ext.RW0_en <= RW0_en
    mem_ext.RW0_addr <= RW0_addr
    RW0_rdata_0 <= bits(mem_ext.RW0_rdata, 7, 0)
    RW0_rdata_1 <= bits(mem_ext.RW0_rdata, 15, 8)
    RW0_rdata_2 <= bits(mem_ext.RW0_rdata, 23, 16)
    RW0_rdata_3 <= bits(mem_ext.RW0_rdata, 31, 24)
    mem_ext.RW0_wmode <= RW0_wmode
    node _GEN_0 = cat(RW0_wdata_3, RW0_wdata_2)
    node _GEN_1 = cat(RW0_wdata_1, RW0_wdata_0)
    mem_ext.RW0_wdata <= cat(_GEN_0, _GEN_1)
    node _GEN_2 = cat(RW0_wmask_3, RW0_wmask_2)
    node _GEN_3 = cat(RW0_wmask_1, RW0_wmask_0)
    mem_ext.RW0_wmask <= cat(_GEN_2, _GEN_3)
