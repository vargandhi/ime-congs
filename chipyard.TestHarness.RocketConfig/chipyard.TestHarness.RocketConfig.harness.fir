circuit TestHarness : @[chipyard.TestHarness.RocketConfig.fir 2:0]
  extmodule plusarg_reader : @[chipyard.TestHarness.RocketConfig.fir 134:2]
    output out : UInt<32> @[chipyard.TestHarness.RocketConfig.fir 135:4]
    defname = plusarg_reader
    parameter FORMAT = "tilelink_timeout=%d"
    parameter DEFAULT = 0
    parameter WIDTH = 32

  module Queue_6_inTestHarness : @[chipyard.TestHarness.RocketConfig.fir 38515:2]
    input clock : Clock @[chipyard.TestHarness.RocketConfig.fir 38516:4]
    input reset : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 38517:4]
    output io_enq_ready : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 38518:4]
    input io_enq_valid : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 38518:4]
    input io_enq_bits_opcode : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 38518:4]
    input io_enq_bits_size : UInt<4> @[chipyard.TestHarness.RocketConfig.fir 38518:4]
    input io_enq_bits_address : UInt<32> @[chipyard.TestHarness.RocketConfig.fir 38518:4]
    input io_enq_bits_mask : UInt<8> @[chipyard.TestHarness.RocketConfig.fir 38518:4]
    input io_enq_bits_data : UInt<64> @[chipyard.TestHarness.RocketConfig.fir 38518:4]
    input io_deq_ready : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 38518:4]
    output io_deq_valid : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 38518:4]
    output io_deq_bits_opcode : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 38518:4]
    output io_deq_bits_param : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 38518:4]
    output io_deq_bits_size : UInt<4> @[chipyard.TestHarness.RocketConfig.fir 38518:4]
    output io_deq_bits_source : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 38518:4]
    output io_deq_bits_address : UInt<32> @[chipyard.TestHarness.RocketConfig.fir 38518:4]
    output io_deq_bits_mask : UInt<8> @[chipyard.TestHarness.RocketConfig.fir 38518:4]
    output io_deq_bits_data : UInt<64> @[chipyard.TestHarness.RocketConfig.fir 38518:4]
    output io_deq_bits_corrupt : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 38518:4]

    mem ram_opcode : @[Decoupled.scala 218:16 chipyard.TestHarness.RocketConfig.fir 38520:4]
      data-type => UInt<3>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    mem ram_param : @[Decoupled.scala 218:16 chipyard.TestHarness.RocketConfig.fir 38520:4]
      data-type => UInt<3>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    mem ram_size : @[Decoupled.scala 218:16 chipyard.TestHarness.RocketConfig.fir 38520:4]
      data-type => UInt<4>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    mem ram_source : @[Decoupled.scala 218:16 chipyard.TestHarness.RocketConfig.fir 38520:4]
      data-type => UInt<1>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    mem ram_address : @[Decoupled.scala 218:16 chipyard.TestHarness.RocketConfig.fir 38520:4]
      data-type => UInt<32>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    mem ram_mask : @[Decoupled.scala 218:16 chipyard.TestHarness.RocketConfig.fir 38520:4]
      data-type => UInt<8>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    mem ram_data : @[Decoupled.scala 218:16 chipyard.TestHarness.RocketConfig.fir 38520:4]
      data-type => UInt<64>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    mem ram_corrupt : @[Decoupled.scala 218:16 chipyard.TestHarness.RocketConfig.fir 38520:4]
      data-type => UInt<1>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    reg value : UInt<1>, clock with :
      reset => (UInt<1>("h0"), value) @[Counter.scala 60:40 chipyard.TestHarness.RocketConfig.fir 38521:4]
    reg value_1 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), value_1) @[Counter.scala 60:40 chipyard.TestHarness.RocketConfig.fir 38522:4]
    reg maybe_full : UInt<1>, clock with :
      reset => (UInt<1>("h0"), maybe_full) @[Decoupled.scala 221:27 chipyard.TestHarness.RocketConfig.fir 38523:4]
    node ptr_match = eq(value, value_1) @[Decoupled.scala 223:33 chipyard.TestHarness.RocketConfig.fir 38524:4]
    node _empty_T = not(maybe_full) @[Decoupled.scala 224:28 chipyard.TestHarness.RocketConfig.fir 38525:4]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 224:25 chipyard.TestHarness.RocketConfig.fir 38526:4]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24 chipyard.TestHarness.RocketConfig.fir 38527:4]
    node do_enq = and(io_enq_ready, io_enq_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.RocketConfig.fir 38528:4]
    node do_deq = and(io_deq_ready, io_deq_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.RocketConfig.fir 38531:4]
    node _value_T = add(value, UInt<1>("h1")) @[Counter.scala 76:24 chipyard.TestHarness.RocketConfig.fir 38545:6]
    node _value_T_1 = tail(_value_T, 1) @[Counter.scala 76:24 chipyard.TestHarness.RocketConfig.fir 38546:6]
    node _GEN_12 = mux(do_enq, _value_T_1, value) @[Decoupled.scala 229:17 chipyard.TestHarness.RocketConfig.fir 38534:4 Counter.scala 76:15 chipyard.TestHarness.RocketConfig.fir 38547:6 Counter.scala 60:40 chipyard.TestHarness.RocketConfig.fir 38521:4]
    node _value_T_2 = add(value_1, UInt<1>("h1")) @[Counter.scala 76:24 chipyard.TestHarness.RocketConfig.fir 38551:6]
    node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 76:24 chipyard.TestHarness.RocketConfig.fir 38552:6]
    node _GEN_13 = mux(do_deq, _value_T_3, value_1) @[Decoupled.scala 233:17 chipyard.TestHarness.RocketConfig.fir 38549:4 Counter.scala 76:15 chipyard.TestHarness.RocketConfig.fir 38553:6 Counter.scala 60:40 chipyard.TestHarness.RocketConfig.fir 38522:4]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 236:16 chipyard.TestHarness.RocketConfig.fir 38555:4]
    node _GEN_14 = mux(_T, do_enq, maybe_full) @[Decoupled.scala 236:28 chipyard.TestHarness.RocketConfig.fir 38556:4 Decoupled.scala 237:16 chipyard.TestHarness.RocketConfig.fir 38557:6 Decoupled.scala 221:27 chipyard.TestHarness.RocketConfig.fir 38523:4]
    io_enq_ready <= not(full) @[Decoupled.scala 241:19 chipyard.TestHarness.RocketConfig.fir 38561:4]
    io_deq_valid <= not(empty) @[Decoupled.scala 240:19 chipyard.TestHarness.RocketConfig.fir 38559:4]
    io_deq_bits_opcode <= ram_opcode.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.RocketConfig.fir 38571:4]
    io_deq_bits_param <= ram_param.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.RocketConfig.fir 38570:4]
    io_deq_bits_size <= ram_size.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.RocketConfig.fir 38569:4]
    io_deq_bits_source <= ram_source.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.RocketConfig.fir 38568:4]
    io_deq_bits_address <= ram_address.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.RocketConfig.fir 38567:4]
    io_deq_bits_mask <= ram_mask.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.RocketConfig.fir 38566:4]
    io_deq_bits_data <= ram_data.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.RocketConfig.fir 38565:4]
    io_deq_bits_corrupt <= ram_corrupt.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.RocketConfig.fir 38564:4]
    value <= mux(reset, UInt<1>("h0"), _GEN_12) @[Counter.scala 60:40 chipyard.TestHarness.RocketConfig.fir 38521:4 Counter.scala 60:40 chipyard.TestHarness.RocketConfig.fir 38521:4]
    value_1 <= mux(reset, UInt<1>("h0"), _GEN_13) @[Counter.scala 60:40 chipyard.TestHarness.RocketConfig.fir 38522:4 Counter.scala 60:40 chipyard.TestHarness.RocketConfig.fir 38522:4]
    maybe_full <= mux(reset, UInt<1>("h0"), _GEN_14) @[Decoupled.scala 221:27 chipyard.TestHarness.RocketConfig.fir 38523:4 Decoupled.scala 221:27 chipyard.TestHarness.RocketConfig.fir 38523:4]
    ram_opcode.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_opcode.io_deq_bits_MPORT.addr <= value_1
    ram_opcode.io_deq_bits_MPORT.clk <= clock
    ram_opcode.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_opcode.MPORT.addr <= value
    ram_opcode.MPORT.mask <= UInt<1>("h1")
    ram_opcode.MPORT.data <= io_enq_bits_opcode
    ram_opcode.MPORT.clk <= clock
    ram_param.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_param.io_deq_bits_MPORT.addr <= value_1
    ram_param.io_deq_bits_MPORT.clk <= clock
    ram_param.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_param.MPORT.addr <= value
    ram_param.MPORT.mask <= UInt<1>("h1")
    ram_param.MPORT.data <= UInt<3>("h0")
    ram_param.MPORT.clk <= clock
    ram_size.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_size.io_deq_bits_MPORT.addr <= value_1
    ram_size.io_deq_bits_MPORT.clk <= clock
    ram_size.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_size.MPORT.addr <= value
    ram_size.MPORT.mask <= UInt<1>("h1")
    ram_size.MPORT.data <= io_enq_bits_size
    ram_size.MPORT.clk <= clock
    ram_source.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_source.io_deq_bits_MPORT.addr <= value_1
    ram_source.io_deq_bits_MPORT.clk <= clock
    ram_source.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_source.MPORT.addr <= value
    ram_source.MPORT.mask <= UInt<1>("h1")
    ram_source.MPORT.data <= UInt<1>("h0")
    ram_source.MPORT.clk <= clock
    ram_address.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_address.io_deq_bits_MPORT.addr <= value_1
    ram_address.io_deq_bits_MPORT.clk <= clock
    ram_address.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_address.MPORT.addr <= value
    ram_address.MPORT.mask <= UInt<1>("h1")
    ram_address.MPORT.data <= io_enq_bits_address
    ram_address.MPORT.clk <= clock
    ram_mask.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_mask.io_deq_bits_MPORT.addr <= value_1
    ram_mask.io_deq_bits_MPORT.clk <= clock
    ram_mask.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_mask.MPORT.addr <= value
    ram_mask.MPORT.mask <= UInt<1>("h1")
    ram_mask.MPORT.data <= io_enq_bits_mask
    ram_mask.MPORT.clk <= clock
    ram_data.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_data.io_deq_bits_MPORT.addr <= value_1
    ram_data.io_deq_bits_MPORT.clk <= clock
    ram_data.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_data.MPORT.addr <= value
    ram_data.MPORT.mask <= UInt<1>("h1")
    ram_data.MPORT.data <= io_enq_bits_data
    ram_data.MPORT.clk <= clock
    ram_corrupt.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_corrupt.io_deq_bits_MPORT.addr <= value_1
    ram_corrupt.io_deq_bits_MPORT.clk <= clock
    ram_corrupt.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_corrupt.MPORT.addr <= value
    ram_corrupt.MPORT.mask <= UInt<1>("h1")
    ram_corrupt.MPORT.data <= UInt<1>("h0")
    ram_corrupt.MPORT.clk <= clock

  module Queue_7_inTestHarness : @[chipyard.TestHarness.RocketConfig.fir 38579:2]
    input clock : Clock @[chipyard.TestHarness.RocketConfig.fir 38580:4]
    input reset : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 38581:4]
    output io_enq_ready : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 38582:4]
    input io_enq_valid : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 38582:4]
    input io_enq_bits_opcode : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 38582:4]
    input io_enq_bits_param : UInt<2> @[chipyard.TestHarness.RocketConfig.fir 38582:4]
    input io_enq_bits_size : UInt<4> @[chipyard.TestHarness.RocketConfig.fir 38582:4]
    input io_enq_bits_source : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 38582:4]
    input io_enq_bits_sink : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 38582:4]
    input io_enq_bits_denied : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 38582:4]
    input io_enq_bits_data : UInt<64> @[chipyard.TestHarness.RocketConfig.fir 38582:4]
    input io_enq_bits_corrupt : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 38582:4]
    input io_deq_ready : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 38582:4]
    output io_deq_valid : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 38582:4]
    output io_deq_bits_opcode : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 38582:4]
    output io_deq_bits_param : UInt<2> @[chipyard.TestHarness.RocketConfig.fir 38582:4]
    output io_deq_bits_size : UInt<4> @[chipyard.TestHarness.RocketConfig.fir 38582:4]
    output io_deq_bits_source : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 38582:4]
    output io_deq_bits_sink : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 38582:4]
    output io_deq_bits_denied : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 38582:4]
    output io_deq_bits_data : UInt<64> @[chipyard.TestHarness.RocketConfig.fir 38582:4]
    output io_deq_bits_corrupt : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 38582:4]

    mem ram_opcode : @[Decoupled.scala 218:16 chipyard.TestHarness.RocketConfig.fir 38584:4]
      data-type => UInt<3>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    mem ram_param : @[Decoupled.scala 218:16 chipyard.TestHarness.RocketConfig.fir 38584:4]
      data-type => UInt<2>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    mem ram_size : @[Decoupled.scala 218:16 chipyard.TestHarness.RocketConfig.fir 38584:4]
      data-type => UInt<4>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    mem ram_source : @[Decoupled.scala 218:16 chipyard.TestHarness.RocketConfig.fir 38584:4]
      data-type => UInt<1>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    mem ram_sink : @[Decoupled.scala 218:16 chipyard.TestHarness.RocketConfig.fir 38584:4]
      data-type => UInt<3>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    mem ram_denied : @[Decoupled.scala 218:16 chipyard.TestHarness.RocketConfig.fir 38584:4]
      data-type => UInt<1>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    mem ram_data : @[Decoupled.scala 218:16 chipyard.TestHarness.RocketConfig.fir 38584:4]
      data-type => UInt<64>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    mem ram_corrupt : @[Decoupled.scala 218:16 chipyard.TestHarness.RocketConfig.fir 38584:4]
      data-type => UInt<1>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    reg value : UInt<1>, clock with :
      reset => (UInt<1>("h0"), value) @[Counter.scala 60:40 chipyard.TestHarness.RocketConfig.fir 38585:4]
    reg value_1 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), value_1) @[Counter.scala 60:40 chipyard.TestHarness.RocketConfig.fir 38586:4]
    reg maybe_full : UInt<1>, clock with :
      reset => (UInt<1>("h0"), maybe_full) @[Decoupled.scala 221:27 chipyard.TestHarness.RocketConfig.fir 38587:4]
    node ptr_match = eq(value, value_1) @[Decoupled.scala 223:33 chipyard.TestHarness.RocketConfig.fir 38588:4]
    node _empty_T = not(maybe_full) @[Decoupled.scala 224:28 chipyard.TestHarness.RocketConfig.fir 38589:4]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 224:25 chipyard.TestHarness.RocketConfig.fir 38590:4]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24 chipyard.TestHarness.RocketConfig.fir 38591:4]
    node do_enq = and(io_enq_ready, io_enq_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.RocketConfig.fir 38592:4]
    node do_deq = and(io_deq_ready, io_deq_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.RocketConfig.fir 38595:4]
    node _value_T = add(value, UInt<1>("h1")) @[Counter.scala 76:24 chipyard.TestHarness.RocketConfig.fir 38609:6]
    node _value_T_1 = tail(_value_T, 1) @[Counter.scala 76:24 chipyard.TestHarness.RocketConfig.fir 38610:6]
    node _GEN_12 = mux(do_enq, _value_T_1, value) @[Decoupled.scala 229:17 chipyard.TestHarness.RocketConfig.fir 38598:4 Counter.scala 76:15 chipyard.TestHarness.RocketConfig.fir 38611:6 Counter.scala 60:40 chipyard.TestHarness.RocketConfig.fir 38585:4]
    node _value_T_2 = add(value_1, UInt<1>("h1")) @[Counter.scala 76:24 chipyard.TestHarness.RocketConfig.fir 38615:6]
    node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 76:24 chipyard.TestHarness.RocketConfig.fir 38616:6]
    node _GEN_13 = mux(do_deq, _value_T_3, value_1) @[Decoupled.scala 233:17 chipyard.TestHarness.RocketConfig.fir 38613:4 Counter.scala 76:15 chipyard.TestHarness.RocketConfig.fir 38617:6 Counter.scala 60:40 chipyard.TestHarness.RocketConfig.fir 38586:4]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 236:16 chipyard.TestHarness.RocketConfig.fir 38619:4]
    node _GEN_14 = mux(_T, do_enq, maybe_full) @[Decoupled.scala 236:28 chipyard.TestHarness.RocketConfig.fir 38620:4 Decoupled.scala 237:16 chipyard.TestHarness.RocketConfig.fir 38621:6 Decoupled.scala 221:27 chipyard.TestHarness.RocketConfig.fir 38587:4]
    io_enq_ready <= not(full) @[Decoupled.scala 241:19 chipyard.TestHarness.RocketConfig.fir 38625:4]
    io_deq_valid <= not(empty) @[Decoupled.scala 240:19 chipyard.TestHarness.RocketConfig.fir 38623:4]
    io_deq_bits_opcode <= ram_opcode.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.RocketConfig.fir 38635:4]
    io_deq_bits_param <= ram_param.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.RocketConfig.fir 38634:4]
    io_deq_bits_size <= ram_size.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.RocketConfig.fir 38633:4]
    io_deq_bits_source <= ram_source.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.RocketConfig.fir 38632:4]
    io_deq_bits_sink <= ram_sink.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.RocketConfig.fir 38631:4]
    io_deq_bits_denied <= ram_denied.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.RocketConfig.fir 38630:4]
    io_deq_bits_data <= ram_data.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.RocketConfig.fir 38629:4]
    io_deq_bits_corrupt <= ram_corrupt.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.RocketConfig.fir 38628:4]
    value <= mux(reset, UInt<1>("h0"), _GEN_12) @[Counter.scala 60:40 chipyard.TestHarness.RocketConfig.fir 38585:4 Counter.scala 60:40 chipyard.TestHarness.RocketConfig.fir 38585:4]
    value_1 <= mux(reset, UInt<1>("h0"), _GEN_13) @[Counter.scala 60:40 chipyard.TestHarness.RocketConfig.fir 38586:4 Counter.scala 60:40 chipyard.TestHarness.RocketConfig.fir 38586:4]
    maybe_full <= mux(reset, UInt<1>("h0"), _GEN_14) @[Decoupled.scala 221:27 chipyard.TestHarness.RocketConfig.fir 38587:4 Decoupled.scala 221:27 chipyard.TestHarness.RocketConfig.fir 38587:4]
    ram_opcode.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_opcode.io_deq_bits_MPORT.addr <= value_1
    ram_opcode.io_deq_bits_MPORT.clk <= clock
    ram_opcode.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_opcode.MPORT.addr <= value
    ram_opcode.MPORT.mask <= UInt<1>("h1")
    ram_opcode.MPORT.data <= io_enq_bits_opcode
    ram_opcode.MPORT.clk <= clock
    ram_param.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_param.io_deq_bits_MPORT.addr <= value_1
    ram_param.io_deq_bits_MPORT.clk <= clock
    ram_param.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_param.MPORT.addr <= value
    ram_param.MPORT.mask <= UInt<1>("h1")
    ram_param.MPORT.data <= io_enq_bits_param
    ram_param.MPORT.clk <= clock
    ram_size.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_size.io_deq_bits_MPORT.addr <= value_1
    ram_size.io_deq_bits_MPORT.clk <= clock
    ram_size.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_size.MPORT.addr <= value
    ram_size.MPORT.mask <= UInt<1>("h1")
    ram_size.MPORT.data <= io_enq_bits_size
    ram_size.MPORT.clk <= clock
    ram_source.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_source.io_deq_bits_MPORT.addr <= value_1
    ram_source.io_deq_bits_MPORT.clk <= clock
    ram_source.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_source.MPORT.addr <= value
    ram_source.MPORT.mask <= UInt<1>("h1")
    ram_source.MPORT.data <= io_enq_bits_source
    ram_source.MPORT.clk <= clock
    ram_sink.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_sink.io_deq_bits_MPORT.addr <= value_1
    ram_sink.io_deq_bits_MPORT.clk <= clock
    ram_sink.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_sink.MPORT.addr <= value
    ram_sink.MPORT.mask <= UInt<1>("h1")
    ram_sink.MPORT.data <= io_enq_bits_sink
    ram_sink.MPORT.clk <= clock
    ram_denied.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_denied.io_deq_bits_MPORT.addr <= value_1
    ram_denied.io_deq_bits_MPORT.clk <= clock
    ram_denied.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_denied.MPORT.addr <= value
    ram_denied.MPORT.mask <= UInt<1>("h1")
    ram_denied.MPORT.data <= io_enq_bits_denied
    ram_denied.MPORT.clk <= clock
    ram_data.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_data.io_deq_bits_MPORT.addr <= value_1
    ram_data.io_deq_bits_MPORT.clk <= clock
    ram_data.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_data.MPORT.addr <= value
    ram_data.MPORT.mask <= UInt<1>("h1")
    ram_data.MPORT.data <= io_enq_bits_data
    ram_data.MPORT.clk <= clock
    ram_corrupt.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_corrupt.io_deq_bits_MPORT.addr <= value_1
    ram_corrupt.io_deq_bits_MPORT.clk <= clock
    ram_corrupt.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_corrupt.MPORT.addr <= value
    ram_corrupt.MPORT.mask <= UInt<1>("h1")
    ram_corrupt.MPORT.data <= io_enq_bits_corrupt
    ram_corrupt.MPORT.clk <= clock

  module HellaPeekingArbiter_inTestHarness : @[chipyard.TestHarness.RocketConfig.fir 270408:2]
    input clock : Clock @[chipyard.TestHarness.RocketConfig.fir 270409:4]
    input reset : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 270410:4]
    output io_in_1_ready : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 270411:4]
    input io_in_1_valid : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 270411:4]
    input io_in_1_bits_opcode : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 270411:4]
    input io_in_1_bits_param : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 270411:4]
    input io_in_1_bits_size : UInt<4> @[chipyard.TestHarness.RocketConfig.fir 270411:4]
    input io_in_1_bits_source : UInt<4> @[chipyard.TestHarness.RocketConfig.fir 270411:4]
    input io_in_1_bits_data : UInt<64> @[chipyard.TestHarness.RocketConfig.fir 270411:4]
    input io_in_1_bits_corrupt : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 270411:4]
    input io_in_1_bits_union : UInt<8> @[chipyard.TestHarness.RocketConfig.fir 270411:4]
    input io_in_1_bits_last : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 270411:4]
    output io_in_4_ready : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 270411:4]
    input io_in_4_valid : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 270411:4]
    input io_in_4_bits_opcode : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 270411:4]
    input io_in_4_bits_param : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 270411:4]
    input io_in_4_bits_size : UInt<4> @[chipyard.TestHarness.RocketConfig.fir 270411:4]
    input io_in_4_bits_source : UInt<4> @[chipyard.TestHarness.RocketConfig.fir 270411:4]
    input io_in_4_bits_address : UInt<32> @[chipyard.TestHarness.RocketConfig.fir 270411:4]
    input io_in_4_bits_data : UInt<64> @[chipyard.TestHarness.RocketConfig.fir 270411:4]
    input io_in_4_bits_corrupt : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 270411:4]
    input io_in_4_bits_union : UInt<8> @[chipyard.TestHarness.RocketConfig.fir 270411:4]
    input io_in_4_bits_last : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 270411:4]
    input io_out_ready : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 270411:4]
    output io_out_valid : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 270411:4]
    output io_out_bits_chanId : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 270411:4]
    output io_out_bits_opcode : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 270411:4]
    output io_out_bits_param : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 270411:4]
    output io_out_bits_size : UInt<4> @[chipyard.TestHarness.RocketConfig.fir 270411:4]
    output io_out_bits_source : UInt<4> @[chipyard.TestHarness.RocketConfig.fir 270411:4]
    output io_out_bits_address : UInt<32> @[chipyard.TestHarness.RocketConfig.fir 270411:4]
    output io_out_bits_data : UInt<64> @[chipyard.TestHarness.RocketConfig.fir 270411:4]
    output io_out_bits_corrupt : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 270411:4]
    output io_out_bits_union : UInt<8> @[chipyard.TestHarness.RocketConfig.fir 270411:4]
    output io_out_bits_last : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 270411:4]

    reg lockIdx : UInt<3>, clock with :
      reset => (UInt<1>("h0"), lockIdx) @[Arbiters.scala 25:20 chipyard.TestHarness.RocketConfig.fir 270416:4]
    reg locked : UInt<1>, clock with :
      reset => (UInt<1>("h0"), locked) @[Arbiters.scala 26:19 chipyard.TestHarness.RocketConfig.fir 270417:4]
    node choice = mux(io_in_1_valid, UInt<3>("h1"), UInt<3>("h4")) @[Mux.scala 47:69 chipyard.TestHarness.RocketConfig.fir 270420:4]
    node chosen = mux(locked, lockIdx, choice) @[Arbiters.scala 36:19 chipyard.TestHarness.RocketConfig.fir 270422:4]
    node _io_in_1_ready_T = eq(chosen, UInt<3>("h1")) @[Arbiters.scala 39:46 chipyard.TestHarness.RocketConfig.fir 270426:4]
    node _io_in_4_ready_T = eq(chosen, UInt<3>("h4")) @[Arbiters.scala 39:46 chipyard.TestHarness.RocketConfig.fir 270435:4]
    node _GEN_65 = eq(UInt<3>("h1"), chosen) @[Arbiters.scala 42:16 chipyard.TestHarness.RocketConfig.fir 270438:4 Arbiters.scala 42:16 chipyard.TestHarness.RocketConfig.fir 270438:4]
    node _GEN_13 = and(_GEN_65, io_in_1_valid) @[Arbiters.scala 42:16 chipyard.TestHarness.RocketConfig.fir 270438:4 Arbiters.scala 42:16 chipyard.TestHarness.RocketConfig.fir 270438:4]
    node _GEN_14 = mux(eq(UInt<3>("h1"), chosen), UInt<3>("h3"), UInt<3>("h4")) @[Arbiters.scala 42:16 chipyard.TestHarness.RocketConfig.fir 270438:4 Arbiters.scala 42:16 chipyard.TestHarness.RocketConfig.fir 270438:4]
    node _GEN_15 = mux(eq(UInt<3>("h1"), chosen), io_in_1_bits_opcode, UInt<3>("h0")) @[Arbiters.scala 42:16 chipyard.TestHarness.RocketConfig.fir 270438:4 Arbiters.scala 42:16 chipyard.TestHarness.RocketConfig.fir 270438:4]
    node _GEN_16 = mux(eq(UInt<3>("h1"), chosen), io_in_1_bits_param, UInt<3>("h0")) @[Arbiters.scala 42:16 chipyard.TestHarness.RocketConfig.fir 270438:4 Arbiters.scala 42:16 chipyard.TestHarness.RocketConfig.fir 270438:4]
    node _GEN_17 = mux(eq(UInt<3>("h1"), chosen), io_in_1_bits_size, UInt<4>("h0")) @[Arbiters.scala 42:16 chipyard.TestHarness.RocketConfig.fir 270438:4 Arbiters.scala 42:16 chipyard.TestHarness.RocketConfig.fir 270438:4]
    node _GEN_18 = mux(eq(UInt<3>("h1"), chosen), io_in_1_bits_source, UInt<4>("h0")) @[Arbiters.scala 42:16 chipyard.TestHarness.RocketConfig.fir 270438:4 Arbiters.scala 42:16 chipyard.TestHarness.RocketConfig.fir 270438:4]
    node _GEN_20 = mux(eq(UInt<3>("h1"), chosen), io_in_1_bits_data, UInt<64>("h0")) @[Arbiters.scala 42:16 chipyard.TestHarness.RocketConfig.fir 270438:4 Arbiters.scala 42:16 chipyard.TestHarness.RocketConfig.fir 270438:4]
    node _GEN_21 = and(_GEN_65, io_in_1_bits_corrupt) @[Arbiters.scala 42:16 chipyard.TestHarness.RocketConfig.fir 270438:4 Arbiters.scala 42:16 chipyard.TestHarness.RocketConfig.fir 270438:4]
    node _GEN_22 = mux(eq(UInt<3>("h1"), chosen), io_in_1_bits_union, UInt<8>("h0")) @[Arbiters.scala 42:16 chipyard.TestHarness.RocketConfig.fir 270438:4 Arbiters.scala 42:16 chipyard.TestHarness.RocketConfig.fir 270438:4]
    node _GEN_23 = mux(eq(UInt<3>("h1"), chosen), io_in_1_bits_last, UInt<1>("h1")) @[Arbiters.scala 42:16 chipyard.TestHarness.RocketConfig.fir 270438:4 Arbiters.scala 42:16 chipyard.TestHarness.RocketConfig.fir 270438:4]
    node _GEN_25 = mux(eq(UInt<3>("h2"), chosen), UInt<1>("h0"), _GEN_13) @[Arbiters.scala 42:16 chipyard.TestHarness.RocketConfig.fir 270438:4 Arbiters.scala 42:16 chipyard.TestHarness.RocketConfig.fir 270438:4]
    node _GEN_26 = mux(eq(UInt<3>("h2"), chosen), UInt<3>("h2"), _GEN_14) @[Arbiters.scala 42:16 chipyard.TestHarness.RocketConfig.fir 270438:4 Arbiters.scala 42:16 chipyard.TestHarness.RocketConfig.fir 270438:4]
    node _GEN_27 = mux(eq(UInt<3>("h2"), chosen), UInt<3>("h0"), _GEN_15) @[Arbiters.scala 42:16 chipyard.TestHarness.RocketConfig.fir 270438:4 Arbiters.scala 42:16 chipyard.TestHarness.RocketConfig.fir 270438:4]
    node _GEN_28 = mux(eq(UInt<3>("h2"), chosen), UInt<3>("h0"), _GEN_16) @[Arbiters.scala 42:16 chipyard.TestHarness.RocketConfig.fir 270438:4 Arbiters.scala 42:16 chipyard.TestHarness.RocketConfig.fir 270438:4]
    node _GEN_29 = mux(eq(UInt<3>("h2"), chosen), UInt<4>("h0"), _GEN_17) @[Arbiters.scala 42:16 chipyard.TestHarness.RocketConfig.fir 270438:4 Arbiters.scala 42:16 chipyard.TestHarness.RocketConfig.fir 270438:4]
    node _GEN_30 = mux(eq(UInt<3>("h2"), chosen), UInt<4>("h0"), _GEN_18) @[Arbiters.scala 42:16 chipyard.TestHarness.RocketConfig.fir 270438:4 Arbiters.scala 42:16 chipyard.TestHarness.RocketConfig.fir 270438:4]
    node _GEN_32 = mux(eq(UInt<3>("h2"), chosen), UInt<64>("h0"), _GEN_20) @[Arbiters.scala 42:16 chipyard.TestHarness.RocketConfig.fir 270438:4 Arbiters.scala 42:16 chipyard.TestHarness.RocketConfig.fir 270438:4]
    node _GEN_33 = mux(eq(UInt<3>("h2"), chosen), UInt<1>("h0"), _GEN_21) @[Arbiters.scala 42:16 chipyard.TestHarness.RocketConfig.fir 270438:4 Arbiters.scala 42:16 chipyard.TestHarness.RocketConfig.fir 270438:4]
    node _GEN_34 = mux(eq(UInt<3>("h2"), chosen), UInt<8>("h0"), _GEN_22) @[Arbiters.scala 42:16 chipyard.TestHarness.RocketConfig.fir 270438:4 Arbiters.scala 42:16 chipyard.TestHarness.RocketConfig.fir 270438:4]
    node _GEN_67 = eq(UInt<3>("h2"), chosen) @[Arbiters.scala 42:16 chipyard.TestHarness.RocketConfig.fir 270438:4 Arbiters.scala 42:16 chipyard.TestHarness.RocketConfig.fir 270438:4]
    node _GEN_35 = or(_GEN_67, _GEN_23) @[Arbiters.scala 42:16 chipyard.TestHarness.RocketConfig.fir 270438:4 Arbiters.scala 42:16 chipyard.TestHarness.RocketConfig.fir 270438:4]
    node _GEN_37 = mux(eq(UInt<3>("h3"), chosen), UInt<1>("h0"), _GEN_25) @[Arbiters.scala 42:16 chipyard.TestHarness.RocketConfig.fir 270438:4 Arbiters.scala 42:16 chipyard.TestHarness.RocketConfig.fir 270438:4]
    node _GEN_38 = mux(eq(UInt<3>("h3"), chosen), UInt<3>("h1"), _GEN_26) @[Arbiters.scala 42:16 chipyard.TestHarness.RocketConfig.fir 270438:4 Arbiters.scala 42:16 chipyard.TestHarness.RocketConfig.fir 270438:4]
    node _GEN_39 = mux(eq(UInt<3>("h3"), chosen), UInt<3>("h0"), _GEN_27) @[Arbiters.scala 42:16 chipyard.TestHarness.RocketConfig.fir 270438:4 Arbiters.scala 42:16 chipyard.TestHarness.RocketConfig.fir 270438:4]
    node _GEN_40 = mux(eq(UInt<3>("h3"), chosen), UInt<3>("h0"), _GEN_28) @[Arbiters.scala 42:16 chipyard.TestHarness.RocketConfig.fir 270438:4 Arbiters.scala 42:16 chipyard.TestHarness.RocketConfig.fir 270438:4]
    node _GEN_41 = mux(eq(UInt<3>("h3"), chosen), UInt<4>("h0"), _GEN_29) @[Arbiters.scala 42:16 chipyard.TestHarness.RocketConfig.fir 270438:4 Arbiters.scala 42:16 chipyard.TestHarness.RocketConfig.fir 270438:4]
    node _GEN_42 = mux(eq(UInt<3>("h3"), chosen), UInt<4>("h0"), _GEN_30) @[Arbiters.scala 42:16 chipyard.TestHarness.RocketConfig.fir 270438:4 Arbiters.scala 42:16 chipyard.TestHarness.RocketConfig.fir 270438:4]
    node _GEN_44 = mux(eq(UInt<3>("h3"), chosen), UInt<64>("h0"), _GEN_32) @[Arbiters.scala 42:16 chipyard.TestHarness.RocketConfig.fir 270438:4 Arbiters.scala 42:16 chipyard.TestHarness.RocketConfig.fir 270438:4]
    node _GEN_45 = mux(eq(UInt<3>("h3"), chosen), UInt<1>("h0"), _GEN_33) @[Arbiters.scala 42:16 chipyard.TestHarness.RocketConfig.fir 270438:4 Arbiters.scala 42:16 chipyard.TestHarness.RocketConfig.fir 270438:4]
    node _GEN_46 = mux(eq(UInt<3>("h3"), chosen), UInt<8>("h0"), _GEN_34) @[Arbiters.scala 42:16 chipyard.TestHarness.RocketConfig.fir 270438:4 Arbiters.scala 42:16 chipyard.TestHarness.RocketConfig.fir 270438:4]
    node _GEN_68 = eq(UInt<3>("h3"), chosen) @[Arbiters.scala 42:16 chipyard.TestHarness.RocketConfig.fir 270438:4 Arbiters.scala 42:16 chipyard.TestHarness.RocketConfig.fir 270438:4]
    node _GEN_47 = or(_GEN_68, _GEN_35) @[Arbiters.scala 42:16 chipyard.TestHarness.RocketConfig.fir 270438:4 Arbiters.scala 42:16 chipyard.TestHarness.RocketConfig.fir 270438:4]
    node _T = and(io_out_ready, io_out_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.RocketConfig.fir 270440:4]
    node _T_1 = not(locked) @[Arbiters.scala 59:11 chipyard.TestHarness.RocketConfig.fir 270442:6]
    node _GEN_60 = mux(_T_1, choice, lockIdx) @[Arbiters.scala 59:50 chipyard.TestHarness.RocketConfig.fir 270444:6 Arbiters.scala 60:15 chipyard.TestHarness.RocketConfig.fir 270445:8 Arbiters.scala 25:20 chipyard.TestHarness.RocketConfig.fir 270416:4]
    node _GEN_61 = or(_T_1, locked) @[Arbiters.scala 59:50 chipyard.TestHarness.RocketConfig.fir 270444:6 Arbiters.scala 61:14 chipyard.TestHarness.RocketConfig.fir 270446:8 Arbiters.scala 26:19 chipyard.TestHarness.RocketConfig.fir 270417:4]
    node _GEN_62 = mux(io_out_bits_last, UInt<1>("h0"), _GEN_61) @[Arbiters.scala 64:35 chipyard.TestHarness.RocketConfig.fir 270448:6 Arbiters.scala 65:14 chipyard.TestHarness.RocketConfig.fir 270449:8]
    node _GEN_63 = mux(_T, _GEN_60, lockIdx) @[Arbiters.scala 58:24 chipyard.TestHarness.RocketConfig.fir 270441:4 Arbiters.scala 25:20 chipyard.TestHarness.RocketConfig.fir 270416:4]
    node _GEN_64 = mux(_T, _GEN_62, locked) @[Arbiters.scala 58:24 chipyard.TestHarness.RocketConfig.fir 270441:4 Arbiters.scala 26:19 chipyard.TestHarness.RocketConfig.fir 270417:4]
    io_in_1_ready <= and(io_out_ready, _io_in_1_ready_T) @[Arbiters.scala 39:36 chipyard.TestHarness.RocketConfig.fir 270427:4]
    io_in_4_ready <= and(io_out_ready, _io_in_4_ready_T) @[Arbiters.scala 39:36 chipyard.TestHarness.RocketConfig.fir 270436:4]
    io_out_valid <= mux(eq(UInt<3>("h4"), chosen), io_in_4_valid, _GEN_37) @[Arbiters.scala 42:16 chipyard.TestHarness.RocketConfig.fir 270438:4 Arbiters.scala 42:16 chipyard.TestHarness.RocketConfig.fir 270438:4]
    io_out_bits_chanId <= mux(eq(UInt<3>("h4"), chosen), UInt<3>("h0"), _GEN_38) @[Arbiters.scala 42:16 chipyard.TestHarness.RocketConfig.fir 270438:4 Arbiters.scala 42:16 chipyard.TestHarness.RocketConfig.fir 270438:4]
    io_out_bits_opcode <= mux(eq(UInt<3>("h4"), chosen), io_in_4_bits_opcode, _GEN_39) @[Arbiters.scala 42:16 chipyard.TestHarness.RocketConfig.fir 270438:4 Arbiters.scala 42:16 chipyard.TestHarness.RocketConfig.fir 270438:4]
    io_out_bits_param <= mux(eq(UInt<3>("h4"), chosen), io_in_4_bits_param, _GEN_40) @[Arbiters.scala 42:16 chipyard.TestHarness.RocketConfig.fir 270438:4 Arbiters.scala 42:16 chipyard.TestHarness.RocketConfig.fir 270438:4]
    io_out_bits_size <= mux(eq(UInt<3>("h4"), chosen), io_in_4_bits_size, _GEN_41) @[Arbiters.scala 42:16 chipyard.TestHarness.RocketConfig.fir 270438:4 Arbiters.scala 42:16 chipyard.TestHarness.RocketConfig.fir 270438:4]
    io_out_bits_source <= mux(eq(UInt<3>("h4"), chosen), io_in_4_bits_source, _GEN_42) @[Arbiters.scala 42:16 chipyard.TestHarness.RocketConfig.fir 270438:4 Arbiters.scala 42:16 chipyard.TestHarness.RocketConfig.fir 270438:4]
    io_out_bits_address <= mux(eq(UInt<3>("h4"), chosen), io_in_4_bits_address, UInt<32>("h0")) @[Arbiters.scala 42:16 chipyard.TestHarness.RocketConfig.fir 270438:4 Arbiters.scala 42:16 chipyard.TestHarness.RocketConfig.fir 270438:4]
    io_out_bits_data <= mux(eq(UInt<3>("h4"), chosen), io_in_4_bits_data, _GEN_44) @[Arbiters.scala 42:16 chipyard.TestHarness.RocketConfig.fir 270438:4 Arbiters.scala 42:16 chipyard.TestHarness.RocketConfig.fir 270438:4]
    io_out_bits_corrupt <= mux(eq(UInt<3>("h4"), chosen), io_in_4_bits_corrupt, _GEN_45) @[Arbiters.scala 42:16 chipyard.TestHarness.RocketConfig.fir 270438:4 Arbiters.scala 42:16 chipyard.TestHarness.RocketConfig.fir 270438:4]
    io_out_bits_union <= mux(eq(UInt<3>("h4"), chosen), io_in_4_bits_union, _GEN_46) @[Arbiters.scala 42:16 chipyard.TestHarness.RocketConfig.fir 270438:4 Arbiters.scala 42:16 chipyard.TestHarness.RocketConfig.fir 270438:4]
    io_out_bits_last <= mux(eq(UInt<3>("h4"), chosen), io_in_4_bits_last, _GEN_47) @[Arbiters.scala 42:16 chipyard.TestHarness.RocketConfig.fir 270438:4 Arbiters.scala 42:16 chipyard.TestHarness.RocketConfig.fir 270438:4]
    lockIdx <= mux(reset, UInt<3>("h0"), _GEN_63) @[Arbiters.scala 25:20 chipyard.TestHarness.RocketConfig.fir 270416:4 Arbiters.scala 25:20 chipyard.TestHarness.RocketConfig.fir 270416:4]
    locked <= mux(reset, UInt<1>("h0"), _GEN_64) @[Arbiters.scala 26:19 chipyard.TestHarness.RocketConfig.fir 270417:4 Arbiters.scala 26:19 chipyard.TestHarness.RocketConfig.fir 270417:4]

  module GenericSerializer_inTestHarness : @[chipyard.TestHarness.RocketConfig.fir 270453:2]
    input clock : Clock @[chipyard.TestHarness.RocketConfig.fir 270454:4]
    input reset : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 270455:4]
    output io_in_ready : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 270456:4]
    input io_in_valid : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 270456:4]
    input io_in_bits_chanId : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 270456:4]
    input io_in_bits_opcode : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 270456:4]
    input io_in_bits_param : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 270456:4]
    input io_in_bits_size : UInt<4> @[chipyard.TestHarness.RocketConfig.fir 270456:4]
    input io_in_bits_source : UInt<4> @[chipyard.TestHarness.RocketConfig.fir 270456:4]
    input io_in_bits_address : UInt<32> @[chipyard.TestHarness.RocketConfig.fir 270456:4]
    input io_in_bits_data : UInt<64> @[chipyard.TestHarness.RocketConfig.fir 270456:4]
    input io_in_bits_corrupt : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 270456:4]
    input io_in_bits_union : UInt<8> @[chipyard.TestHarness.RocketConfig.fir 270456:4]
    input io_in_bits_last : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 270456:4]
    input io_out_ready : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 270456:4]
    output io_out_valid : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 270456:4]
    output io_out_bits : UInt<4> @[chipyard.TestHarness.RocketConfig.fir 270456:4]

    reg data : UInt<123>, clock with :
      reset => (UInt<1>("h0"), data) @[Serdes.scala 175:17 chipyard.TestHarness.RocketConfig.fir 270458:4]
    reg sending : UInt<1>, clock with :
      reset => (UInt<1>("h0"), sending) @[Serdes.scala 177:24 chipyard.TestHarness.RocketConfig.fir 270459:4]
    node _T = and(io_out_ready, io_out_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.RocketConfig.fir 270460:4]
    reg sendCount : UInt<5>, clock with :
      reset => (UInt<1>("h0"), sendCount) @[Counter.scala 60:40 chipyard.TestHarness.RocketConfig.fir 270461:4]
    node wrap_wrap = eq(sendCount, UInt<5>("h1e")) @[Counter.scala 72:24 chipyard.TestHarness.RocketConfig.fir 270465:6]
    node _wrap_value_T = add(sendCount, UInt<5>("h1")) @[Counter.scala 76:24 chipyard.TestHarness.RocketConfig.fir 270466:6]
    node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[Counter.scala 76:24 chipyard.TestHarness.RocketConfig.fir 270467:6]
    node _GEN_0 = mux(wrap_wrap, UInt<5>("h0"), _wrap_value_T_1) @[Counter.scala 86:20 chipyard.TestHarness.RocketConfig.fir 270469:6 Counter.scala 86:28 chipyard.TestHarness.RocketConfig.fir 270470:8 Counter.scala 76:15 chipyard.TestHarness.RocketConfig.fir 270468:6]
    node _GEN_1 = mux(_T, _GEN_0, sendCount) @[Counter.scala 118:17 chipyard.TestHarness.RocketConfig.fir 270464:4 Counter.scala 60:40 chipyard.TestHarness.RocketConfig.fir 270461:4]
    node sendDone = and(_T, wrap_wrap) @[Counter.scala 118:17 chipyard.TestHarness.RocketConfig.fir 270464:4 Counter.scala 118:24 chipyard.TestHarness.RocketConfig.fir 270472:6 chipyard.TestHarness.RocketConfig.fir 270463:4]
    node _T_1 = and(io_in_ready, io_in_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.RocketConfig.fir 270479:4]
    node _data_T = cat(cat(cat(cat(io_in_bits_chanId, io_in_bits_opcode), io_in_bits_param), cat(io_in_bits_size, io_in_bits_source)), cat(cat(cat(io_in_bits_address, io_in_bits_data), io_in_bits_corrupt), cat(io_in_bits_union, io_in_bits_last))) @[Serdes.scala 185:24 chipyard.TestHarness.RocketConfig.fir 270489:6]
    node _GEN_3 = mux(_T_1, _data_T, data) @[Serdes.scala 184:23 chipyard.TestHarness.RocketConfig.fir 270480:4 Serdes.scala 185:10 chipyard.TestHarness.RocketConfig.fir 270490:6 Serdes.scala 175:17 chipyard.TestHarness.RocketConfig.fir 270458:4]
    node _GEN_4 = or(_T_1, sending) @[Serdes.scala 184:23 chipyard.TestHarness.RocketConfig.fir 270480:4 Serdes.scala 186:13 chipyard.TestHarness.RocketConfig.fir 270491:6 Serdes.scala 177:24 chipyard.TestHarness.RocketConfig.fir 270459:4]
    node _GEN_7 = shr(data, 4) @[Serdes.scala 189:39 chipyard.TestHarness.RocketConfig.fir 270495:6]
    node _data_T_1 = pad(_GEN_7, 123) @[Serdes.scala 189:39 chipyard.TestHarness.RocketConfig.fir 270495:6]
    node _GEN_6 = mux(sendDone, UInt<1>("h0"), _GEN_4) @[Serdes.scala 191:19 chipyard.TestHarness.RocketConfig.fir 270498:4 Serdes.scala 191:29 chipyard.TestHarness.RocketConfig.fir 270499:6]
    io_in_ready <= not(sending) @[Serdes.scala 180:18 chipyard.TestHarness.RocketConfig.fir 270474:4]
    io_out_valid <= sending @[Serdes.scala 181:16 chipyard.TestHarness.RocketConfig.fir 270476:4]
    io_out_bits <= bits(data, 3, 0) @[Serdes.scala 182:22 chipyard.TestHarness.RocketConfig.fir 270477:4]
    data <= mux(_T, _data_T_1, _GEN_3) @[Serdes.scala 189:24 chipyard.TestHarness.RocketConfig.fir 270494:4 Serdes.scala 189:31 chipyard.TestHarness.RocketConfig.fir 270496:6]
    sending <= mux(reset, UInt<1>("h0"), _GEN_6) @[Serdes.scala 177:24 chipyard.TestHarness.RocketConfig.fir 270459:4 Serdes.scala 177:24 chipyard.TestHarness.RocketConfig.fir 270459:4]
    sendCount <= mux(reset, UInt<5>("h0"), _GEN_1) @[Counter.scala 60:40 chipyard.TestHarness.RocketConfig.fir 270461:4 Counter.scala 60:40 chipyard.TestHarness.RocketConfig.fir 270461:4]

  module GenericDeserializer_inTestHarness : @[chipyard.TestHarness.RocketConfig.fir 270502:2]
    input clock : Clock @[chipyard.TestHarness.RocketConfig.fir 270503:4]
    input reset : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 270504:4]
    output io_in_ready : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 270505:4]
    input io_in_valid : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 270505:4]
    input io_in_bits : UInt<4> @[chipyard.TestHarness.RocketConfig.fir 270505:4]
    input io_out_ready : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 270505:4]
    output io_out_valid : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 270505:4]
    output io_out_bits_chanId : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 270505:4]
    output io_out_bits_opcode : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 270505:4]
    output io_out_bits_param : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 270505:4]
    output io_out_bits_size : UInt<4> @[chipyard.TestHarness.RocketConfig.fir 270505:4]
    output io_out_bits_source : UInt<4> @[chipyard.TestHarness.RocketConfig.fir 270505:4]
    output io_out_bits_address : UInt<32> @[chipyard.TestHarness.RocketConfig.fir 270505:4]
    output io_out_bits_data : UInt<64> @[chipyard.TestHarness.RocketConfig.fir 270505:4]
    output io_out_bits_corrupt : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 270505:4]
    output io_out_bits_union : UInt<8> @[chipyard.TestHarness.RocketConfig.fir 270505:4]

    reg data_0 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), data_0) @[Serdes.scala 202:17 chipyard.TestHarness.RocketConfig.fir 270507:4]
    reg data_1 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), data_1) @[Serdes.scala 202:17 chipyard.TestHarness.RocketConfig.fir 270507:4]
    reg data_2 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), data_2) @[Serdes.scala 202:17 chipyard.TestHarness.RocketConfig.fir 270507:4]
    reg data_3 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), data_3) @[Serdes.scala 202:17 chipyard.TestHarness.RocketConfig.fir 270507:4]
    reg data_4 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), data_4) @[Serdes.scala 202:17 chipyard.TestHarness.RocketConfig.fir 270507:4]
    reg data_5 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), data_5) @[Serdes.scala 202:17 chipyard.TestHarness.RocketConfig.fir 270507:4]
    reg data_6 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), data_6) @[Serdes.scala 202:17 chipyard.TestHarness.RocketConfig.fir 270507:4]
    reg data_7 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), data_7) @[Serdes.scala 202:17 chipyard.TestHarness.RocketConfig.fir 270507:4]
    reg data_8 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), data_8) @[Serdes.scala 202:17 chipyard.TestHarness.RocketConfig.fir 270507:4]
    reg data_9 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), data_9) @[Serdes.scala 202:17 chipyard.TestHarness.RocketConfig.fir 270507:4]
    reg data_10 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), data_10) @[Serdes.scala 202:17 chipyard.TestHarness.RocketConfig.fir 270507:4]
    reg data_11 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), data_11) @[Serdes.scala 202:17 chipyard.TestHarness.RocketConfig.fir 270507:4]
    reg data_12 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), data_12) @[Serdes.scala 202:17 chipyard.TestHarness.RocketConfig.fir 270507:4]
    reg data_13 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), data_13) @[Serdes.scala 202:17 chipyard.TestHarness.RocketConfig.fir 270507:4]
    reg data_14 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), data_14) @[Serdes.scala 202:17 chipyard.TestHarness.RocketConfig.fir 270507:4]
    reg data_15 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), data_15) @[Serdes.scala 202:17 chipyard.TestHarness.RocketConfig.fir 270507:4]
    reg data_16 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), data_16) @[Serdes.scala 202:17 chipyard.TestHarness.RocketConfig.fir 270507:4]
    reg data_17 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), data_17) @[Serdes.scala 202:17 chipyard.TestHarness.RocketConfig.fir 270507:4]
    reg data_18 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), data_18) @[Serdes.scala 202:17 chipyard.TestHarness.RocketConfig.fir 270507:4]
    reg data_19 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), data_19) @[Serdes.scala 202:17 chipyard.TestHarness.RocketConfig.fir 270507:4]
    reg data_20 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), data_20) @[Serdes.scala 202:17 chipyard.TestHarness.RocketConfig.fir 270507:4]
    reg data_21 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), data_21) @[Serdes.scala 202:17 chipyard.TestHarness.RocketConfig.fir 270507:4]
    reg data_22 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), data_22) @[Serdes.scala 202:17 chipyard.TestHarness.RocketConfig.fir 270507:4]
    reg data_23 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), data_23) @[Serdes.scala 202:17 chipyard.TestHarness.RocketConfig.fir 270507:4]
    reg data_24 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), data_24) @[Serdes.scala 202:17 chipyard.TestHarness.RocketConfig.fir 270507:4]
    reg data_25 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), data_25) @[Serdes.scala 202:17 chipyard.TestHarness.RocketConfig.fir 270507:4]
    reg data_26 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), data_26) @[Serdes.scala 202:17 chipyard.TestHarness.RocketConfig.fir 270507:4]
    reg data_27 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), data_27) @[Serdes.scala 202:17 chipyard.TestHarness.RocketConfig.fir 270507:4]
    reg data_28 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), data_28) @[Serdes.scala 202:17 chipyard.TestHarness.RocketConfig.fir 270507:4]
    reg data_29 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), data_29) @[Serdes.scala 202:17 chipyard.TestHarness.RocketConfig.fir 270507:4]
    reg data_30 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), data_30) @[Serdes.scala 202:17 chipyard.TestHarness.RocketConfig.fir 270507:4]
    reg receiving : UInt<1>, clock with :
      reset => (UInt<1>("h0"), receiving) @[Serdes.scala 204:26 chipyard.TestHarness.RocketConfig.fir 270508:4]
    node _T = and(io_in_ready, io_in_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.RocketConfig.fir 270509:4]
    reg recvCount : UInt<5>, clock with :
      reset => (UInt<1>("h0"), recvCount) @[Counter.scala 60:40 chipyard.TestHarness.RocketConfig.fir 270510:4]
    node wrap_wrap = eq(recvCount, UInt<5>("h1e")) @[Counter.scala 72:24 chipyard.TestHarness.RocketConfig.fir 270514:6]
    node _wrap_value_T = add(recvCount, UInt<5>("h1")) @[Counter.scala 76:24 chipyard.TestHarness.RocketConfig.fir 270515:6]
    node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[Counter.scala 76:24 chipyard.TestHarness.RocketConfig.fir 270516:6]
    node _GEN_0 = mux(wrap_wrap, UInt<5>("h0"), _wrap_value_T_1) @[Counter.scala 86:20 chipyard.TestHarness.RocketConfig.fir 270518:6 Counter.scala 86:28 chipyard.TestHarness.RocketConfig.fir 270519:8 Counter.scala 76:15 chipyard.TestHarness.RocketConfig.fir 270517:6]
    node _GEN_1 = mux(_T, _GEN_0, recvCount) @[Counter.scala 118:17 chipyard.TestHarness.RocketConfig.fir 270513:4 Counter.scala 60:40 chipyard.TestHarness.RocketConfig.fir 270510:4]
    node recvDone = and(_T, wrap_wrap) @[Counter.scala 118:17 chipyard.TestHarness.RocketConfig.fir 270513:4 Counter.scala 118:24 chipyard.TestHarness.RocketConfig.fir 270521:6 chipyard.TestHarness.RocketConfig.fir 270512:4]
    node io_out_bits_lo_lo = cat(cat(cat(data_6, data_5), cat(data_4, data_3)), cat(cat(data_2, data_1), data_0)) @[Serdes.scala 209:23 chipyard.TestHarness.RocketConfig.fir 270531:4]
    node io_out_bits_lo = cat(cat(cat(cat(data_14, data_13), cat(data_12, data_11)), cat(cat(data_10, data_9), cat(data_8, data_7))), io_out_bits_lo_lo) @[Serdes.scala 209:23 chipyard.TestHarness.RocketConfig.fir 270539:4]
    node io_out_bits_hi_lo = cat(cat(cat(data_22, data_21), cat(data_20, data_19)), cat(cat(data_18, data_17), cat(data_16, data_15))) @[Serdes.scala 209:23 chipyard.TestHarness.RocketConfig.fir 270546:4]
    node _io_out_bits_T = cat(cat(cat(cat(cat(data_30, data_29), cat(data_28, data_27)), cat(cat(data_26, data_25), cat(data_24, data_23))), io_out_bits_hi_lo), io_out_bits_lo) @[Serdes.scala 209:23 chipyard.TestHarness.RocketConfig.fir 270555:4]
    node _io_out_bits_WIRE_1 = bits(_io_out_bits_T, 122, 0) @[chipyard.TestHarness.RocketConfig.fir 270557:4 chipyard.TestHarness.RocketConfig.fir 270558:4]
    node _GEN_3 = mux(eq(UInt<5>("h0"), recvCount), io_in_bits, data_0) @[Serdes.scala 212:21 chipyard.TestHarness.RocketConfig.fir 270591:6 Serdes.scala 212:21 chipyard.TestHarness.RocketConfig.fir 270591:6 Serdes.scala 202:17 chipyard.TestHarness.RocketConfig.fir 270507:4]
    node _GEN_4 = mux(eq(UInt<5>("h1"), recvCount), io_in_bits, data_1) @[Serdes.scala 212:21 chipyard.TestHarness.RocketConfig.fir 270591:6 Serdes.scala 212:21 chipyard.TestHarness.RocketConfig.fir 270591:6 Serdes.scala 202:17 chipyard.TestHarness.RocketConfig.fir 270507:4]
    node _GEN_5 = mux(eq(UInt<5>("h2"), recvCount), io_in_bits, data_2) @[Serdes.scala 212:21 chipyard.TestHarness.RocketConfig.fir 270591:6 Serdes.scala 212:21 chipyard.TestHarness.RocketConfig.fir 270591:6 Serdes.scala 202:17 chipyard.TestHarness.RocketConfig.fir 270507:4]
    node _GEN_6 = mux(eq(UInt<5>("h3"), recvCount), io_in_bits, data_3) @[Serdes.scala 212:21 chipyard.TestHarness.RocketConfig.fir 270591:6 Serdes.scala 212:21 chipyard.TestHarness.RocketConfig.fir 270591:6 Serdes.scala 202:17 chipyard.TestHarness.RocketConfig.fir 270507:4]
    node _GEN_7 = mux(eq(UInt<5>("h4"), recvCount), io_in_bits, data_4) @[Serdes.scala 212:21 chipyard.TestHarness.RocketConfig.fir 270591:6 Serdes.scala 212:21 chipyard.TestHarness.RocketConfig.fir 270591:6 Serdes.scala 202:17 chipyard.TestHarness.RocketConfig.fir 270507:4]
    node _GEN_8 = mux(eq(UInt<5>("h5"), recvCount), io_in_bits, data_5) @[Serdes.scala 212:21 chipyard.TestHarness.RocketConfig.fir 270591:6 Serdes.scala 212:21 chipyard.TestHarness.RocketConfig.fir 270591:6 Serdes.scala 202:17 chipyard.TestHarness.RocketConfig.fir 270507:4]
    node _GEN_9 = mux(eq(UInt<5>("h6"), recvCount), io_in_bits, data_6) @[Serdes.scala 212:21 chipyard.TestHarness.RocketConfig.fir 270591:6 Serdes.scala 212:21 chipyard.TestHarness.RocketConfig.fir 270591:6 Serdes.scala 202:17 chipyard.TestHarness.RocketConfig.fir 270507:4]
    node _GEN_10 = mux(eq(UInt<5>("h7"), recvCount), io_in_bits, data_7) @[Serdes.scala 212:21 chipyard.TestHarness.RocketConfig.fir 270591:6 Serdes.scala 212:21 chipyard.TestHarness.RocketConfig.fir 270591:6 Serdes.scala 202:17 chipyard.TestHarness.RocketConfig.fir 270507:4]
    node _GEN_11 = mux(eq(UInt<5>("h8"), recvCount), io_in_bits, data_8) @[Serdes.scala 212:21 chipyard.TestHarness.RocketConfig.fir 270591:6 Serdes.scala 212:21 chipyard.TestHarness.RocketConfig.fir 270591:6 Serdes.scala 202:17 chipyard.TestHarness.RocketConfig.fir 270507:4]
    node _GEN_12 = mux(eq(UInt<5>("h9"), recvCount), io_in_bits, data_9) @[Serdes.scala 212:21 chipyard.TestHarness.RocketConfig.fir 270591:6 Serdes.scala 212:21 chipyard.TestHarness.RocketConfig.fir 270591:6 Serdes.scala 202:17 chipyard.TestHarness.RocketConfig.fir 270507:4]
    node _GEN_13 = mux(eq(UInt<5>("ha"), recvCount), io_in_bits, data_10) @[Serdes.scala 212:21 chipyard.TestHarness.RocketConfig.fir 270591:6 Serdes.scala 212:21 chipyard.TestHarness.RocketConfig.fir 270591:6 Serdes.scala 202:17 chipyard.TestHarness.RocketConfig.fir 270507:4]
    node _GEN_14 = mux(eq(UInt<5>("hb"), recvCount), io_in_bits, data_11) @[Serdes.scala 212:21 chipyard.TestHarness.RocketConfig.fir 270591:6 Serdes.scala 212:21 chipyard.TestHarness.RocketConfig.fir 270591:6 Serdes.scala 202:17 chipyard.TestHarness.RocketConfig.fir 270507:4]
    node _GEN_15 = mux(eq(UInt<5>("hc"), recvCount), io_in_bits, data_12) @[Serdes.scala 212:21 chipyard.TestHarness.RocketConfig.fir 270591:6 Serdes.scala 212:21 chipyard.TestHarness.RocketConfig.fir 270591:6 Serdes.scala 202:17 chipyard.TestHarness.RocketConfig.fir 270507:4]
    node _GEN_16 = mux(eq(UInt<5>("hd"), recvCount), io_in_bits, data_13) @[Serdes.scala 212:21 chipyard.TestHarness.RocketConfig.fir 270591:6 Serdes.scala 212:21 chipyard.TestHarness.RocketConfig.fir 270591:6 Serdes.scala 202:17 chipyard.TestHarness.RocketConfig.fir 270507:4]
    node _GEN_17 = mux(eq(UInt<5>("he"), recvCount), io_in_bits, data_14) @[Serdes.scala 212:21 chipyard.TestHarness.RocketConfig.fir 270591:6 Serdes.scala 212:21 chipyard.TestHarness.RocketConfig.fir 270591:6 Serdes.scala 202:17 chipyard.TestHarness.RocketConfig.fir 270507:4]
    node _GEN_18 = mux(eq(UInt<5>("hf"), recvCount), io_in_bits, data_15) @[Serdes.scala 212:21 chipyard.TestHarness.RocketConfig.fir 270591:6 Serdes.scala 212:21 chipyard.TestHarness.RocketConfig.fir 270591:6 Serdes.scala 202:17 chipyard.TestHarness.RocketConfig.fir 270507:4]
    node _GEN_19 = mux(eq(UInt<5>("h10"), recvCount), io_in_bits, data_16) @[Serdes.scala 212:21 chipyard.TestHarness.RocketConfig.fir 270591:6 Serdes.scala 212:21 chipyard.TestHarness.RocketConfig.fir 270591:6 Serdes.scala 202:17 chipyard.TestHarness.RocketConfig.fir 270507:4]
    node _GEN_20 = mux(eq(UInt<5>("h11"), recvCount), io_in_bits, data_17) @[Serdes.scala 212:21 chipyard.TestHarness.RocketConfig.fir 270591:6 Serdes.scala 212:21 chipyard.TestHarness.RocketConfig.fir 270591:6 Serdes.scala 202:17 chipyard.TestHarness.RocketConfig.fir 270507:4]
    node _GEN_21 = mux(eq(UInt<5>("h12"), recvCount), io_in_bits, data_18) @[Serdes.scala 212:21 chipyard.TestHarness.RocketConfig.fir 270591:6 Serdes.scala 212:21 chipyard.TestHarness.RocketConfig.fir 270591:6 Serdes.scala 202:17 chipyard.TestHarness.RocketConfig.fir 270507:4]
    node _GEN_22 = mux(eq(UInt<5>("h13"), recvCount), io_in_bits, data_19) @[Serdes.scala 212:21 chipyard.TestHarness.RocketConfig.fir 270591:6 Serdes.scala 212:21 chipyard.TestHarness.RocketConfig.fir 270591:6 Serdes.scala 202:17 chipyard.TestHarness.RocketConfig.fir 270507:4]
    node _GEN_23 = mux(eq(UInt<5>("h14"), recvCount), io_in_bits, data_20) @[Serdes.scala 212:21 chipyard.TestHarness.RocketConfig.fir 270591:6 Serdes.scala 212:21 chipyard.TestHarness.RocketConfig.fir 270591:6 Serdes.scala 202:17 chipyard.TestHarness.RocketConfig.fir 270507:4]
    node _GEN_24 = mux(eq(UInt<5>("h15"), recvCount), io_in_bits, data_21) @[Serdes.scala 212:21 chipyard.TestHarness.RocketConfig.fir 270591:6 Serdes.scala 212:21 chipyard.TestHarness.RocketConfig.fir 270591:6 Serdes.scala 202:17 chipyard.TestHarness.RocketConfig.fir 270507:4]
    node _GEN_25 = mux(eq(UInt<5>("h16"), recvCount), io_in_bits, data_22) @[Serdes.scala 212:21 chipyard.TestHarness.RocketConfig.fir 270591:6 Serdes.scala 212:21 chipyard.TestHarness.RocketConfig.fir 270591:6 Serdes.scala 202:17 chipyard.TestHarness.RocketConfig.fir 270507:4]
    node _GEN_26 = mux(eq(UInt<5>("h17"), recvCount), io_in_bits, data_23) @[Serdes.scala 212:21 chipyard.TestHarness.RocketConfig.fir 270591:6 Serdes.scala 212:21 chipyard.TestHarness.RocketConfig.fir 270591:6 Serdes.scala 202:17 chipyard.TestHarness.RocketConfig.fir 270507:4]
    node _GEN_27 = mux(eq(UInt<5>("h18"), recvCount), io_in_bits, data_24) @[Serdes.scala 212:21 chipyard.TestHarness.RocketConfig.fir 270591:6 Serdes.scala 212:21 chipyard.TestHarness.RocketConfig.fir 270591:6 Serdes.scala 202:17 chipyard.TestHarness.RocketConfig.fir 270507:4]
    node _GEN_28 = mux(eq(UInt<5>("h19"), recvCount), io_in_bits, data_25) @[Serdes.scala 212:21 chipyard.TestHarness.RocketConfig.fir 270591:6 Serdes.scala 212:21 chipyard.TestHarness.RocketConfig.fir 270591:6 Serdes.scala 202:17 chipyard.TestHarness.RocketConfig.fir 270507:4]
    node _GEN_29 = mux(eq(UInt<5>("h1a"), recvCount), io_in_bits, data_26) @[Serdes.scala 212:21 chipyard.TestHarness.RocketConfig.fir 270591:6 Serdes.scala 212:21 chipyard.TestHarness.RocketConfig.fir 270591:6 Serdes.scala 202:17 chipyard.TestHarness.RocketConfig.fir 270507:4]
    node _GEN_30 = mux(eq(UInt<5>("h1b"), recvCount), io_in_bits, data_27) @[Serdes.scala 212:21 chipyard.TestHarness.RocketConfig.fir 270591:6 Serdes.scala 212:21 chipyard.TestHarness.RocketConfig.fir 270591:6 Serdes.scala 202:17 chipyard.TestHarness.RocketConfig.fir 270507:4]
    node _GEN_31 = mux(eq(UInt<5>("h1c"), recvCount), io_in_bits, data_28) @[Serdes.scala 212:21 chipyard.TestHarness.RocketConfig.fir 270591:6 Serdes.scala 212:21 chipyard.TestHarness.RocketConfig.fir 270591:6 Serdes.scala 202:17 chipyard.TestHarness.RocketConfig.fir 270507:4]
    node _GEN_32 = mux(eq(UInt<5>("h1d"), recvCount), io_in_bits, data_29) @[Serdes.scala 212:21 chipyard.TestHarness.RocketConfig.fir 270591:6 Serdes.scala 212:21 chipyard.TestHarness.RocketConfig.fir 270591:6 Serdes.scala 202:17 chipyard.TestHarness.RocketConfig.fir 270507:4]
    node _GEN_33 = mux(eq(UInt<5>("h1e"), recvCount), io_in_bits, data_30) @[Serdes.scala 212:21 chipyard.TestHarness.RocketConfig.fir 270591:6 Serdes.scala 212:21 chipyard.TestHarness.RocketConfig.fir 270591:6 Serdes.scala 202:17 chipyard.TestHarness.RocketConfig.fir 270507:4]
    node _GEN_65 = mux(recvDone, UInt<1>("h0"), receiving) @[Serdes.scala 215:19 chipyard.TestHarness.RocketConfig.fir 270593:4 Serdes.scala 215:31 chipyard.TestHarness.RocketConfig.fir 270594:6 Serdes.scala 204:26 chipyard.TestHarness.RocketConfig.fir 270508:4]
    node _T_2 = and(io_out_ready, io_out_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.RocketConfig.fir 270596:4]
    node _GEN_66 = or(_T_2, _GEN_65) @[Serdes.scala 217:24 chipyard.TestHarness.RocketConfig.fir 270597:4 Serdes.scala 217:36 chipyard.TestHarness.RocketConfig.fir 270598:6]
    io_in_ready <= receiving @[Serdes.scala 207:15 chipyard.TestHarness.RocketConfig.fir 270523:4]
    io_out_valid <= not(receiving) @[Serdes.scala 208:19 chipyard.TestHarness.RocketConfig.fir 270524:4]
    io_out_bits_chanId <= bits(_io_out_bits_WIRE_1, 122, 120) @[Serdes.scala 209:38 chipyard.TestHarness.RocketConfig.fir 270577:4]
    io_out_bits_opcode <= bits(_io_out_bits_WIRE_1, 119, 117) @[Serdes.scala 209:38 chipyard.TestHarness.RocketConfig.fir 270575:4]
    io_out_bits_param <= bits(_io_out_bits_WIRE_1, 116, 114) @[Serdes.scala 209:38 chipyard.TestHarness.RocketConfig.fir 270573:4]
    io_out_bits_size <= bits(_io_out_bits_WIRE_1, 113, 110) @[Serdes.scala 209:38 chipyard.TestHarness.RocketConfig.fir 270571:4]
    io_out_bits_source <= bits(_io_out_bits_WIRE_1, 109, 106) @[Serdes.scala 209:38 chipyard.TestHarness.RocketConfig.fir 270569:4]
    io_out_bits_address <= bits(_io_out_bits_WIRE_1, 105, 74) @[Serdes.scala 209:38 chipyard.TestHarness.RocketConfig.fir 270567:4]
    io_out_bits_data <= bits(_io_out_bits_WIRE_1, 73, 10) @[Serdes.scala 209:38 chipyard.TestHarness.RocketConfig.fir 270565:4]
    io_out_bits_corrupt <= bits(_io_out_bits_WIRE_1, 9, 9) @[Serdes.scala 209:38 chipyard.TestHarness.RocketConfig.fir 270563:4]
    io_out_bits_union <= bits(_io_out_bits_WIRE_1, 8, 1) @[Serdes.scala 209:38 chipyard.TestHarness.RocketConfig.fir 270561:4]
    data_0 <= mux(_T, _GEN_3, data_0) @[Serdes.scala 211:23 chipyard.TestHarness.RocketConfig.fir 270590:4 Serdes.scala 202:17 chipyard.TestHarness.RocketConfig.fir 270507:4]
    data_1 <= mux(_T, _GEN_4, data_1) @[Serdes.scala 211:23 chipyard.TestHarness.RocketConfig.fir 270590:4 Serdes.scala 202:17 chipyard.TestHarness.RocketConfig.fir 270507:4]
    data_2 <= mux(_T, _GEN_5, data_2) @[Serdes.scala 211:23 chipyard.TestHarness.RocketConfig.fir 270590:4 Serdes.scala 202:17 chipyard.TestHarness.RocketConfig.fir 270507:4]
    data_3 <= mux(_T, _GEN_6, data_3) @[Serdes.scala 211:23 chipyard.TestHarness.RocketConfig.fir 270590:4 Serdes.scala 202:17 chipyard.TestHarness.RocketConfig.fir 270507:4]
    data_4 <= mux(_T, _GEN_7, data_4) @[Serdes.scala 211:23 chipyard.TestHarness.RocketConfig.fir 270590:4 Serdes.scala 202:17 chipyard.TestHarness.RocketConfig.fir 270507:4]
    data_5 <= mux(_T, _GEN_8, data_5) @[Serdes.scala 211:23 chipyard.TestHarness.RocketConfig.fir 270590:4 Serdes.scala 202:17 chipyard.TestHarness.RocketConfig.fir 270507:4]
    data_6 <= mux(_T, _GEN_9, data_6) @[Serdes.scala 211:23 chipyard.TestHarness.RocketConfig.fir 270590:4 Serdes.scala 202:17 chipyard.TestHarness.RocketConfig.fir 270507:4]
    data_7 <= mux(_T, _GEN_10, data_7) @[Serdes.scala 211:23 chipyard.TestHarness.RocketConfig.fir 270590:4 Serdes.scala 202:17 chipyard.TestHarness.RocketConfig.fir 270507:4]
    data_8 <= mux(_T, _GEN_11, data_8) @[Serdes.scala 211:23 chipyard.TestHarness.RocketConfig.fir 270590:4 Serdes.scala 202:17 chipyard.TestHarness.RocketConfig.fir 270507:4]
    data_9 <= mux(_T, _GEN_12, data_9) @[Serdes.scala 211:23 chipyard.TestHarness.RocketConfig.fir 270590:4 Serdes.scala 202:17 chipyard.TestHarness.RocketConfig.fir 270507:4]
    data_10 <= mux(_T, _GEN_13, data_10) @[Serdes.scala 211:23 chipyard.TestHarness.RocketConfig.fir 270590:4 Serdes.scala 202:17 chipyard.TestHarness.RocketConfig.fir 270507:4]
    data_11 <= mux(_T, _GEN_14, data_11) @[Serdes.scala 211:23 chipyard.TestHarness.RocketConfig.fir 270590:4 Serdes.scala 202:17 chipyard.TestHarness.RocketConfig.fir 270507:4]
    data_12 <= mux(_T, _GEN_15, data_12) @[Serdes.scala 211:23 chipyard.TestHarness.RocketConfig.fir 270590:4 Serdes.scala 202:17 chipyard.TestHarness.RocketConfig.fir 270507:4]
    data_13 <= mux(_T, _GEN_16, data_13) @[Serdes.scala 211:23 chipyard.TestHarness.RocketConfig.fir 270590:4 Serdes.scala 202:17 chipyard.TestHarness.RocketConfig.fir 270507:4]
    data_14 <= mux(_T, _GEN_17, data_14) @[Serdes.scala 211:23 chipyard.TestHarness.RocketConfig.fir 270590:4 Serdes.scala 202:17 chipyard.TestHarness.RocketConfig.fir 270507:4]
    data_15 <= mux(_T, _GEN_18, data_15) @[Serdes.scala 211:23 chipyard.TestHarness.RocketConfig.fir 270590:4 Serdes.scala 202:17 chipyard.TestHarness.RocketConfig.fir 270507:4]
    data_16 <= mux(_T, _GEN_19, data_16) @[Serdes.scala 211:23 chipyard.TestHarness.RocketConfig.fir 270590:4 Serdes.scala 202:17 chipyard.TestHarness.RocketConfig.fir 270507:4]
    data_17 <= mux(_T, _GEN_20, data_17) @[Serdes.scala 211:23 chipyard.TestHarness.RocketConfig.fir 270590:4 Serdes.scala 202:17 chipyard.TestHarness.RocketConfig.fir 270507:4]
    data_18 <= mux(_T, _GEN_21, data_18) @[Serdes.scala 211:23 chipyard.TestHarness.RocketConfig.fir 270590:4 Serdes.scala 202:17 chipyard.TestHarness.RocketConfig.fir 270507:4]
    data_19 <= mux(_T, _GEN_22, data_19) @[Serdes.scala 211:23 chipyard.TestHarness.RocketConfig.fir 270590:4 Serdes.scala 202:17 chipyard.TestHarness.RocketConfig.fir 270507:4]
    data_20 <= mux(_T, _GEN_23, data_20) @[Serdes.scala 211:23 chipyard.TestHarness.RocketConfig.fir 270590:4 Serdes.scala 202:17 chipyard.TestHarness.RocketConfig.fir 270507:4]
    data_21 <= mux(_T, _GEN_24, data_21) @[Serdes.scala 211:23 chipyard.TestHarness.RocketConfig.fir 270590:4 Serdes.scala 202:17 chipyard.TestHarness.RocketConfig.fir 270507:4]
    data_22 <= mux(_T, _GEN_25, data_22) @[Serdes.scala 211:23 chipyard.TestHarness.RocketConfig.fir 270590:4 Serdes.scala 202:17 chipyard.TestHarness.RocketConfig.fir 270507:4]
    data_23 <= mux(_T, _GEN_26, data_23) @[Serdes.scala 211:23 chipyard.TestHarness.RocketConfig.fir 270590:4 Serdes.scala 202:17 chipyard.TestHarness.RocketConfig.fir 270507:4]
    data_24 <= mux(_T, _GEN_27, data_24) @[Serdes.scala 211:23 chipyard.TestHarness.RocketConfig.fir 270590:4 Serdes.scala 202:17 chipyard.TestHarness.RocketConfig.fir 270507:4]
    data_25 <= mux(_T, _GEN_28, data_25) @[Serdes.scala 211:23 chipyard.TestHarness.RocketConfig.fir 270590:4 Serdes.scala 202:17 chipyard.TestHarness.RocketConfig.fir 270507:4]
    data_26 <= mux(_T, _GEN_29, data_26) @[Serdes.scala 211:23 chipyard.TestHarness.RocketConfig.fir 270590:4 Serdes.scala 202:17 chipyard.TestHarness.RocketConfig.fir 270507:4]
    data_27 <= mux(_T, _GEN_30, data_27) @[Serdes.scala 211:23 chipyard.TestHarness.RocketConfig.fir 270590:4 Serdes.scala 202:17 chipyard.TestHarness.RocketConfig.fir 270507:4]
    data_28 <= mux(_T, _GEN_31, data_28) @[Serdes.scala 211:23 chipyard.TestHarness.RocketConfig.fir 270590:4 Serdes.scala 202:17 chipyard.TestHarness.RocketConfig.fir 270507:4]
    data_29 <= mux(_T, _GEN_32, data_29) @[Serdes.scala 211:23 chipyard.TestHarness.RocketConfig.fir 270590:4 Serdes.scala 202:17 chipyard.TestHarness.RocketConfig.fir 270507:4]
    data_30 <= mux(_T, _GEN_33, data_30) @[Serdes.scala 211:23 chipyard.TestHarness.RocketConfig.fir 270590:4 Serdes.scala 202:17 chipyard.TestHarness.RocketConfig.fir 270507:4]
    receiving <= or(reset, _GEN_66) @[Serdes.scala 204:26 chipyard.TestHarness.RocketConfig.fir 270508:4 Serdes.scala 204:26 chipyard.TestHarness.RocketConfig.fir 270508:4]
    recvCount <= mux(reset, UInt<5>("h0"), _GEN_1) @[Counter.scala 60:40 chipyard.TestHarness.RocketConfig.fir 270510:4 Counter.scala 60:40 chipyard.TestHarness.RocketConfig.fir 270510:4]

  extmodule ChipTop : @[chipyard.TestHarness.RocketConfig.fir 281251:2]
    input jtag_TCK : Clock @[chipyard.TestHarness.RocketConfig.fir 281253:4]
    input jtag_TMS : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 281253:4]
    input jtag_TDI : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 281253:4]
    output jtag_TDO_data : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 281253:4]
    output jtag_TDO_driven : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 281253:4]
    output serial_tl_clock : Clock @[chipyard.TestHarness.RocketConfig.fir 281254:4]
    output serial_tl_bits_in_ready : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 281254:4]
    input serial_tl_bits_in_valid : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 281254:4]
    input serial_tl_bits_in_bits : UInt<4> @[chipyard.TestHarness.RocketConfig.fir 281254:4]
    input serial_tl_bits_out_ready : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 281254:4]
    output serial_tl_bits_out_valid : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 281254:4]
    output serial_tl_bits_out_bits : UInt<4> @[chipyard.TestHarness.RocketConfig.fir 281254:4]
    output axi4_mem_0_clock : Clock @[chipyard.TestHarness.RocketConfig.fir 281255:4]
    output axi4_mem_0_reset : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 281255:4]
    input axi4_mem_0_bits_aw_ready : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 281255:4]
    output axi4_mem_0_bits_aw_valid : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 281255:4]
    output axi4_mem_0_bits_aw_bits_id : UInt<4> @[chipyard.TestHarness.RocketConfig.fir 281255:4]
    output axi4_mem_0_bits_aw_bits_addr : UInt<32> @[chipyard.TestHarness.RocketConfig.fir 281255:4]
    output axi4_mem_0_bits_aw_bits_len : UInt<8> @[chipyard.TestHarness.RocketConfig.fir 281255:4]
    output axi4_mem_0_bits_aw_bits_size : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 281255:4]
    output axi4_mem_0_bits_aw_bits_burst : UInt<2> @[chipyard.TestHarness.RocketConfig.fir 281255:4]
    output axi4_mem_0_bits_aw_bits_lock : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 281255:4]
    output axi4_mem_0_bits_aw_bits_cache : UInt<4> @[chipyard.TestHarness.RocketConfig.fir 281255:4]
    output axi4_mem_0_bits_aw_bits_prot : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 281255:4]
    output axi4_mem_0_bits_aw_bits_qos : UInt<4> @[chipyard.TestHarness.RocketConfig.fir 281255:4]
    input axi4_mem_0_bits_w_ready : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 281255:4]
    output axi4_mem_0_bits_w_valid : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 281255:4]
    output axi4_mem_0_bits_w_bits_data : UInt<64> @[chipyard.TestHarness.RocketConfig.fir 281255:4]
    output axi4_mem_0_bits_w_bits_strb : UInt<8> @[chipyard.TestHarness.RocketConfig.fir 281255:4]
    output axi4_mem_0_bits_w_bits_last : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 281255:4]
    output axi4_mem_0_bits_b_ready : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 281255:4]
    input axi4_mem_0_bits_b_valid : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 281255:4]
    input axi4_mem_0_bits_b_bits_id : UInt<4> @[chipyard.TestHarness.RocketConfig.fir 281255:4]
    input axi4_mem_0_bits_b_bits_resp : UInt<2> @[chipyard.TestHarness.RocketConfig.fir 281255:4]
    input axi4_mem_0_bits_ar_ready : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 281255:4]
    output axi4_mem_0_bits_ar_valid : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 281255:4]
    output axi4_mem_0_bits_ar_bits_id : UInt<4> @[chipyard.TestHarness.RocketConfig.fir 281255:4]
    output axi4_mem_0_bits_ar_bits_addr : UInt<32> @[chipyard.TestHarness.RocketConfig.fir 281255:4]
    output axi4_mem_0_bits_ar_bits_len : UInt<8> @[chipyard.TestHarness.RocketConfig.fir 281255:4]
    output axi4_mem_0_bits_ar_bits_size : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 281255:4]
    output axi4_mem_0_bits_ar_bits_burst : UInt<2> @[chipyard.TestHarness.RocketConfig.fir 281255:4]
    output axi4_mem_0_bits_ar_bits_lock : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 281255:4]
    output axi4_mem_0_bits_ar_bits_cache : UInt<4> @[chipyard.TestHarness.RocketConfig.fir 281255:4]
    output axi4_mem_0_bits_ar_bits_prot : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 281255:4]
    output axi4_mem_0_bits_ar_bits_qos : UInt<4> @[chipyard.TestHarness.RocketConfig.fir 281255:4]
    output axi4_mem_0_bits_r_ready : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 281255:4]
    input axi4_mem_0_bits_r_valid : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 281255:4]
    input axi4_mem_0_bits_r_bits_id : UInt<4> @[chipyard.TestHarness.RocketConfig.fir 281255:4]
    input axi4_mem_0_bits_r_bits_data : UInt<64> @[chipyard.TestHarness.RocketConfig.fir 281255:4]
    input axi4_mem_0_bits_r_bits_resp : UInt<2> @[chipyard.TestHarness.RocketConfig.fir 281255:4]
    input axi4_mem_0_bits_r_bits_last : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 281255:4]
    output uart_0_txd : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 281256:4]
    input uart_0_rxd : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 281256:4]
    input reset_wire_reset : AsyncReset @[chipyard.TestHarness.RocketConfig.fir 281257:4]
    input clock : Clock @[chipyard.TestHarness.RocketConfig.fir 281258:4]
    defname = ChipTop

  extmodule SimJTAG : @[chipyard.TestHarness.RocketConfig.fir 281559:2]
    input clock : Clock @[chipyard.TestHarness.RocketConfig.fir 281560:4]
    input reset : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 281561:4]
    output jtag_TRSTn : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 281562:4]
    output jtag_TCK : Clock @[chipyard.TestHarness.RocketConfig.fir 281562:4]
    output jtag_TMS : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 281562:4]
    output jtag_TDI : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 281562:4]
    input jtag_TDO_data : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 281562:4]
    input jtag_TDO_driven : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 281562:4]
    input enable : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 281563:4]
    input init_done : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 281564:4]
    output exit : UInt<32> @[chipyard.TestHarness.RocketConfig.fir 281565:4]
    defname = SimJTAG
    parameter TICK_DELAY = 3

  extmodule plusarg_reader_108 : @[chipyard.TestHarness.RocketConfig.fir 281570:2]
    output out : UInt<32> @[chipyard.TestHarness.RocketConfig.fir 281571:4]
    defname = plusarg_reader
    parameter FORMAT = "jtag_rbb_enable=%d"
    parameter DEFAULT = 0
    parameter WIDTH = 32

  module SerialAdapter_inTestHarness : @[chipyard.TestHarness.RocketConfig.fir 281578:2]
    input clock : Clock @[chipyard.TestHarness.RocketConfig.fir 281579:4]
    input reset : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 281580:4]
    input auto_out_a_ready : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 281581:4]
    output auto_out_a_valid : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 281581:4]
    output auto_out_a_bits_opcode : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 281581:4]
    output auto_out_a_bits_size : UInt<4> @[chipyard.TestHarness.RocketConfig.fir 281581:4]
    output auto_out_a_bits_address : UInt<32> @[chipyard.TestHarness.RocketConfig.fir 281581:4]
    output auto_out_a_bits_mask : UInt<8> @[chipyard.TestHarness.RocketConfig.fir 281581:4]
    output auto_out_a_bits_data : UInt<64> @[chipyard.TestHarness.RocketConfig.fir 281581:4]
    output auto_out_d_ready : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 281581:4]
    input auto_out_d_valid : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 281581:4]
    input auto_out_d_bits_data : UInt<64> @[chipyard.TestHarness.RocketConfig.fir 281581:4]
    output io_serial_in_ready : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 281582:4]
    input io_serial_in_valid : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 281582:4]
    input io_serial_in_bits : UInt<32> @[chipyard.TestHarness.RocketConfig.fir 281582:4]
    input io_serial_out_ready : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 281582:4]
    output io_serial_out_valid : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 281582:4]
    output io_serial_out_bits : UInt<32> @[chipyard.TestHarness.RocketConfig.fir 281582:4]

    reg cmd : UInt<32>, clock with :
      reset => (UInt<1>("h0"), cmd) @[SerialAdapter.scala 86:16 chipyard.TestHarness.RocketConfig.fir 281591:4]
    reg addr : UInt<64>, clock with :
      reset => (UInt<1>("h0"), addr) @[SerialAdapter.scala 87:17 chipyard.TestHarness.RocketConfig.fir 281592:4]
    reg len : UInt<64>, clock with :
      reset => (UInt<1>("h0"), len) @[SerialAdapter.scala 88:16 chipyard.TestHarness.RocketConfig.fir 281593:4]
    reg body_0 : UInt<32>, clock with :
      reset => (UInt<1>("h0"), body_0) @[SerialAdapter.scala 89:17 chipyard.TestHarness.RocketConfig.fir 281594:4]
    reg body_1 : UInt<32>, clock with :
      reset => (UInt<1>("h0"), body_1) @[SerialAdapter.scala 89:17 chipyard.TestHarness.RocketConfig.fir 281594:4]
    reg bodyValid : UInt<2>, clock with :
      reset => (UInt<1>("h0"), bodyValid) @[SerialAdapter.scala 90:22 chipyard.TestHarness.RocketConfig.fir 281595:4]
    reg idx : UInt<1>, clock with :
      reset => (UInt<1>("h0"), idx) @[SerialAdapter.scala 91:16 chipyard.TestHarness.RocketConfig.fir 281596:4]
    reg state : UInt<4>, clock with :
      reset => (UInt<1>("h0"), state) @[SerialAdapter.scala 97:22 chipyard.TestHarness.RocketConfig.fir 281597:4]
    node _io_serial_in_ready_T = eq(state, UInt<4>("h0")) @[package.scala 15:47 chipyard.TestHarness.RocketConfig.fir 281598:4]
    node _io_serial_in_ready_T_1 = eq(state, UInt<4>("h1")) @[package.scala 15:47 chipyard.TestHarness.RocketConfig.fir 281599:4]
    node _io_serial_in_ready_T_2 = eq(state, UInt<4>("h2")) @[package.scala 15:47 chipyard.TestHarness.RocketConfig.fir 281600:4]
    node _io_serial_in_ready_T_3 = eq(state, UInt<4>("h6")) @[package.scala 15:47 chipyard.TestHarness.RocketConfig.fir 281601:4]
    node _io_serial_in_ready_T_4 = or(_io_serial_in_ready_T, _io_serial_in_ready_T_1) @[package.scala 72:59 chipyard.TestHarness.RocketConfig.fir 281602:4]
    node _io_serial_in_ready_T_5 = or(_io_serial_in_ready_T_4, _io_serial_in_ready_T_2) @[package.scala 72:59 chipyard.TestHarness.RocketConfig.fir 281603:4]
    node _io_serial_out_valid_T = eq(state, UInt<4>("h5")) @[SerialAdapter.scala 100:32 chipyard.TestHarness.RocketConfig.fir 281606:4]
    node beatAddr = bits(addr, 31, 3) @[SerialAdapter.scala 103:22 chipyard.TestHarness.RocketConfig.fir 281609:4]
    node _nextAddr_T = add(beatAddr, UInt<29>("h1")) @[SerialAdapter.scala 104:31 chipyard.TestHarness.RocketConfig.fir 281610:4]
    node nextAddr_hi = tail(_nextAddr_T, 1) @[SerialAdapter.scala 104:31 chipyard.TestHarness.RocketConfig.fir 281611:4]
    node nextAddr = cat(nextAddr_hi, UInt<3>("h0")) @[Cat.scala 30:58 chipyard.TestHarness.RocketConfig.fir 281612:4]
    node _wmask_T = bits(bodyValid, 0, 0) @[Bitwise.scala 26:51 chipyard.TestHarness.RocketConfig.fir 281613:4]
    node _wmask_T_1 = bits(bodyValid, 1, 1) @[Bitwise.scala 26:51 chipyard.TestHarness.RocketConfig.fir 281614:4]
    node wmask_lo = mux(_wmask_T, UInt<4>("hf"), UInt<4>("h0")) @[Bitwise.scala 72:12 chipyard.TestHarness.RocketConfig.fir 281616:4]
    node wmask_hi = mux(_wmask_T_1, UInt<4>("hf"), UInt<4>("h0")) @[Bitwise.scala 72:12 chipyard.TestHarness.RocketConfig.fir 281618:4]
    node wmask = cat(wmask_hi, wmask_lo) @[Cat.scala 30:58 chipyard.TestHarness.RocketConfig.fir 281619:4]
    node _GEN_55 = pad(nextAddr, 64) @[SerialAdapter.scala 107:28 chipyard.TestHarness.RocketConfig.fir 281620:4]
    node _addr_size_T = sub(_GEN_55, addr) @[SerialAdapter.scala 107:28 chipyard.TestHarness.RocketConfig.fir 281620:4]
    node addr_size = tail(_addr_size_T, 1) @[SerialAdapter.scala 107:28 chipyard.TestHarness.RocketConfig.fir 281621:4]
    node _len_size_T = add(len, UInt<64>("h1")) @[SerialAdapter.scala 108:26 chipyard.TestHarness.RocketConfig.fir 281622:4]
    node len_size_hi = tail(_len_size_T, 1) @[SerialAdapter.scala 108:26 chipyard.TestHarness.RocketConfig.fir 281623:4]
    node len_size = cat(len_size_hi, UInt<2>("h0")) @[Cat.scala 30:58 chipyard.TestHarness.RocketConfig.fir 281624:4]
    node _GEN_56 = pad(addr_size, 66) @[SerialAdapter.scala 109:31 chipyard.TestHarness.RocketConfig.fir 281625:4]
    node _raw_size_T = lt(len_size, _GEN_56) @[SerialAdapter.scala 109:31 chipyard.TestHarness.RocketConfig.fir 281625:4]
    node raw_size = mux(_raw_size_T, len_size, pad(addr_size, 66)) @[SerialAdapter.scala 109:21 chipyard.TestHarness.RocketConfig.fir 281626:4]
    node _rsize_T = eq(UInt<66>("h1"), raw_size) @[Mux.scala 80:60 chipyard.TestHarness.RocketConfig.fir 281627:4]
    node _rsize_T_1 = mux(_rsize_T, UInt<2>("h0"), UInt<2>("h3")) @[Mux.scala 80:57 chipyard.TestHarness.RocketConfig.fir 281628:4]
    node _rsize_T_2 = eq(UInt<66>("h2"), raw_size) @[Mux.scala 80:60 chipyard.TestHarness.RocketConfig.fir 281629:4]
    node _rsize_T_3 = mux(_rsize_T_2, UInt<2>("h1"), _rsize_T_1) @[Mux.scala 80:57 chipyard.TestHarness.RocketConfig.fir 281630:4]
    node _rsize_T_4 = eq(UInt<66>("h4"), raw_size) @[Mux.scala 80:60 chipyard.TestHarness.RocketConfig.fir 281631:4]
    node rsize = mux(_rsize_T_4, UInt<2>("h2"), _rsize_T_3) @[Mux.scala 80:57 chipyard.TestHarness.RocketConfig.fir 281632:4]
    node _pow2size_T = bits(raw_size, 0, 0) @[Bitwise.scala 49:65 chipyard.TestHarness.RocketConfig.fir 281633:4]
    node _pow2size_T_1 = bits(raw_size, 1, 1) @[Bitwise.scala 49:65 chipyard.TestHarness.RocketConfig.fir 281634:4]
    node _pow2size_T_2 = bits(raw_size, 2, 2) @[Bitwise.scala 49:65 chipyard.TestHarness.RocketConfig.fir 281635:4]
    node _pow2size_T_3 = bits(raw_size, 3, 3) @[Bitwise.scala 49:65 chipyard.TestHarness.RocketConfig.fir 281636:4]
    node _pow2size_T_4 = bits(raw_size, 4, 4) @[Bitwise.scala 49:65 chipyard.TestHarness.RocketConfig.fir 281637:4]
    node _pow2size_T_5 = bits(raw_size, 5, 5) @[Bitwise.scala 49:65 chipyard.TestHarness.RocketConfig.fir 281638:4]
    node _pow2size_T_6 = bits(raw_size, 6, 6) @[Bitwise.scala 49:65 chipyard.TestHarness.RocketConfig.fir 281639:4]
    node _pow2size_T_7 = bits(raw_size, 7, 7) @[Bitwise.scala 49:65 chipyard.TestHarness.RocketConfig.fir 281640:4]
    node _pow2size_T_8 = bits(raw_size, 8, 8) @[Bitwise.scala 49:65 chipyard.TestHarness.RocketConfig.fir 281641:4]
    node _pow2size_T_9 = bits(raw_size, 9, 9) @[Bitwise.scala 49:65 chipyard.TestHarness.RocketConfig.fir 281642:4]
    node _pow2size_T_10 = bits(raw_size, 10, 10) @[Bitwise.scala 49:65 chipyard.TestHarness.RocketConfig.fir 281643:4]
    node _pow2size_T_11 = bits(raw_size, 11, 11) @[Bitwise.scala 49:65 chipyard.TestHarness.RocketConfig.fir 281644:4]
    node _pow2size_T_12 = bits(raw_size, 12, 12) @[Bitwise.scala 49:65 chipyard.TestHarness.RocketConfig.fir 281645:4]
    node _pow2size_T_13 = bits(raw_size, 13, 13) @[Bitwise.scala 49:65 chipyard.TestHarness.RocketConfig.fir 281646:4]
    node _pow2size_T_14 = bits(raw_size, 14, 14) @[Bitwise.scala 49:65 chipyard.TestHarness.RocketConfig.fir 281647:4]
    node _pow2size_T_15 = bits(raw_size, 15, 15) @[Bitwise.scala 49:65 chipyard.TestHarness.RocketConfig.fir 281648:4]
    node _pow2size_T_16 = bits(raw_size, 16, 16) @[Bitwise.scala 49:65 chipyard.TestHarness.RocketConfig.fir 281649:4]
    node _pow2size_T_17 = bits(raw_size, 17, 17) @[Bitwise.scala 49:65 chipyard.TestHarness.RocketConfig.fir 281650:4]
    node _pow2size_T_18 = bits(raw_size, 18, 18) @[Bitwise.scala 49:65 chipyard.TestHarness.RocketConfig.fir 281651:4]
    node _pow2size_T_19 = bits(raw_size, 19, 19) @[Bitwise.scala 49:65 chipyard.TestHarness.RocketConfig.fir 281652:4]
    node _pow2size_T_20 = bits(raw_size, 20, 20) @[Bitwise.scala 49:65 chipyard.TestHarness.RocketConfig.fir 281653:4]
    node _pow2size_T_21 = bits(raw_size, 21, 21) @[Bitwise.scala 49:65 chipyard.TestHarness.RocketConfig.fir 281654:4]
    node _pow2size_T_22 = bits(raw_size, 22, 22) @[Bitwise.scala 49:65 chipyard.TestHarness.RocketConfig.fir 281655:4]
    node _pow2size_T_23 = bits(raw_size, 23, 23) @[Bitwise.scala 49:65 chipyard.TestHarness.RocketConfig.fir 281656:4]
    node _pow2size_T_24 = bits(raw_size, 24, 24) @[Bitwise.scala 49:65 chipyard.TestHarness.RocketConfig.fir 281657:4]
    node _pow2size_T_25 = bits(raw_size, 25, 25) @[Bitwise.scala 49:65 chipyard.TestHarness.RocketConfig.fir 281658:4]
    node _pow2size_T_26 = bits(raw_size, 26, 26) @[Bitwise.scala 49:65 chipyard.TestHarness.RocketConfig.fir 281659:4]
    node _pow2size_T_27 = bits(raw_size, 27, 27) @[Bitwise.scala 49:65 chipyard.TestHarness.RocketConfig.fir 281660:4]
    node _pow2size_T_28 = bits(raw_size, 28, 28) @[Bitwise.scala 49:65 chipyard.TestHarness.RocketConfig.fir 281661:4]
    node _pow2size_T_29 = bits(raw_size, 29, 29) @[Bitwise.scala 49:65 chipyard.TestHarness.RocketConfig.fir 281662:4]
    node _pow2size_T_30 = bits(raw_size, 30, 30) @[Bitwise.scala 49:65 chipyard.TestHarness.RocketConfig.fir 281663:4]
    node _pow2size_T_31 = bits(raw_size, 31, 31) @[Bitwise.scala 49:65 chipyard.TestHarness.RocketConfig.fir 281664:4]
    node _pow2size_T_32 = bits(raw_size, 32, 32) @[Bitwise.scala 49:65 chipyard.TestHarness.RocketConfig.fir 281665:4]
    node _pow2size_T_33 = bits(raw_size, 33, 33) @[Bitwise.scala 49:65 chipyard.TestHarness.RocketConfig.fir 281666:4]
    node _pow2size_T_34 = bits(raw_size, 34, 34) @[Bitwise.scala 49:65 chipyard.TestHarness.RocketConfig.fir 281667:4]
    node _pow2size_T_35 = bits(raw_size, 35, 35) @[Bitwise.scala 49:65 chipyard.TestHarness.RocketConfig.fir 281668:4]
    node _pow2size_T_36 = bits(raw_size, 36, 36) @[Bitwise.scala 49:65 chipyard.TestHarness.RocketConfig.fir 281669:4]
    node _pow2size_T_37 = bits(raw_size, 37, 37) @[Bitwise.scala 49:65 chipyard.TestHarness.RocketConfig.fir 281670:4]
    node _pow2size_T_38 = bits(raw_size, 38, 38) @[Bitwise.scala 49:65 chipyard.TestHarness.RocketConfig.fir 281671:4]
    node _pow2size_T_39 = bits(raw_size, 39, 39) @[Bitwise.scala 49:65 chipyard.TestHarness.RocketConfig.fir 281672:4]
    node _pow2size_T_40 = bits(raw_size, 40, 40) @[Bitwise.scala 49:65 chipyard.TestHarness.RocketConfig.fir 281673:4]
    node _pow2size_T_41 = bits(raw_size, 41, 41) @[Bitwise.scala 49:65 chipyard.TestHarness.RocketConfig.fir 281674:4]
    node _pow2size_T_42 = bits(raw_size, 42, 42) @[Bitwise.scala 49:65 chipyard.TestHarness.RocketConfig.fir 281675:4]
    node _pow2size_T_43 = bits(raw_size, 43, 43) @[Bitwise.scala 49:65 chipyard.TestHarness.RocketConfig.fir 281676:4]
    node _pow2size_T_44 = bits(raw_size, 44, 44) @[Bitwise.scala 49:65 chipyard.TestHarness.RocketConfig.fir 281677:4]
    node _pow2size_T_45 = bits(raw_size, 45, 45) @[Bitwise.scala 49:65 chipyard.TestHarness.RocketConfig.fir 281678:4]
    node _pow2size_T_46 = bits(raw_size, 46, 46) @[Bitwise.scala 49:65 chipyard.TestHarness.RocketConfig.fir 281679:4]
    node _pow2size_T_47 = bits(raw_size, 47, 47) @[Bitwise.scala 49:65 chipyard.TestHarness.RocketConfig.fir 281680:4]
    node _pow2size_T_48 = bits(raw_size, 48, 48) @[Bitwise.scala 49:65 chipyard.TestHarness.RocketConfig.fir 281681:4]
    node _pow2size_T_49 = bits(raw_size, 49, 49) @[Bitwise.scala 49:65 chipyard.TestHarness.RocketConfig.fir 281682:4]
    node _pow2size_T_50 = bits(raw_size, 50, 50) @[Bitwise.scala 49:65 chipyard.TestHarness.RocketConfig.fir 281683:4]
    node _pow2size_T_51 = bits(raw_size, 51, 51) @[Bitwise.scala 49:65 chipyard.TestHarness.RocketConfig.fir 281684:4]
    node _pow2size_T_52 = bits(raw_size, 52, 52) @[Bitwise.scala 49:65 chipyard.TestHarness.RocketConfig.fir 281685:4]
    node _pow2size_T_53 = bits(raw_size, 53, 53) @[Bitwise.scala 49:65 chipyard.TestHarness.RocketConfig.fir 281686:4]
    node _pow2size_T_54 = bits(raw_size, 54, 54) @[Bitwise.scala 49:65 chipyard.TestHarness.RocketConfig.fir 281687:4]
    node _pow2size_T_55 = bits(raw_size, 55, 55) @[Bitwise.scala 49:65 chipyard.TestHarness.RocketConfig.fir 281688:4]
    node _pow2size_T_56 = bits(raw_size, 56, 56) @[Bitwise.scala 49:65 chipyard.TestHarness.RocketConfig.fir 281689:4]
    node _pow2size_T_57 = bits(raw_size, 57, 57) @[Bitwise.scala 49:65 chipyard.TestHarness.RocketConfig.fir 281690:4]
    node _pow2size_T_58 = bits(raw_size, 58, 58) @[Bitwise.scala 49:65 chipyard.TestHarness.RocketConfig.fir 281691:4]
    node _pow2size_T_59 = bits(raw_size, 59, 59) @[Bitwise.scala 49:65 chipyard.TestHarness.RocketConfig.fir 281692:4]
    node _pow2size_T_60 = bits(raw_size, 60, 60) @[Bitwise.scala 49:65 chipyard.TestHarness.RocketConfig.fir 281693:4]
    node _pow2size_T_61 = bits(raw_size, 61, 61) @[Bitwise.scala 49:65 chipyard.TestHarness.RocketConfig.fir 281694:4]
    node _pow2size_T_62 = bits(raw_size, 62, 62) @[Bitwise.scala 49:65 chipyard.TestHarness.RocketConfig.fir 281695:4]
    node _pow2size_T_63 = bits(raw_size, 63, 63) @[Bitwise.scala 49:65 chipyard.TestHarness.RocketConfig.fir 281696:4]
    node _pow2size_T_64 = bits(raw_size, 64, 64) @[Bitwise.scala 49:65 chipyard.TestHarness.RocketConfig.fir 281697:4]
    node _pow2size_T_65 = bits(raw_size, 65, 65) @[Bitwise.scala 49:65 chipyard.TestHarness.RocketConfig.fir 281698:4]
    node _pow2size_T_66 = add(_pow2size_T, _pow2size_T_1) @[Bitwise.scala 47:55 chipyard.TestHarness.RocketConfig.fir 281699:4]
    node _pow2size_T_68 = add(_pow2size_T_2, _pow2size_T_3) @[Bitwise.scala 47:55 chipyard.TestHarness.RocketConfig.fir 281701:4]
    node _pow2size_T_70 = add(_pow2size_T_66, _pow2size_T_68) @[Bitwise.scala 47:55 chipyard.TestHarness.RocketConfig.fir 281703:4]
    node _pow2size_T_72 = add(_pow2size_T_4, _pow2size_T_5) @[Bitwise.scala 47:55 chipyard.TestHarness.RocketConfig.fir 281705:4]
    node _pow2size_T_74 = add(_pow2size_T_6, _pow2size_T_7) @[Bitwise.scala 47:55 chipyard.TestHarness.RocketConfig.fir 281707:4]
    node _pow2size_T_76 = add(_pow2size_T_72, _pow2size_T_74) @[Bitwise.scala 47:55 chipyard.TestHarness.RocketConfig.fir 281709:4]
    node _pow2size_T_78 = add(_pow2size_T_70, _pow2size_T_76) @[Bitwise.scala 47:55 chipyard.TestHarness.RocketConfig.fir 281711:4]
    node _pow2size_T_80 = add(_pow2size_T_8, _pow2size_T_9) @[Bitwise.scala 47:55 chipyard.TestHarness.RocketConfig.fir 281713:4]
    node _pow2size_T_82 = add(_pow2size_T_10, _pow2size_T_11) @[Bitwise.scala 47:55 chipyard.TestHarness.RocketConfig.fir 281715:4]
    node _pow2size_T_84 = add(_pow2size_T_80, _pow2size_T_82) @[Bitwise.scala 47:55 chipyard.TestHarness.RocketConfig.fir 281717:4]
    node _pow2size_T_86 = add(_pow2size_T_12, _pow2size_T_13) @[Bitwise.scala 47:55 chipyard.TestHarness.RocketConfig.fir 281719:4]
    node _pow2size_T_88 = add(_pow2size_T_14, _pow2size_T_15) @[Bitwise.scala 47:55 chipyard.TestHarness.RocketConfig.fir 281721:4]
    node _pow2size_T_90 = add(_pow2size_T_86, _pow2size_T_88) @[Bitwise.scala 47:55 chipyard.TestHarness.RocketConfig.fir 281723:4]
    node _pow2size_T_92 = add(_pow2size_T_84, _pow2size_T_90) @[Bitwise.scala 47:55 chipyard.TestHarness.RocketConfig.fir 281725:4]
    node _pow2size_T_94 = add(_pow2size_T_78, _pow2size_T_92) @[Bitwise.scala 47:55 chipyard.TestHarness.RocketConfig.fir 281727:4]
    node _pow2size_T_96 = add(_pow2size_T_16, _pow2size_T_17) @[Bitwise.scala 47:55 chipyard.TestHarness.RocketConfig.fir 281729:4]
    node _pow2size_T_98 = add(_pow2size_T_18, _pow2size_T_19) @[Bitwise.scala 47:55 chipyard.TestHarness.RocketConfig.fir 281731:4]
    node _pow2size_T_100 = add(_pow2size_T_96, _pow2size_T_98) @[Bitwise.scala 47:55 chipyard.TestHarness.RocketConfig.fir 281733:4]
    node _pow2size_T_102 = add(_pow2size_T_20, _pow2size_T_21) @[Bitwise.scala 47:55 chipyard.TestHarness.RocketConfig.fir 281735:4]
    node _pow2size_T_104 = add(_pow2size_T_22, _pow2size_T_23) @[Bitwise.scala 47:55 chipyard.TestHarness.RocketConfig.fir 281737:4]
    node _pow2size_T_106 = add(_pow2size_T_102, _pow2size_T_104) @[Bitwise.scala 47:55 chipyard.TestHarness.RocketConfig.fir 281739:4]
    node _pow2size_T_108 = add(_pow2size_T_100, _pow2size_T_106) @[Bitwise.scala 47:55 chipyard.TestHarness.RocketConfig.fir 281741:4]
    node _pow2size_T_110 = add(_pow2size_T_24, _pow2size_T_25) @[Bitwise.scala 47:55 chipyard.TestHarness.RocketConfig.fir 281743:4]
    node _pow2size_T_112 = add(_pow2size_T_26, _pow2size_T_27) @[Bitwise.scala 47:55 chipyard.TestHarness.RocketConfig.fir 281745:4]
    node _pow2size_T_114 = add(_pow2size_T_110, _pow2size_T_112) @[Bitwise.scala 47:55 chipyard.TestHarness.RocketConfig.fir 281747:4]
    node _pow2size_T_116 = add(_pow2size_T_28, _pow2size_T_29) @[Bitwise.scala 47:55 chipyard.TestHarness.RocketConfig.fir 281749:4]
    node _pow2size_T_118 = add(_pow2size_T_31, _pow2size_T_32) @[Bitwise.scala 47:55 chipyard.TestHarness.RocketConfig.fir 281751:4]
    node _GEN_57 = pad(_pow2size_T_30, 2) @[Bitwise.scala 47:55 chipyard.TestHarness.RocketConfig.fir 281753:4]
    node _pow2size_T_120 = add(_GEN_57, _pow2size_T_118) @[Bitwise.scala 47:55 chipyard.TestHarness.RocketConfig.fir 281753:4]
    node _pow2size_T_121 = bits(_pow2size_T_120, 1, 0) @[Bitwise.scala 47:55 chipyard.TestHarness.RocketConfig.fir 281754:4]
    node _pow2size_T_122 = add(_pow2size_T_116, _pow2size_T_121) @[Bitwise.scala 47:55 chipyard.TestHarness.RocketConfig.fir 281755:4]
    node _pow2size_T_124 = add(_pow2size_T_114, _pow2size_T_122) @[Bitwise.scala 47:55 chipyard.TestHarness.RocketConfig.fir 281757:4]
    node _pow2size_T_126 = add(_pow2size_T_108, _pow2size_T_124) @[Bitwise.scala 47:55 chipyard.TestHarness.RocketConfig.fir 281759:4]
    node _pow2size_T_128 = add(_pow2size_T_94, _pow2size_T_126) @[Bitwise.scala 47:55 chipyard.TestHarness.RocketConfig.fir 281761:4]
    node _pow2size_T_130 = add(_pow2size_T_33, _pow2size_T_34) @[Bitwise.scala 47:55 chipyard.TestHarness.RocketConfig.fir 281763:4]
    node _pow2size_T_132 = add(_pow2size_T_35, _pow2size_T_36) @[Bitwise.scala 47:55 chipyard.TestHarness.RocketConfig.fir 281765:4]
    node _pow2size_T_134 = add(_pow2size_T_130, _pow2size_T_132) @[Bitwise.scala 47:55 chipyard.TestHarness.RocketConfig.fir 281767:4]
    node _pow2size_T_136 = add(_pow2size_T_37, _pow2size_T_38) @[Bitwise.scala 47:55 chipyard.TestHarness.RocketConfig.fir 281769:4]
    node _pow2size_T_138 = add(_pow2size_T_39, _pow2size_T_40) @[Bitwise.scala 47:55 chipyard.TestHarness.RocketConfig.fir 281771:4]
    node _pow2size_T_140 = add(_pow2size_T_136, _pow2size_T_138) @[Bitwise.scala 47:55 chipyard.TestHarness.RocketConfig.fir 281773:4]
    node _pow2size_T_142 = add(_pow2size_T_134, _pow2size_T_140) @[Bitwise.scala 47:55 chipyard.TestHarness.RocketConfig.fir 281775:4]
    node _pow2size_T_144 = add(_pow2size_T_41, _pow2size_T_42) @[Bitwise.scala 47:55 chipyard.TestHarness.RocketConfig.fir 281777:4]
    node _pow2size_T_146 = add(_pow2size_T_43, _pow2size_T_44) @[Bitwise.scala 47:55 chipyard.TestHarness.RocketConfig.fir 281779:4]
    node _pow2size_T_148 = add(_pow2size_T_144, _pow2size_T_146) @[Bitwise.scala 47:55 chipyard.TestHarness.RocketConfig.fir 281781:4]
    node _pow2size_T_150 = add(_pow2size_T_45, _pow2size_T_46) @[Bitwise.scala 47:55 chipyard.TestHarness.RocketConfig.fir 281783:4]
    node _pow2size_T_152 = add(_pow2size_T_47, _pow2size_T_48) @[Bitwise.scala 47:55 chipyard.TestHarness.RocketConfig.fir 281785:4]
    node _pow2size_T_154 = add(_pow2size_T_150, _pow2size_T_152) @[Bitwise.scala 47:55 chipyard.TestHarness.RocketConfig.fir 281787:4]
    node _pow2size_T_156 = add(_pow2size_T_148, _pow2size_T_154) @[Bitwise.scala 47:55 chipyard.TestHarness.RocketConfig.fir 281789:4]
    node _pow2size_T_158 = add(_pow2size_T_142, _pow2size_T_156) @[Bitwise.scala 47:55 chipyard.TestHarness.RocketConfig.fir 281791:4]
    node _pow2size_T_160 = add(_pow2size_T_49, _pow2size_T_50) @[Bitwise.scala 47:55 chipyard.TestHarness.RocketConfig.fir 281793:4]
    node _pow2size_T_162 = add(_pow2size_T_51, _pow2size_T_52) @[Bitwise.scala 47:55 chipyard.TestHarness.RocketConfig.fir 281795:4]
    node _pow2size_T_164 = add(_pow2size_T_160, _pow2size_T_162) @[Bitwise.scala 47:55 chipyard.TestHarness.RocketConfig.fir 281797:4]
    node _pow2size_T_166 = add(_pow2size_T_53, _pow2size_T_54) @[Bitwise.scala 47:55 chipyard.TestHarness.RocketConfig.fir 281799:4]
    node _pow2size_T_168 = add(_pow2size_T_55, _pow2size_T_56) @[Bitwise.scala 47:55 chipyard.TestHarness.RocketConfig.fir 281801:4]
    node _pow2size_T_170 = add(_pow2size_T_166, _pow2size_T_168) @[Bitwise.scala 47:55 chipyard.TestHarness.RocketConfig.fir 281803:4]
    node _pow2size_T_172 = add(_pow2size_T_164, _pow2size_T_170) @[Bitwise.scala 47:55 chipyard.TestHarness.RocketConfig.fir 281805:4]
    node _pow2size_T_174 = add(_pow2size_T_57, _pow2size_T_58) @[Bitwise.scala 47:55 chipyard.TestHarness.RocketConfig.fir 281807:4]
    node _pow2size_T_176 = add(_pow2size_T_59, _pow2size_T_60) @[Bitwise.scala 47:55 chipyard.TestHarness.RocketConfig.fir 281809:4]
    node _pow2size_T_178 = add(_pow2size_T_174, _pow2size_T_176) @[Bitwise.scala 47:55 chipyard.TestHarness.RocketConfig.fir 281811:4]
    node _pow2size_T_180 = add(_pow2size_T_61, _pow2size_T_62) @[Bitwise.scala 47:55 chipyard.TestHarness.RocketConfig.fir 281813:4]
    node _pow2size_T_182 = add(_pow2size_T_64, _pow2size_T_65) @[Bitwise.scala 47:55 chipyard.TestHarness.RocketConfig.fir 281815:4]
    node _GEN_58 = pad(_pow2size_T_63, 2) @[Bitwise.scala 47:55 chipyard.TestHarness.RocketConfig.fir 281817:4]
    node _pow2size_T_184 = add(_GEN_58, _pow2size_T_182) @[Bitwise.scala 47:55 chipyard.TestHarness.RocketConfig.fir 281817:4]
    node _pow2size_T_185 = bits(_pow2size_T_184, 1, 0) @[Bitwise.scala 47:55 chipyard.TestHarness.RocketConfig.fir 281818:4]
    node _pow2size_T_186 = add(_pow2size_T_180, _pow2size_T_185) @[Bitwise.scala 47:55 chipyard.TestHarness.RocketConfig.fir 281819:4]
    node _pow2size_T_188 = add(_pow2size_T_178, _pow2size_T_186) @[Bitwise.scala 47:55 chipyard.TestHarness.RocketConfig.fir 281821:4]
    node _pow2size_T_190 = add(_pow2size_T_172, _pow2size_T_188) @[Bitwise.scala 47:55 chipyard.TestHarness.RocketConfig.fir 281823:4]
    node _pow2size_T_192 = add(_pow2size_T_158, _pow2size_T_190) @[Bitwise.scala 47:55 chipyard.TestHarness.RocketConfig.fir 281825:4]
    node _pow2size_T_194 = add(_pow2size_T_128, _pow2size_T_192) @[Bitwise.scala 47:55 chipyard.TestHarness.RocketConfig.fir 281827:4]
    node pow2size = eq(_pow2size_T_194, UInt<7>("h1")) @[SerialAdapter.scala 113:37 chipyard.TestHarness.RocketConfig.fir 281829:4]
    node _byteAddr_T = bits(addr, 2, 0) @[SerialAdapter.scala 114:36 chipyard.TestHarness.RocketConfig.fir 281830:4]
    node byteAddr = mux(pow2size, _byteAddr_T, UInt<3>("h0")) @[SerialAdapter.scala 114:21 chipyard.TestHarness.RocketConfig.fir 281831:4]
    node put_acquire_address = shl(beatAddr, 3) @[SerialAdapter.scala 117:19 chipyard.TestHarness.RocketConfig.fir 281832:4]
    node put_acquire_data = cat(body_1, body_0) @[SerialAdapter.scala 118:10 chipyard.TestHarness.RocketConfig.fir 281833:4]
    node get_acquire_address = cat(beatAddr, byteAddr) @[Cat.scala 30:58 chipyard.TestHarness.RocketConfig.fir 281898:4]
    node _get_acquire_a_mask_sizeOH_T = pad(rsize, 3) @[Misc.scala 201:34 chipyard.TestHarness.RocketConfig.fir 281964:4]
    node get_acquire_a_mask_sizeOH_shiftAmount = bits(_get_acquire_a_mask_sizeOH_T, 1, 0) @[OneHot.scala 64:49 chipyard.TestHarness.RocketConfig.fir 281965:4]
    node _get_acquire_a_mask_sizeOH_T_1 = dshlw(UInt<4>("h1"), get_acquire_a_mask_sizeOH_shiftAmount) @[OneHot.scala 65:12 chipyard.TestHarness.RocketConfig.fir 281966:4]
    node _get_acquire_a_mask_sizeOH_T_2 = bits(_get_acquire_a_mask_sizeOH_T_1, 2, 0) @[OneHot.scala 65:27 chipyard.TestHarness.RocketConfig.fir 281967:4]
    node get_acquire_a_mask_sizeOH = or(_get_acquire_a_mask_sizeOH_T_2, UInt<3>("h1")) @[Misc.scala 201:81 chipyard.TestHarness.RocketConfig.fir 281968:4]
    node _get_acquire_a_mask_T = geq(rsize, UInt<2>("h3")) @[Misc.scala 205:21 chipyard.TestHarness.RocketConfig.fir 281969:4]
    node get_acquire_a_mask_size = bits(get_acquire_a_mask_sizeOH, 2, 2) @[Misc.scala 208:26 chipyard.TestHarness.RocketConfig.fir 281970:4]
    node get_acquire_a_mask_bit = bits(get_acquire_address, 2, 2) @[Misc.scala 209:26 chipyard.TestHarness.RocketConfig.fir 281971:4]
    node get_acquire_a_mask_nbit = not(get_acquire_a_mask_bit) @[Misc.scala 210:20 chipyard.TestHarness.RocketConfig.fir 281972:4]
    node _get_acquire_a_mask_acc_T = and(get_acquire_a_mask_size, get_acquire_a_mask_nbit) @[Misc.scala 214:38 chipyard.TestHarness.RocketConfig.fir 281974:4]
    node get_acquire_a_mask_acc = or(_get_acquire_a_mask_T, _get_acquire_a_mask_acc_T) @[Misc.scala 214:29 chipyard.TestHarness.RocketConfig.fir 281975:4]
    node _get_acquire_a_mask_acc_T_1 = and(get_acquire_a_mask_size, get_acquire_a_mask_bit) @[Misc.scala 214:38 chipyard.TestHarness.RocketConfig.fir 281977:4]
    node get_acquire_a_mask_acc_1 = or(_get_acquire_a_mask_T, _get_acquire_a_mask_acc_T_1) @[Misc.scala 214:29 chipyard.TestHarness.RocketConfig.fir 281978:4]
    node get_acquire_a_mask_size_1 = bits(get_acquire_a_mask_sizeOH, 1, 1) @[Misc.scala 208:26 chipyard.TestHarness.RocketConfig.fir 281979:4]
    node get_acquire_a_mask_bit_1 = bits(get_acquire_address, 1, 1) @[Misc.scala 209:26 chipyard.TestHarness.RocketConfig.fir 281980:4]
    node get_acquire_a_mask_nbit_1 = not(get_acquire_a_mask_bit_1) @[Misc.scala 210:20 chipyard.TestHarness.RocketConfig.fir 281981:4]
    node get_acquire_a_mask_eq_2 = and(get_acquire_a_mask_nbit, get_acquire_a_mask_nbit_1) @[Misc.scala 213:27 chipyard.TestHarness.RocketConfig.fir 281982:4]
    node _get_acquire_a_mask_acc_T_2 = and(get_acquire_a_mask_size_1, get_acquire_a_mask_eq_2) @[Misc.scala 214:38 chipyard.TestHarness.RocketConfig.fir 281983:4]
    node get_acquire_a_mask_acc_2 = or(get_acquire_a_mask_acc, _get_acquire_a_mask_acc_T_2) @[Misc.scala 214:29 chipyard.TestHarness.RocketConfig.fir 281984:4]
    node get_acquire_a_mask_eq_3 = and(get_acquire_a_mask_nbit, get_acquire_a_mask_bit_1) @[Misc.scala 213:27 chipyard.TestHarness.RocketConfig.fir 281985:4]
    node _get_acquire_a_mask_acc_T_3 = and(get_acquire_a_mask_size_1, get_acquire_a_mask_eq_3) @[Misc.scala 214:38 chipyard.TestHarness.RocketConfig.fir 281986:4]
    node get_acquire_a_mask_acc_3 = or(get_acquire_a_mask_acc, _get_acquire_a_mask_acc_T_3) @[Misc.scala 214:29 chipyard.TestHarness.RocketConfig.fir 281987:4]
    node get_acquire_a_mask_eq_4 = and(get_acquire_a_mask_bit, get_acquire_a_mask_nbit_1) @[Misc.scala 213:27 chipyard.TestHarness.RocketConfig.fir 281988:4]
    node _get_acquire_a_mask_acc_T_4 = and(get_acquire_a_mask_size_1, get_acquire_a_mask_eq_4) @[Misc.scala 214:38 chipyard.TestHarness.RocketConfig.fir 281989:4]
    node get_acquire_a_mask_acc_4 = or(get_acquire_a_mask_acc_1, _get_acquire_a_mask_acc_T_4) @[Misc.scala 214:29 chipyard.TestHarness.RocketConfig.fir 281990:4]
    node get_acquire_a_mask_eq_5 = and(get_acquire_a_mask_bit, get_acquire_a_mask_bit_1) @[Misc.scala 213:27 chipyard.TestHarness.RocketConfig.fir 281991:4]
    node _get_acquire_a_mask_acc_T_5 = and(get_acquire_a_mask_size_1, get_acquire_a_mask_eq_5) @[Misc.scala 214:38 chipyard.TestHarness.RocketConfig.fir 281992:4]
    node get_acquire_a_mask_acc_5 = or(get_acquire_a_mask_acc_1, _get_acquire_a_mask_acc_T_5) @[Misc.scala 214:29 chipyard.TestHarness.RocketConfig.fir 281993:4]
    node get_acquire_a_mask_size_2 = bits(get_acquire_a_mask_sizeOH, 0, 0) @[Misc.scala 208:26 chipyard.TestHarness.RocketConfig.fir 281994:4]
    node get_acquire_a_mask_bit_2 = bits(get_acquire_address, 0, 0) @[Misc.scala 209:26 chipyard.TestHarness.RocketConfig.fir 281995:4]
    node get_acquire_a_mask_nbit_2 = not(get_acquire_a_mask_bit_2) @[Misc.scala 210:20 chipyard.TestHarness.RocketConfig.fir 281996:4]
    node get_acquire_a_mask_eq_6 = and(get_acquire_a_mask_eq_2, get_acquire_a_mask_nbit_2) @[Misc.scala 213:27 chipyard.TestHarness.RocketConfig.fir 281997:4]
    node _get_acquire_a_mask_acc_T_6 = and(get_acquire_a_mask_size_2, get_acquire_a_mask_eq_6) @[Misc.scala 214:38 chipyard.TestHarness.RocketConfig.fir 281998:4]
    node get_acquire_a_mask_lo_lo_lo = or(get_acquire_a_mask_acc_2, _get_acquire_a_mask_acc_T_6) @[Misc.scala 214:29 chipyard.TestHarness.RocketConfig.fir 281999:4]
    node get_acquire_a_mask_eq_7 = and(get_acquire_a_mask_eq_2, get_acquire_a_mask_bit_2) @[Misc.scala 213:27 chipyard.TestHarness.RocketConfig.fir 282000:4]
    node _get_acquire_a_mask_acc_T_7 = and(get_acquire_a_mask_size_2, get_acquire_a_mask_eq_7) @[Misc.scala 214:38 chipyard.TestHarness.RocketConfig.fir 282001:4]
    node get_acquire_a_mask_lo_lo_hi = or(get_acquire_a_mask_acc_2, _get_acquire_a_mask_acc_T_7) @[Misc.scala 214:29 chipyard.TestHarness.RocketConfig.fir 282002:4]
    node get_acquire_a_mask_eq_8 = and(get_acquire_a_mask_eq_3, get_acquire_a_mask_nbit_2) @[Misc.scala 213:27 chipyard.TestHarness.RocketConfig.fir 282003:4]
    node _get_acquire_a_mask_acc_T_8 = and(get_acquire_a_mask_size_2, get_acquire_a_mask_eq_8) @[Misc.scala 214:38 chipyard.TestHarness.RocketConfig.fir 282004:4]
    node get_acquire_a_mask_lo_hi_lo = or(get_acquire_a_mask_acc_3, _get_acquire_a_mask_acc_T_8) @[Misc.scala 214:29 chipyard.TestHarness.RocketConfig.fir 282005:4]
    node get_acquire_a_mask_eq_9 = and(get_acquire_a_mask_eq_3, get_acquire_a_mask_bit_2) @[Misc.scala 213:27 chipyard.TestHarness.RocketConfig.fir 282006:4]
    node _get_acquire_a_mask_acc_T_9 = and(get_acquire_a_mask_size_2, get_acquire_a_mask_eq_9) @[Misc.scala 214:38 chipyard.TestHarness.RocketConfig.fir 282007:4]
    node get_acquire_a_mask_lo_hi_hi = or(get_acquire_a_mask_acc_3, _get_acquire_a_mask_acc_T_9) @[Misc.scala 214:29 chipyard.TestHarness.RocketConfig.fir 282008:4]
    node get_acquire_a_mask_eq_10 = and(get_acquire_a_mask_eq_4, get_acquire_a_mask_nbit_2) @[Misc.scala 213:27 chipyard.TestHarness.RocketConfig.fir 282009:4]
    node _get_acquire_a_mask_acc_T_10 = and(get_acquire_a_mask_size_2, get_acquire_a_mask_eq_10) @[Misc.scala 214:38 chipyard.TestHarness.RocketConfig.fir 282010:4]
    node get_acquire_a_mask_hi_lo_lo = or(get_acquire_a_mask_acc_4, _get_acquire_a_mask_acc_T_10) @[Misc.scala 214:29 chipyard.TestHarness.RocketConfig.fir 282011:4]
    node get_acquire_a_mask_eq_11 = and(get_acquire_a_mask_eq_4, get_acquire_a_mask_bit_2) @[Misc.scala 213:27 chipyard.TestHarness.RocketConfig.fir 282012:4]
    node _get_acquire_a_mask_acc_T_11 = and(get_acquire_a_mask_size_2, get_acquire_a_mask_eq_11) @[Misc.scala 214:38 chipyard.TestHarness.RocketConfig.fir 282013:4]
    node get_acquire_a_mask_hi_lo_hi = or(get_acquire_a_mask_acc_4, _get_acquire_a_mask_acc_T_11) @[Misc.scala 214:29 chipyard.TestHarness.RocketConfig.fir 282014:4]
    node get_acquire_a_mask_eq_12 = and(get_acquire_a_mask_eq_5, get_acquire_a_mask_nbit_2) @[Misc.scala 213:27 chipyard.TestHarness.RocketConfig.fir 282015:4]
    node _get_acquire_a_mask_acc_T_12 = and(get_acquire_a_mask_size_2, get_acquire_a_mask_eq_12) @[Misc.scala 214:38 chipyard.TestHarness.RocketConfig.fir 282016:4]
    node get_acquire_a_mask_hi_hi_lo = or(get_acquire_a_mask_acc_5, _get_acquire_a_mask_acc_T_12) @[Misc.scala 214:29 chipyard.TestHarness.RocketConfig.fir 282017:4]
    node get_acquire_a_mask_eq_13 = and(get_acquire_a_mask_eq_5, get_acquire_a_mask_bit_2) @[Misc.scala 213:27 chipyard.TestHarness.RocketConfig.fir 282018:4]
    node _get_acquire_a_mask_acc_T_13 = and(get_acquire_a_mask_size_2, get_acquire_a_mask_eq_13) @[Misc.scala 214:38 chipyard.TestHarness.RocketConfig.fir 282019:4]
    node get_acquire_a_mask_hi_hi_hi = or(get_acquire_a_mask_acc_5, _get_acquire_a_mask_acc_T_13) @[Misc.scala 214:29 chipyard.TestHarness.RocketConfig.fir 282020:4]
    node get_acquire_mask = cat(cat(cat(get_acquire_a_mask_hi_hi_hi, get_acquire_a_mask_hi_hi_lo), cat(get_acquire_a_mask_hi_lo_hi, get_acquire_a_mask_hi_lo_lo)), cat(cat(get_acquire_a_mask_lo_hi_hi, get_acquire_a_mask_lo_hi_lo), cat(get_acquire_a_mask_lo_lo_hi, get_acquire_a_mask_lo_lo_lo))) @[Cat.scala 30:58 chipyard.TestHarness.RocketConfig.fir 282027:4]
    node _bundleOut_0_a_valid_T = eq(state, UInt<4>("h7")) @[package.scala 15:47 chipyard.TestHarness.RocketConfig.fir 282031:4]
    node _bundleOut_0_a_valid_T_1 = eq(state, UInt<4>("h3")) @[package.scala 15:47 chipyard.TestHarness.RocketConfig.fir 282032:4]
    node get_acquire_size = pad(rsize, 4) @[Edges.scala 447:17 chipyard.TestHarness.RocketConfig.fir 281957:4 Edges.scala 450:15 chipyard.TestHarness.RocketConfig.fir 281961:4]
    node _bundleOut_0_d_ready_T = eq(state, UInt<4>("h8")) @[package.scala 15:47 chipyard.TestHarness.RocketConfig.fir 282051:4]
    node _bundleOut_0_d_ready_T_1 = eq(state, UInt<4>("h4")) @[package.scala 15:47 chipyard.TestHarness.RocketConfig.fir 282052:4]
    node _T_1 = and(_io_serial_in_ready_T, io_serial_in_valid) @[SerialAdapter.scala 138:25 chipyard.TestHarness.RocketConfig.fir 282059:4]
    node _GEN_3 = mux(_T_1, UInt<1>("h0"), idx) @[SerialAdapter.scala 138:48 chipyard.TestHarness.RocketConfig.fir 282060:4 SerialAdapter.scala 140:9 chipyard.TestHarness.RocketConfig.fir 282062:6 SerialAdapter.scala 91:16 chipyard.TestHarness.RocketConfig.fir 281596:4]
    node _GEN_4 = mux(_T_1, UInt<64>("h0"), addr) @[SerialAdapter.scala 138:48 chipyard.TestHarness.RocketConfig.fir 282060:4 SerialAdapter.scala 141:10 chipyard.TestHarness.RocketConfig.fir 282063:6 SerialAdapter.scala 87:17 chipyard.TestHarness.RocketConfig.fir 281592:4]
    node _GEN_5 = mux(_T_1, UInt<64>("h0"), len) @[SerialAdapter.scala 138:48 chipyard.TestHarness.RocketConfig.fir 282060:4 SerialAdapter.scala 142:9 chipyard.TestHarness.RocketConfig.fir 282064:6 SerialAdapter.scala 88:16 chipyard.TestHarness.RocketConfig.fir 281593:4]
    node _GEN_6 = mux(_T_1, UInt<4>("h1"), state) @[SerialAdapter.scala 138:48 chipyard.TestHarness.RocketConfig.fir 282060:4 SerialAdapter.scala 143:11 chipyard.TestHarness.RocketConfig.fir 282065:6 SerialAdapter.scala 97:22 chipyard.TestHarness.RocketConfig.fir 281597:4]
    node _T_3 = and(_io_serial_in_ready_T_1, io_serial_in_valid) @[SerialAdapter.scala 146:26 chipyard.TestHarness.RocketConfig.fir 282068:4]
    node _addr_T = cat(idx, UInt<5>("h0")) @[Cat.scala 30:58 chipyard.TestHarness.RocketConfig.fir 282071:6]
    node _GEN_59 = pad(io_serial_in_bits, 95) @[SerialAdapter.scala 132:12 chipyard.TestHarness.RocketConfig.fir 282072:6]
    node _addr_T_1 = dshlw(_GEN_59, _addr_T) @[SerialAdapter.scala 132:12 chipyard.TestHarness.RocketConfig.fir 282072:6]
    node _GEN_60 = pad(addr, 95) @[SerialAdapter.scala 147:18 chipyard.TestHarness.RocketConfig.fir 282073:6]
    node _addr_T_2 = or(_GEN_60, _addr_T_1) @[SerialAdapter.scala 147:18 chipyard.TestHarness.RocketConfig.fir 282073:6]
    node _idx_T = add(idx, UInt<1>("h1")) @[SerialAdapter.scala 148:16 chipyard.TestHarness.RocketConfig.fir 282075:6]
    node _idx_T_1 = tail(_idx_T, 1) @[SerialAdapter.scala 148:16 chipyard.TestHarness.RocketConfig.fir 282076:6]
    node _GEN_7 = mux(idx, UInt<1>("h0"), _idx_T_1) @[SerialAdapter.scala 149:43 chipyard.TestHarness.RocketConfig.fir 282079:6 SerialAdapter.scala 150:11 chipyard.TestHarness.RocketConfig.fir 282080:8 SerialAdapter.scala 148:9 chipyard.TestHarness.RocketConfig.fir 282077:6]
    node _GEN_8 = mux(idx, UInt<4>("h2"), _GEN_6) @[SerialAdapter.scala 149:43 chipyard.TestHarness.RocketConfig.fir 282079:6 SerialAdapter.scala 151:13 chipyard.TestHarness.RocketConfig.fir 282081:8]
    node _GEN_9 = mux(_T_3, _addr_T_2, pad(_GEN_4, 95)) @[SerialAdapter.scala 146:49 chipyard.TestHarness.RocketConfig.fir 282069:4 SerialAdapter.scala 147:10 chipyard.TestHarness.RocketConfig.fir 282074:6]
    node _GEN_10 = mux(_T_3, _GEN_7, _GEN_3) @[SerialAdapter.scala 146:49 chipyard.TestHarness.RocketConfig.fir 282069:4]
    node _GEN_11 = mux(_T_3, _GEN_8, _GEN_6) @[SerialAdapter.scala 146:49 chipyard.TestHarness.RocketConfig.fir 282069:4]
    node _T_6 = and(_io_serial_in_ready_T_2, io_serial_in_valid) @[SerialAdapter.scala 155:25 chipyard.TestHarness.RocketConfig.fir 282085:4]
    node _GEN_62 = pad(len, 95) @[SerialAdapter.scala 156:16 chipyard.TestHarness.RocketConfig.fir 282090:6]
    node _len_T_2 = or(_GEN_62, _addr_T_1) @[SerialAdapter.scala 156:16 chipyard.TestHarness.RocketConfig.fir 282090:6]
    node _idx_T_4 = bits(addr, 2, 2) @[SerialAdapter.scala 136:33 chipyard.TestHarness.RocketConfig.fir 282097:8]
    node _T_8 = eq(cmd, UInt<32>("h1")) @[SerialAdapter.scala 160:17 chipyard.TestHarness.RocketConfig.fir 282099:8]
    node _T_9 = eq(cmd, UInt<32>("h0")) @[SerialAdapter.scala 163:24 chipyard.TestHarness.RocketConfig.fir 282105:10]
    node _T_12 = not(reset) @[SerialAdapter.scala 166:15 chipyard.TestHarness.RocketConfig.fir 282112:12]
    node _GEN_12 = mux(_T_9, UInt<4>("h3"), _GEN_11) @[SerialAdapter.scala 163:38 chipyard.TestHarness.RocketConfig.fir 282106:10 SerialAdapter.scala 164:15 chipyard.TestHarness.RocketConfig.fir 282107:12]
    node _GEN_13 = mux(_T_8, UInt<2>("h0"), bodyValid) @[SerialAdapter.scala 160:32 chipyard.TestHarness.RocketConfig.fir 282100:8 SerialAdapter.scala 161:19 chipyard.TestHarness.RocketConfig.fir 282101:10 SerialAdapter.scala 90:22 chipyard.TestHarness.RocketConfig.fir 281595:4]
    node _GEN_14 = mux(_T_8, UInt<4>("h6"), _GEN_12) @[SerialAdapter.scala 160:32 chipyard.TestHarness.RocketConfig.fir 282100:8 SerialAdapter.scala 162:15 chipyard.TestHarness.RocketConfig.fir 282102:10]
    node _GEN_15 = mux(idx, _idx_T_4, _idx_T_1) @[SerialAdapter.scala 158:43 chipyard.TestHarness.RocketConfig.fir 282096:6 SerialAdapter.scala 159:11 chipyard.TestHarness.RocketConfig.fir 282098:8 SerialAdapter.scala 157:9 chipyard.TestHarness.RocketConfig.fir 282094:6]
    node _GEN_16 = mux(idx, _GEN_13, bodyValid) @[SerialAdapter.scala 158:43 chipyard.TestHarness.RocketConfig.fir 282096:6 SerialAdapter.scala 90:22 chipyard.TestHarness.RocketConfig.fir 281595:4]
    node _GEN_17 = mux(idx, _GEN_14, _GEN_11) @[SerialAdapter.scala 158:43 chipyard.TestHarness.RocketConfig.fir 282096:6]
    node _GEN_18 = mux(_T_6, _len_T_2, pad(_GEN_5, 95)) @[SerialAdapter.scala 155:48 chipyard.TestHarness.RocketConfig.fir 282086:4 SerialAdapter.scala 156:9 chipyard.TestHarness.RocketConfig.fir 282091:6]
    node _GEN_19 = mux(_T_6, _GEN_15, _GEN_10) @[SerialAdapter.scala 155:48 chipyard.TestHarness.RocketConfig.fir 282086:4]
    node _GEN_20 = mux(_T_6, _GEN_16, bodyValid) @[SerialAdapter.scala 155:48 chipyard.TestHarness.RocketConfig.fir 282086:4 SerialAdapter.scala 90:22 chipyard.TestHarness.RocketConfig.fir 281595:4]
    node _GEN_21 = mux(_T_6, _GEN_17, _GEN_11) @[SerialAdapter.scala 155:48 chipyard.TestHarness.RocketConfig.fir 282086:4]
    node _T_14 = and(_bundleOut_0_a_valid_T_1, auto_out_a_ready) @[SerialAdapter.scala 171:30 chipyard.TestHarness.RocketConfig.fir 282121:4]
    node _GEN_22 = mux(_T_14, UInt<4>("h4"), _GEN_21) @[SerialAdapter.scala 171:46 chipyard.TestHarness.RocketConfig.fir 282122:4 SerialAdapter.scala 172:11 chipyard.TestHarness.RocketConfig.fir 282123:6]
    node _T_16 = and(_bundleOut_0_d_ready_T_1, auto_out_d_valid) @[SerialAdapter.scala 175:31 chipyard.TestHarness.RocketConfig.fir 282126:4]
    node _T_17 = bits(auto_out_d_bits_data, 31, 0) @[SerialAdapter.scala 176:37 chipyard.TestHarness.RocketConfig.fir 282131:6]
    node _T_18 = bits(auto_out_d_bits_data, 63, 32) @[SerialAdapter.scala 176:37 chipyard.TestHarness.RocketConfig.fir 282133:6]
    node _GEN_23 = mux(_T_16, _T_17, body_0) @[SerialAdapter.scala 175:47 chipyard.TestHarness.RocketConfig.fir 282127:4 SerialAdapter.scala 176:10 chipyard.TestHarness.RocketConfig.fir 282135:6 SerialAdapter.scala 89:17 chipyard.TestHarness.RocketConfig.fir 281594:4]
    node _GEN_24 = mux(_T_16, _T_18, body_1) @[SerialAdapter.scala 175:47 chipyard.TestHarness.RocketConfig.fir 282127:4 SerialAdapter.scala 176:10 chipyard.TestHarness.RocketConfig.fir 282136:6 SerialAdapter.scala 89:17 chipyard.TestHarness.RocketConfig.fir 281594:4]
    node _GEN_25 = mux(_T_16, _idx_T_4, _GEN_19) @[SerialAdapter.scala 175:47 chipyard.TestHarness.RocketConfig.fir 282127:4 SerialAdapter.scala 177:9 chipyard.TestHarness.RocketConfig.fir 282138:6]
    node _GEN_26 = mux(_T_16, pad(nextAddr, 95), _GEN_9) @[SerialAdapter.scala 175:47 chipyard.TestHarness.RocketConfig.fir 282127:4 SerialAdapter.scala 178:10 chipyard.TestHarness.RocketConfig.fir 282139:6]
    node _GEN_27 = mux(_T_16, UInt<4>("h5"), _GEN_22) @[SerialAdapter.scala 175:47 chipyard.TestHarness.RocketConfig.fir 282127:4 SerialAdapter.scala 179:11 chipyard.TestHarness.RocketConfig.fir 282140:6]
    node _T_20 = and(_io_serial_out_valid_T, io_serial_out_ready) @[SerialAdapter.scala 182:31 chipyard.TestHarness.RocketConfig.fir 282143:4]
    node _len_T_3 = sub(len, UInt<64>("h1")) @[SerialAdapter.scala 184:16 chipyard.TestHarness.RocketConfig.fir 282148:6]
    node _len_T_4 = tail(_len_T_3, 1) @[SerialAdapter.scala 184:16 chipyard.TestHarness.RocketConfig.fir 282149:6]
    node _T_21 = eq(len, UInt<64>("h0")) @[SerialAdapter.scala 185:15 chipyard.TestHarness.RocketConfig.fir 282151:6]
    node _GEN_28 = mux(idx, UInt<4>("h3"), _GEN_27) @[SerialAdapter.scala 186:48 chipyard.TestHarness.RocketConfig.fir 282157:8 SerialAdapter.scala 186:56 chipyard.TestHarness.RocketConfig.fir 282158:10]
    node _GEN_29 = mux(_T_21, UInt<4>("h0"), _GEN_28) @[SerialAdapter.scala 185:24 chipyard.TestHarness.RocketConfig.fir 282152:6 SerialAdapter.scala 185:32 chipyard.TestHarness.RocketConfig.fir 282153:8]
    node _GEN_30 = mux(_T_20, _idx_T_1, _GEN_25) @[SerialAdapter.scala 182:55 chipyard.TestHarness.RocketConfig.fir 282144:4 SerialAdapter.scala 183:9 chipyard.TestHarness.RocketConfig.fir 282147:6]
    node _GEN_31 = mux(_T_20, pad(_len_T_4, 95), _GEN_18) @[SerialAdapter.scala 182:55 chipyard.TestHarness.RocketConfig.fir 282144:4 SerialAdapter.scala 184:9 chipyard.TestHarness.RocketConfig.fir 282150:6]
    node _GEN_32 = mux(_T_20, _GEN_29, _GEN_27) @[SerialAdapter.scala 182:55 chipyard.TestHarness.RocketConfig.fir 282144:4]
    node _T_24 = and(_io_serial_in_ready_T_3, io_serial_in_valid) @[SerialAdapter.scala 189:32 chipyard.TestHarness.RocketConfig.fir 282162:4]
    node _GEN_33 = mux(not(idx), io_serial_in_bits, _GEN_23) @[SerialAdapter.scala 190:15 chipyard.TestHarness.RocketConfig.fir 282164:6 SerialAdapter.scala 190:15 chipyard.TestHarness.RocketConfig.fir 282164:6]
    node _GEN_34 = mux(idx, io_serial_in_bits, _GEN_24) @[SerialAdapter.scala 190:15 chipyard.TestHarness.RocketConfig.fir 282164:6 SerialAdapter.scala 190:15 chipyard.TestHarness.RocketConfig.fir 282164:6]
    node _bodyValid_T = dshlw(UInt<2>("h1"), idx) @[OneHot.scala 58:35 chipyard.TestHarness.RocketConfig.fir 282165:6]
    node _bodyValid_T_1 = or(bodyValid, _bodyValid_T) @[SerialAdapter.scala 191:28 chipyard.TestHarness.RocketConfig.fir 282166:6]
    node _T_27 = or(idx, _T_21) @[SerialAdapter.scala 192:42 chipyard.TestHarness.RocketConfig.fir 282170:6]
    node _GEN_35 = mux(_T_27, UInt<4>("h7"), _GEN_32) @[SerialAdapter.scala 192:58 chipyard.TestHarness.RocketConfig.fir 282171:6 SerialAdapter.scala 193:13 chipyard.TestHarness.RocketConfig.fir 282172:8]
    node _GEN_36 = mux(_T_27, _GEN_30, _idx_T_1) @[SerialAdapter.scala 192:58 chipyard.TestHarness.RocketConfig.fir 282171:6 SerialAdapter.scala 195:11 chipyard.TestHarness.RocketConfig.fir 282177:8]
    node _GEN_37 = mux(_T_27, _GEN_31, pad(_len_T_4, 95)) @[SerialAdapter.scala 192:58 chipyard.TestHarness.RocketConfig.fir 282171:6 SerialAdapter.scala 196:11 chipyard.TestHarness.RocketConfig.fir 282180:8]
    node _GEN_40 = mux(_T_24, _bodyValid_T_1, _GEN_20) @[SerialAdapter.scala 189:55 chipyard.TestHarness.RocketConfig.fir 282163:4 SerialAdapter.scala 191:15 chipyard.TestHarness.RocketConfig.fir 282167:6]
    node _GEN_41 = mux(_T_24, _GEN_35, _GEN_32) @[SerialAdapter.scala 189:55 chipyard.TestHarness.RocketConfig.fir 282163:4]
    node _GEN_42 = mux(_T_24, _GEN_36, _GEN_30) @[SerialAdapter.scala 189:55 chipyard.TestHarness.RocketConfig.fir 282163:4]
    node _GEN_43 = mux(_T_24, _GEN_37, _GEN_31) @[SerialAdapter.scala 189:55 chipyard.TestHarness.RocketConfig.fir 282163:4]
    node _T_29 = and(_bundleOut_0_a_valid_T, auto_out_a_ready) @[SerialAdapter.scala 200:32 chipyard.TestHarness.RocketConfig.fir 282184:4]
    node _GEN_44 = mux(_T_29, UInt<4>("h8"), _GEN_41) @[SerialAdapter.scala 200:48 chipyard.TestHarness.RocketConfig.fir 282185:4 SerialAdapter.scala 201:11 chipyard.TestHarness.RocketConfig.fir 282186:6]
    node _T_31 = and(_bundleOut_0_d_ready_T, auto_out_d_valid) @[SerialAdapter.scala 204:31 chipyard.TestHarness.RocketConfig.fir 282189:4]
    node _GEN_45 = mux(_T_21, UInt<4>("h0"), UInt<4>("h6")) @[SerialAdapter.scala 205:24 chipyard.TestHarness.RocketConfig.fir 282192:6 SerialAdapter.scala 206:13 chipyard.TestHarness.RocketConfig.fir 282193:8 SerialAdapter.scala 212:13 chipyard.TestHarness.RocketConfig.fir 282202:8]
    node _GEN_46 = mux(_T_21, _GEN_26, pad(nextAddr, 95)) @[SerialAdapter.scala 205:24 chipyard.TestHarness.RocketConfig.fir 282192:6 SerialAdapter.scala 208:12 chipyard.TestHarness.RocketConfig.fir 282196:8]
    node _GEN_47 = mux(_T_21, _GEN_43, pad(_len_T_4, 95)) @[SerialAdapter.scala 205:24 chipyard.TestHarness.RocketConfig.fir 282192:6 SerialAdapter.scala 209:11 chipyard.TestHarness.RocketConfig.fir 282199:8]
    node _GEN_48 = and(_T_21, _GEN_42) @[SerialAdapter.scala 205:24 chipyard.TestHarness.RocketConfig.fir 282192:6 SerialAdapter.scala 210:11 chipyard.TestHarness.RocketConfig.fir 282200:8]
    node _GEN_49 = mux(_T_21, _GEN_40, UInt<2>("h0")) @[SerialAdapter.scala 205:24 chipyard.TestHarness.RocketConfig.fir 282192:6 SerialAdapter.scala 211:17 chipyard.TestHarness.RocketConfig.fir 282201:8]
    node _GEN_50 = mux(_T_31, _GEN_45, _GEN_44) @[SerialAdapter.scala 204:47 chipyard.TestHarness.RocketConfig.fir 282190:4]
    node _GEN_51 = mux(_T_31, _GEN_46, _GEN_26) @[SerialAdapter.scala 204:47 chipyard.TestHarness.RocketConfig.fir 282190:4]
    node _GEN_52 = mux(_T_31, _GEN_47, _GEN_43) @[SerialAdapter.scala 204:47 chipyard.TestHarness.RocketConfig.fir 282190:4]
    auto_out_a_valid <= or(_bundleOut_0_a_valid_T, _bundleOut_0_a_valid_T_1) @[package.scala 72:59 chipyard.TestHarness.RocketConfig.fir 282033:4]
    auto_out_a_bits_opcode <= mux(_bundleOut_0_a_valid_T, UInt<3>("h1"), UInt<3>("h4")) @[SerialAdapter.scala 124:20 chipyard.TestHarness.RocketConfig.fir 282036:4]
    auto_out_a_bits_size <= mux(_bundleOut_0_a_valid_T, UInt<4>("h3"), get_acquire_size) @[SerialAdapter.scala 124:20 chipyard.TestHarness.RocketConfig.fir 282036:4]
    auto_out_a_bits_address <= mux(_bundleOut_0_a_valid_T, put_acquire_address, get_acquire_address) @[SerialAdapter.scala 124:20 chipyard.TestHarness.RocketConfig.fir 282036:4]
    auto_out_a_bits_mask <= mux(_bundleOut_0_a_valid_T, wmask, get_acquire_mask) @[SerialAdapter.scala 124:20 chipyard.TestHarness.RocketConfig.fir 282036:4]
    auto_out_a_bits_data <= mux(_bundleOut_0_a_valid_T, put_acquire_data, UInt<64>("h0")) @[SerialAdapter.scala 124:20 chipyard.TestHarness.RocketConfig.fir 282036:4]
    auto_out_d_ready <= or(_bundleOut_0_d_ready_T, _bundleOut_0_d_ready_T_1) @[package.scala 72:59 chipyard.TestHarness.RocketConfig.fir 282053:4]
    io_serial_in_ready <= or(_io_serial_in_ready_T_5, _io_serial_in_ready_T_3) @[package.scala 72:59 chipyard.TestHarness.RocketConfig.fir 281604:4]
    io_serial_out_valid <= eq(state, UInt<4>("h5")) @[SerialAdapter.scala 100:32 chipyard.TestHarness.RocketConfig.fir 281606:4]
    io_serial_out_bits <= mux(idx, body_1, body_0) @[SerialAdapter.scala 101:22 chipyard.TestHarness.RocketConfig.fir 281608:4 SerialAdapter.scala 101:22 chipyard.TestHarness.RocketConfig.fir 281608:4]
    cmd <= mux(_T_1, io_serial_in_bits, cmd) @[SerialAdapter.scala 138:48 chipyard.TestHarness.RocketConfig.fir 282060:4 SerialAdapter.scala 139:9 chipyard.TestHarness.RocketConfig.fir 282061:6 SerialAdapter.scala 86:16 chipyard.TestHarness.RocketConfig.fir 281591:4]
    addr <= bits(_GEN_51, 63, 0)
    len <= bits(_GEN_52, 63, 0)
    body_0 <= mux(_T_24, _GEN_33, _GEN_23) @[SerialAdapter.scala 189:55 chipyard.TestHarness.RocketConfig.fir 282163:4]
    body_1 <= mux(_T_24, _GEN_34, _GEN_24) @[SerialAdapter.scala 189:55 chipyard.TestHarness.RocketConfig.fir 282163:4]
    bodyValid <= mux(_T_31, _GEN_49, _GEN_40) @[SerialAdapter.scala 204:47 chipyard.TestHarness.RocketConfig.fir 282190:4]
    idx <= mux(_T_31, _GEN_48, _GEN_42) @[SerialAdapter.scala 204:47 chipyard.TestHarness.RocketConfig.fir 282190:4]
    state <= mux(reset, UInt<4>("h0"), _GEN_50) @[SerialAdapter.scala 97:22 chipyard.TestHarness.RocketConfig.fir 281597:4 SerialAdapter.scala 97:22 chipyard.TestHarness.RocketConfig.fir 281597:4]
    node _GEN_63 = and(_T_6, idx) @[SerialAdapter.scala 166:15 chipyard.TestHarness.RocketConfig.fir 282114:14]
    node _GEN_64 = not(_T_8) @[SerialAdapter.scala 166:15 chipyard.TestHarness.RocketConfig.fir 282114:14]
    node _GEN_65 = and(_GEN_63, _GEN_64) @[SerialAdapter.scala 166:15 chipyard.TestHarness.RocketConfig.fir 282114:14]
    node _GEN_66 = not(_T_9) @[SerialAdapter.scala 166:15 chipyard.TestHarness.RocketConfig.fir 282114:14]
    node _GEN_67 = and(_GEN_65, _GEN_66) @[SerialAdapter.scala 166:15 chipyard.TestHarness.RocketConfig.fir 282114:14]
    printf(clock, and(_GEN_67, _T_12), "Assertion failed: Bad TSI command\n    at SerialAdapter.scala:166 assert(false.B, \"Bad TSI command\")\n") @[SerialAdapter.scala 166:15 chipyard.TestHarness.RocketConfig.fir 282114:14]
    stop(clock, and(_GEN_67, _T_12), 1) @[SerialAdapter.scala 166:15 chipyard.TestHarness.RocketConfig.fir 282115:14]

  module TLMonitor_53_inTestHarness : @[chipyard.TestHarness.RocketConfig.fir 282222:2]
    input clock : Clock @[chipyard.TestHarness.RocketConfig.fir 282223:4]
    input reset : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 282224:4]
    input io_in_a_ready : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 282225:4]
    input io_in_a_valid : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 282225:4]
    input io_in_a_bits_opcode : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 282225:4]
    input io_in_a_bits_param : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 282225:4]
    input io_in_a_bits_size : UInt<4> @[chipyard.TestHarness.RocketConfig.fir 282225:4]
    input io_in_a_bits_source : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 282225:4]
    input io_in_a_bits_address : UInt<32> @[chipyard.TestHarness.RocketConfig.fir 282225:4]
    input io_in_a_bits_mask : UInt<8> @[chipyard.TestHarness.RocketConfig.fir 282225:4]
    input io_in_a_bits_corrupt : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 282225:4]
    input io_in_d_ready : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 282225:4]
    input io_in_d_valid : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 282225:4]
    input io_in_d_bits_opcode : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 282225:4]
    input io_in_d_bits_param : UInt<2> @[chipyard.TestHarness.RocketConfig.fir 282225:4]
    input io_in_d_bits_size : UInt<4> @[chipyard.TestHarness.RocketConfig.fir 282225:4]
    input io_in_d_bits_source : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 282225:4]
    input io_in_d_bits_sink : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 282225:4]
    input io_in_d_bits_denied : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 282225:4]
    input io_in_d_bits_corrupt : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 282225:4]

    inst plusarg_reader of plusarg_reader @[PlusArg.scala 80:11 chipyard.TestHarness.RocketConfig.fir 284164:4]
    inst plusarg_reader_1 of plusarg_reader @[PlusArg.scala 80:11 chipyard.TestHarness.RocketConfig.fir 284471:4]
    node _source_ok_T = not(io_in_a_bits_source) @[Parameters.scala 46:9 chipyard.TestHarness.RocketConfig.fir 282236:6]
    node _is_aligned_mask_T_1 = dshlw(UInt<27>("hfff"), io_in_a_bits_size) @[package.scala 234:77 chipyard.TestHarness.RocketConfig.fir 282241:6]
    node _is_aligned_mask_T_2 = bits(_is_aligned_mask_T_1, 11, 0) @[package.scala 234:82 chipyard.TestHarness.RocketConfig.fir 282242:6]
    node is_aligned_mask = not(_is_aligned_mask_T_2) @[package.scala 234:46 chipyard.TestHarness.RocketConfig.fir 282243:6]
    node _GEN_71 = pad(is_aligned_mask, 32) @[Edges.scala 20:16 chipyard.TestHarness.RocketConfig.fir 282244:6]
    node _is_aligned_T = and(io_in_a_bits_address, _GEN_71) @[Edges.scala 20:16 chipyard.TestHarness.RocketConfig.fir 282244:6]
    node is_aligned = eq(_is_aligned_T, UInt<32>("h0")) @[Edges.scala 20:24 chipyard.TestHarness.RocketConfig.fir 282245:6]
    node mask_sizeOH_shiftAmount = bits(io_in_a_bits_size, 1, 0) @[OneHot.scala 64:49 chipyard.TestHarness.RocketConfig.fir 282247:6]
    node _mask_sizeOH_T_1 = dshlw(UInt<4>("h1"), mask_sizeOH_shiftAmount) @[OneHot.scala 65:12 chipyard.TestHarness.RocketConfig.fir 282248:6]
    node _mask_sizeOH_T_2 = bits(_mask_sizeOH_T_1, 2, 0) @[OneHot.scala 65:27 chipyard.TestHarness.RocketConfig.fir 282249:6]
    node mask_sizeOH = or(_mask_sizeOH_T_2, UInt<3>("h1")) @[Misc.scala 201:81 chipyard.TestHarness.RocketConfig.fir 282250:6]
    node _mask_T = geq(io_in_a_bits_size, UInt<4>("h3")) @[Misc.scala 205:21 chipyard.TestHarness.RocketConfig.fir 282251:6]
    node mask_size = bits(mask_sizeOH, 2, 2) @[Misc.scala 208:26 chipyard.TestHarness.RocketConfig.fir 282252:6]
    node mask_bit = bits(io_in_a_bits_address, 2, 2) @[Misc.scala 209:26 chipyard.TestHarness.RocketConfig.fir 282253:6]
    node mask_nbit = not(mask_bit) @[Misc.scala 210:20 chipyard.TestHarness.RocketConfig.fir 282254:6]
    node _mask_acc_T = and(mask_size, mask_nbit) @[Misc.scala 214:38 chipyard.TestHarness.RocketConfig.fir 282256:6]
    node mask_acc = or(_mask_T, _mask_acc_T) @[Misc.scala 214:29 chipyard.TestHarness.RocketConfig.fir 282257:6]
    node _mask_acc_T_1 = and(mask_size, mask_bit) @[Misc.scala 214:38 chipyard.TestHarness.RocketConfig.fir 282259:6]
    node mask_acc_1 = or(_mask_T, _mask_acc_T_1) @[Misc.scala 214:29 chipyard.TestHarness.RocketConfig.fir 282260:6]
    node mask_size_1 = bits(mask_sizeOH, 1, 1) @[Misc.scala 208:26 chipyard.TestHarness.RocketConfig.fir 282261:6]
    node mask_bit_1 = bits(io_in_a_bits_address, 1, 1) @[Misc.scala 209:26 chipyard.TestHarness.RocketConfig.fir 282262:6]
    node mask_nbit_1 = not(mask_bit_1) @[Misc.scala 210:20 chipyard.TestHarness.RocketConfig.fir 282263:6]
    node mask_eq_2 = and(mask_nbit, mask_nbit_1) @[Misc.scala 213:27 chipyard.TestHarness.RocketConfig.fir 282264:6]
    node _mask_acc_T_2 = and(mask_size_1, mask_eq_2) @[Misc.scala 214:38 chipyard.TestHarness.RocketConfig.fir 282265:6]
    node mask_acc_2 = or(mask_acc, _mask_acc_T_2) @[Misc.scala 214:29 chipyard.TestHarness.RocketConfig.fir 282266:6]
    node mask_eq_3 = and(mask_nbit, mask_bit_1) @[Misc.scala 213:27 chipyard.TestHarness.RocketConfig.fir 282267:6]
    node _mask_acc_T_3 = and(mask_size_1, mask_eq_3) @[Misc.scala 214:38 chipyard.TestHarness.RocketConfig.fir 282268:6]
    node mask_acc_3 = or(mask_acc, _mask_acc_T_3) @[Misc.scala 214:29 chipyard.TestHarness.RocketConfig.fir 282269:6]
    node mask_eq_4 = and(mask_bit, mask_nbit_1) @[Misc.scala 213:27 chipyard.TestHarness.RocketConfig.fir 282270:6]
    node _mask_acc_T_4 = and(mask_size_1, mask_eq_4) @[Misc.scala 214:38 chipyard.TestHarness.RocketConfig.fir 282271:6]
    node mask_acc_4 = or(mask_acc_1, _mask_acc_T_4) @[Misc.scala 214:29 chipyard.TestHarness.RocketConfig.fir 282272:6]
    node mask_eq_5 = and(mask_bit, mask_bit_1) @[Misc.scala 213:27 chipyard.TestHarness.RocketConfig.fir 282273:6]
    node _mask_acc_T_5 = and(mask_size_1, mask_eq_5) @[Misc.scala 214:38 chipyard.TestHarness.RocketConfig.fir 282274:6]
    node mask_acc_5 = or(mask_acc_1, _mask_acc_T_5) @[Misc.scala 214:29 chipyard.TestHarness.RocketConfig.fir 282275:6]
    node mask_size_2 = bits(mask_sizeOH, 0, 0) @[Misc.scala 208:26 chipyard.TestHarness.RocketConfig.fir 282276:6]
    node mask_bit_2 = bits(io_in_a_bits_address, 0, 0) @[Misc.scala 209:26 chipyard.TestHarness.RocketConfig.fir 282277:6]
    node mask_nbit_2 = not(mask_bit_2) @[Misc.scala 210:20 chipyard.TestHarness.RocketConfig.fir 282278:6]
    node mask_eq_6 = and(mask_eq_2, mask_nbit_2) @[Misc.scala 213:27 chipyard.TestHarness.RocketConfig.fir 282279:6]
    node _mask_acc_T_6 = and(mask_size_2, mask_eq_6) @[Misc.scala 214:38 chipyard.TestHarness.RocketConfig.fir 282280:6]
    node mask_lo_lo_lo = or(mask_acc_2, _mask_acc_T_6) @[Misc.scala 214:29 chipyard.TestHarness.RocketConfig.fir 282281:6]
    node mask_eq_7 = and(mask_eq_2, mask_bit_2) @[Misc.scala 213:27 chipyard.TestHarness.RocketConfig.fir 282282:6]
    node _mask_acc_T_7 = and(mask_size_2, mask_eq_7) @[Misc.scala 214:38 chipyard.TestHarness.RocketConfig.fir 282283:6]
    node mask_lo_lo_hi = or(mask_acc_2, _mask_acc_T_7) @[Misc.scala 214:29 chipyard.TestHarness.RocketConfig.fir 282284:6]
    node mask_eq_8 = and(mask_eq_3, mask_nbit_2) @[Misc.scala 213:27 chipyard.TestHarness.RocketConfig.fir 282285:6]
    node _mask_acc_T_8 = and(mask_size_2, mask_eq_8) @[Misc.scala 214:38 chipyard.TestHarness.RocketConfig.fir 282286:6]
    node mask_lo_hi_lo = or(mask_acc_3, _mask_acc_T_8) @[Misc.scala 214:29 chipyard.TestHarness.RocketConfig.fir 282287:6]
    node mask_eq_9 = and(mask_eq_3, mask_bit_2) @[Misc.scala 213:27 chipyard.TestHarness.RocketConfig.fir 282288:6]
    node _mask_acc_T_9 = and(mask_size_2, mask_eq_9) @[Misc.scala 214:38 chipyard.TestHarness.RocketConfig.fir 282289:6]
    node mask_lo_hi_hi = or(mask_acc_3, _mask_acc_T_9) @[Misc.scala 214:29 chipyard.TestHarness.RocketConfig.fir 282290:6]
    node mask_eq_10 = and(mask_eq_4, mask_nbit_2) @[Misc.scala 213:27 chipyard.TestHarness.RocketConfig.fir 282291:6]
    node _mask_acc_T_10 = and(mask_size_2, mask_eq_10) @[Misc.scala 214:38 chipyard.TestHarness.RocketConfig.fir 282292:6]
    node mask_hi_lo_lo = or(mask_acc_4, _mask_acc_T_10) @[Misc.scala 214:29 chipyard.TestHarness.RocketConfig.fir 282293:6]
    node mask_eq_11 = and(mask_eq_4, mask_bit_2) @[Misc.scala 213:27 chipyard.TestHarness.RocketConfig.fir 282294:6]
    node _mask_acc_T_11 = and(mask_size_2, mask_eq_11) @[Misc.scala 214:38 chipyard.TestHarness.RocketConfig.fir 282295:6]
    node mask_hi_lo_hi = or(mask_acc_4, _mask_acc_T_11) @[Misc.scala 214:29 chipyard.TestHarness.RocketConfig.fir 282296:6]
    node mask_eq_12 = and(mask_eq_5, mask_nbit_2) @[Misc.scala 213:27 chipyard.TestHarness.RocketConfig.fir 282297:6]
    node _mask_acc_T_12 = and(mask_size_2, mask_eq_12) @[Misc.scala 214:38 chipyard.TestHarness.RocketConfig.fir 282298:6]
    node mask_hi_hi_lo = or(mask_acc_5, _mask_acc_T_12) @[Misc.scala 214:29 chipyard.TestHarness.RocketConfig.fir 282299:6]
    node mask_eq_13 = and(mask_eq_5, mask_bit_2) @[Misc.scala 213:27 chipyard.TestHarness.RocketConfig.fir 282300:6]
    node _mask_acc_T_13 = and(mask_size_2, mask_eq_13) @[Misc.scala 214:38 chipyard.TestHarness.RocketConfig.fir 282301:6]
    node mask_hi_hi_hi = or(mask_acc_5, _mask_acc_T_13) @[Misc.scala 214:29 chipyard.TestHarness.RocketConfig.fir 282302:6]
    node mask = cat(cat(cat(mask_hi_hi_hi, mask_hi_hi_lo), cat(mask_hi_lo_hi, mask_hi_lo_lo)), cat(cat(mask_lo_hi_hi, mask_lo_hi_lo), cat(mask_lo_lo_hi, mask_lo_lo_lo))) @[Cat.scala 30:58 chipyard.TestHarness.RocketConfig.fir 282309:6]
    node _T_7 = cvt(io_in_a_bits_address) @[Parameters.scala 137:49 chipyard.TestHarness.RocketConfig.fir 282313:6]
    node _T_15 = eq(io_in_a_bits_opcode, UInt<3>("h6")) @[Monitor.scala 81:25 chipyard.TestHarness.RocketConfig.fir 282325:6]
    node _T_17 = leq(io_in_a_bits_size, UInt<4>("hc")) @[Parameters.scala 92:42 chipyard.TestHarness.RocketConfig.fir 282328:8]
    node _T_20 = and(_T_17, _source_ok_T) @[Parameters.scala 1160:30 chipyard.TestHarness.RocketConfig.fir 282331:8]
    node _T_25 = and(_T_7, SInt<33>("h-101000")) @[Parameters.scala 137:52 chipyard.TestHarness.RocketConfig.fir 282336:8]
    node _T_26 = asSInt(_T_25) @[Parameters.scala 137:52 chipyard.TestHarness.RocketConfig.fir 282337:8]
    node _T_27 = eq(_T_26, SInt<33>("h0")) @[Parameters.scala 137:67 chipyard.TestHarness.RocketConfig.fir 282338:8]
    node _T_28 = xor(io_in_a_bits_address, UInt<32>("h3000")) @[Parameters.scala 137:31 chipyard.TestHarness.RocketConfig.fir 282339:8]
    node _T_29 = cvt(_T_28) @[Parameters.scala 137:49 chipyard.TestHarness.RocketConfig.fir 282340:8]
    node _T_30 = and(_T_29, SInt<33>("h-1000")) @[Parameters.scala 137:52 chipyard.TestHarness.RocketConfig.fir 282341:8]
    node _T_31 = asSInt(_T_30) @[Parameters.scala 137:52 chipyard.TestHarness.RocketConfig.fir 282342:8]
    node _T_32 = eq(_T_31, SInt<33>("h0")) @[Parameters.scala 137:67 chipyard.TestHarness.RocketConfig.fir 282343:8]
    node _T_33 = xor(io_in_a_bits_address, UInt<32>("h10000")) @[Parameters.scala 137:31 chipyard.TestHarness.RocketConfig.fir 282344:8]
    node _T_34 = cvt(_T_33) @[Parameters.scala 137:49 chipyard.TestHarness.RocketConfig.fir 282345:8]
    node _T_35 = and(_T_34, SInt<33>("h-10000")) @[Parameters.scala 137:52 chipyard.TestHarness.RocketConfig.fir 282346:8]
    node _T_36 = asSInt(_T_35) @[Parameters.scala 137:52 chipyard.TestHarness.RocketConfig.fir 282347:8]
    node _T_37 = eq(_T_36, SInt<33>("h0")) @[Parameters.scala 137:67 chipyard.TestHarness.RocketConfig.fir 282348:8]
    node _T_38 = xor(io_in_a_bits_address, UInt<32>("h2000000")) @[Parameters.scala 137:31 chipyard.TestHarness.RocketConfig.fir 282349:8]
    node _T_39 = cvt(_T_38) @[Parameters.scala 137:49 chipyard.TestHarness.RocketConfig.fir 282350:8]
    node _T_40 = and(_T_39, SInt<33>("h-10000")) @[Parameters.scala 137:52 chipyard.TestHarness.RocketConfig.fir 282351:8]
    node _T_41 = asSInt(_T_40) @[Parameters.scala 137:52 chipyard.TestHarness.RocketConfig.fir 282352:8]
    node _T_42 = eq(_T_41, SInt<33>("h0")) @[Parameters.scala 137:67 chipyard.TestHarness.RocketConfig.fir 282353:8]
    node _T_43 = xor(io_in_a_bits_address, UInt<32>("h2010000")) @[Parameters.scala 137:31 chipyard.TestHarness.RocketConfig.fir 282354:8]
    node _T_44 = cvt(_T_43) @[Parameters.scala 137:49 chipyard.TestHarness.RocketConfig.fir 282355:8]
    node _T_45 = and(_T_44, SInt<33>("h-1000")) @[Parameters.scala 137:52 chipyard.TestHarness.RocketConfig.fir 282356:8]
    node _T_46 = asSInt(_T_45) @[Parameters.scala 137:52 chipyard.TestHarness.RocketConfig.fir 282357:8]
    node _T_47 = eq(_T_46, SInt<33>("h0")) @[Parameters.scala 137:67 chipyard.TestHarness.RocketConfig.fir 282358:8]
    node _T_48 = xor(io_in_a_bits_address, UInt<32>("hc000000")) @[Parameters.scala 137:31 chipyard.TestHarness.RocketConfig.fir 282359:8]
    node _T_49 = cvt(_T_48) @[Parameters.scala 137:49 chipyard.TestHarness.RocketConfig.fir 282360:8]
    node _T_50 = and(_T_49, SInt<33>("h-4000000")) @[Parameters.scala 137:52 chipyard.TestHarness.RocketConfig.fir 282361:8]
    node _T_51 = asSInt(_T_50) @[Parameters.scala 137:52 chipyard.TestHarness.RocketConfig.fir 282362:8]
    node _T_52 = eq(_T_51, SInt<33>("h0")) @[Parameters.scala 137:67 chipyard.TestHarness.RocketConfig.fir 282363:8]
    node _T_53 = xor(io_in_a_bits_address, UInt<32>("h54000000")) @[Parameters.scala 137:31 chipyard.TestHarness.RocketConfig.fir 282364:8]
    node _T_54 = cvt(_T_53) @[Parameters.scala 137:49 chipyard.TestHarness.RocketConfig.fir 282365:8]
    node _T_55 = and(_T_54, SInt<33>("h-1000")) @[Parameters.scala 137:52 chipyard.TestHarness.RocketConfig.fir 282366:8]
    node _T_56 = asSInt(_T_55) @[Parameters.scala 137:52 chipyard.TestHarness.RocketConfig.fir 282367:8]
    node _T_57 = eq(_T_56, SInt<33>("h0")) @[Parameters.scala 137:67 chipyard.TestHarness.RocketConfig.fir 282368:8]
    node _T_58 = or(_T_27, _T_32) @[Parameters.scala 671:42 chipyard.TestHarness.RocketConfig.fir 282369:8]
    node _T_65 = eq(UInt<4>("h6"), io_in_a_bits_size) @[Parameters.scala 91:48 chipyard.TestHarness.RocketConfig.fir 282376:8]
    node _T_67 = xor(io_in_a_bits_address, UInt<32>("h10000000")) @[Parameters.scala 137:31 chipyard.TestHarness.RocketConfig.fir 282378:8]
    node _T_68 = cvt(_T_67) @[Parameters.scala 137:49 chipyard.TestHarness.RocketConfig.fir 282379:8]
    node _T_69 = and(_T_68, SInt<33>("h-1000")) @[Parameters.scala 137:52 chipyard.TestHarness.RocketConfig.fir 282380:8]
    node _T_70 = asSInt(_T_69) @[Parameters.scala 137:52 chipyard.TestHarness.RocketConfig.fir 282381:8]
    node _T_71 = eq(_T_70, SInt<33>("h0")) @[Parameters.scala 137:67 chipyard.TestHarness.RocketConfig.fir 282382:8]
    node _T_72 = xor(io_in_a_bits_address, UInt<32>("h80000000")) @[Parameters.scala 137:31 chipyard.TestHarness.RocketConfig.fir 282383:8]
    node _T_73 = cvt(_T_72) @[Parameters.scala 137:49 chipyard.TestHarness.RocketConfig.fir 282384:8]
    node _T_74 = and(_T_73, SInt<33>("h-10000000")) @[Parameters.scala 137:52 chipyard.TestHarness.RocketConfig.fir 282385:8]
    node _T_75 = asSInt(_T_74) @[Parameters.scala 137:52 chipyard.TestHarness.RocketConfig.fir 282386:8]
    node _T_76 = eq(_T_75, SInt<33>("h0")) @[Parameters.scala 137:67 chipyard.TestHarness.RocketConfig.fir 282387:8]
    node _T_77 = or(_T_71, _T_76) @[Parameters.scala 671:42 chipyard.TestHarness.RocketConfig.fir 282388:8]
    node _T_78 = and(_T_65, _T_77) @[Parameters.scala 670:56 chipyard.TestHarness.RocketConfig.fir 282389:8]
    node _T_81 = and(_T_20, _T_78) @[Monitor.scala 82:72 chipyard.TestHarness.RocketConfig.fir 282392:8]
    node _T_83 = or(_T_81, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 282394:8]
    node _T_84 = not(_T_83) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 282395:8]
    node _T_147 = not(reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 282462:8]
    node _T_149 = or(_source_ok_T, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 282468:8]
    node _T_150 = not(_T_149) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 282469:8]
    node _T_153 = or(_mask_T, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 282476:8]
    node _T_154 = not(_T_153) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 282477:8]
    node _T_156 = or(is_aligned, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 282483:8]
    node _T_157 = not(_T_156) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 282484:8]
    node _T_158 = leq(io_in_a_bits_param, UInt<3>("h2")) @[Bundles.scala 108:27 chipyard.TestHarness.RocketConfig.fir 282489:8]
    node _T_160 = or(_T_158, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 282491:8]
    node _T_161 = not(_T_160) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 282492:8]
    node _T_162 = not(io_in_a_bits_mask) @[Monitor.scala 88:18 chipyard.TestHarness.RocketConfig.fir 282497:8]
    node _T_163 = eq(_T_162, UInt<8>("h0")) @[Monitor.scala 88:31 chipyard.TestHarness.RocketConfig.fir 282498:8]
    node _T_165 = or(_T_163, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 282500:8]
    node _T_166 = not(_T_165) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 282501:8]
    node _T_167 = not(io_in_a_bits_corrupt) @[Monitor.scala 89:18 chipyard.TestHarness.RocketConfig.fir 282506:8]
    node _T_169 = or(_T_167, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 282508:8]
    node _T_170 = not(_T_169) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 282509:8]
    node _T_171 = eq(io_in_a_bits_opcode, UInt<3>("h7")) @[Monitor.scala 92:25 chipyard.TestHarness.RocketConfig.fir 282515:6]
    node _T_318 = neq(io_in_a_bits_param, UInt<3>("h0")) @[Monitor.scala 99:31 chipyard.TestHarness.RocketConfig.fir 282687:8]
    node _T_320 = or(_T_318, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 282689:8]
    node _T_321 = not(_T_320) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 282690:8]
    node _T_331 = eq(io_in_a_bits_opcode, UInt<3>("h4")) @[Monitor.scala 104:25 chipyard.TestHarness.RocketConfig.fir 282713:6]
    node _T_339 = or(_T_20, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 282722:8]
    node _T_340 = not(_T_339) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 282723:8]
    node _T_350 = and(_T_17, _T_32) @[Parameters.scala 670:56 chipyard.TestHarness.RocketConfig.fir 282737:8]
    node _T_352 = leq(io_in_a_bits_size, UInt<4>("h6")) @[Parameters.scala 92:42 chipyard.TestHarness.RocketConfig.fir 282739:8]
    node _T_395 = or(_T_27, _T_37) @[Parameters.scala 671:42 chipyard.TestHarness.RocketConfig.fir 282782:8]
    node _T_396 = or(_T_395, _T_42) @[Parameters.scala 671:42 chipyard.TestHarness.RocketConfig.fir 282783:8]
    node _T_397 = or(_T_396, _T_47) @[Parameters.scala 671:42 chipyard.TestHarness.RocketConfig.fir 282784:8]
    node _T_398 = or(_T_397, _T_52) @[Parameters.scala 671:42 chipyard.TestHarness.RocketConfig.fir 282785:8]
    node _T_399 = or(_T_398, _T_71) @[Parameters.scala 671:42 chipyard.TestHarness.RocketConfig.fir 282786:8]
    node _T_400 = or(_T_399, _T_57) @[Parameters.scala 671:42 chipyard.TestHarness.RocketConfig.fir 282787:8]
    node _T_401 = or(_T_400, _T_76) @[Parameters.scala 671:42 chipyard.TestHarness.RocketConfig.fir 282788:8]
    node _T_402 = and(_T_352, _T_401) @[Parameters.scala 670:56 chipyard.TestHarness.RocketConfig.fir 282789:8]
    node _T_404 = or(_T_350, _T_402) @[Parameters.scala 672:30 chipyard.TestHarness.RocketConfig.fir 282791:8]
    node _T_406 = or(_T_404, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 282793:8]
    node _T_407 = not(_T_406) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 282794:8]
    node _T_414 = eq(io_in_a_bits_param, UInt<3>("h0")) @[Monitor.scala 109:31 chipyard.TestHarness.RocketConfig.fir 282813:8]
    node _T_416 = or(_T_414, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 282815:8]
    node _T_417 = not(_T_416) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 282816:8]
    node _T_418 = eq(io_in_a_bits_mask, mask) @[Monitor.scala 110:30 chipyard.TestHarness.RocketConfig.fir 282821:8]
    node _T_420 = or(_T_418, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 282823:8]
    node _T_421 = not(_T_420) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 282824:8]
    node _T_426 = eq(io_in_a_bits_opcode, UInt<3>("h0")) @[Monitor.scala 114:25 chipyard.TestHarness.RocketConfig.fir 282838:6]
    node _T_482 = or(_T_27, _T_42) @[Parameters.scala 671:42 chipyard.TestHarness.RocketConfig.fir 282895:8]
    node _T_483 = or(_T_482, _T_47) @[Parameters.scala 671:42 chipyard.TestHarness.RocketConfig.fir 282896:8]
    node _T_484 = or(_T_483, _T_52) @[Parameters.scala 671:42 chipyard.TestHarness.RocketConfig.fir 282897:8]
    node _T_485 = or(_T_484, _T_71) @[Parameters.scala 671:42 chipyard.TestHarness.RocketConfig.fir 282898:8]
    node _T_486 = or(_T_485, _T_57) @[Parameters.scala 671:42 chipyard.TestHarness.RocketConfig.fir 282899:8]
    node _T_487 = or(_T_486, _T_76) @[Parameters.scala 671:42 chipyard.TestHarness.RocketConfig.fir 282900:8]
    node _T_488 = and(_T_352, _T_487) @[Parameters.scala 670:56 chipyard.TestHarness.RocketConfig.fir 282901:8]
    node _T_497 = or(_T_350, _T_488) @[Parameters.scala 672:30 chipyard.TestHarness.RocketConfig.fir 282910:8]
    node _T_499 = and(_T_20, _T_497) @[Monitor.scala 115:71 chipyard.TestHarness.RocketConfig.fir 282912:8]
    node _T_501 = or(_T_499, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 282914:8]
    node _T_502 = not(_T_501) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 282915:8]
    node _T_517 = eq(io_in_a_bits_opcode, UInt<3>("h1")) @[Monitor.scala 122:25 chipyard.TestHarness.RocketConfig.fir 282951:6]
    node _T_604 = not(mask) @[Monitor.scala 127:33 chipyard.TestHarness.RocketConfig.fir 283055:8]
    node _T_605 = and(io_in_a_bits_mask, _T_604) @[Monitor.scala 127:31 chipyard.TestHarness.RocketConfig.fir 283056:8]
    node _T_606 = eq(_T_605, UInt<8>("h0")) @[Monitor.scala 127:40 chipyard.TestHarness.RocketConfig.fir 283057:8]
    node _T_608 = or(_T_606, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 283059:8]
    node _T_609 = not(_T_608) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 283060:8]
    node _T_610 = eq(io_in_a_bits_opcode, UInt<3>("h2")) @[Monitor.scala 130:25 chipyard.TestHarness.RocketConfig.fir 283066:6]
    node _T_618 = leq(io_in_a_bits_size, UInt<4>("h3")) @[Parameters.scala 92:42 chipyard.TestHarness.RocketConfig.fir 283075:8]
    node _T_662 = or(_T_58, _T_42) @[Parameters.scala 671:42 chipyard.TestHarness.RocketConfig.fir 283119:8]
    node _T_663 = or(_T_662, _T_47) @[Parameters.scala 671:42 chipyard.TestHarness.RocketConfig.fir 283120:8]
    node _T_664 = or(_T_663, _T_52) @[Parameters.scala 671:42 chipyard.TestHarness.RocketConfig.fir 283121:8]
    node _T_665 = or(_T_664, _T_71) @[Parameters.scala 671:42 chipyard.TestHarness.RocketConfig.fir 283122:8]
    node _T_666 = or(_T_665, _T_57) @[Parameters.scala 671:42 chipyard.TestHarness.RocketConfig.fir 283123:8]
    node _T_667 = or(_T_666, _T_76) @[Parameters.scala 671:42 chipyard.TestHarness.RocketConfig.fir 283124:8]
    node _T_668 = and(_T_618, _T_667) @[Parameters.scala 670:56 chipyard.TestHarness.RocketConfig.fir 283125:8]
    node _T_678 = and(_T_20, _T_668) @[Monitor.scala 131:74 chipyard.TestHarness.RocketConfig.fir 283135:8]
    node _T_680 = or(_T_678, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 283137:8]
    node _T_681 = not(_T_680) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 283138:8]
    node _T_688 = leq(io_in_a_bits_param, UInt<3>("h4")) @[Bundles.scala 138:33 chipyard.TestHarness.RocketConfig.fir 283157:8]
    node _T_690 = or(_T_688, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 283159:8]
    node _T_691 = not(_T_690) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 283160:8]
    node _T_696 = eq(io_in_a_bits_opcode, UInt<3>("h3")) @[Monitor.scala 138:25 chipyard.TestHarness.RocketConfig.fir 283174:6]
    node _T_774 = leq(io_in_a_bits_param, UInt<3>("h3")) @[Bundles.scala 145:30 chipyard.TestHarness.RocketConfig.fir 283265:8]
    node _T_776 = or(_T_774, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 283267:8]
    node _T_777 = not(_T_776) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 283268:8]
    node _T_782 = eq(io_in_a_bits_opcode, UInt<3>("h5")) @[Monitor.scala 146:25 chipyard.TestHarness.RocketConfig.fir 283282:6]
    node _T_851 = and(_T_352, _T_77) @[Parameters.scala 670:56 chipyard.TestHarness.RocketConfig.fir 283352:8]
    node _T_854 = or(_T_350, _T_851) @[Parameters.scala 672:30 chipyard.TestHarness.RocketConfig.fir 283355:8]
    node _T_855 = and(_T_20, _T_854) @[Monitor.scala 147:68 chipyard.TestHarness.RocketConfig.fir 283356:8]
    node _T_857 = or(_T_855, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 283358:8]
    node _T_858 = not(_T_857) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 283359:8]
    node _T_865 = leq(io_in_a_bits_param, UInt<3>("h1")) @[Bundles.scala 158:28 chipyard.TestHarness.RocketConfig.fir 283378:8]
    node _T_867 = or(_T_865, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 283380:8]
    node _T_868 = not(_T_867) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 283381:8]
    node _T_877 = leq(io_in_d_bits_opcode, UInt<3>("h6")) @[Bundles.scala 42:24 chipyard.TestHarness.RocketConfig.fir 283405:6]
    node _T_879 = or(_T_877, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283407:6]
    node _T_880 = not(_T_879) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283408:6]
    node _source_ok_T_1 = not(io_in_d_bits_source) @[Parameters.scala 46:9 chipyard.TestHarness.RocketConfig.fir 283413:6]
    node _T_881 = eq(io_in_d_bits_opcode, UInt<3>("h6")) @[Monitor.scala 310:25 chipyard.TestHarness.RocketConfig.fir 283418:6]
    node _T_883 = or(_source_ok_T_1, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283421:8]
    node _T_884 = not(_T_883) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283422:8]
    node _T_885 = geq(io_in_d_bits_size, UInt<4>("h3")) @[Monitor.scala 312:27 chipyard.TestHarness.RocketConfig.fir 283427:8]
    node _T_887 = or(_T_885, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283429:8]
    node _T_888 = not(_T_887) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283430:8]
    node _T_889 = eq(io_in_d_bits_param, UInt<2>("h0")) @[Monitor.scala 313:28 chipyard.TestHarness.RocketConfig.fir 283435:8]
    node _T_891 = or(_T_889, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283437:8]
    node _T_892 = not(_T_891) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283438:8]
    node _T_893 = not(io_in_d_bits_corrupt) @[Monitor.scala 314:15 chipyard.TestHarness.RocketConfig.fir 283443:8]
    node _T_895 = or(_T_893, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283445:8]
    node _T_896 = not(_T_895) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283446:8]
    node _T_897 = not(io_in_d_bits_denied) @[Monitor.scala 315:15 chipyard.TestHarness.RocketConfig.fir 283451:8]
    node _T_899 = or(_T_897, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283453:8]
    node _T_900 = not(_T_899) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283454:8]
    node _T_901 = eq(io_in_d_bits_opcode, UInt<3>("h4")) @[Monitor.scala 318:25 chipyard.TestHarness.RocketConfig.fir 283460:6]
    node _T_912 = leq(io_in_d_bits_param, UInt<2>("h2")) @[Bundles.scala 102:26 chipyard.TestHarness.RocketConfig.fir 283484:8]
    node _T_914 = or(_T_912, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283486:8]
    node _T_915 = not(_T_914) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283487:8]
    node _T_916 = neq(io_in_d_bits_param, UInt<2>("h2")) @[Monitor.scala 323:28 chipyard.TestHarness.RocketConfig.fir 283492:8]
    node _T_918 = or(_T_916, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283494:8]
    node _T_919 = not(_T_918) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283495:8]
    node _T_929 = eq(io_in_d_bits_opcode, UInt<3>("h5")) @[Monitor.scala 328:25 chipyard.TestHarness.RocketConfig.fir 283518:6]
    node _T_949 = or(_T_897, io_in_d_bits_corrupt) @[Monitor.scala 334:30 chipyard.TestHarness.RocketConfig.fir 283559:8]
    node _T_951 = or(_T_949, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283561:8]
    node _T_952 = not(_T_951) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283562:8]
    node _T_958 = eq(io_in_d_bits_opcode, UInt<3>("h0")) @[Monitor.scala 338:25 chipyard.TestHarness.RocketConfig.fir 283577:6]
    node _T_975 = eq(io_in_d_bits_opcode, UInt<3>("h1")) @[Monitor.scala 346:25 chipyard.TestHarness.RocketConfig.fir 283612:6]
    node _T_993 = eq(io_in_d_bits_opcode, UInt<3>("h2")) @[Monitor.scala 354:25 chipyard.TestHarness.RocketConfig.fir 283648:6]
    node _a_first_T = and(io_in_a_ready, io_in_a_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.RocketConfig.fir 283714:4]
    node a_first_beats1_decode = shr(is_aligned_mask, 3) @[Edges.scala 219:59 chipyard.TestHarness.RocketConfig.fir 283719:4]
    node _a_first_beats1_opdata_T = bits(io_in_a_bits_opcode, 2, 2) @[Edges.scala 91:37 chipyard.TestHarness.RocketConfig.fir 283720:4]
    node a_first_beats1_opdata = not(_a_first_beats1_opdata_T) @[Edges.scala 91:28 chipyard.TestHarness.RocketConfig.fir 283721:4]
    node a_first_beats1 = mux(a_first_beats1_opdata, a_first_beats1_decode, UInt<9>("h0")) @[Edges.scala 220:14 chipyard.TestHarness.RocketConfig.fir 283722:4]
    reg a_first_counter : UInt<9>, clock with :
      reset => (UInt<1>("h0"), a_first_counter) @[Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 283723:4]
    node _a_first_counter1_T = sub(a_first_counter, UInt<9>("h1")) @[Edges.scala 229:28 chipyard.TestHarness.RocketConfig.fir 283724:4]
    node a_first_counter1 = tail(_a_first_counter1_T, 1) @[Edges.scala 229:28 chipyard.TestHarness.RocketConfig.fir 283725:4]
    node a_first = eq(a_first_counter, UInt<9>("h0")) @[Edges.scala 230:25 chipyard.TestHarness.RocketConfig.fir 283726:4]
    node _a_first_counter_T = mux(a_first, a_first_beats1, a_first_counter1) @[Edges.scala 235:21 chipyard.TestHarness.RocketConfig.fir 283734:6]
    node _GEN_0 = mux(_a_first_T, _a_first_counter_T, a_first_counter) @[Edges.scala 234:17 chipyard.TestHarness.RocketConfig.fir 283733:4 Edges.scala 235:15 chipyard.TestHarness.RocketConfig.fir 283735:6 Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 283723:4]
    reg opcode : UInt<3>, clock with :
      reset => (UInt<1>("h0"), opcode) @[Monitor.scala 384:22 chipyard.TestHarness.RocketConfig.fir 283737:4]
    reg param : UInt<3>, clock with :
      reset => (UInt<1>("h0"), param) @[Monitor.scala 385:22 chipyard.TestHarness.RocketConfig.fir 283738:4]
    reg size : UInt<4>, clock with :
      reset => (UInt<1>("h0"), size) @[Monitor.scala 386:22 chipyard.TestHarness.RocketConfig.fir 283739:4]
    reg source : UInt<1>, clock with :
      reset => (UInt<1>("h0"), source) @[Monitor.scala 387:22 chipyard.TestHarness.RocketConfig.fir 283740:4]
    reg address : UInt<32>, clock with :
      reset => (UInt<1>("h0"), address) @[Monitor.scala 388:22 chipyard.TestHarness.RocketConfig.fir 283741:4]
    node _T_1022 = not(a_first) @[Monitor.scala 389:22 chipyard.TestHarness.RocketConfig.fir 283742:4]
    node _T_1023 = and(io_in_a_valid, _T_1022) @[Monitor.scala 389:19 chipyard.TestHarness.RocketConfig.fir 283743:4]
    node _T_1024 = eq(io_in_a_bits_opcode, opcode) @[Monitor.scala 390:32 chipyard.TestHarness.RocketConfig.fir 283745:6]
    node _T_1026 = or(_T_1024, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 283747:6]
    node _T_1027 = not(_T_1026) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 283748:6]
    node _T_1028 = eq(io_in_a_bits_param, param) @[Monitor.scala 391:32 chipyard.TestHarness.RocketConfig.fir 283753:6]
    node _T_1030 = or(_T_1028, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 283755:6]
    node _T_1031 = not(_T_1030) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 283756:6]
    node _T_1032 = eq(io_in_a_bits_size, size) @[Monitor.scala 392:32 chipyard.TestHarness.RocketConfig.fir 283761:6]
    node _T_1034 = or(_T_1032, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 283763:6]
    node _T_1035 = not(_T_1034) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 283764:6]
    node _T_1036 = eq(io_in_a_bits_source, source) @[Monitor.scala 393:32 chipyard.TestHarness.RocketConfig.fir 283769:6]
    node _T_1038 = or(_T_1036, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 283771:6]
    node _T_1039 = not(_T_1038) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 283772:6]
    node _T_1040 = eq(io_in_a_bits_address, address) @[Monitor.scala 394:32 chipyard.TestHarness.RocketConfig.fir 283777:6]
    node _T_1042 = or(_T_1040, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 283779:6]
    node _T_1043 = not(_T_1042) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 283780:6]
    node _T_1045 = and(_a_first_T, a_first) @[Monitor.scala 396:20 chipyard.TestHarness.RocketConfig.fir 283787:4]
    node _d_first_T = and(io_in_d_ready, io_in_d_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.RocketConfig.fir 283795:4]
    node _d_first_beats1_decode_T_1 = dshlw(UInt<27>("hfff"), io_in_d_bits_size) @[package.scala 234:77 chipyard.TestHarness.RocketConfig.fir 283797:4]
    node _d_first_beats1_decode_T_2 = bits(_d_first_beats1_decode_T_1, 11, 0) @[package.scala 234:82 chipyard.TestHarness.RocketConfig.fir 283798:4]
    node _d_first_beats1_decode_T_3 = not(_d_first_beats1_decode_T_2) @[package.scala 234:46 chipyard.TestHarness.RocketConfig.fir 283799:4]
    node d_first_beats1_decode = shr(_d_first_beats1_decode_T_3, 3) @[Edges.scala 219:59 chipyard.TestHarness.RocketConfig.fir 283800:4]
    node d_first_beats1_opdata = bits(io_in_d_bits_opcode, 0, 0) @[Edges.scala 105:36 chipyard.TestHarness.RocketConfig.fir 283801:4]
    node d_first_beats1 = mux(d_first_beats1_opdata, d_first_beats1_decode, UInt<9>("h0")) @[Edges.scala 220:14 chipyard.TestHarness.RocketConfig.fir 283802:4]
    reg d_first_counter : UInt<9>, clock with :
      reset => (UInt<1>("h0"), d_first_counter) @[Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 283803:4]
    node _d_first_counter1_T = sub(d_first_counter, UInt<9>("h1")) @[Edges.scala 229:28 chipyard.TestHarness.RocketConfig.fir 283804:4]
    node d_first_counter1 = tail(_d_first_counter1_T, 1) @[Edges.scala 229:28 chipyard.TestHarness.RocketConfig.fir 283805:4]
    node d_first = eq(d_first_counter, UInt<9>("h0")) @[Edges.scala 230:25 chipyard.TestHarness.RocketConfig.fir 283806:4]
    node _d_first_counter_T = mux(d_first, d_first_beats1, d_first_counter1) @[Edges.scala 235:21 chipyard.TestHarness.RocketConfig.fir 283814:6]
    node _GEN_6 = mux(_d_first_T, _d_first_counter_T, d_first_counter) @[Edges.scala 234:17 chipyard.TestHarness.RocketConfig.fir 283813:4 Edges.scala 235:15 chipyard.TestHarness.RocketConfig.fir 283815:6 Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 283803:4]
    reg opcode_1 : UInt<3>, clock with :
      reset => (UInt<1>("h0"), opcode_1) @[Monitor.scala 535:22 chipyard.TestHarness.RocketConfig.fir 283817:4]
    reg param_1 : UInt<2>, clock with :
      reset => (UInt<1>("h0"), param_1) @[Monitor.scala 536:22 chipyard.TestHarness.RocketConfig.fir 283818:4]
    reg size_1 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), size_1) @[Monitor.scala 537:22 chipyard.TestHarness.RocketConfig.fir 283819:4]
    reg source_1 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), source_1) @[Monitor.scala 538:22 chipyard.TestHarness.RocketConfig.fir 283820:4]
    reg sink : UInt<3>, clock with :
      reset => (UInt<1>("h0"), sink) @[Monitor.scala 539:22 chipyard.TestHarness.RocketConfig.fir 283821:4]
    reg denied : UInt<1>, clock with :
      reset => (UInt<1>("h0"), denied) @[Monitor.scala 540:22 chipyard.TestHarness.RocketConfig.fir 283822:4]
    node _T_1046 = not(d_first) @[Monitor.scala 541:22 chipyard.TestHarness.RocketConfig.fir 283823:4]
    node _T_1047 = and(io_in_d_valid, _T_1046) @[Monitor.scala 541:19 chipyard.TestHarness.RocketConfig.fir 283824:4]
    node _T_1048 = eq(io_in_d_bits_opcode, opcode_1) @[Monitor.scala 542:29 chipyard.TestHarness.RocketConfig.fir 283826:6]
    node _T_1050 = or(_T_1048, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283828:6]
    node _T_1051 = not(_T_1050) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283829:6]
    node _T_1052 = eq(io_in_d_bits_param, param_1) @[Monitor.scala 543:29 chipyard.TestHarness.RocketConfig.fir 283834:6]
    node _T_1054 = or(_T_1052, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283836:6]
    node _T_1055 = not(_T_1054) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283837:6]
    node _T_1056 = eq(io_in_d_bits_size, size_1) @[Monitor.scala 544:29 chipyard.TestHarness.RocketConfig.fir 283842:6]
    node _T_1058 = or(_T_1056, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283844:6]
    node _T_1059 = not(_T_1058) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283845:6]
    node _T_1060 = eq(io_in_d_bits_source, source_1) @[Monitor.scala 545:29 chipyard.TestHarness.RocketConfig.fir 283850:6]
    node _T_1062 = or(_T_1060, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283852:6]
    node _T_1063 = not(_T_1062) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283853:6]
    node _T_1064 = eq(io_in_d_bits_sink, sink) @[Monitor.scala 546:29 chipyard.TestHarness.RocketConfig.fir 283858:6]
    node _T_1066 = or(_T_1064, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283860:6]
    node _T_1067 = not(_T_1066) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283861:6]
    node _T_1068 = eq(io_in_d_bits_denied, denied) @[Monitor.scala 547:29 chipyard.TestHarness.RocketConfig.fir 283866:6]
    node _T_1070 = or(_T_1068, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283868:6]
    node _T_1071 = not(_T_1070) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283869:6]
    node _T_1073 = and(_d_first_T, d_first) @[Monitor.scala 549:20 chipyard.TestHarness.RocketConfig.fir 283876:4]
    reg inflight : UInt<1>, clock with :
      reset => (UInt<1>("h0"), inflight) @[Monitor.scala 611:27 chipyard.TestHarness.RocketConfig.fir 283885:4]
    reg inflight_opcodes : UInt<4>, clock with :
      reset => (UInt<1>("h0"), inflight_opcodes) @[Monitor.scala 613:35 chipyard.TestHarness.RocketConfig.fir 283886:4]
    reg inflight_sizes : UInt<8>, clock with :
      reset => (UInt<1>("h0"), inflight_sizes) @[Monitor.scala 615:33 chipyard.TestHarness.RocketConfig.fir 283887:4]
    reg a_first_counter_1 : UInt<9>, clock with :
      reset => (UInt<1>("h0"), a_first_counter_1) @[Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 283897:4]
    node _a_first_counter1_T_1 = sub(a_first_counter_1, UInt<9>("h1")) @[Edges.scala 229:28 chipyard.TestHarness.RocketConfig.fir 283898:4]
    node a_first_counter1_1 = tail(_a_first_counter1_T_1, 1) @[Edges.scala 229:28 chipyard.TestHarness.RocketConfig.fir 283899:4]
    node a_first_1 = eq(a_first_counter_1, UInt<9>("h0")) @[Edges.scala 230:25 chipyard.TestHarness.RocketConfig.fir 283900:4]
    node _a_first_counter_T_1 = mux(a_first_1, a_first_beats1, a_first_counter1_1) @[Edges.scala 235:21 chipyard.TestHarness.RocketConfig.fir 283908:6]
    node _GEN_13 = mux(_a_first_T, _a_first_counter_T_1, a_first_counter_1) @[Edges.scala 234:17 chipyard.TestHarness.RocketConfig.fir 283907:4 Edges.scala 235:15 chipyard.TestHarness.RocketConfig.fir 283909:6 Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 283897:4]
    reg d_first_counter_1 : UInt<9>, clock with :
      reset => (UInt<1>("h0"), d_first_counter_1) @[Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 283919:4]
    node _d_first_counter1_T_1 = sub(d_first_counter_1, UInt<9>("h1")) @[Edges.scala 229:28 chipyard.TestHarness.RocketConfig.fir 283920:4]
    node d_first_counter1_1 = tail(_d_first_counter1_T_1, 1) @[Edges.scala 229:28 chipyard.TestHarness.RocketConfig.fir 283921:4]
    node d_first_1 = eq(d_first_counter_1, UInt<9>("h0")) @[Edges.scala 230:25 chipyard.TestHarness.RocketConfig.fir 283922:4]
    node _d_first_counter_T_1 = mux(d_first_1, d_first_beats1, d_first_counter1_1) @[Edges.scala 235:21 chipyard.TestHarness.RocketConfig.fir 283930:6]
    node _GEN_14 = mux(_d_first_T, _d_first_counter_T_1, d_first_counter_1) @[Edges.scala 234:17 chipyard.TestHarness.RocketConfig.fir 283929:4 Edges.scala 235:15 chipyard.TestHarness.RocketConfig.fir 283931:6 Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 283919:4]
    node _GEN_72 = shl(io_in_d_bits_source, 2) @[Monitor.scala 634:69 chipyard.TestHarness.RocketConfig.fir 283943:4]
    node _a_opcode_lookup_T = pad(_GEN_72, 4) @[Monitor.scala 634:69 chipyard.TestHarness.RocketConfig.fir 283943:4]
    node _a_opcode_lookup_T_1 = dshr(inflight_opcodes, _a_opcode_lookup_T) @[Monitor.scala 634:44 chipyard.TestHarness.RocketConfig.fir 283944:4]
    node _a_opcode_lookup_T_4 = sub(UInt<16>("h10"), UInt<16>("h1")) @[Monitor.scala 609:57 chipyard.TestHarness.RocketConfig.fir 283947:4]
    node _a_opcode_lookup_T_5 = tail(_a_opcode_lookup_T_4, 1) @[Monitor.scala 609:57 chipyard.TestHarness.RocketConfig.fir 283948:4]
    node _GEN_73 = pad(_a_opcode_lookup_T_1, 16) @[Monitor.scala 634:97 chipyard.TestHarness.RocketConfig.fir 283949:4]
    node _a_opcode_lookup_T_6 = and(_GEN_73, _a_opcode_lookup_T_5) @[Monitor.scala 634:97 chipyard.TestHarness.RocketConfig.fir 283949:4]
    node _GEN_74 = shr(_a_opcode_lookup_T_6, 1) @[Monitor.scala 634:152 chipyard.TestHarness.RocketConfig.fir 283950:4]
    node _a_opcode_lookup_T_7 = pad(_GEN_74, 16) @[Monitor.scala 634:152 chipyard.TestHarness.RocketConfig.fir 283950:4]
    node _a_size_lookup_T = shl(io_in_d_bits_source, 3) @[Monitor.scala 638:65 chipyard.TestHarness.RocketConfig.fir 283954:4]
    node _a_size_lookup_T_1 = dshr(inflight_sizes, _a_size_lookup_T) @[Monitor.scala 638:40 chipyard.TestHarness.RocketConfig.fir 283955:4]
    node _a_size_lookup_T_4 = sub(UInt<16>("h100"), UInt<16>("h1")) @[Monitor.scala 609:57 chipyard.TestHarness.RocketConfig.fir 283958:4]
    node _a_size_lookup_T_5 = tail(_a_size_lookup_T_4, 1) @[Monitor.scala 609:57 chipyard.TestHarness.RocketConfig.fir 283959:4]
    node _GEN_75 = pad(_a_size_lookup_T_1, 16) @[Monitor.scala 638:91 chipyard.TestHarness.RocketConfig.fir 283960:4]
    node _a_size_lookup_T_6 = and(_GEN_75, _a_size_lookup_T_5) @[Monitor.scala 638:91 chipyard.TestHarness.RocketConfig.fir 283960:4]
    node _GEN_76 = shr(_a_size_lookup_T_6, 1) @[Monitor.scala 638:144 chipyard.TestHarness.RocketConfig.fir 283961:4]
    node _a_size_lookup_T_7 = pad(_GEN_76, 16) @[Monitor.scala 638:144 chipyard.TestHarness.RocketConfig.fir 283961:4]
    node _T_1074 = and(io_in_a_valid, a_first_1) @[Monitor.scala 648:26 chipyard.TestHarness.RocketConfig.fir 283985:4]
    node _a_set_wo_ready_T = dshlw(UInt<2>("h1"), io_in_a_bits_source) @[OneHot.scala 58:35 chipyard.TestHarness.RocketConfig.fir 283988:6]
    node _GEN_15 = mux(_T_1074, _a_set_wo_ready_T, UInt<2>("h0")) @[Monitor.scala 648:71 chipyard.TestHarness.RocketConfig.fir 283987:4 Monitor.scala 649:22 chipyard.TestHarness.RocketConfig.fir 283989:6 chipyard.TestHarness.RocketConfig.fir 283936:4]
    node _T_1077 = and(_a_first_T, a_first_1) @[Monitor.scala 652:27 chipyard.TestHarness.RocketConfig.fir 283992:4]
    node _a_opcodes_set_interm_T = shl(io_in_a_bits_opcode, 1) @[Monitor.scala 654:53 chipyard.TestHarness.RocketConfig.fir 283997:6]
    node _a_opcodes_set_interm_T_1 = or(_a_opcodes_set_interm_T, UInt<4>("h1")) @[Monitor.scala 654:61 chipyard.TestHarness.RocketConfig.fir 283998:6]
    node _a_sizes_set_interm_T = shl(io_in_a_bits_size, 1) @[Monitor.scala 655:51 chipyard.TestHarness.RocketConfig.fir 284000:6]
    node _a_sizes_set_interm_T_1 = or(_a_sizes_set_interm_T, UInt<5>("h1")) @[Monitor.scala 655:59 chipyard.TestHarness.RocketConfig.fir 284001:6]
    node _GEN_77 = shl(io_in_a_bits_source, 2) @[Monitor.scala 656:79 chipyard.TestHarness.RocketConfig.fir 284003:6]
    node _a_opcodes_set_T = pad(_GEN_77, 4) @[Monitor.scala 656:79 chipyard.TestHarness.RocketConfig.fir 284003:6]
    node a_opcodes_set_interm = mux(_T_1077, _a_opcodes_set_interm_T_1, UInt<4>("h0")) @[Monitor.scala 652:72 chipyard.TestHarness.RocketConfig.fir 283994:4 Monitor.scala 654:28 chipyard.TestHarness.RocketConfig.fir 283999:6 chipyard.TestHarness.RocketConfig.fir 283982:4]
    node _GEN_78 = pad(a_opcodes_set_interm, 19) @[Monitor.scala 656:54 chipyard.TestHarness.RocketConfig.fir 284004:6]
    node _a_opcodes_set_T_1 = dshlw(_GEN_78, _a_opcodes_set_T) @[Monitor.scala 656:54 chipyard.TestHarness.RocketConfig.fir 284004:6]
    node _a_sizes_set_T = shl(io_in_a_bits_source, 3) @[Monitor.scala 657:77 chipyard.TestHarness.RocketConfig.fir 284006:6]
    node a_sizes_set_interm = mux(_T_1077, _a_sizes_set_interm_T_1, UInt<5>("h0")) @[Monitor.scala 652:72 chipyard.TestHarness.RocketConfig.fir 283994:4 Monitor.scala 655:28 chipyard.TestHarness.RocketConfig.fir 284002:6 chipyard.TestHarness.RocketConfig.fir 283984:4]
    node _GEN_79 = pad(a_sizes_set_interm, 20) @[Monitor.scala 657:52 chipyard.TestHarness.RocketConfig.fir 284007:6]
    node _a_sizes_set_T_1 = dshlw(_GEN_79, _a_sizes_set_T) @[Monitor.scala 657:52 chipyard.TestHarness.RocketConfig.fir 284007:6]
    node _T_1079 = dshr(inflight, io_in_a_bits_source) @[Monitor.scala 658:26 chipyard.TestHarness.RocketConfig.fir 284009:6]
    node _T_1081 = not(_T_1079) @[Monitor.scala 658:17 chipyard.TestHarness.RocketConfig.fir 284011:6]
    node _T_1083 = or(_T_1081, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 284013:6]
    node _T_1084 = not(_T_1083) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 284014:6]
    node _GEN_16 = mux(_T_1077, _a_set_wo_ready_T, UInt<2>("h0")) @[Monitor.scala 652:72 chipyard.TestHarness.RocketConfig.fir 283994:4 Monitor.scala 653:28 chipyard.TestHarness.RocketConfig.fir 283996:6 chipyard.TestHarness.RocketConfig.fir 283934:4]
    node _GEN_19 = mux(_T_1077, _a_opcodes_set_T_1, UInt<19>("h0")) @[Monitor.scala 652:72 chipyard.TestHarness.RocketConfig.fir 283994:4 Monitor.scala 656:28 chipyard.TestHarness.RocketConfig.fir 284005:6 chipyard.TestHarness.RocketConfig.fir 283938:4]
    node _GEN_20 = mux(_T_1077, _a_sizes_set_T_1, UInt<20>("h0")) @[Monitor.scala 652:72 chipyard.TestHarness.RocketConfig.fir 283994:4 Monitor.scala 657:28 chipyard.TestHarness.RocketConfig.fir 284008:6 chipyard.TestHarness.RocketConfig.fir 283940:4]
    node _T_1085 = and(io_in_d_valid, d_first_1) @[Monitor.scala 671:26 chipyard.TestHarness.RocketConfig.fir 284029:4]
    node _T_1087 = not(_T_881) @[Monitor.scala 671:74 chipyard.TestHarness.RocketConfig.fir 284031:4]
    node _T_1088 = and(_T_1085, _T_1087) @[Monitor.scala 671:71 chipyard.TestHarness.RocketConfig.fir 284032:4]
    node _d_clr_wo_ready_T = dshlw(UInt<2>("h1"), io_in_d_bits_source) @[OneHot.scala 58:35 chipyard.TestHarness.RocketConfig.fir 284034:6]
    node _GEN_21 = mux(_T_1088, _d_clr_wo_ready_T, UInt<2>("h0")) @[Monitor.scala 671:90 chipyard.TestHarness.RocketConfig.fir 284033:4 Monitor.scala 672:22 chipyard.TestHarness.RocketConfig.fir 284035:6 chipyard.TestHarness.RocketConfig.fir 284023:4]
    node _T_1090 = and(_d_first_T, d_first_1) @[Monitor.scala 675:27 chipyard.TestHarness.RocketConfig.fir 284038:4]
    node _T_1093 = and(_T_1090, _T_1087) @[Monitor.scala 675:72 chipyard.TestHarness.RocketConfig.fir 284041:4]
    node _GEN_81 = pad(_a_opcode_lookup_T_5, 31) @[Monitor.scala 677:76 chipyard.TestHarness.RocketConfig.fir 284050:6]
    node _d_opcodes_clr_T_5 = dshlw(_GEN_81, _a_opcode_lookup_T) @[Monitor.scala 677:76 chipyard.TestHarness.RocketConfig.fir 284050:6]
    node _GEN_82 = pad(_a_size_lookup_T_5, 31) @[Monitor.scala 678:74 chipyard.TestHarness.RocketConfig.fir 284057:6]
    node _d_sizes_clr_T_5 = dshlw(_GEN_82, _a_size_lookup_T) @[Monitor.scala 678:74 chipyard.TestHarness.RocketConfig.fir 284057:6]
    node _GEN_22 = mux(_T_1093, _d_clr_wo_ready_T, UInt<2>("h0")) @[Monitor.scala 675:91 chipyard.TestHarness.RocketConfig.fir 284042:4 Monitor.scala 676:21 chipyard.TestHarness.RocketConfig.fir 284044:6 chipyard.TestHarness.RocketConfig.fir 284021:4]
    node _GEN_23 = mux(_T_1093, _d_opcodes_clr_T_5, UInt<31>("h0")) @[Monitor.scala 675:91 chipyard.TestHarness.RocketConfig.fir 284042:4 Monitor.scala 677:21 chipyard.TestHarness.RocketConfig.fir 284051:6 chipyard.TestHarness.RocketConfig.fir 284025:4]
    node _GEN_24 = mux(_T_1093, _d_sizes_clr_T_5, UInt<31>("h0")) @[Monitor.scala 675:91 chipyard.TestHarness.RocketConfig.fir 284042:4 Monitor.scala 678:21 chipyard.TestHarness.RocketConfig.fir 284058:6 chipyard.TestHarness.RocketConfig.fir 284027:4]
    node _same_cycle_resp_T_2 = eq(io_in_a_bits_source, io_in_d_bits_source) @[Monitor.scala 681:113 chipyard.TestHarness.RocketConfig.fir 284067:6]
    node same_cycle_resp = and(_T_1074, _same_cycle_resp_T_2) @[Monitor.scala 681:88 chipyard.TestHarness.RocketConfig.fir 284068:6]
    node _T_1098 = dshr(inflight, io_in_d_bits_source) @[Monitor.scala 682:25 chipyard.TestHarness.RocketConfig.fir 284069:6]
    node _T_1100 = or(_T_1098, same_cycle_resp) @[Monitor.scala 682:49 chipyard.TestHarness.RocketConfig.fir 284071:6]
    node _T_1102 = or(_T_1100, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 284073:6]
    node _T_1103 = not(_T_1102) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 284074:6]
    node _GEN_27 = mux(eq(UInt<3>("h2"), io_in_a_bits_opcode), UInt<3>("h1"), UInt<3>("h0")) @[Monitor.scala 685:38 chipyard.TestHarness.RocketConfig.fir 284080:8 Monitor.scala 685:38 chipyard.TestHarness.RocketConfig.fir 284080:8]
    node _GEN_28 = mux(eq(UInt<3>("h3"), io_in_a_bits_opcode), UInt<3>("h1"), _GEN_27) @[Monitor.scala 685:38 chipyard.TestHarness.RocketConfig.fir 284080:8 Monitor.scala 685:38 chipyard.TestHarness.RocketConfig.fir 284080:8]
    node _GEN_29 = mux(eq(UInt<3>("h4"), io_in_a_bits_opcode), UInt<3>("h1"), _GEN_28) @[Monitor.scala 685:38 chipyard.TestHarness.RocketConfig.fir 284080:8 Monitor.scala 685:38 chipyard.TestHarness.RocketConfig.fir 284080:8]
    node _GEN_30 = mux(eq(UInt<3>("h5"), io_in_a_bits_opcode), UInt<3>("h2"), _GEN_29) @[Monitor.scala 685:38 chipyard.TestHarness.RocketConfig.fir 284080:8 Monitor.scala 685:38 chipyard.TestHarness.RocketConfig.fir 284080:8]
    node _GEN_31 = mux(eq(UInt<3>("h6"), io_in_a_bits_opcode), UInt<3>("h4"), _GEN_30) @[Monitor.scala 685:38 chipyard.TestHarness.RocketConfig.fir 284080:8 Monitor.scala 685:38 chipyard.TestHarness.RocketConfig.fir 284080:8]
    node _GEN_32 = mux(eq(UInt<3>("h7"), io_in_a_bits_opcode), UInt<3>("h4"), _GEN_31) @[Monitor.scala 685:38 chipyard.TestHarness.RocketConfig.fir 284080:8 Monitor.scala 685:38 chipyard.TestHarness.RocketConfig.fir 284080:8]
    node _T_1104 = eq(io_in_d_bits_opcode, _GEN_32) @[Monitor.scala 685:38 chipyard.TestHarness.RocketConfig.fir 284080:8]
    node _GEN_39 = mux(eq(UInt<3>("h6"), io_in_a_bits_opcode), UInt<3>("h5"), _GEN_30) @[Monitor.scala 686:39 chipyard.TestHarness.RocketConfig.fir 284081:8 Monitor.scala 686:39 chipyard.TestHarness.RocketConfig.fir 284081:8]
    node _GEN_40 = mux(eq(UInt<3>("h7"), io_in_a_bits_opcode), UInt<3>("h4"), _GEN_39) @[Monitor.scala 686:39 chipyard.TestHarness.RocketConfig.fir 284081:8 Monitor.scala 686:39 chipyard.TestHarness.RocketConfig.fir 284081:8]
    node _T_1105 = eq(io_in_d_bits_opcode, _GEN_40) @[Monitor.scala 686:39 chipyard.TestHarness.RocketConfig.fir 284081:8]
    node _T_1106 = or(_T_1104, _T_1105) @[Monitor.scala 685:77 chipyard.TestHarness.RocketConfig.fir 284082:8]
    node _T_1108 = or(_T_1106, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 284084:8]
    node _T_1109 = not(_T_1108) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 284085:8]
    node _T_1110 = eq(io_in_a_bits_size, io_in_d_bits_size) @[Monitor.scala 687:36 chipyard.TestHarness.RocketConfig.fir 284090:8]
    node _T_1112 = or(_T_1110, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 284092:8]
    node _T_1113 = not(_T_1112) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 284093:8]
    node a_opcode_lookup = bits(_a_opcode_lookup_T_7, 3, 0) @[chipyard.TestHarness.RocketConfig.fir 283941:4 Monitor.scala 634:21 chipyard.TestHarness.RocketConfig.fir 283951:4]
    node _T_1114 = bits(a_opcode_lookup, 2, 0) @[chipyard.TestHarness.RocketConfig.fir 284100:8]
    node _GEN_43 = mux(eq(UInt<3>("h2"), _T_1114), UInt<3>("h1"), UInt<3>("h0")) @[Monitor.scala 689:38 chipyard.TestHarness.RocketConfig.fir 284101:8 Monitor.scala 689:38 chipyard.TestHarness.RocketConfig.fir 284101:8]
    node _GEN_44 = mux(eq(UInt<3>("h3"), _T_1114), UInt<3>("h1"), _GEN_43) @[Monitor.scala 689:38 chipyard.TestHarness.RocketConfig.fir 284101:8 Monitor.scala 689:38 chipyard.TestHarness.RocketConfig.fir 284101:8]
    node _GEN_45 = mux(eq(UInt<3>("h4"), _T_1114), UInt<3>("h1"), _GEN_44) @[Monitor.scala 689:38 chipyard.TestHarness.RocketConfig.fir 284101:8 Monitor.scala 689:38 chipyard.TestHarness.RocketConfig.fir 284101:8]
    node _GEN_46 = mux(eq(UInt<3>("h5"), _T_1114), UInt<3>("h2"), _GEN_45) @[Monitor.scala 689:38 chipyard.TestHarness.RocketConfig.fir 284101:8 Monitor.scala 689:38 chipyard.TestHarness.RocketConfig.fir 284101:8]
    node _GEN_47 = mux(eq(UInt<3>("h6"), _T_1114), UInt<3>("h4"), _GEN_46) @[Monitor.scala 689:38 chipyard.TestHarness.RocketConfig.fir 284101:8 Monitor.scala 689:38 chipyard.TestHarness.RocketConfig.fir 284101:8]
    node _GEN_48 = mux(eq(UInt<3>("h7"), _T_1114), UInt<3>("h4"), _GEN_47) @[Monitor.scala 689:38 chipyard.TestHarness.RocketConfig.fir 284101:8 Monitor.scala 689:38 chipyard.TestHarness.RocketConfig.fir 284101:8]
    node _T_1115 = eq(io_in_d_bits_opcode, _GEN_48) @[Monitor.scala 689:38 chipyard.TestHarness.RocketConfig.fir 284101:8]
    node _GEN_55 = mux(eq(UInt<3>("h6"), _T_1114), UInt<3>("h5"), _GEN_46) @[Monitor.scala 690:38 chipyard.TestHarness.RocketConfig.fir 284103:8 Monitor.scala 690:38 chipyard.TestHarness.RocketConfig.fir 284103:8]
    node _GEN_56 = mux(eq(UInt<3>("h7"), _T_1114), UInt<3>("h4"), _GEN_55) @[Monitor.scala 690:38 chipyard.TestHarness.RocketConfig.fir 284103:8 Monitor.scala 690:38 chipyard.TestHarness.RocketConfig.fir 284103:8]
    node _T_1117 = eq(io_in_d_bits_opcode, _GEN_56) @[Monitor.scala 690:38 chipyard.TestHarness.RocketConfig.fir 284103:8]
    node _T_1118 = or(_T_1115, _T_1117) @[Monitor.scala 689:72 chipyard.TestHarness.RocketConfig.fir 284104:8]
    node _T_1120 = or(_T_1118, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 284106:8]
    node _T_1121 = not(_T_1120) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 284107:8]
    node a_size_lookup = bits(_a_size_lookup_T_7, 7, 0) @[chipyard.TestHarness.RocketConfig.fir 283952:4 Monitor.scala 638:19 chipyard.TestHarness.RocketConfig.fir 283962:4]
    node _GEN_83 = pad(io_in_d_bits_size, 8) @[Monitor.scala 691:36 chipyard.TestHarness.RocketConfig.fir 284112:8]
    node _T_1122 = eq(_GEN_83, a_size_lookup) @[Monitor.scala 691:36 chipyard.TestHarness.RocketConfig.fir 284112:8]
    node _T_1124 = or(_T_1122, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 284114:8]
    node _T_1125 = not(_T_1124) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 284115:8]
    node _T_1127 = and(_T_1085, a_first_1) @[Monitor.scala 694:36 chipyard.TestHarness.RocketConfig.fir 284123:4]
    node _T_1128 = and(_T_1127, io_in_a_valid) @[Monitor.scala 694:47 chipyard.TestHarness.RocketConfig.fir 284124:4]
    node _T_1130 = and(_T_1128, _same_cycle_resp_T_2) @[Monitor.scala 694:65 chipyard.TestHarness.RocketConfig.fir 284126:4]
    node _T_1132 = and(_T_1130, _T_1087) @[Monitor.scala 694:116 chipyard.TestHarness.RocketConfig.fir 284128:4]
    node _T_1133 = not(io_in_d_ready) @[Monitor.scala 695:15 chipyard.TestHarness.RocketConfig.fir 284130:6]
    node _T_1134 = or(_T_1133, io_in_a_ready) @[Monitor.scala 695:32 chipyard.TestHarness.RocketConfig.fir 284131:6]
    node _T_1136 = or(_T_1134, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 284133:6]
    node _T_1137 = not(_T_1136) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 284134:6]
    node a_set_wo_ready = bits(_GEN_15, 0, 0) @[chipyard.TestHarness.RocketConfig.fir 283935:4]
    node d_clr_wo_ready = bits(_GEN_21, 0, 0) @[chipyard.TestHarness.RocketConfig.fir 284022:4]
    node _T_1138 = neq(a_set_wo_ready, d_clr_wo_ready) @[Monitor.scala 699:29 chipyard.TestHarness.RocketConfig.fir 284140:4]
    node _T_1139 = orr(a_set_wo_ready) @[Monitor.scala 699:67 chipyard.TestHarness.RocketConfig.fir 284141:4]
    node _T_1140 = not(_T_1139) @[Monitor.scala 699:51 chipyard.TestHarness.RocketConfig.fir 284142:4]
    node _T_1141 = or(_T_1138, _T_1140) @[Monitor.scala 699:48 chipyard.TestHarness.RocketConfig.fir 284143:4]
    node _T_1143 = or(_T_1141, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 284145:4]
    node _T_1144 = not(_T_1143) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 284146:4]
    node a_set = bits(_GEN_16, 0, 0) @[chipyard.TestHarness.RocketConfig.fir 283933:4]
    node _inflight_T = or(inflight, a_set) @[Monitor.scala 702:27 chipyard.TestHarness.RocketConfig.fir 284151:4]
    node d_clr = bits(_GEN_22, 0, 0) @[chipyard.TestHarness.RocketConfig.fir 284020:4]
    node _inflight_T_1 = not(d_clr) @[Monitor.scala 702:38 chipyard.TestHarness.RocketConfig.fir 284152:4]
    node _inflight_T_2 = and(_inflight_T, _inflight_T_1) @[Monitor.scala 702:36 chipyard.TestHarness.RocketConfig.fir 284153:4]
    node a_opcodes_set = bits(_GEN_19, 3, 0) @[chipyard.TestHarness.RocketConfig.fir 283937:4]
    node _inflight_opcodes_T = or(inflight_opcodes, a_opcodes_set) @[Monitor.scala 703:43 chipyard.TestHarness.RocketConfig.fir 284155:4]
    node d_opcodes_clr = bits(_GEN_23, 3, 0) @[chipyard.TestHarness.RocketConfig.fir 284024:4]
    node _inflight_opcodes_T_1 = not(d_opcodes_clr) @[Monitor.scala 703:62 chipyard.TestHarness.RocketConfig.fir 284156:4]
    node _inflight_opcodes_T_2 = and(_inflight_opcodes_T, _inflight_opcodes_T_1) @[Monitor.scala 703:60 chipyard.TestHarness.RocketConfig.fir 284157:4]
    node a_sizes_set = bits(_GEN_20, 7, 0) @[chipyard.TestHarness.RocketConfig.fir 283939:4]
    node _inflight_sizes_T = or(inflight_sizes, a_sizes_set) @[Monitor.scala 704:39 chipyard.TestHarness.RocketConfig.fir 284159:4]
    node d_sizes_clr = bits(_GEN_24, 7, 0) @[chipyard.TestHarness.RocketConfig.fir 284026:4]
    node _inflight_sizes_T_1 = not(d_sizes_clr) @[Monitor.scala 704:56 chipyard.TestHarness.RocketConfig.fir 284160:4]
    node _inflight_sizes_T_2 = and(_inflight_sizes_T, _inflight_sizes_T_1) @[Monitor.scala 704:54 chipyard.TestHarness.RocketConfig.fir 284161:4]
    reg watchdog : UInt<32>, clock with :
      reset => (UInt<1>("h0"), watchdog) @[Monitor.scala 706:27 chipyard.TestHarness.RocketConfig.fir 284163:4]
    node _T_1145 = orr(inflight) @[Monitor.scala 709:26 chipyard.TestHarness.RocketConfig.fir 284166:4]
    node _T_1146 = not(_T_1145) @[Monitor.scala 709:16 chipyard.TestHarness.RocketConfig.fir 284167:4]
    node _T_1147 = eq(plusarg_reader.out, UInt<32>("h0")) @[Monitor.scala 709:39 chipyard.TestHarness.RocketConfig.fir 284168:4]
    node _T_1148 = or(_T_1146, _T_1147) @[Monitor.scala 709:30 chipyard.TestHarness.RocketConfig.fir 284169:4]
    node _T_1149 = lt(watchdog, plusarg_reader.out) @[Monitor.scala 709:59 chipyard.TestHarness.RocketConfig.fir 284170:4]
    node _T_1150 = or(_T_1148, _T_1149) @[Monitor.scala 709:47 chipyard.TestHarness.RocketConfig.fir 284171:4]
    node _T_1152 = or(_T_1150, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 284173:4]
    node _T_1153 = not(_T_1152) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 284174:4]
    node _watchdog_T = add(watchdog, UInt<32>("h1")) @[Monitor.scala 711:26 chipyard.TestHarness.RocketConfig.fir 284179:4]
    node _watchdog_T_1 = tail(_watchdog_T, 1) @[Monitor.scala 711:26 chipyard.TestHarness.RocketConfig.fir 284180:4]
    node _T_1156 = or(_a_first_T, _d_first_T) @[Monitor.scala 712:27 chipyard.TestHarness.RocketConfig.fir 284184:4]
    node _GEN_57 = mux(_T_1156, UInt<32>("h0"), _watchdog_T_1) @[Monitor.scala 712:47 chipyard.TestHarness.RocketConfig.fir 284185:4 Monitor.scala 712:58 chipyard.TestHarness.RocketConfig.fir 284186:6 Monitor.scala 711:14 chipyard.TestHarness.RocketConfig.fir 284181:4]
    reg inflight_sizes_1 : UInt<8>, clock with :
      reset => (UInt<1>("h0"), inflight_sizes_1) @[Monitor.scala 725:35 chipyard.TestHarness.RocketConfig.fir 284190:4]
    reg d_first_counter_2 : UInt<9>, clock with :
      reset => (UInt<1>("h0"), d_first_counter_2) @[Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 284225:4]
    node _d_first_counter1_T_2 = sub(d_first_counter_2, UInt<9>("h1")) @[Edges.scala 229:28 chipyard.TestHarness.RocketConfig.fir 284226:4]
    node d_first_counter1_2 = tail(_d_first_counter1_T_2, 1) @[Edges.scala 229:28 chipyard.TestHarness.RocketConfig.fir 284227:4]
    node d_first_2 = eq(d_first_counter_2, UInt<9>("h0")) @[Edges.scala 230:25 chipyard.TestHarness.RocketConfig.fir 284228:4]
    node _d_first_counter_T_2 = mux(d_first_2, d_first_beats1, d_first_counter1_2) @[Edges.scala 235:21 chipyard.TestHarness.RocketConfig.fir 284236:6]
    node _GEN_59 = mux(_d_first_T, _d_first_counter_T_2, d_first_counter_2) @[Edges.scala 234:17 chipyard.TestHarness.RocketConfig.fir 284235:4 Edges.scala 235:15 chipyard.TestHarness.RocketConfig.fir 284237:6 Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 284225:4]
    node _c_size_lookup_T_1 = dshr(inflight_sizes_1, _a_size_lookup_T) @[Monitor.scala 747:42 chipyard.TestHarness.RocketConfig.fir 284261:4]
    node _GEN_87 = pad(_c_size_lookup_T_1, 16) @[Monitor.scala 747:93 chipyard.TestHarness.RocketConfig.fir 284266:4]
    node _c_size_lookup_T_6 = and(_GEN_87, _a_size_lookup_T_5) @[Monitor.scala 747:93 chipyard.TestHarness.RocketConfig.fir 284266:4]
    node _GEN_88 = shr(_c_size_lookup_T_6, 1) @[Monitor.scala 747:146 chipyard.TestHarness.RocketConfig.fir 284267:4]
    node _c_size_lookup_T_7 = pad(_GEN_88, 16) @[Monitor.scala 747:146 chipyard.TestHarness.RocketConfig.fir 284267:4]
    node _T_1174 = and(io_in_d_valid, d_first_2) @[Monitor.scala 779:26 chipyard.TestHarness.RocketConfig.fir 284345:4]
    node _T_1176 = and(_T_1174, _T_881) @[Monitor.scala 779:71 chipyard.TestHarness.RocketConfig.fir 284347:4]
    node _T_1178 = and(_d_first_T, d_first_2) @[Monitor.scala 783:27 chipyard.TestHarness.RocketConfig.fir 284353:4]
    node _T_1180 = and(_T_1178, _T_881) @[Monitor.scala 783:72 chipyard.TestHarness.RocketConfig.fir 284355:4]
    node _GEN_69 = mux(_T_1180, _d_sizes_clr_T_5, UInt<31>("h0")) @[Monitor.scala 783:90 chipyard.TestHarness.RocketConfig.fir 284356:4 Monitor.scala 786:21 chipyard.TestHarness.RocketConfig.fir 284372:6 chipyard.TestHarness.RocketConfig.fir 284343:4]
    node _T_1184 = dshr(UInt<1>("h0"), io_in_d_bits_source) @[Monitor.scala 791:25 chipyard.TestHarness.RocketConfig.fir 284391:6]
    node _T_1188 = or(_T_1184, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 284395:6]
    node _T_1189 = not(_T_1188) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 284396:6]
    node c_size_lookup = bits(_c_size_lookup_T_7, 7, 0) @[chipyard.TestHarness.RocketConfig.fir 284249:4 Monitor.scala 747:21 chipyard.TestHarness.RocketConfig.fir 284268:4]
    node _T_1194 = eq(_GEN_83, c_size_lookup) @[Monitor.scala 795:36 chipyard.TestHarness.RocketConfig.fir 284414:8]
    node _T_1196 = or(_T_1194, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 284416:8]
    node _T_1197 = not(_T_1196) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 284417:8]
    node d_sizes_clr_1 = bits(_GEN_69, 7, 0) @[chipyard.TestHarness.RocketConfig.fir 284342:4]
    node _inflight_sizes_T_4 = not(d_sizes_clr_1) @[Monitor.scala 811:58 chipyard.TestHarness.RocketConfig.fir 284467:4]
    node _inflight_sizes_T_5 = and(inflight_sizes_1, _inflight_sizes_T_4) @[Monitor.scala 811:56 chipyard.TestHarness.RocketConfig.fir 284468:4]
    a_first_counter <= mux(reset, UInt<9>("h0"), _GEN_0) @[Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 283723:4 Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 283723:4]
    opcode <= mux(_T_1045, io_in_a_bits_opcode, opcode) @[Monitor.scala 396:32 chipyard.TestHarness.RocketConfig.fir 283788:4 Monitor.scala 397:15 chipyard.TestHarness.RocketConfig.fir 283789:6 Monitor.scala 384:22 chipyard.TestHarness.RocketConfig.fir 283737:4]
    param <= mux(_T_1045, io_in_a_bits_param, param) @[Monitor.scala 396:32 chipyard.TestHarness.RocketConfig.fir 283788:4 Monitor.scala 398:15 chipyard.TestHarness.RocketConfig.fir 283790:6 Monitor.scala 385:22 chipyard.TestHarness.RocketConfig.fir 283738:4]
    size <= mux(_T_1045, io_in_a_bits_size, size) @[Monitor.scala 396:32 chipyard.TestHarness.RocketConfig.fir 283788:4 Monitor.scala 399:15 chipyard.TestHarness.RocketConfig.fir 283791:6 Monitor.scala 386:22 chipyard.TestHarness.RocketConfig.fir 283739:4]
    source <= mux(_T_1045, io_in_a_bits_source, source) @[Monitor.scala 396:32 chipyard.TestHarness.RocketConfig.fir 283788:4 Monitor.scala 400:15 chipyard.TestHarness.RocketConfig.fir 283792:6 Monitor.scala 387:22 chipyard.TestHarness.RocketConfig.fir 283740:4]
    address <= mux(_T_1045, io_in_a_bits_address, address) @[Monitor.scala 396:32 chipyard.TestHarness.RocketConfig.fir 283788:4 Monitor.scala 401:15 chipyard.TestHarness.RocketConfig.fir 283793:6 Monitor.scala 388:22 chipyard.TestHarness.RocketConfig.fir 283741:4]
    d_first_counter <= mux(reset, UInt<9>("h0"), _GEN_6) @[Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 283803:4 Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 283803:4]
    opcode_1 <= mux(_T_1073, io_in_d_bits_opcode, opcode_1) @[Monitor.scala 549:32 chipyard.TestHarness.RocketConfig.fir 283877:4 Monitor.scala 550:15 chipyard.TestHarness.RocketConfig.fir 283878:6 Monitor.scala 535:22 chipyard.TestHarness.RocketConfig.fir 283817:4]
    param_1 <= mux(_T_1073, io_in_d_bits_param, param_1) @[Monitor.scala 549:32 chipyard.TestHarness.RocketConfig.fir 283877:4 Monitor.scala 551:15 chipyard.TestHarness.RocketConfig.fir 283879:6 Monitor.scala 536:22 chipyard.TestHarness.RocketConfig.fir 283818:4]
    size_1 <= mux(_T_1073, io_in_d_bits_size, size_1) @[Monitor.scala 549:32 chipyard.TestHarness.RocketConfig.fir 283877:4 Monitor.scala 552:15 chipyard.TestHarness.RocketConfig.fir 283880:6 Monitor.scala 537:22 chipyard.TestHarness.RocketConfig.fir 283819:4]
    source_1 <= mux(_T_1073, io_in_d_bits_source, source_1) @[Monitor.scala 549:32 chipyard.TestHarness.RocketConfig.fir 283877:4 Monitor.scala 553:15 chipyard.TestHarness.RocketConfig.fir 283881:6 Monitor.scala 538:22 chipyard.TestHarness.RocketConfig.fir 283820:4]
    sink <= mux(_T_1073, io_in_d_bits_sink, sink) @[Monitor.scala 549:32 chipyard.TestHarness.RocketConfig.fir 283877:4 Monitor.scala 554:15 chipyard.TestHarness.RocketConfig.fir 283882:6 Monitor.scala 539:22 chipyard.TestHarness.RocketConfig.fir 283821:4]
    denied <= mux(_T_1073, io_in_d_bits_denied, denied) @[Monitor.scala 549:32 chipyard.TestHarness.RocketConfig.fir 283877:4 Monitor.scala 555:15 chipyard.TestHarness.RocketConfig.fir 283883:6 Monitor.scala 540:22 chipyard.TestHarness.RocketConfig.fir 283822:4]
    inflight <= mux(reset, UInt<1>("h0"), _inflight_T_2) @[Monitor.scala 611:27 chipyard.TestHarness.RocketConfig.fir 283885:4 Monitor.scala 611:27 chipyard.TestHarness.RocketConfig.fir 283885:4 Monitor.scala 702:14 chipyard.TestHarness.RocketConfig.fir 284154:4]
    inflight_opcodes <= mux(reset, UInt<4>("h0"), _inflight_opcodes_T_2) @[Monitor.scala 613:35 chipyard.TestHarness.RocketConfig.fir 283886:4 Monitor.scala 613:35 chipyard.TestHarness.RocketConfig.fir 283886:4 Monitor.scala 703:22 chipyard.TestHarness.RocketConfig.fir 284158:4]
    inflight_sizes <= mux(reset, UInt<8>("h0"), _inflight_sizes_T_2) @[Monitor.scala 615:33 chipyard.TestHarness.RocketConfig.fir 283887:4 Monitor.scala 615:33 chipyard.TestHarness.RocketConfig.fir 283887:4 Monitor.scala 704:20 chipyard.TestHarness.RocketConfig.fir 284162:4]
    a_first_counter_1 <= mux(reset, UInt<9>("h0"), _GEN_13) @[Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 283897:4 Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 283897:4]
    d_first_counter_1 <= mux(reset, UInt<9>("h0"), _GEN_14) @[Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 283919:4 Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 283919:4]
    watchdog <= mux(reset, UInt<32>("h0"), _GEN_57) @[Monitor.scala 706:27 chipyard.TestHarness.RocketConfig.fir 284163:4 Monitor.scala 706:27 chipyard.TestHarness.RocketConfig.fir 284163:4]
    inflight_sizes_1 <= mux(reset, UInt<8>("h0"), _inflight_sizes_T_5) @[Monitor.scala 725:35 chipyard.TestHarness.RocketConfig.fir 284190:4 Monitor.scala 725:35 chipyard.TestHarness.RocketConfig.fir 284190:4 Monitor.scala 811:22 chipyard.TestHarness.RocketConfig.fir 284469:4]
    d_first_counter_2 <= mux(reset, UInt<9>("h0"), _GEN_59) @[Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 284225:4 Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 284225:4]
    node _GEN_93 = and(io_in_a_valid, _T_15) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 282397:10]
    printf(clock, and(_GEN_93, _T_84), "Assertion failed: 'A' channel carries AcquireBlock type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 282397:10]
    stop(clock, and(_GEN_93, _T_84), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 282398:10]
    printf(clock, and(_GEN_93, _T_147), "Assertion failed: 'A' channel carries AcquireBlock from a client which does not support Probe (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 282464:10]
    stop(clock, and(_GEN_93, _T_147), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 282465:10]
    printf(clock, and(_GEN_93, _T_150), "Assertion failed: 'A' channel AcquireBlock carries invalid source ID (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 282471:10]
    stop(clock, and(_GEN_93, _T_150), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 282472:10]
    printf(clock, and(_GEN_93, _T_154), "Assertion failed: 'A' channel AcquireBlock smaller than a beat (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 282479:10]
    stop(clock, and(_GEN_93, _T_154), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 282480:10]
    printf(clock, and(_GEN_93, _T_157), "Assertion failed: 'A' channel AcquireBlock address not aligned to size (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 282486:10]
    stop(clock, and(_GEN_93, _T_157), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 282487:10]
    printf(clock, and(_GEN_93, _T_161), "Assertion failed: 'A' channel AcquireBlock carries invalid grow param (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 282494:10]
    stop(clock, and(_GEN_93, _T_161), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 282495:10]
    printf(clock, and(_GEN_93, _T_166), "Assertion failed: 'A' channel AcquireBlock contains invalid mask (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 282503:10]
    stop(clock, and(_GEN_93, _T_166), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 282504:10]
    printf(clock, and(_GEN_93, _T_170), "Assertion failed: 'A' channel AcquireBlock is corrupt (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 282511:10]
    stop(clock, and(_GEN_93, _T_170), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 282512:10]
    node _GEN_109 = and(io_in_a_valid, _T_171) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 282587:10]
    printf(clock, and(_GEN_109, _T_84), "Assertion failed: 'A' channel carries AcquirePerm type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 282587:10]
    stop(clock, and(_GEN_109, _T_84), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 282588:10]
    printf(clock, and(_GEN_109, _T_147), "Assertion failed: 'A' channel carries AcquirePerm from a client which does not support Probe (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 282654:10]
    stop(clock, and(_GEN_109, _T_147), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 282655:10]
    printf(clock, and(_GEN_109, _T_150), "Assertion failed: 'A' channel AcquirePerm carries invalid source ID (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 282661:10]
    stop(clock, and(_GEN_109, _T_150), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 282662:10]
    printf(clock, and(_GEN_109, _T_154), "Assertion failed: 'A' channel AcquirePerm smaller than a beat (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 282669:10]
    stop(clock, and(_GEN_109, _T_154), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 282670:10]
    printf(clock, and(_GEN_109, _T_157), "Assertion failed: 'A' channel AcquirePerm address not aligned to size (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 282676:10]
    stop(clock, and(_GEN_109, _T_157), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 282677:10]
    printf(clock, and(_GEN_109, _T_161), "Assertion failed: 'A' channel AcquirePerm carries invalid grow param (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 282684:10]
    stop(clock, and(_GEN_109, _T_161), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 282685:10]
    printf(clock, and(_GEN_109, _T_321), "Assertion failed: 'A' channel AcquirePerm requests NtoB (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 282692:10]
    stop(clock, and(_GEN_109, _T_321), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 282693:10]
    printf(clock, and(_GEN_109, _T_166), "Assertion failed: 'A' channel AcquirePerm contains invalid mask (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 282701:10]
    stop(clock, and(_GEN_109, _T_166), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 282702:10]
    printf(clock, and(_GEN_109, _T_170), "Assertion failed: 'A' channel AcquirePerm is corrupt (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 282709:10]
    stop(clock, and(_GEN_109, _T_170), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 282710:10]
    node _GEN_127 = and(io_in_a_valid, _T_331) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 282725:10]
    printf(clock, and(_GEN_127, _T_340), "Assertion failed: 'A' channel carries Get type which master claims it can't emit (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 282725:10]
    stop(clock, and(_GEN_127, _T_340), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 282726:10]
    printf(clock, and(_GEN_127, _T_407), "Assertion failed: 'A' channel carries Get type which slave claims it can't support (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 282796:10]
    stop(clock, and(_GEN_127, _T_407), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 282797:10]
    printf(clock, and(_GEN_127, _T_150), "Assertion failed: 'A' channel Get carries invalid source ID (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 282803:10]
    stop(clock, and(_GEN_127, _T_150), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 282804:10]
    printf(clock, and(_GEN_127, _T_157), "Assertion failed: 'A' channel Get address not aligned to size (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 282810:10]
    stop(clock, and(_GEN_127, _T_157), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 282811:10]
    printf(clock, and(_GEN_127, _T_417), "Assertion failed: 'A' channel Get carries invalid param (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 282818:10]
    stop(clock, and(_GEN_127, _T_417), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 282819:10]
    printf(clock, and(_GEN_127, _T_421), "Assertion failed: 'A' channel Get contains invalid mask (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 282826:10]
    stop(clock, and(_GEN_127, _T_421), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 282827:10]
    printf(clock, and(_GEN_127, _T_170), "Assertion failed: 'A' channel Get is corrupt (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 282834:10]
    stop(clock, and(_GEN_127, _T_170), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 282835:10]
    node _GEN_141 = and(io_in_a_valid, _T_426) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 282917:10]
    printf(clock, and(_GEN_141, _T_502), "Assertion failed: 'A' channel carries PutFull type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 282917:10]
    stop(clock, and(_GEN_141, _T_502), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 282918:10]
    printf(clock, and(_GEN_141, _T_150), "Assertion failed: 'A' channel PutFull carries invalid source ID (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 282924:10]
    stop(clock, and(_GEN_141, _T_150), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 282925:10]
    printf(clock, and(_GEN_141, _T_157), "Assertion failed: 'A' channel PutFull address not aligned to size (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 282931:10]
    stop(clock, and(_GEN_141, _T_157), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 282932:10]
    printf(clock, and(_GEN_141, _T_417), "Assertion failed: 'A' channel PutFull carries invalid param (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 282939:10]
    stop(clock, and(_GEN_141, _T_417), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 282940:10]
    printf(clock, and(_GEN_141, _T_421), "Assertion failed: 'A' channel PutFull contains invalid mask (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 282947:10]
    stop(clock, and(_GEN_141, _T_421), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 282948:10]
    node _GEN_151 = and(io_in_a_valid, _T_517) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 283030:10]
    printf(clock, and(_GEN_151, _T_502), "Assertion failed: 'A' channel carries PutPartial type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 283030:10]
    stop(clock, and(_GEN_151, _T_502), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 283031:10]
    printf(clock, and(_GEN_151, _T_150), "Assertion failed: 'A' channel PutPartial carries invalid source ID (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 283037:10]
    stop(clock, and(_GEN_151, _T_150), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 283038:10]
    printf(clock, and(_GEN_151, _T_157), "Assertion failed: 'A' channel PutPartial address not aligned to size (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 283044:10]
    stop(clock, and(_GEN_151, _T_157), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 283045:10]
    printf(clock, and(_GEN_151, _T_417), "Assertion failed: 'A' channel PutPartial carries invalid param (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 283052:10]
    stop(clock, and(_GEN_151, _T_417), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 283053:10]
    printf(clock, and(_GEN_151, _T_609), "Assertion failed: 'A' channel PutPartial contains invalid mask (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 283062:10]
    stop(clock, and(_GEN_151, _T_609), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 283063:10]
    node _GEN_161 = and(io_in_a_valid, _T_610) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 283140:10]
    printf(clock, and(_GEN_161, _T_681), "Assertion failed: 'A' channel carries Arithmetic type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 283140:10]
    stop(clock, and(_GEN_161, _T_681), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 283141:10]
    printf(clock, and(_GEN_161, _T_150), "Assertion failed: 'A' channel Arithmetic carries invalid source ID (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 283147:10]
    stop(clock, and(_GEN_161, _T_150), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 283148:10]
    printf(clock, and(_GEN_161, _T_157), "Assertion failed: 'A' channel Arithmetic address not aligned to size (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 283154:10]
    stop(clock, and(_GEN_161, _T_157), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 283155:10]
    printf(clock, and(_GEN_161, _T_691), "Assertion failed: 'A' channel Arithmetic carries invalid opcode param (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 283162:10]
    stop(clock, and(_GEN_161, _T_691), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 283163:10]
    printf(clock, and(_GEN_161, _T_421), "Assertion failed: 'A' channel Arithmetic contains invalid mask (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 283170:10]
    stop(clock, and(_GEN_161, _T_421), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 283171:10]
    node _GEN_171 = and(io_in_a_valid, _T_696) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 283248:10]
    printf(clock, and(_GEN_171, _T_681), "Assertion failed: 'A' channel carries Logical type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 283248:10]
    stop(clock, and(_GEN_171, _T_681), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 283249:10]
    printf(clock, and(_GEN_171, _T_150), "Assertion failed: 'A' channel Logical carries invalid source ID (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 283255:10]
    stop(clock, and(_GEN_171, _T_150), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 283256:10]
    printf(clock, and(_GEN_171, _T_157), "Assertion failed: 'A' channel Logical address not aligned to size (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 283262:10]
    stop(clock, and(_GEN_171, _T_157), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 283263:10]
    printf(clock, and(_GEN_171, _T_777), "Assertion failed: 'A' channel Logical carries invalid opcode param (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 283270:10]
    stop(clock, and(_GEN_171, _T_777), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 283271:10]
    printf(clock, and(_GEN_171, _T_421), "Assertion failed: 'A' channel Logical contains invalid mask (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 283278:10]
    stop(clock, and(_GEN_171, _T_421), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 283279:10]
    node _GEN_181 = and(io_in_a_valid, _T_782) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 283361:10]
    printf(clock, and(_GEN_181, _T_858), "Assertion failed: 'A' channel carries Hint type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 283361:10]
    stop(clock, and(_GEN_181, _T_858), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 283362:10]
    printf(clock, and(_GEN_181, _T_150), "Assertion failed: 'A' channel Hint carries invalid source ID (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 283368:10]
    stop(clock, and(_GEN_181, _T_150), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 283369:10]
    printf(clock, and(_GEN_181, _T_157), "Assertion failed: 'A' channel Hint address not aligned to size (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 283375:10]
    stop(clock, and(_GEN_181, _T_157), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 283376:10]
    printf(clock, and(_GEN_181, _T_868), "Assertion failed: 'A' channel Hint carries invalid opcode param (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 283383:10]
    stop(clock, and(_GEN_181, _T_868), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 283384:10]
    printf(clock, and(_GEN_181, _T_421), "Assertion failed: 'A' channel Hint contains invalid mask (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 283391:10]
    stop(clock, and(_GEN_181, _T_421), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 283392:10]
    printf(clock, and(_GEN_181, _T_170), "Assertion failed: 'A' channel Hint is corrupt (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 283399:10]
    stop(clock, and(_GEN_181, _T_170), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 283400:10]
    printf(clock, and(io_in_d_valid, _T_880), "Assertion failed: 'D' channel has invalid opcode (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283410:8]
    stop(clock, and(io_in_d_valid, _T_880), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283411:8]
    node _GEN_193 = and(io_in_d_valid, _T_881) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283424:10]
    printf(clock, and(_GEN_193, _T_884), "Assertion failed: 'D' channel ReleaseAck carries invalid source ID (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283424:10]
    stop(clock, and(_GEN_193, _T_884), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283425:10]
    printf(clock, and(_GEN_193, _T_888), "Assertion failed: 'D' channel ReleaseAck smaller than a beat (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283432:10]
    stop(clock, and(_GEN_193, _T_888), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283433:10]
    printf(clock, and(_GEN_193, _T_892), "Assertion failed: 'D' channel ReleaseeAck carries invalid param (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283440:10]
    stop(clock, and(_GEN_193, _T_892), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283441:10]
    printf(clock, and(_GEN_193, _T_896), "Assertion failed: 'D' channel ReleaseAck is corrupt (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283448:10]
    stop(clock, and(_GEN_193, _T_896), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283449:10]
    printf(clock, and(_GEN_193, _T_900), "Assertion failed: 'D' channel ReleaseAck is denied (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283456:10]
    stop(clock, and(_GEN_193, _T_900), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283457:10]
    node _GEN_203 = and(io_in_d_valid, _T_901) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283466:10]
    printf(clock, and(_GEN_203, _T_884), "Assertion failed: 'D' channel Grant carries invalid source ID (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283466:10]
    stop(clock, and(_GEN_203, _T_884), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283467:10]
    printf(clock, and(_GEN_203, _T_888), "Assertion failed: 'D' channel Grant smaller than a beat (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283481:10]
    stop(clock, and(_GEN_203, _T_888), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283482:10]
    printf(clock, and(_GEN_203, _T_915), "Assertion failed: 'D' channel Grant carries invalid cap param (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283489:10]
    stop(clock, and(_GEN_203, _T_915), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283490:10]
    printf(clock, and(_GEN_203, _T_919), "Assertion failed: 'D' channel Grant carries toN param (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283497:10]
    stop(clock, and(_GEN_203, _T_919), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283498:10]
    printf(clock, and(_GEN_203, _T_896), "Assertion failed: 'D' channel Grant is corrupt (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283505:10]
    stop(clock, and(_GEN_203, _T_896), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283506:10]
    node _GEN_213 = and(io_in_d_valid, _T_929) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283524:10]
    printf(clock, and(_GEN_213, _T_884), "Assertion failed: 'D' channel GrantData carries invalid source ID (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283524:10]
    stop(clock, and(_GEN_213, _T_884), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283525:10]
    printf(clock, and(_GEN_213, _T_888), "Assertion failed: 'D' channel GrantData smaller than a beat (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283539:10]
    stop(clock, and(_GEN_213, _T_888), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283540:10]
    printf(clock, and(_GEN_213, _T_915), "Assertion failed: 'D' channel GrantData carries invalid cap param (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283547:10]
    stop(clock, and(_GEN_213, _T_915), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283548:10]
    printf(clock, and(_GEN_213, _T_919), "Assertion failed: 'D' channel GrantData carries toN param (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283555:10]
    stop(clock, and(_GEN_213, _T_919), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283556:10]
    printf(clock, and(_GEN_213, _T_952), "Assertion failed: 'D' channel GrantData is denied but not corrupt (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283564:10]
    stop(clock, and(_GEN_213, _T_952), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283565:10]
    node _GEN_223 = and(io_in_d_valid, _T_958) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283583:10]
    printf(clock, and(_GEN_223, _T_884), "Assertion failed: 'D' channel AccessAck carries invalid source ID (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283583:10]
    stop(clock, and(_GEN_223, _T_884), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283584:10]
    printf(clock, and(_GEN_223, _T_892), "Assertion failed: 'D' channel AccessAck carries invalid param (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283591:10]
    stop(clock, and(_GEN_223, _T_892), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283592:10]
    printf(clock, and(_GEN_223, _T_896), "Assertion failed: 'D' channel AccessAck is corrupt (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283599:10]
    stop(clock, and(_GEN_223, _T_896), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283600:10]
    node _GEN_229 = and(io_in_d_valid, _T_975) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283618:10]
    printf(clock, and(_GEN_229, _T_884), "Assertion failed: 'D' channel AccessAckData carries invalid source ID (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283618:10]
    stop(clock, and(_GEN_229, _T_884), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283619:10]
    printf(clock, and(_GEN_229, _T_892), "Assertion failed: 'D' channel AccessAckData carries invalid param (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283626:10]
    stop(clock, and(_GEN_229, _T_892), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283627:10]
    printf(clock, and(_GEN_229, _T_952), "Assertion failed: 'D' channel AccessAckData is denied but not corrupt (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283635:10]
    stop(clock, and(_GEN_229, _T_952), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283636:10]
    node _GEN_235 = and(io_in_d_valid, _T_993) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283654:10]
    printf(clock, and(_GEN_235, _T_884), "Assertion failed: 'D' channel HintAck carries invalid source ID (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283654:10]
    stop(clock, and(_GEN_235, _T_884), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283655:10]
    printf(clock, and(_GEN_235, _T_892), "Assertion failed: 'D' channel HintAck carries invalid param (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283662:10]
    stop(clock, and(_GEN_235, _T_892), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283663:10]
    printf(clock, and(_GEN_235, _T_896), "Assertion failed: 'D' channel HintAck is corrupt (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283670:10]
    stop(clock, and(_GEN_235, _T_896), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283671:10]
    printf(clock, and(_T_1023, _T_1027), "Assertion failed: 'A' channel opcode changed within multibeat operation (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 283750:8]
    stop(clock, and(_T_1023, _T_1027), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 283751:8]
    printf(clock, and(_T_1023, _T_1031), "Assertion failed: 'A' channel param changed within multibeat operation (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 283758:8]
    stop(clock, and(_T_1023, _T_1031), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 283759:8]
    printf(clock, and(_T_1023, _T_1035), "Assertion failed: 'A' channel size changed within multibeat operation (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 283766:8]
    stop(clock, and(_T_1023, _T_1035), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 283767:8]
    printf(clock, and(_T_1023, _T_1039), "Assertion failed: 'A' channel source changed within multibeat operation (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 283774:8]
    stop(clock, and(_T_1023, _T_1039), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 283775:8]
    printf(clock, and(_T_1023, _T_1043), "Assertion failed: 'A' channel address changed with multibeat operation (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 283782:8]
    stop(clock, and(_T_1023, _T_1043), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 283783:8]
    printf(clock, and(_T_1047, _T_1051), "Assertion failed: 'D' channel opcode changed within multibeat operation (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283831:8]
    stop(clock, and(_T_1047, _T_1051), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283832:8]
    printf(clock, and(_T_1047, _T_1055), "Assertion failed: 'D' channel param changed within multibeat operation (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283839:8]
    stop(clock, and(_T_1047, _T_1055), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283840:8]
    printf(clock, and(_T_1047, _T_1059), "Assertion failed: 'D' channel size changed within multibeat operation (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283847:8]
    stop(clock, and(_T_1047, _T_1059), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283848:8]
    printf(clock, and(_T_1047, _T_1063), "Assertion failed: 'D' channel source changed within multibeat operation (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283855:8]
    stop(clock, and(_T_1047, _T_1063), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283856:8]
    printf(clock, and(_T_1047, _T_1067), "Assertion failed: 'D' channel sink changed with multibeat operation (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283863:8]
    stop(clock, and(_T_1047, _T_1067), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283864:8]
    printf(clock, and(_T_1047, _T_1071), "Assertion failed: 'D' channel denied changed with multibeat operation (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283871:8]
    stop(clock, and(_T_1047, _T_1071), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 283872:8]
    printf(clock, and(_T_1077, _T_1084), "Assertion failed: 'A' channel re-used a source ID (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 284016:8]
    stop(clock, and(_T_1077, _T_1084), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 284017:8]
    printf(clock, and(_T_1088, _T_1103), "Assertion failed: 'D' channel acknowledged for nothing inflight (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 284076:8]
    stop(clock, and(_T_1088, _T_1103), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 284077:8]
    node _GEN_241 = and(_T_1088, same_cycle_resp) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 284087:10]
    printf(clock, and(_GEN_241, _T_1109), "Assertion failed: 'D' channel contains improper opcode response (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 284087:10]
    stop(clock, and(_GEN_241, _T_1109), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 284088:10]
    printf(clock, and(_GEN_241, _T_1113), "Assertion failed: 'D' channel contains improper response size (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 284095:10]
    stop(clock, and(_GEN_241, _T_1113), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 284096:10]
    node _GEN_245 = not(same_cycle_resp) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 284109:10]
    node _GEN_246 = and(_T_1088, _GEN_245) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 284109:10]
    printf(clock, and(_GEN_246, _T_1121), "Assertion failed: 'D' channel contains improper opcode response (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 284109:10]
    stop(clock, and(_GEN_246, _T_1121), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 284110:10]
    printf(clock, and(_GEN_246, _T_1125), "Assertion failed: 'D' channel contains improper response size (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 284117:10]
    stop(clock, and(_GEN_246, _T_1125), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 284118:10]
    printf(clock, and(_T_1132, _T_1137), "Assertion failed: ready check\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 284136:8]
    stop(clock, and(_T_1132, _T_1137), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 284137:8]
    printf(clock, _T_1144, "Assertion failed: 'A' and 'D' concurrent, despite minlatency 6 (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 284148:6]
    stop(clock, _T_1144, 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 284149:6]
    printf(clock, _T_1153, "Assertion failed: TileLink timeout expired (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 284176:6]
    stop(clock, _T_1153, 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 284177:6]
    printf(clock, and(_T_1176, _T_1189), "Assertion failed: 'D' channel acknowledged for nothing inflight (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 284398:8]
    stop(clock, and(_T_1176, _T_1189), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 284399:8]
    printf(clock, and(_T_1176, _T_1197), "Assertion failed: 'D' channel contains improper response size (connected at SerialAdapter.scala:331:25)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 284419:10]
    stop(clock, and(_T_1176, _T_1197), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 284420:10]

  module TLSerdesser_1_inTestHarness : @[chipyard.TestHarness.RocketConfig.fir 284691:2]
    input clock : Clock @[chipyard.TestHarness.RocketConfig.fir 284692:4]
    input reset : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 284693:4]
    output auto_manager_in_a_ready : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 284694:4]
    input auto_manager_in_a_valid : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 284694:4]
    input auto_manager_in_a_bits_opcode : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 284694:4]
    input auto_manager_in_a_bits_param : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 284694:4]
    input auto_manager_in_a_bits_size : UInt<4> @[chipyard.TestHarness.RocketConfig.fir 284694:4]
    input auto_manager_in_a_bits_source : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 284694:4]
    input auto_manager_in_a_bits_address : UInt<32> @[chipyard.TestHarness.RocketConfig.fir 284694:4]
    input auto_manager_in_a_bits_mask : UInt<8> @[chipyard.TestHarness.RocketConfig.fir 284694:4]
    input auto_manager_in_a_bits_data : UInt<64> @[chipyard.TestHarness.RocketConfig.fir 284694:4]
    input auto_manager_in_a_bits_corrupt : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 284694:4]
    input auto_manager_in_d_ready : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 284694:4]
    output auto_manager_in_d_valid : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 284694:4]
    output auto_manager_in_d_bits_opcode : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 284694:4]
    output auto_manager_in_d_bits_param : UInt<2> @[chipyard.TestHarness.RocketConfig.fir 284694:4]
    output auto_manager_in_d_bits_size : UInt<4> @[chipyard.TestHarness.RocketConfig.fir 284694:4]
    output auto_manager_in_d_bits_source : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 284694:4]
    output auto_manager_in_d_bits_sink : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 284694:4]
    output auto_manager_in_d_bits_denied : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 284694:4]
    output auto_manager_in_d_bits_data : UInt<64> @[chipyard.TestHarness.RocketConfig.fir 284694:4]
    output auto_manager_in_d_bits_corrupt : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 284694:4]
    input auto_client_out_a_ready : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 284694:4]
    output auto_client_out_a_valid : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 284694:4]
    output auto_client_out_a_bits_opcode : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 284694:4]
    output auto_client_out_a_bits_param : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 284694:4]
    output auto_client_out_a_bits_size : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 284694:4]
    output auto_client_out_a_bits_source : UInt<4> @[chipyard.TestHarness.RocketConfig.fir 284694:4]
    output auto_client_out_a_bits_address : UInt<29> @[chipyard.TestHarness.RocketConfig.fir 284694:4]
    output auto_client_out_a_bits_mask : UInt<8> @[chipyard.TestHarness.RocketConfig.fir 284694:4]
    output auto_client_out_a_bits_data : UInt<64> @[chipyard.TestHarness.RocketConfig.fir 284694:4]
    output auto_client_out_a_bits_corrupt : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 284694:4]
    output auto_client_out_d_ready : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 284694:4]
    input auto_client_out_d_valid : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 284694:4]
    input auto_client_out_d_bits_opcode : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 284694:4]
    input auto_client_out_d_bits_param : UInt<2> @[chipyard.TestHarness.RocketConfig.fir 284694:4]
    input auto_client_out_d_bits_size : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 284694:4]
    input auto_client_out_d_bits_source : UInt<4> @[chipyard.TestHarness.RocketConfig.fir 284694:4]
    input auto_client_out_d_bits_sink : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 284694:4]
    input auto_client_out_d_bits_denied : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 284694:4]
    input auto_client_out_d_bits_data : UInt<64> @[chipyard.TestHarness.RocketConfig.fir 284694:4]
    input auto_client_out_d_bits_corrupt : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 284694:4]
    output io_ser_in_ready : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 284695:4]
    input io_ser_in_valid : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 284695:4]
    input io_ser_in_bits : UInt<4> @[chipyard.TestHarness.RocketConfig.fir 284695:4]
    input io_ser_out_ready : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 284695:4]
    output io_ser_out_valid : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 284695:4]
    output io_ser_out_bits : UInt<4> @[chipyard.TestHarness.RocketConfig.fir 284695:4]

    inst monitor of TLMonitor_53_inTestHarness @[Nodes.scala 24:25 chipyard.TestHarness.RocketConfig.fir 284705:4]
    inst outArb of HellaPeekingArbiter_inTestHarness @[Serdes.scala 622:24 chipyard.TestHarness.RocketConfig.fir 284736:4]
    inst outSer of GenericSerializer_inTestHarness @[Serdes.scala 624:24 chipyard.TestHarness.RocketConfig.fir 284739:4]
    inst inDes of GenericDeserializer_inTestHarness @[Serdes.scala 629:23 chipyard.TestHarness.RocketConfig.fir 284995:4]
    node _merged_bits_merged_union_T_1 = cat(auto_client_out_d_bits_sink, auto_client_out_d_bits_denied) @[Cat.scala 30:58 chipyard.TestHarness.RocketConfig.fir 284794:4]
    node merged_1_ready = outArb.io_in_1_ready @[Serdes.scala 357:22 chipyard.TestHarness.RocketConfig.fir 284783:4 Serdes.scala 625:18 chipyard.TestHarness.RocketConfig.fir 284979:4]
    node _merged_bits_last_T_1 = and(merged_1_ready, auto_client_out_d_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.RocketConfig.fir 284807:4]
    node _merged_bits_last_beats1_decode_T_1 = dshlw(UInt<13>("h3f"), auto_client_out_d_bits_size) @[package.scala 234:77 chipyard.TestHarness.RocketConfig.fir 284809:4]
    node _merged_bits_last_beats1_decode_T_2 = bits(_merged_bits_last_beats1_decode_T_1, 5, 0) @[package.scala 234:82 chipyard.TestHarness.RocketConfig.fir 284810:4]
    node _merged_bits_last_beats1_decode_T_3 = not(_merged_bits_last_beats1_decode_T_2) @[package.scala 234:46 chipyard.TestHarness.RocketConfig.fir 284811:4]
    node merged_bits_last_beats1_decode = shr(_merged_bits_last_beats1_decode_T_3, 3) @[Edges.scala 219:59 chipyard.TestHarness.RocketConfig.fir 284812:4]
    node merged_bits_last_beats1_opdata = bits(auto_client_out_d_bits_opcode, 0, 0) @[Edges.scala 105:36 chipyard.TestHarness.RocketConfig.fir 284813:4]
    node merged_bits_last_beats1 = mux(merged_bits_last_beats1_opdata, merged_bits_last_beats1_decode, UInt<3>("h0")) @[Edges.scala 220:14 chipyard.TestHarness.RocketConfig.fir 284814:4]
    reg merged_bits_last_counter_1 : UInt<3>, clock with :
      reset => (UInt<1>("h0"), merged_bits_last_counter_1) @[Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 284815:4]
    node _merged_bits_last_counter1_T_1 = sub(merged_bits_last_counter_1, UInt<3>("h1")) @[Edges.scala 229:28 chipyard.TestHarness.RocketConfig.fir 284816:4]
    node merged_bits_last_counter1_1 = tail(_merged_bits_last_counter1_T_1, 1) @[Edges.scala 229:28 chipyard.TestHarness.RocketConfig.fir 284817:4]
    node merged_bits_last_first_1 = eq(merged_bits_last_counter_1, UInt<3>("h0")) @[Edges.scala 230:25 chipyard.TestHarness.RocketConfig.fir 284818:4]
    node _merged_bits_last_last_T_2 = eq(merged_bits_last_counter_1, UInt<3>("h1")) @[Edges.scala 231:25 chipyard.TestHarness.RocketConfig.fir 284819:4]
    node _merged_bits_last_last_T_3 = eq(merged_bits_last_beats1, UInt<3>("h0")) @[Edges.scala 231:47 chipyard.TestHarness.RocketConfig.fir 284820:4]
    node _merged_bits_last_counter_T_1 = mux(merged_bits_last_first_1, merged_bits_last_beats1, merged_bits_last_counter1_1) @[Edges.scala 235:21 chipyard.TestHarness.RocketConfig.fir 284826:6]
    node _GEN_1 = mux(_merged_bits_last_T_1, _merged_bits_last_counter_T_1, merged_bits_last_counter_1) @[Edges.scala 234:17 chipyard.TestHarness.RocketConfig.fir 284825:4 Edges.scala 235:15 chipyard.TestHarness.RocketConfig.fir 284827:6 Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 284815:4]
    node merged_4_ready = outArb.io_in_4_ready @[Serdes.scala 357:22 chipyard.TestHarness.RocketConfig.fir 284926:4 Serdes.scala 625:18 chipyard.TestHarness.RocketConfig.fir 284988:4]
    node _merged_bits_last_T_4 = and(merged_4_ready, auto_manager_in_a_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.RocketConfig.fir 284949:4]
    node _merged_bits_last_beats1_decode_T_13 = dshlw(UInt<21>("h3f"), auto_manager_in_a_bits_size) @[package.scala 234:77 chipyard.TestHarness.RocketConfig.fir 284951:4]
    node _merged_bits_last_beats1_decode_T_14 = bits(_merged_bits_last_beats1_decode_T_13, 5, 0) @[package.scala 234:82 chipyard.TestHarness.RocketConfig.fir 284952:4]
    node _merged_bits_last_beats1_decode_T_15 = not(_merged_bits_last_beats1_decode_T_14) @[package.scala 234:46 chipyard.TestHarness.RocketConfig.fir 284953:4]
    node merged_bits_last_beats1_decode_3 = shr(_merged_bits_last_beats1_decode_T_15, 3) @[Edges.scala 219:59 chipyard.TestHarness.RocketConfig.fir 284954:4]
    node _merged_bits_last_beats1_opdata_T_1 = bits(auto_manager_in_a_bits_opcode, 2, 2) @[Edges.scala 91:37 chipyard.TestHarness.RocketConfig.fir 284955:4]
    node merged_bits_last_beats1_opdata_3 = not(_merged_bits_last_beats1_opdata_T_1) @[Edges.scala 91:28 chipyard.TestHarness.RocketConfig.fir 284956:4]
    node merged_bits_last_beats1_3 = mux(merged_bits_last_beats1_opdata_3, merged_bits_last_beats1_decode_3, UInt<3>("h0")) @[Edges.scala 220:14 chipyard.TestHarness.RocketConfig.fir 284957:4]
    reg merged_bits_last_counter_4 : UInt<3>, clock with :
      reset => (UInt<1>("h0"), merged_bits_last_counter_4) @[Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 284958:4]
    node _merged_bits_last_counter1_T_4 = sub(merged_bits_last_counter_4, UInt<3>("h1")) @[Edges.scala 229:28 chipyard.TestHarness.RocketConfig.fir 284959:4]
    node merged_bits_last_counter1_4 = tail(_merged_bits_last_counter1_T_4, 1) @[Edges.scala 229:28 chipyard.TestHarness.RocketConfig.fir 284960:4]
    node merged_bits_last_first_4 = eq(merged_bits_last_counter_4, UInt<3>("h0")) @[Edges.scala 230:25 chipyard.TestHarness.RocketConfig.fir 284961:4]
    node _merged_bits_last_last_T_8 = eq(merged_bits_last_counter_4, UInt<3>("h1")) @[Edges.scala 231:25 chipyard.TestHarness.RocketConfig.fir 284962:4]
    node _merged_bits_last_last_T_9 = eq(merged_bits_last_beats1_3, UInt<3>("h0")) @[Edges.scala 231:47 chipyard.TestHarness.RocketConfig.fir 284963:4]
    node _merged_bits_last_counter_T_4 = mux(merged_bits_last_first_4, merged_bits_last_beats1_3, merged_bits_last_counter1_4) @[Edges.scala 235:21 chipyard.TestHarness.RocketConfig.fir 284969:6]
    node _GEN_4 = mux(_merged_bits_last_T_4, _merged_bits_last_counter_T_4, merged_bits_last_counter_4) @[Edges.scala 234:17 chipyard.TestHarness.RocketConfig.fir 284968:4 Edges.scala 235:15 chipyard.TestHarness.RocketConfig.fir 284970:6 Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 284958:4]
    node _bundleOut_0_a_valid_T = eq(inDes.io_out_bits_chanId, UInt<3>("h0")) @[Serdes.scala 236:37 chipyard.TestHarness.RocketConfig.fir 285001:4]
    node _bundleIn_0_d_valid_T = eq(inDes.io_out_bits_chanId, UInt<3>("h3")) @[Serdes.scala 239:37 chipyard.TestHarness.RocketConfig.fir 285067:4]
    node _GEN_5 = shr(inDes.io_out_bits_union, 1) @[Serdes.scala 468:31 chipyard.TestHarness.RocketConfig.fir 285077:4]
    node _bundleIn_0_d_bits_d_sink_T = pad(_GEN_5, 8) @[Serdes.scala 468:31 chipyard.TestHarness.RocketConfig.fir 285077:4]
    node _inDes_io_out_ready_T = eq(UInt<3>("h0"), inDes.io_out_bits_chanId) @[Mux.scala 80:60 chipyard.TestHarness.RocketConfig.fir 285106:4]
    node _inDes_io_out_ready_T_1 = and(_inDes_io_out_ready_T, auto_client_out_a_ready) @[Mux.scala 80:57 chipyard.TestHarness.RocketConfig.fir 285107:4]
    node _inDes_io_out_ready_T_2 = eq(UInt<3>("h1"), inDes.io_out_bits_chanId) @[Mux.scala 80:60 chipyard.TestHarness.RocketConfig.fir 285108:4]
    node _inDes_io_out_ready_T_3 = mux(_inDes_io_out_ready_T_2, UInt<1>("h0"), _inDes_io_out_ready_T_1) @[Mux.scala 80:57 chipyard.TestHarness.RocketConfig.fir 285109:4]
    node _inDes_io_out_ready_T_4 = eq(UInt<3>("h2"), inDes.io_out_bits_chanId) @[Mux.scala 80:60 chipyard.TestHarness.RocketConfig.fir 285110:4]
    node _inDes_io_out_ready_T_5 = mux(_inDes_io_out_ready_T_4, UInt<1>("h0"), _inDes_io_out_ready_T_3) @[Mux.scala 80:57 chipyard.TestHarness.RocketConfig.fir 285111:4]
    node _inDes_io_out_ready_T_6 = eq(UInt<3>("h3"), inDes.io_out_bits_chanId) @[Mux.scala 80:60 chipyard.TestHarness.RocketConfig.fir 285112:4]
    node _inDes_io_out_ready_T_7 = mux(_inDes_io_out_ready_T_6, auto_manager_in_d_ready, _inDes_io_out_ready_T_5) @[Mux.scala 80:57 chipyard.TestHarness.RocketConfig.fir 285113:4]
    node _inDes_io_out_ready_T_8 = eq(UInt<3>("h4"), inDes.io_out_bits_chanId) @[Mux.scala 80:60 chipyard.TestHarness.RocketConfig.fir 285114:4]
    auto_manager_in_a_ready <= outArb.io_in_4_ready @[Serdes.scala 357:22 chipyard.TestHarness.RocketConfig.fir 284926:4 Serdes.scala 625:18 chipyard.TestHarness.RocketConfig.fir 284988:4]
    auto_manager_in_d_valid <= and(inDes.io_out_valid, _bundleIn_0_d_valid_T) @[Serdes.scala 637:46 chipyard.TestHarness.RocketConfig.fir 285068:4]
    auto_manager_in_d_bits_opcode <= inDes.io_out_bits_opcode @[Serdes.scala 460:17 chipyard.TestHarness.RocketConfig.fir 285070:4 Serdes.scala 461:15 chipyard.TestHarness.RocketConfig.fir 285071:4]
    auto_manager_in_d_bits_param <= bits(inDes.io_out_bits_param, 1, 0) @[Serdes.scala 460:17 chipyard.TestHarness.RocketConfig.fir 285070:4 Serdes.scala 462:15 chipyard.TestHarness.RocketConfig.fir 285072:4]
    auto_manager_in_d_bits_size <= inDes.io_out_bits_size @[Serdes.scala 460:17 chipyard.TestHarness.RocketConfig.fir 285070:4 Serdes.scala 463:15 chipyard.TestHarness.RocketConfig.fir 285073:4]
    auto_manager_in_d_bits_source <= bits(inDes.io_out_bits_source, 0, 0) @[Serdes.scala 460:17 chipyard.TestHarness.RocketConfig.fir 285070:4 Serdes.scala 464:15 chipyard.TestHarness.RocketConfig.fir 285074:4]
    auto_manager_in_d_bits_sink <= bits(_bundleIn_0_d_bits_d_sink_T, 2, 0) @[Serdes.scala 460:17 chipyard.TestHarness.RocketConfig.fir 285070:4 Serdes.scala 468:17 chipyard.TestHarness.RocketConfig.fir 285078:4]
    auto_manager_in_d_bits_denied <= bits(inDes.io_out_bits_union, 0, 0) @[Serdes.scala 469:30 chipyard.TestHarness.RocketConfig.fir 285079:4]
    auto_manager_in_d_bits_data <= inDes.io_out_bits_data @[Serdes.scala 460:17 chipyard.TestHarness.RocketConfig.fir 285070:4 Serdes.scala 465:15 chipyard.TestHarness.RocketConfig.fir 285075:4]
    auto_manager_in_d_bits_corrupt <= inDes.io_out_bits_corrupt @[Serdes.scala 460:17 chipyard.TestHarness.RocketConfig.fir 285070:4 Serdes.scala 467:17 chipyard.TestHarness.RocketConfig.fir 285076:4]
    auto_client_out_a_valid <= and(inDes.io_out_valid, _bundleOut_0_a_valid_T) @[Serdes.scala 631:45 chipyard.TestHarness.RocketConfig.fir 285002:4]
    auto_client_out_a_bits_opcode <= inDes.io_out_bits_opcode @[Serdes.scala 374:17 chipyard.TestHarness.RocketConfig.fir 285004:4 Serdes.scala 375:15 chipyard.TestHarness.RocketConfig.fir 285005:4]
    auto_client_out_a_bits_param <= inDes.io_out_bits_param @[Serdes.scala 374:17 chipyard.TestHarness.RocketConfig.fir 285004:4 Serdes.scala 376:15 chipyard.TestHarness.RocketConfig.fir 285006:4]
    auto_client_out_a_bits_size <= bits(inDes.io_out_bits_size, 2, 0) @[Serdes.scala 374:17 chipyard.TestHarness.RocketConfig.fir 285004:4 Serdes.scala 377:15 chipyard.TestHarness.RocketConfig.fir 285007:4]
    auto_client_out_a_bits_source <= inDes.io_out_bits_source @[Serdes.scala 374:17 chipyard.TestHarness.RocketConfig.fir 285004:4 Serdes.scala 378:15 chipyard.TestHarness.RocketConfig.fir 285008:4]
    auto_client_out_a_bits_address <= bits(inDes.io_out_bits_address, 28, 0) @[Serdes.scala 374:17 chipyard.TestHarness.RocketConfig.fir 285004:4 Serdes.scala 379:15 chipyard.TestHarness.RocketConfig.fir 285009:4]
    auto_client_out_a_bits_mask <= inDes.io_out_bits_union @[Serdes.scala 374:17 chipyard.TestHarness.RocketConfig.fir 285004:4 Serdes.scala 385:15 chipyard.TestHarness.RocketConfig.fir 285012:4]
    auto_client_out_a_bits_data <= inDes.io_out_bits_data @[Serdes.scala 374:17 chipyard.TestHarness.RocketConfig.fir 285004:4 Serdes.scala 380:15 chipyard.TestHarness.RocketConfig.fir 285010:4]
    auto_client_out_a_bits_corrupt <= inDes.io_out_bits_corrupt @[Serdes.scala 374:17 chipyard.TestHarness.RocketConfig.fir 285004:4 Serdes.scala 382:17 chipyard.TestHarness.RocketConfig.fir 285011:4]
    auto_client_out_d_ready <= outArb.io_in_1_ready @[Serdes.scala 357:22 chipyard.TestHarness.RocketConfig.fir 284783:4 Serdes.scala 625:18 chipyard.TestHarness.RocketConfig.fir 284979:4]
    io_ser_in_ready <= inDes.io_in_ready @[Serdes.scala 630:17 chipyard.TestHarness.RocketConfig.fir 285000:4]
    io_ser_out_valid <= outSer.io_out_valid @[Serdes.scala 627:16 chipyard.TestHarness.RocketConfig.fir 284993:4]
    io_ser_out_bits <= outSer.io_out_bits @[Serdes.scala 627:16 chipyard.TestHarness.RocketConfig.fir 284992:4]
    monitor.clock <= clock @[chipyard.TestHarness.RocketConfig.fir 284706:4]
    monitor.reset <= reset @[chipyard.TestHarness.RocketConfig.fir 284707:4]
    monitor.io_in_a_ready <= outArb.io_in_4_ready @[Serdes.scala 357:22 chipyard.TestHarness.RocketConfig.fir 284926:4 Serdes.scala 625:18 chipyard.TestHarness.RocketConfig.fir 284988:4]
    monitor.io_in_a_valid <= auto_manager_in_a_valid @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 284703:4 LazyModule.scala 309:16 chipyard.TestHarness.RocketConfig.fir 284729:4]
    monitor.io_in_a_bits_opcode <= auto_manager_in_a_bits_opcode @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 284703:4 LazyModule.scala 309:16 chipyard.TestHarness.RocketConfig.fir 284729:4]
    monitor.io_in_a_bits_param <= auto_manager_in_a_bits_param @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 284703:4 LazyModule.scala 309:16 chipyard.TestHarness.RocketConfig.fir 284729:4]
    monitor.io_in_a_bits_size <= auto_manager_in_a_bits_size @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 284703:4 LazyModule.scala 309:16 chipyard.TestHarness.RocketConfig.fir 284729:4]
    monitor.io_in_a_bits_source <= auto_manager_in_a_bits_source @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 284703:4 LazyModule.scala 309:16 chipyard.TestHarness.RocketConfig.fir 284729:4]
    monitor.io_in_a_bits_address <= auto_manager_in_a_bits_address @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 284703:4 LazyModule.scala 309:16 chipyard.TestHarness.RocketConfig.fir 284729:4]
    monitor.io_in_a_bits_mask <= auto_manager_in_a_bits_mask @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 284703:4 LazyModule.scala 309:16 chipyard.TestHarness.RocketConfig.fir 284729:4]
    monitor.io_in_a_bits_corrupt <= auto_manager_in_a_bits_corrupt @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 284703:4 LazyModule.scala 309:16 chipyard.TestHarness.RocketConfig.fir 284729:4]
    monitor.io_in_d_ready <= auto_manager_in_d_ready @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 284703:4 LazyModule.scala 309:16 chipyard.TestHarness.RocketConfig.fir 284729:4]
    monitor.io_in_d_valid <= and(inDes.io_out_valid, _bundleIn_0_d_valid_T) @[Serdes.scala 637:46 chipyard.TestHarness.RocketConfig.fir 285068:4]
    monitor.io_in_d_bits_opcode <= inDes.io_out_bits_opcode @[Serdes.scala 460:17 chipyard.TestHarness.RocketConfig.fir 285070:4 Serdes.scala 461:15 chipyard.TestHarness.RocketConfig.fir 285071:4]
    monitor.io_in_d_bits_param <= bits(inDes.io_out_bits_param, 1, 0) @[Serdes.scala 460:17 chipyard.TestHarness.RocketConfig.fir 285070:4 Serdes.scala 462:15 chipyard.TestHarness.RocketConfig.fir 285072:4]
    monitor.io_in_d_bits_size <= inDes.io_out_bits_size @[Serdes.scala 460:17 chipyard.TestHarness.RocketConfig.fir 285070:4 Serdes.scala 463:15 chipyard.TestHarness.RocketConfig.fir 285073:4]
    monitor.io_in_d_bits_source <= bits(inDes.io_out_bits_source, 0, 0) @[Serdes.scala 460:17 chipyard.TestHarness.RocketConfig.fir 285070:4 Serdes.scala 464:15 chipyard.TestHarness.RocketConfig.fir 285074:4]
    monitor.io_in_d_bits_sink <= bits(_bundleIn_0_d_bits_d_sink_T, 2, 0) @[Serdes.scala 460:17 chipyard.TestHarness.RocketConfig.fir 285070:4 Serdes.scala 468:17 chipyard.TestHarness.RocketConfig.fir 285078:4]
    monitor.io_in_d_bits_denied <= bits(inDes.io_out_bits_union, 0, 0) @[Serdes.scala 469:30 chipyard.TestHarness.RocketConfig.fir 285079:4]
    monitor.io_in_d_bits_corrupt <= inDes.io_out_bits_corrupt @[Serdes.scala 460:17 chipyard.TestHarness.RocketConfig.fir 285070:4 Serdes.scala 467:17 chipyard.TestHarness.RocketConfig.fir 285076:4]
    outArb.clock <= clock @[chipyard.TestHarness.RocketConfig.fir 284737:4]
    outArb.reset <= reset @[chipyard.TestHarness.RocketConfig.fir 284738:4]
    outArb.io_in_1_valid <= auto_client_out_d_valid @[Nodes.scala 1207:84 chipyard.TestHarness.RocketConfig.fir 284701:4 LazyModule.scala 311:12 chipyard.TestHarness.RocketConfig.fir 284728:4]
    outArb.io_in_1_bits_opcode <= auto_client_out_d_bits_opcode @[Nodes.scala 1207:84 chipyard.TestHarness.RocketConfig.fir 284701:4 LazyModule.scala 311:12 chipyard.TestHarness.RocketConfig.fir 284728:4]
    outArb.io_in_1_bits_param <= pad(auto_client_out_d_bits_param, 3) @[Serdes.scala 312:22 chipyard.TestHarness.RocketConfig.fir 284785:4 Serdes.scala 315:20 chipyard.TestHarness.RocketConfig.fir 284788:4]
    outArb.io_in_1_bits_size <= pad(auto_client_out_d_bits_size, 4) @[Serdes.scala 312:22 chipyard.TestHarness.RocketConfig.fir 284785:4 Serdes.scala 316:20 chipyard.TestHarness.RocketConfig.fir 284789:4]
    outArb.io_in_1_bits_source <= auto_client_out_d_bits_source @[Nodes.scala 1207:84 chipyard.TestHarness.RocketConfig.fir 284701:4 LazyModule.scala 311:12 chipyard.TestHarness.RocketConfig.fir 284728:4]
    outArb.io_in_1_bits_data <= auto_client_out_d_bits_data @[Nodes.scala 1207:84 chipyard.TestHarness.RocketConfig.fir 284701:4 LazyModule.scala 311:12 chipyard.TestHarness.RocketConfig.fir 284728:4]
    outArb.io_in_1_bits_corrupt <= auto_client_out_d_bits_corrupt @[Nodes.scala 1207:84 chipyard.TestHarness.RocketConfig.fir 284701:4 LazyModule.scala 311:12 chipyard.TestHarness.RocketConfig.fir 284728:4]
    outArb.io_in_1_bits_union <= pad(_merged_bits_merged_union_T_1, 8) @[Serdes.scala 312:22 chipyard.TestHarness.RocketConfig.fir 284785:4 Serdes.scala 322:22 chipyard.TestHarness.RocketConfig.fir 284795:4]
    outArb.io_in_1_bits_last <= or(_merged_bits_last_last_T_2, _merged_bits_last_last_T_3) @[Edges.scala 231:37 chipyard.TestHarness.RocketConfig.fir 284821:4]
    outArb.io_in_4_valid <= auto_manager_in_a_valid @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 284703:4 LazyModule.scala 309:16 chipyard.TestHarness.RocketConfig.fir 284729:4]
    outArb.io_in_4_bits_opcode <= auto_manager_in_a_bits_opcode @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 284703:4 LazyModule.scala 309:16 chipyard.TestHarness.RocketConfig.fir 284729:4]
    outArb.io_in_4_bits_param <= auto_manager_in_a_bits_param @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 284703:4 LazyModule.scala 309:16 chipyard.TestHarness.RocketConfig.fir 284729:4]
    outArb.io_in_4_bits_size <= auto_manager_in_a_bits_size @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 284703:4 LazyModule.scala 309:16 chipyard.TestHarness.RocketConfig.fir 284729:4]
    outArb.io_in_4_bits_source <= pad(auto_manager_in_a_bits_source, 4) @[Serdes.scala 255:22 chipyard.TestHarness.RocketConfig.fir 284928:4 Serdes.scala 260:20 chipyard.TestHarness.RocketConfig.fir 284933:4]
    outArb.io_in_4_bits_address <= auto_manager_in_a_bits_address @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 284703:4 LazyModule.scala 309:16 chipyard.TestHarness.RocketConfig.fir 284729:4]
    outArb.io_in_4_bits_data <= auto_manager_in_a_bits_data @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 284703:4 LazyModule.scala 309:16 chipyard.TestHarness.RocketConfig.fir 284729:4]
    outArb.io_in_4_bits_corrupt <= auto_manager_in_a_bits_corrupt @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 284703:4 LazyModule.scala 309:16 chipyard.TestHarness.RocketConfig.fir 284729:4]
    outArb.io_in_4_bits_union <= auto_manager_in_a_bits_mask @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 284703:4 LazyModule.scala 309:16 chipyard.TestHarness.RocketConfig.fir 284729:4]
    outArb.io_in_4_bits_last <= or(_merged_bits_last_last_T_8, _merged_bits_last_last_T_9) @[Edges.scala 231:37 chipyard.TestHarness.RocketConfig.fir 284964:4]
    outArb.io_out_ready <= outSer.io_in_ready @[Serdes.scala 626:18 chipyard.TestHarness.RocketConfig.fir 284991:4]
    outSer.clock <= clock @[chipyard.TestHarness.RocketConfig.fir 284740:4]
    outSer.reset <= reset @[chipyard.TestHarness.RocketConfig.fir 284741:4]
    outSer.io_in_valid <= outArb.io_out_valid @[Serdes.scala 626:18 chipyard.TestHarness.RocketConfig.fir 284990:4]
    outSer.io_in_bits_chanId <= outArb.io_out_bits_chanId @[Serdes.scala 626:18 chipyard.TestHarness.RocketConfig.fir 284989:4]
    outSer.io_in_bits_opcode <= outArb.io_out_bits_opcode @[Serdes.scala 626:18 chipyard.TestHarness.RocketConfig.fir 284989:4]
    outSer.io_in_bits_param <= outArb.io_out_bits_param @[Serdes.scala 626:18 chipyard.TestHarness.RocketConfig.fir 284989:4]
    outSer.io_in_bits_size <= outArb.io_out_bits_size @[Serdes.scala 626:18 chipyard.TestHarness.RocketConfig.fir 284989:4]
    outSer.io_in_bits_source <= outArb.io_out_bits_source @[Serdes.scala 626:18 chipyard.TestHarness.RocketConfig.fir 284989:4]
    outSer.io_in_bits_address <= outArb.io_out_bits_address @[Serdes.scala 626:18 chipyard.TestHarness.RocketConfig.fir 284989:4]
    outSer.io_in_bits_data <= outArb.io_out_bits_data @[Serdes.scala 626:18 chipyard.TestHarness.RocketConfig.fir 284989:4]
    outSer.io_in_bits_corrupt <= outArb.io_out_bits_corrupt @[Serdes.scala 626:18 chipyard.TestHarness.RocketConfig.fir 284989:4]
    outSer.io_in_bits_union <= outArb.io_out_bits_union @[Serdes.scala 626:18 chipyard.TestHarness.RocketConfig.fir 284989:4]
    outSer.io_in_bits_last <= outArb.io_out_bits_last @[Serdes.scala 626:18 chipyard.TestHarness.RocketConfig.fir 284989:4]
    outSer.io_out_ready <= io_ser_out_ready @[Serdes.scala 627:16 chipyard.TestHarness.RocketConfig.fir 284994:4]
    merged_bits_last_counter_1 <= mux(reset, UInt<3>("h0"), _GEN_1) @[Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 284815:4 Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 284815:4]
    merged_bits_last_counter_4 <= mux(reset, UInt<3>("h0"), _GEN_4) @[Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 284958:4 Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 284958:4]
    inDes.clock <= clock @[chipyard.TestHarness.RocketConfig.fir 284996:4]
    inDes.reset <= reset @[chipyard.TestHarness.RocketConfig.fir 284997:4]
    inDes.io_in_valid <= io_ser_in_valid @[Serdes.scala 630:17 chipyard.TestHarness.RocketConfig.fir 284999:4]
    inDes.io_in_bits <= io_ser_in_bits @[Serdes.scala 630:17 chipyard.TestHarness.RocketConfig.fir 284998:4]
    inDes.io_out_ready <= mux(_inDes_io_out_ready_T_8, UInt<1>("h0"), _inDes_io_out_ready_T_7) @[Mux.scala 80:57 chipyard.TestHarness.RocketConfig.fir 285115:4]

  module TLMonitor_54_inTestHarness : @[chipyard.TestHarness.RocketConfig.fir 285134:2]
    input clock : Clock @[chipyard.TestHarness.RocketConfig.fir 285135:4]
    input reset : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 285136:4]
    input io_in_a_ready : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 285137:4]
    input io_in_a_valid : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 285137:4]
    input io_in_a_bits_opcode : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 285137:4]
    input io_in_a_bits_param : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 285137:4]
    input io_in_a_bits_size : UInt<2> @[chipyard.TestHarness.RocketConfig.fir 285137:4]
    input io_in_a_bits_source : UInt<8> @[chipyard.TestHarness.RocketConfig.fir 285137:4]
    input io_in_a_bits_address : UInt<29> @[chipyard.TestHarness.RocketConfig.fir 285137:4]
    input io_in_a_bits_mask : UInt<8> @[chipyard.TestHarness.RocketConfig.fir 285137:4]
    input io_in_a_bits_corrupt : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 285137:4]
    input io_in_d_ready : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 285137:4]
    input io_in_d_valid : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 285137:4]
    input io_in_d_bits_opcode : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 285137:4]
    input io_in_d_bits_size : UInt<2> @[chipyard.TestHarness.RocketConfig.fir 285137:4]
    input io_in_d_bits_source : UInt<8> @[chipyard.TestHarness.RocketConfig.fir 285137:4]

    inst plusarg_reader of plusarg_reader @[PlusArg.scala 80:11 chipyard.TestHarness.RocketConfig.fir 286628:4]
    inst plusarg_reader_1 of plusarg_reader @[PlusArg.scala 80:11 chipyard.TestHarness.RocketConfig.fir 286935:4]
    node _source_ok_T_4 = leq(io_in_a_bits_source, UInt<8>("h9f")) @[Parameters.scala 57:20 chipyard.TestHarness.RocketConfig.fir 285154:6]
    node _is_aligned_mask_T_1 = dshlw(UInt<6>("h7"), io_in_a_bits_size) @[package.scala 234:77 chipyard.TestHarness.RocketConfig.fir 285160:6]
    node _is_aligned_mask_T_2 = bits(_is_aligned_mask_T_1, 2, 0) @[package.scala 234:82 chipyard.TestHarness.RocketConfig.fir 285161:6]
    node is_aligned_mask = not(_is_aligned_mask_T_2) @[package.scala 234:46 chipyard.TestHarness.RocketConfig.fir 285162:6]
    node _GEN_71 = pad(is_aligned_mask, 29) @[Edges.scala 20:16 chipyard.TestHarness.RocketConfig.fir 285163:6]
    node _is_aligned_T = and(io_in_a_bits_address, _GEN_71) @[Edges.scala 20:16 chipyard.TestHarness.RocketConfig.fir 285163:6]
    node is_aligned = eq(_is_aligned_T, UInt<29>("h0")) @[Edges.scala 20:24 chipyard.TestHarness.RocketConfig.fir 285164:6]
    node _mask_sizeOH_T = pad(io_in_a_bits_size, 3) @[Misc.scala 201:34 chipyard.TestHarness.RocketConfig.fir 285165:6]
    node mask_sizeOH_shiftAmount = bits(_mask_sizeOH_T, 1, 0) @[OneHot.scala 64:49 chipyard.TestHarness.RocketConfig.fir 285166:6]
    node _mask_sizeOH_T_1 = dshlw(UInt<4>("h1"), mask_sizeOH_shiftAmount) @[OneHot.scala 65:12 chipyard.TestHarness.RocketConfig.fir 285167:6]
    node _mask_sizeOH_T_2 = bits(_mask_sizeOH_T_1, 2, 0) @[OneHot.scala 65:27 chipyard.TestHarness.RocketConfig.fir 285168:6]
    node mask_sizeOH = or(_mask_sizeOH_T_2, UInt<3>("h1")) @[Misc.scala 201:81 chipyard.TestHarness.RocketConfig.fir 285169:6]
    node _mask_T = geq(io_in_a_bits_size, UInt<2>("h3")) @[Misc.scala 205:21 chipyard.TestHarness.RocketConfig.fir 285170:6]
    node mask_size = bits(mask_sizeOH, 2, 2) @[Misc.scala 208:26 chipyard.TestHarness.RocketConfig.fir 285171:6]
    node mask_bit = bits(io_in_a_bits_address, 2, 2) @[Misc.scala 209:26 chipyard.TestHarness.RocketConfig.fir 285172:6]
    node mask_nbit = not(mask_bit) @[Misc.scala 210:20 chipyard.TestHarness.RocketConfig.fir 285173:6]
    node _mask_acc_T = and(mask_size, mask_nbit) @[Misc.scala 214:38 chipyard.TestHarness.RocketConfig.fir 285175:6]
    node mask_acc = or(_mask_T, _mask_acc_T) @[Misc.scala 214:29 chipyard.TestHarness.RocketConfig.fir 285176:6]
    node _mask_acc_T_1 = and(mask_size, mask_bit) @[Misc.scala 214:38 chipyard.TestHarness.RocketConfig.fir 285178:6]
    node mask_acc_1 = or(_mask_T, _mask_acc_T_1) @[Misc.scala 214:29 chipyard.TestHarness.RocketConfig.fir 285179:6]
    node mask_size_1 = bits(mask_sizeOH, 1, 1) @[Misc.scala 208:26 chipyard.TestHarness.RocketConfig.fir 285180:6]
    node mask_bit_1 = bits(io_in_a_bits_address, 1, 1) @[Misc.scala 209:26 chipyard.TestHarness.RocketConfig.fir 285181:6]
    node mask_nbit_1 = not(mask_bit_1) @[Misc.scala 210:20 chipyard.TestHarness.RocketConfig.fir 285182:6]
    node mask_eq_2 = and(mask_nbit, mask_nbit_1) @[Misc.scala 213:27 chipyard.TestHarness.RocketConfig.fir 285183:6]
    node _mask_acc_T_2 = and(mask_size_1, mask_eq_2) @[Misc.scala 214:38 chipyard.TestHarness.RocketConfig.fir 285184:6]
    node mask_acc_2 = or(mask_acc, _mask_acc_T_2) @[Misc.scala 214:29 chipyard.TestHarness.RocketConfig.fir 285185:6]
    node mask_eq_3 = and(mask_nbit, mask_bit_1) @[Misc.scala 213:27 chipyard.TestHarness.RocketConfig.fir 285186:6]
    node _mask_acc_T_3 = and(mask_size_1, mask_eq_3) @[Misc.scala 214:38 chipyard.TestHarness.RocketConfig.fir 285187:6]
    node mask_acc_3 = or(mask_acc, _mask_acc_T_3) @[Misc.scala 214:29 chipyard.TestHarness.RocketConfig.fir 285188:6]
    node mask_eq_4 = and(mask_bit, mask_nbit_1) @[Misc.scala 213:27 chipyard.TestHarness.RocketConfig.fir 285189:6]
    node _mask_acc_T_4 = and(mask_size_1, mask_eq_4) @[Misc.scala 214:38 chipyard.TestHarness.RocketConfig.fir 285190:6]
    node mask_acc_4 = or(mask_acc_1, _mask_acc_T_4) @[Misc.scala 214:29 chipyard.TestHarness.RocketConfig.fir 285191:6]
    node mask_eq_5 = and(mask_bit, mask_bit_1) @[Misc.scala 213:27 chipyard.TestHarness.RocketConfig.fir 285192:6]
    node _mask_acc_T_5 = and(mask_size_1, mask_eq_5) @[Misc.scala 214:38 chipyard.TestHarness.RocketConfig.fir 285193:6]
    node mask_acc_5 = or(mask_acc_1, _mask_acc_T_5) @[Misc.scala 214:29 chipyard.TestHarness.RocketConfig.fir 285194:6]
    node mask_size_2 = bits(mask_sizeOH, 0, 0) @[Misc.scala 208:26 chipyard.TestHarness.RocketConfig.fir 285195:6]
    node mask_bit_2 = bits(io_in_a_bits_address, 0, 0) @[Misc.scala 209:26 chipyard.TestHarness.RocketConfig.fir 285196:6]
    node mask_nbit_2 = not(mask_bit_2) @[Misc.scala 210:20 chipyard.TestHarness.RocketConfig.fir 285197:6]
    node mask_eq_6 = and(mask_eq_2, mask_nbit_2) @[Misc.scala 213:27 chipyard.TestHarness.RocketConfig.fir 285198:6]
    node _mask_acc_T_6 = and(mask_size_2, mask_eq_6) @[Misc.scala 214:38 chipyard.TestHarness.RocketConfig.fir 285199:6]
    node mask_lo_lo_lo = or(mask_acc_2, _mask_acc_T_6) @[Misc.scala 214:29 chipyard.TestHarness.RocketConfig.fir 285200:6]
    node mask_eq_7 = and(mask_eq_2, mask_bit_2) @[Misc.scala 213:27 chipyard.TestHarness.RocketConfig.fir 285201:6]
    node _mask_acc_T_7 = and(mask_size_2, mask_eq_7) @[Misc.scala 214:38 chipyard.TestHarness.RocketConfig.fir 285202:6]
    node mask_lo_lo_hi = or(mask_acc_2, _mask_acc_T_7) @[Misc.scala 214:29 chipyard.TestHarness.RocketConfig.fir 285203:6]
    node mask_eq_8 = and(mask_eq_3, mask_nbit_2) @[Misc.scala 213:27 chipyard.TestHarness.RocketConfig.fir 285204:6]
    node _mask_acc_T_8 = and(mask_size_2, mask_eq_8) @[Misc.scala 214:38 chipyard.TestHarness.RocketConfig.fir 285205:6]
    node mask_lo_hi_lo = or(mask_acc_3, _mask_acc_T_8) @[Misc.scala 214:29 chipyard.TestHarness.RocketConfig.fir 285206:6]
    node mask_eq_9 = and(mask_eq_3, mask_bit_2) @[Misc.scala 213:27 chipyard.TestHarness.RocketConfig.fir 285207:6]
    node _mask_acc_T_9 = and(mask_size_2, mask_eq_9) @[Misc.scala 214:38 chipyard.TestHarness.RocketConfig.fir 285208:6]
    node mask_lo_hi_hi = or(mask_acc_3, _mask_acc_T_9) @[Misc.scala 214:29 chipyard.TestHarness.RocketConfig.fir 285209:6]
    node mask_eq_10 = and(mask_eq_4, mask_nbit_2) @[Misc.scala 213:27 chipyard.TestHarness.RocketConfig.fir 285210:6]
    node _mask_acc_T_10 = and(mask_size_2, mask_eq_10) @[Misc.scala 214:38 chipyard.TestHarness.RocketConfig.fir 285211:6]
    node mask_hi_lo_lo = or(mask_acc_4, _mask_acc_T_10) @[Misc.scala 214:29 chipyard.TestHarness.RocketConfig.fir 285212:6]
    node mask_eq_11 = and(mask_eq_4, mask_bit_2) @[Misc.scala 213:27 chipyard.TestHarness.RocketConfig.fir 285213:6]
    node _mask_acc_T_11 = and(mask_size_2, mask_eq_11) @[Misc.scala 214:38 chipyard.TestHarness.RocketConfig.fir 285214:6]
    node mask_hi_lo_hi = or(mask_acc_4, _mask_acc_T_11) @[Misc.scala 214:29 chipyard.TestHarness.RocketConfig.fir 285215:6]
    node mask_eq_12 = and(mask_eq_5, mask_nbit_2) @[Misc.scala 213:27 chipyard.TestHarness.RocketConfig.fir 285216:6]
    node _mask_acc_T_12 = and(mask_size_2, mask_eq_12) @[Misc.scala 214:38 chipyard.TestHarness.RocketConfig.fir 285217:6]
    node mask_hi_hi_lo = or(mask_acc_5, _mask_acc_T_12) @[Misc.scala 214:29 chipyard.TestHarness.RocketConfig.fir 285218:6]
    node mask_eq_13 = and(mask_eq_5, mask_bit_2) @[Misc.scala 213:27 chipyard.TestHarness.RocketConfig.fir 285219:6]
    node _mask_acc_T_13 = and(mask_size_2, mask_eq_13) @[Misc.scala 214:38 chipyard.TestHarness.RocketConfig.fir 285220:6]
    node mask_hi_hi_hi = or(mask_acc_5, _mask_acc_T_13) @[Misc.scala 214:29 chipyard.TestHarness.RocketConfig.fir 285221:6]
    node mask = cat(cat(cat(mask_hi_hi_hi, mask_hi_hi_lo), cat(mask_hi_lo_hi, mask_hi_lo_lo)), cat(cat(mask_lo_hi_hi, mask_lo_hi_lo), cat(mask_lo_lo_hi, mask_lo_lo_lo))) @[Cat.scala 30:58 chipyard.TestHarness.RocketConfig.fir 285228:6]
    node _T_20 = eq(io_in_a_bits_opcode, UInt<3>("h6")) @[Monitor.scala 81:25 chipyard.TestHarness.RocketConfig.fir 285251:6]
    node _T_33 = xor(io_in_a_bits_address, UInt<29>("h10000000")) @[Parameters.scala 137:31 chipyard.TestHarness.RocketConfig.fir 285267:8]
    node _T_34 = cvt(_T_33) @[Parameters.scala 137:49 chipyard.TestHarness.RocketConfig.fir 285268:8]
    node _T_35 = and(_T_34, SInt<30>("h-1000")) @[Parameters.scala 137:52 chipyard.TestHarness.RocketConfig.fir 285269:8]
    node _T_36 = asSInt(_T_35) @[Parameters.scala 137:52 chipyard.TestHarness.RocketConfig.fir 285270:8]
    node _T_37 = eq(_T_36, SInt<30>("h0")) @[Parameters.scala 137:67 chipyard.TestHarness.RocketConfig.fir 285271:8]
    node _T_43 = not(reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285277:8]
    node _T_60 = or(_source_ok_T_4, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285302:8]
    node _T_61 = not(_T_60) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285303:8]
    node _T_64 = or(_mask_T, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285310:8]
    node _T_65 = not(_T_64) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285311:8]
    node _T_67 = or(is_aligned, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285317:8]
    node _T_68 = not(_T_67) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285318:8]
    node _T_69 = leq(io_in_a_bits_param, UInt<3>("h2")) @[Bundles.scala 108:27 chipyard.TestHarness.RocketConfig.fir 285323:8]
    node _T_71 = or(_T_69, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285325:8]
    node _T_72 = not(_T_71) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285326:8]
    node _T_73 = not(io_in_a_bits_mask) @[Monitor.scala 88:18 chipyard.TestHarness.RocketConfig.fir 285331:8]
    node _T_74 = eq(_T_73, UInt<8>("h0")) @[Monitor.scala 88:31 chipyard.TestHarness.RocketConfig.fir 285332:8]
    node _T_76 = or(_T_74, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285334:8]
    node _T_77 = not(_T_76) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285335:8]
    node _T_78 = not(io_in_a_bits_corrupt) @[Monitor.scala 89:18 chipyard.TestHarness.RocketConfig.fir 285340:8]
    node _T_80 = or(_T_78, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285342:8]
    node _T_81 = not(_T_80) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285343:8]
    node _T_82 = eq(io_in_a_bits_opcode, UInt<3>("h7")) @[Monitor.scala 92:25 chipyard.TestHarness.RocketConfig.fir 285349:6]
    node _T_135 = neq(io_in_a_bits_param, UInt<3>("h0")) @[Monitor.scala 99:31 chipyard.TestHarness.RocketConfig.fir 285429:8]
    node _T_137 = or(_T_135, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285431:8]
    node _T_138 = not(_T_137) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285432:8]
    node _T_148 = eq(io_in_a_bits_opcode, UInt<3>("h4")) @[Monitor.scala 104:25 chipyard.TestHarness.RocketConfig.fir 285455:6]
    node _T_175 = or(_T_37, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285489:8]
    node _T_176 = not(_T_175) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285490:8]
    node _T_183 = eq(io_in_a_bits_param, UInt<3>("h0")) @[Monitor.scala 109:31 chipyard.TestHarness.RocketConfig.fir 285509:8]
    node _T_185 = or(_T_183, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285511:8]
    node _T_186 = not(_T_185) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285512:8]
    node _T_187 = eq(io_in_a_bits_mask, mask) @[Monitor.scala 110:30 chipyard.TestHarness.RocketConfig.fir 285517:8]
    node _T_189 = or(_T_187, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285519:8]
    node _T_190 = not(_T_189) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285520:8]
    node _T_195 = eq(io_in_a_bits_opcode, UInt<3>("h0")) @[Monitor.scala 114:25 chipyard.TestHarness.RocketConfig.fir 285534:6]
    node _T_218 = and(_source_ok_T_4, _T_37) @[Monitor.scala 115:71 chipyard.TestHarness.RocketConfig.fir 285560:8]
    node _T_220 = or(_T_218, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285562:8]
    node _T_221 = not(_T_220) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285563:8]
    node _T_236 = eq(io_in_a_bits_opcode, UInt<3>("h1")) @[Monitor.scala 122:25 chipyard.TestHarness.RocketConfig.fir 285599:6]
    node _T_273 = not(mask) @[Monitor.scala 127:33 chipyard.TestHarness.RocketConfig.fir 285655:8]
    node _T_274 = and(io_in_a_bits_mask, _T_273) @[Monitor.scala 127:31 chipyard.TestHarness.RocketConfig.fir 285656:8]
    node _T_275 = eq(_T_274, UInt<8>("h0")) @[Monitor.scala 127:40 chipyard.TestHarness.RocketConfig.fir 285657:8]
    node _T_277 = or(_T_275, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285659:8]
    node _T_278 = not(_T_277) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285660:8]
    node _T_279 = eq(io_in_a_bits_opcode, UInt<3>("h2")) @[Monitor.scala 130:25 chipyard.TestHarness.RocketConfig.fir 285666:6]
    node _T_309 = leq(io_in_a_bits_param, UInt<3>("h4")) @[Bundles.scala 138:33 chipyard.TestHarness.RocketConfig.fir 285711:8]
    node _T_311 = or(_T_309, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285713:8]
    node _T_312 = not(_T_311) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285714:8]
    node _T_317 = eq(io_in_a_bits_opcode, UInt<3>("h3")) @[Monitor.scala 138:25 chipyard.TestHarness.RocketConfig.fir 285728:6]
    node _T_347 = leq(io_in_a_bits_param, UInt<3>("h3")) @[Bundles.scala 145:30 chipyard.TestHarness.RocketConfig.fir 285773:8]
    node _T_349 = or(_T_347, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285775:8]
    node _T_350 = not(_T_349) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285776:8]
    node _T_355 = eq(io_in_a_bits_opcode, UInt<3>("h5")) @[Monitor.scala 146:25 chipyard.TestHarness.RocketConfig.fir 285790:6]
    node _T_385 = leq(io_in_a_bits_param, UInt<3>("h1")) @[Bundles.scala 158:28 chipyard.TestHarness.RocketConfig.fir 285835:8]
    node _T_387 = or(_T_385, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285837:8]
    node _T_388 = not(_T_387) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285838:8]
    node _T_397 = leq(io_in_d_bits_opcode, UInt<3>("h6")) @[Bundles.scala 42:24 chipyard.TestHarness.RocketConfig.fir 285862:6]
    node _T_399 = or(_T_397, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 285864:6]
    node _T_400 = not(_T_399) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 285865:6]
    node _source_ok_T_10 = leq(io_in_d_bits_source, UInt<8>("h9f")) @[Parameters.scala 57:20 chipyard.TestHarness.RocketConfig.fir 285876:6]
    node _T_401 = eq(io_in_d_bits_opcode, UInt<3>("h6")) @[Monitor.scala 310:25 chipyard.TestHarness.RocketConfig.fir 285882:6]
    node _T_403 = or(_source_ok_T_10, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 285885:8]
    node _T_404 = not(_T_403) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 285886:8]
    node _T_405 = geq(io_in_d_bits_size, UInt<2>("h3")) @[Monitor.scala 312:27 chipyard.TestHarness.RocketConfig.fir 285891:8]
    node _T_407 = or(_T_405, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 285893:8]
    node _T_408 = not(_T_407) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 285894:8]
    node _T_421 = eq(io_in_d_bits_opcode, UInt<3>("h4")) @[Monitor.scala 318:25 chipyard.TestHarness.RocketConfig.fir 285924:6]
    node _T_449 = eq(io_in_d_bits_opcode, UInt<3>("h5")) @[Monitor.scala 328:25 chipyard.TestHarness.RocketConfig.fir 285982:6]
    node _T_478 = eq(io_in_d_bits_opcode, UInt<3>("h0")) @[Monitor.scala 338:25 chipyard.TestHarness.RocketConfig.fir 286041:6]
    node _T_495 = eq(io_in_d_bits_opcode, UInt<3>("h1")) @[Monitor.scala 346:25 chipyard.TestHarness.RocketConfig.fir 286076:6]
    node _T_513 = eq(io_in_d_bits_opcode, UInt<3>("h2")) @[Monitor.scala 354:25 chipyard.TestHarness.RocketConfig.fir 286112:6]
    node a_first_done = and(io_in_a_ready, io_in_a_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.RocketConfig.fir 286178:4]
    reg a_first_counter : UInt<1>, clock with :
      reset => (UInt<1>("h0"), a_first_counter) @[Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 286187:4]
    node _a_first_counter1_T = sub(a_first_counter, UInt<1>("h1")) @[Edges.scala 229:28 chipyard.TestHarness.RocketConfig.fir 286188:4]
    node a_first_counter1 = tail(_a_first_counter1_T, 1) @[Edges.scala 229:28 chipyard.TestHarness.RocketConfig.fir 286189:4]
    node a_first = not(a_first_counter) @[Edges.scala 230:25 chipyard.TestHarness.RocketConfig.fir 286190:4]
    node _a_first_counter_T = mux(a_first, UInt<1>("h0"), a_first_counter1) @[Edges.scala 235:21 chipyard.TestHarness.RocketConfig.fir 286198:6]
    node _GEN_0 = mux(a_first_done, _a_first_counter_T, a_first_counter) @[Edges.scala 234:17 chipyard.TestHarness.RocketConfig.fir 286197:4 Edges.scala 235:15 chipyard.TestHarness.RocketConfig.fir 286199:6 Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 286187:4]
    reg opcode : UInt<3>, clock with :
      reset => (UInt<1>("h0"), opcode) @[Monitor.scala 384:22 chipyard.TestHarness.RocketConfig.fir 286201:4]
    reg param : UInt<3>, clock with :
      reset => (UInt<1>("h0"), param) @[Monitor.scala 385:22 chipyard.TestHarness.RocketConfig.fir 286202:4]
    reg size : UInt<2>, clock with :
      reset => (UInt<1>("h0"), size) @[Monitor.scala 386:22 chipyard.TestHarness.RocketConfig.fir 286203:4]
    reg source : UInt<8>, clock with :
      reset => (UInt<1>("h0"), source) @[Monitor.scala 387:22 chipyard.TestHarness.RocketConfig.fir 286204:4]
    reg address : UInt<29>, clock with :
      reset => (UInt<1>("h0"), address) @[Monitor.scala 388:22 chipyard.TestHarness.RocketConfig.fir 286205:4]
    node _T_542 = not(a_first) @[Monitor.scala 389:22 chipyard.TestHarness.RocketConfig.fir 286206:4]
    node _T_543 = and(io_in_a_valid, _T_542) @[Monitor.scala 389:19 chipyard.TestHarness.RocketConfig.fir 286207:4]
    node _T_544 = eq(io_in_a_bits_opcode, opcode) @[Monitor.scala 390:32 chipyard.TestHarness.RocketConfig.fir 286209:6]
    node _T_546 = or(_T_544, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 286211:6]
    node _T_547 = not(_T_546) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 286212:6]
    node _T_548 = eq(io_in_a_bits_param, param) @[Monitor.scala 391:32 chipyard.TestHarness.RocketConfig.fir 286217:6]
    node _T_550 = or(_T_548, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 286219:6]
    node _T_551 = not(_T_550) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 286220:6]
    node _T_552 = eq(io_in_a_bits_size, size) @[Monitor.scala 392:32 chipyard.TestHarness.RocketConfig.fir 286225:6]
    node _T_554 = or(_T_552, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 286227:6]
    node _T_555 = not(_T_554) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 286228:6]
    node _T_556 = eq(io_in_a_bits_source, source) @[Monitor.scala 393:32 chipyard.TestHarness.RocketConfig.fir 286233:6]
    node _T_558 = or(_T_556, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 286235:6]
    node _T_559 = not(_T_558) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 286236:6]
    node _T_560 = eq(io_in_a_bits_address, address) @[Monitor.scala 394:32 chipyard.TestHarness.RocketConfig.fir 286241:6]
    node _T_562 = or(_T_560, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 286243:6]
    node _T_563 = not(_T_562) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 286244:6]
    node _T_565 = and(a_first_done, a_first) @[Monitor.scala 396:20 chipyard.TestHarness.RocketConfig.fir 286251:4]
    node d_first_done = and(io_in_d_ready, io_in_d_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.RocketConfig.fir 286259:4]
    reg d_first_counter : UInt<1>, clock with :
      reset => (UInt<1>("h0"), d_first_counter) @[Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 286267:4]
    node _d_first_counter1_T = sub(d_first_counter, UInt<1>("h1")) @[Edges.scala 229:28 chipyard.TestHarness.RocketConfig.fir 286268:4]
    node d_first_counter1 = tail(_d_first_counter1_T, 1) @[Edges.scala 229:28 chipyard.TestHarness.RocketConfig.fir 286269:4]
    node d_first = not(d_first_counter) @[Edges.scala 230:25 chipyard.TestHarness.RocketConfig.fir 286270:4]
    node _d_first_counter_T = mux(d_first, UInt<1>("h0"), d_first_counter1) @[Edges.scala 235:21 chipyard.TestHarness.RocketConfig.fir 286278:6]
    node _GEN_6 = mux(d_first_done, _d_first_counter_T, d_first_counter) @[Edges.scala 234:17 chipyard.TestHarness.RocketConfig.fir 286277:4 Edges.scala 235:15 chipyard.TestHarness.RocketConfig.fir 286279:6 Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 286267:4]
    reg opcode_1 : UInt<3>, clock with :
      reset => (UInt<1>("h0"), opcode_1) @[Monitor.scala 535:22 chipyard.TestHarness.RocketConfig.fir 286281:4]
    reg size_1 : UInt<2>, clock with :
      reset => (UInt<1>("h0"), size_1) @[Monitor.scala 537:22 chipyard.TestHarness.RocketConfig.fir 286283:4]
    reg source_1 : UInt<8>, clock with :
      reset => (UInt<1>("h0"), source_1) @[Monitor.scala 538:22 chipyard.TestHarness.RocketConfig.fir 286284:4]
    node _T_566 = not(d_first) @[Monitor.scala 541:22 chipyard.TestHarness.RocketConfig.fir 286287:4]
    node _T_567 = and(io_in_d_valid, _T_566) @[Monitor.scala 541:19 chipyard.TestHarness.RocketConfig.fir 286288:4]
    node _T_568 = eq(io_in_d_bits_opcode, opcode_1) @[Monitor.scala 542:29 chipyard.TestHarness.RocketConfig.fir 286290:6]
    node _T_570 = or(_T_568, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 286292:6]
    node _T_571 = not(_T_570) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 286293:6]
    node _T_576 = eq(io_in_d_bits_size, size_1) @[Monitor.scala 544:29 chipyard.TestHarness.RocketConfig.fir 286306:6]
    node _T_578 = or(_T_576, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 286308:6]
    node _T_579 = not(_T_578) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 286309:6]
    node _T_580 = eq(io_in_d_bits_source, source_1) @[Monitor.scala 545:29 chipyard.TestHarness.RocketConfig.fir 286314:6]
    node _T_582 = or(_T_580, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 286316:6]
    node _T_583 = not(_T_582) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 286317:6]
    node _T_593 = and(d_first_done, d_first) @[Monitor.scala 549:20 chipyard.TestHarness.RocketConfig.fir 286340:4]
    reg inflight : UInt<160>, clock with :
      reset => (UInt<1>("h0"), inflight) @[Monitor.scala 611:27 chipyard.TestHarness.RocketConfig.fir 286349:4]
    reg inflight_opcodes : UInt<640>, clock with :
      reset => (UInt<1>("h0"), inflight_opcodes) @[Monitor.scala 613:35 chipyard.TestHarness.RocketConfig.fir 286350:4]
    reg inflight_sizes : UInt<640>, clock with :
      reset => (UInt<1>("h0"), inflight_sizes) @[Monitor.scala 615:33 chipyard.TestHarness.RocketConfig.fir 286351:4]
    reg a_first_counter_1 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), a_first_counter_1) @[Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 286361:4]
    node _a_first_counter1_T_1 = sub(a_first_counter_1, UInt<1>("h1")) @[Edges.scala 229:28 chipyard.TestHarness.RocketConfig.fir 286362:4]
    node a_first_counter1_1 = tail(_a_first_counter1_T_1, 1) @[Edges.scala 229:28 chipyard.TestHarness.RocketConfig.fir 286363:4]
    node a_first_1 = not(a_first_counter_1) @[Edges.scala 230:25 chipyard.TestHarness.RocketConfig.fir 286364:4]
    node _a_first_counter_T_1 = mux(a_first_1, UInt<1>("h0"), a_first_counter1_1) @[Edges.scala 235:21 chipyard.TestHarness.RocketConfig.fir 286372:6]
    node _GEN_13 = mux(a_first_done, _a_first_counter_T_1, a_first_counter_1) @[Edges.scala 234:17 chipyard.TestHarness.RocketConfig.fir 286371:4 Edges.scala 235:15 chipyard.TestHarness.RocketConfig.fir 286373:6 Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 286361:4]
    reg d_first_counter_1 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), d_first_counter_1) @[Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 286383:4]
    node _d_first_counter1_T_1 = sub(d_first_counter_1, UInt<1>("h1")) @[Edges.scala 229:28 chipyard.TestHarness.RocketConfig.fir 286384:4]
    node d_first_counter1_1 = tail(_d_first_counter1_T_1, 1) @[Edges.scala 229:28 chipyard.TestHarness.RocketConfig.fir 286385:4]
    node d_first_1 = not(d_first_counter_1) @[Edges.scala 230:25 chipyard.TestHarness.RocketConfig.fir 286386:4]
    node _d_first_counter_T_1 = mux(d_first_1, UInt<1>("h0"), d_first_counter1_1) @[Edges.scala 235:21 chipyard.TestHarness.RocketConfig.fir 286394:6]
    node _GEN_14 = mux(d_first_done, _d_first_counter_T_1, d_first_counter_1) @[Edges.scala 234:17 chipyard.TestHarness.RocketConfig.fir 286393:4 Edges.scala 235:15 chipyard.TestHarness.RocketConfig.fir 286395:6 Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 286383:4]
    node _GEN_72 = shl(io_in_d_bits_source, 2) @[Monitor.scala 634:69 chipyard.TestHarness.RocketConfig.fir 286407:4]
    node _a_opcode_lookup_T = pad(_GEN_72, 11) @[Monitor.scala 634:69 chipyard.TestHarness.RocketConfig.fir 286407:4]
    node _a_opcode_lookup_T_1 = dshr(inflight_opcodes, _a_opcode_lookup_T) @[Monitor.scala 634:44 chipyard.TestHarness.RocketConfig.fir 286408:4]
    node _a_opcode_lookup_T_4 = sub(UInt<16>("h10"), UInt<16>("h1")) @[Monitor.scala 609:57 chipyard.TestHarness.RocketConfig.fir 286411:4]
    node _a_opcode_lookup_T_5 = tail(_a_opcode_lookup_T_4, 1) @[Monitor.scala 609:57 chipyard.TestHarness.RocketConfig.fir 286412:4]
    node _GEN_73 = pad(_a_opcode_lookup_T_5, 640) @[Monitor.scala 634:97 chipyard.TestHarness.RocketConfig.fir 286413:4]
    node _a_opcode_lookup_T_6 = and(_a_opcode_lookup_T_1, _GEN_73) @[Monitor.scala 634:97 chipyard.TestHarness.RocketConfig.fir 286413:4]
    node _GEN_74 = shr(_a_opcode_lookup_T_6, 1) @[Monitor.scala 634:152 chipyard.TestHarness.RocketConfig.fir 286414:4]
    node _a_opcode_lookup_T_7 = pad(_GEN_74, 640) @[Monitor.scala 634:152 chipyard.TestHarness.RocketConfig.fir 286414:4]
    node _a_size_lookup_T_1 = dshr(inflight_sizes, _a_opcode_lookup_T) @[Monitor.scala 638:40 chipyard.TestHarness.RocketConfig.fir 286419:4]
    node _a_size_lookup_T_6 = and(_a_size_lookup_T_1, _GEN_73) @[Monitor.scala 638:91 chipyard.TestHarness.RocketConfig.fir 286424:4]
    node _GEN_77 = shr(_a_size_lookup_T_6, 1) @[Monitor.scala 638:144 chipyard.TestHarness.RocketConfig.fir 286425:4]
    node _a_size_lookup_T_7 = pad(_GEN_77, 640) @[Monitor.scala 638:144 chipyard.TestHarness.RocketConfig.fir 286425:4]
    node _T_594 = and(io_in_a_valid, a_first_1) @[Monitor.scala 648:26 chipyard.TestHarness.RocketConfig.fir 286449:4]
    node _a_set_wo_ready_T = dshlw(UInt<256>("h1"), io_in_a_bits_source) @[OneHot.scala 58:35 chipyard.TestHarness.RocketConfig.fir 286452:6]
    node _GEN_15 = mux(_T_594, _a_set_wo_ready_T, UInt<256>("h0")) @[Monitor.scala 648:71 chipyard.TestHarness.RocketConfig.fir 286451:4 Monitor.scala 649:22 chipyard.TestHarness.RocketConfig.fir 286453:6 chipyard.TestHarness.RocketConfig.fir 286400:4]
    node _T_597 = and(a_first_done, a_first_1) @[Monitor.scala 652:27 chipyard.TestHarness.RocketConfig.fir 286456:4]
    node _a_opcodes_set_interm_T = shl(io_in_a_bits_opcode, 1) @[Monitor.scala 654:53 chipyard.TestHarness.RocketConfig.fir 286461:6]
    node _a_opcodes_set_interm_T_1 = or(_a_opcodes_set_interm_T, UInt<4>("h1")) @[Monitor.scala 654:61 chipyard.TestHarness.RocketConfig.fir 286462:6]
    node _a_sizes_set_interm_T = shl(io_in_a_bits_size, 1) @[Monitor.scala 655:51 chipyard.TestHarness.RocketConfig.fir 286464:6]
    node _a_sizes_set_interm_T_1 = or(_a_sizes_set_interm_T, UInt<3>("h1")) @[Monitor.scala 655:59 chipyard.TestHarness.RocketConfig.fir 286465:6]
    node _GEN_78 = shl(io_in_a_bits_source, 2) @[Monitor.scala 656:79 chipyard.TestHarness.RocketConfig.fir 286467:6]
    node _a_opcodes_set_T = pad(_GEN_78, 11) @[Monitor.scala 656:79 chipyard.TestHarness.RocketConfig.fir 286467:6]
    node a_opcodes_set_interm = mux(_T_597, _a_opcodes_set_interm_T_1, UInt<4>("h0")) @[Monitor.scala 652:72 chipyard.TestHarness.RocketConfig.fir 286458:4 Monitor.scala 654:28 chipyard.TestHarness.RocketConfig.fir 286463:6 chipyard.TestHarness.RocketConfig.fir 286446:4]
    node _GEN_79 = pad(a_opcodes_set_interm, 2051) @[Monitor.scala 656:54 chipyard.TestHarness.RocketConfig.fir 286468:6]
    node _a_opcodes_set_T_1 = dshlw(_GEN_79, _a_opcodes_set_T) @[Monitor.scala 656:54 chipyard.TestHarness.RocketConfig.fir 286468:6]
    node a_sizes_set_interm = mux(_T_597, _a_sizes_set_interm_T_1, UInt<3>("h0")) @[Monitor.scala 652:72 chipyard.TestHarness.RocketConfig.fir 286458:4 Monitor.scala 655:28 chipyard.TestHarness.RocketConfig.fir 286466:6 chipyard.TestHarness.RocketConfig.fir 286448:4]
    node _GEN_81 = pad(a_sizes_set_interm, 2050) @[Monitor.scala 657:52 chipyard.TestHarness.RocketConfig.fir 286471:6]
    node _a_sizes_set_T_1 = dshlw(_GEN_81, _a_opcodes_set_T) @[Monitor.scala 657:52 chipyard.TestHarness.RocketConfig.fir 286471:6]
    node _T_599 = dshr(inflight, io_in_a_bits_source) @[Monitor.scala 658:26 chipyard.TestHarness.RocketConfig.fir 286473:6]
    node _T_600 = bits(_T_599, 0, 0) @[Monitor.scala 658:26 chipyard.TestHarness.RocketConfig.fir 286474:6]
    node _T_601 = not(_T_600) @[Monitor.scala 658:17 chipyard.TestHarness.RocketConfig.fir 286475:6]
    node _T_603 = or(_T_601, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 286477:6]
    node _T_604 = not(_T_603) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 286478:6]
    node _GEN_16 = mux(_T_597, _a_set_wo_ready_T, UInt<256>("h0")) @[Monitor.scala 652:72 chipyard.TestHarness.RocketConfig.fir 286458:4 Monitor.scala 653:28 chipyard.TestHarness.RocketConfig.fir 286460:6 chipyard.TestHarness.RocketConfig.fir 286398:4]
    node _GEN_19 = mux(_T_597, _a_opcodes_set_T_1, UInt<2051>("h0")) @[Monitor.scala 652:72 chipyard.TestHarness.RocketConfig.fir 286458:4 Monitor.scala 656:28 chipyard.TestHarness.RocketConfig.fir 286469:6 chipyard.TestHarness.RocketConfig.fir 286402:4]
    node _GEN_20 = mux(_T_597, _a_sizes_set_T_1, UInt<2050>("h0")) @[Monitor.scala 652:72 chipyard.TestHarness.RocketConfig.fir 286458:4 Monitor.scala 657:28 chipyard.TestHarness.RocketConfig.fir 286472:6 chipyard.TestHarness.RocketConfig.fir 286404:4]
    node _T_605 = and(io_in_d_valid, d_first_1) @[Monitor.scala 671:26 chipyard.TestHarness.RocketConfig.fir 286493:4]
    node _T_607 = not(_T_401) @[Monitor.scala 671:74 chipyard.TestHarness.RocketConfig.fir 286495:4]
    node _T_608 = and(_T_605, _T_607) @[Monitor.scala 671:71 chipyard.TestHarness.RocketConfig.fir 286496:4]
    node _d_clr_wo_ready_T = dshlw(UInt<256>("h1"), io_in_d_bits_source) @[OneHot.scala 58:35 chipyard.TestHarness.RocketConfig.fir 286498:6]
    node _GEN_21 = mux(_T_608, _d_clr_wo_ready_T, UInt<256>("h0")) @[Monitor.scala 671:90 chipyard.TestHarness.RocketConfig.fir 286497:4 Monitor.scala 672:22 chipyard.TestHarness.RocketConfig.fir 286499:6 chipyard.TestHarness.RocketConfig.fir 286487:4]
    node _T_610 = and(d_first_done, d_first_1) @[Monitor.scala 675:27 chipyard.TestHarness.RocketConfig.fir 286502:4]
    node _T_613 = and(_T_610, _T_607) @[Monitor.scala 675:72 chipyard.TestHarness.RocketConfig.fir 286505:4]
    node _GEN_83 = pad(_a_opcode_lookup_T_5, 2063) @[Monitor.scala 677:76 chipyard.TestHarness.RocketConfig.fir 286514:6]
    node _d_opcodes_clr_T_5 = dshlw(_GEN_83, _a_opcode_lookup_T) @[Monitor.scala 677:76 chipyard.TestHarness.RocketConfig.fir 286514:6]
    node _GEN_22 = mux(_T_613, _d_clr_wo_ready_T, UInt<256>("h0")) @[Monitor.scala 675:91 chipyard.TestHarness.RocketConfig.fir 286506:4 Monitor.scala 676:21 chipyard.TestHarness.RocketConfig.fir 286508:6 chipyard.TestHarness.RocketConfig.fir 286485:4]
    node _GEN_23 = mux(_T_613, _d_opcodes_clr_T_5, UInt<2063>("h0")) @[Monitor.scala 675:91 chipyard.TestHarness.RocketConfig.fir 286506:4 Monitor.scala 677:21 chipyard.TestHarness.RocketConfig.fir 286515:6 chipyard.TestHarness.RocketConfig.fir 286489:4]
    node _same_cycle_resp_T_2 = eq(io_in_a_bits_source, io_in_d_bits_source) @[Monitor.scala 681:113 chipyard.TestHarness.RocketConfig.fir 286531:6]
    node same_cycle_resp = and(_T_594, _same_cycle_resp_T_2) @[Monitor.scala 681:88 chipyard.TestHarness.RocketConfig.fir 286532:6]
    node _T_618 = dshr(inflight, io_in_d_bits_source) @[Monitor.scala 682:25 chipyard.TestHarness.RocketConfig.fir 286533:6]
    node _T_619 = bits(_T_618, 0, 0) @[Monitor.scala 682:25 chipyard.TestHarness.RocketConfig.fir 286534:6]
    node _T_620 = or(_T_619, same_cycle_resp) @[Monitor.scala 682:49 chipyard.TestHarness.RocketConfig.fir 286535:6]
    node _T_622 = or(_T_620, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 286537:6]
    node _T_623 = not(_T_622) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 286538:6]
    node _GEN_27 = mux(eq(UInt<3>("h2"), io_in_a_bits_opcode), UInt<3>("h1"), UInt<3>("h0")) @[Monitor.scala 685:38 chipyard.TestHarness.RocketConfig.fir 286544:8 Monitor.scala 685:38 chipyard.TestHarness.RocketConfig.fir 286544:8]
    node _GEN_28 = mux(eq(UInt<3>("h3"), io_in_a_bits_opcode), UInt<3>("h1"), _GEN_27) @[Monitor.scala 685:38 chipyard.TestHarness.RocketConfig.fir 286544:8 Monitor.scala 685:38 chipyard.TestHarness.RocketConfig.fir 286544:8]
    node _GEN_29 = mux(eq(UInt<3>("h4"), io_in_a_bits_opcode), UInt<3>("h1"), _GEN_28) @[Monitor.scala 685:38 chipyard.TestHarness.RocketConfig.fir 286544:8 Monitor.scala 685:38 chipyard.TestHarness.RocketConfig.fir 286544:8]
    node _GEN_30 = mux(eq(UInt<3>("h5"), io_in_a_bits_opcode), UInt<3>("h2"), _GEN_29) @[Monitor.scala 685:38 chipyard.TestHarness.RocketConfig.fir 286544:8 Monitor.scala 685:38 chipyard.TestHarness.RocketConfig.fir 286544:8]
    node _GEN_31 = mux(eq(UInt<3>("h6"), io_in_a_bits_opcode), UInt<3>("h4"), _GEN_30) @[Monitor.scala 685:38 chipyard.TestHarness.RocketConfig.fir 286544:8 Monitor.scala 685:38 chipyard.TestHarness.RocketConfig.fir 286544:8]
    node _GEN_32 = mux(eq(UInt<3>("h7"), io_in_a_bits_opcode), UInt<3>("h4"), _GEN_31) @[Monitor.scala 685:38 chipyard.TestHarness.RocketConfig.fir 286544:8 Monitor.scala 685:38 chipyard.TestHarness.RocketConfig.fir 286544:8]
    node _T_624 = eq(io_in_d_bits_opcode, _GEN_32) @[Monitor.scala 685:38 chipyard.TestHarness.RocketConfig.fir 286544:8]
    node _GEN_39 = mux(eq(UInt<3>("h6"), io_in_a_bits_opcode), UInt<3>("h5"), _GEN_30) @[Monitor.scala 686:39 chipyard.TestHarness.RocketConfig.fir 286545:8 Monitor.scala 686:39 chipyard.TestHarness.RocketConfig.fir 286545:8]
    node _GEN_40 = mux(eq(UInt<3>("h7"), io_in_a_bits_opcode), UInt<3>("h4"), _GEN_39) @[Monitor.scala 686:39 chipyard.TestHarness.RocketConfig.fir 286545:8 Monitor.scala 686:39 chipyard.TestHarness.RocketConfig.fir 286545:8]
    node _T_625 = eq(io_in_d_bits_opcode, _GEN_40) @[Monitor.scala 686:39 chipyard.TestHarness.RocketConfig.fir 286545:8]
    node _T_626 = or(_T_624, _T_625) @[Monitor.scala 685:77 chipyard.TestHarness.RocketConfig.fir 286546:8]
    node _T_628 = or(_T_626, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 286548:8]
    node _T_629 = not(_T_628) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 286549:8]
    node _T_630 = eq(io_in_a_bits_size, io_in_d_bits_size) @[Monitor.scala 687:36 chipyard.TestHarness.RocketConfig.fir 286554:8]
    node _T_632 = or(_T_630, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 286556:8]
    node _T_633 = not(_T_632) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 286557:8]
    node a_opcode_lookup = bits(_a_opcode_lookup_T_7, 3, 0) @[chipyard.TestHarness.RocketConfig.fir 286405:4 Monitor.scala 634:21 chipyard.TestHarness.RocketConfig.fir 286415:4]
    node _T_634 = bits(a_opcode_lookup, 2, 0) @[chipyard.TestHarness.RocketConfig.fir 286564:8]
    node _GEN_43 = mux(eq(UInt<3>("h2"), _T_634), UInt<3>("h1"), UInt<3>("h0")) @[Monitor.scala 689:38 chipyard.TestHarness.RocketConfig.fir 286565:8 Monitor.scala 689:38 chipyard.TestHarness.RocketConfig.fir 286565:8]
    node _GEN_44 = mux(eq(UInt<3>("h3"), _T_634), UInt<3>("h1"), _GEN_43) @[Monitor.scala 689:38 chipyard.TestHarness.RocketConfig.fir 286565:8 Monitor.scala 689:38 chipyard.TestHarness.RocketConfig.fir 286565:8]
    node _GEN_45 = mux(eq(UInt<3>("h4"), _T_634), UInt<3>("h1"), _GEN_44) @[Monitor.scala 689:38 chipyard.TestHarness.RocketConfig.fir 286565:8 Monitor.scala 689:38 chipyard.TestHarness.RocketConfig.fir 286565:8]
    node _GEN_46 = mux(eq(UInt<3>("h5"), _T_634), UInt<3>("h2"), _GEN_45) @[Monitor.scala 689:38 chipyard.TestHarness.RocketConfig.fir 286565:8 Monitor.scala 689:38 chipyard.TestHarness.RocketConfig.fir 286565:8]
    node _GEN_47 = mux(eq(UInt<3>("h6"), _T_634), UInt<3>("h4"), _GEN_46) @[Monitor.scala 689:38 chipyard.TestHarness.RocketConfig.fir 286565:8 Monitor.scala 689:38 chipyard.TestHarness.RocketConfig.fir 286565:8]
    node _GEN_48 = mux(eq(UInt<3>("h7"), _T_634), UInt<3>("h4"), _GEN_47) @[Monitor.scala 689:38 chipyard.TestHarness.RocketConfig.fir 286565:8 Monitor.scala 689:38 chipyard.TestHarness.RocketConfig.fir 286565:8]
    node _T_635 = eq(io_in_d_bits_opcode, _GEN_48) @[Monitor.scala 689:38 chipyard.TestHarness.RocketConfig.fir 286565:8]
    node _GEN_55 = mux(eq(UInt<3>("h6"), _T_634), UInt<3>("h5"), _GEN_46) @[Monitor.scala 690:38 chipyard.TestHarness.RocketConfig.fir 286567:8 Monitor.scala 690:38 chipyard.TestHarness.RocketConfig.fir 286567:8]
    node _GEN_56 = mux(eq(UInt<3>("h7"), _T_634), UInt<3>("h4"), _GEN_55) @[Monitor.scala 690:38 chipyard.TestHarness.RocketConfig.fir 286567:8 Monitor.scala 690:38 chipyard.TestHarness.RocketConfig.fir 286567:8]
    node _T_637 = eq(io_in_d_bits_opcode, _GEN_56) @[Monitor.scala 690:38 chipyard.TestHarness.RocketConfig.fir 286567:8]
    node _T_638 = or(_T_635, _T_637) @[Monitor.scala 689:72 chipyard.TestHarness.RocketConfig.fir 286568:8]
    node _T_640 = or(_T_638, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 286570:8]
    node _T_641 = not(_T_640) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 286571:8]
    node a_size_lookup = bits(_a_size_lookup_T_7, 3, 0) @[chipyard.TestHarness.RocketConfig.fir 286416:4 Monitor.scala 638:19 chipyard.TestHarness.RocketConfig.fir 286426:4]
    node _GEN_86 = pad(io_in_d_bits_size, 4) @[Monitor.scala 691:36 chipyard.TestHarness.RocketConfig.fir 286576:8]
    node _T_642 = eq(_GEN_86, a_size_lookup) @[Monitor.scala 691:36 chipyard.TestHarness.RocketConfig.fir 286576:8]
    node _T_644 = or(_T_642, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 286578:8]
    node _T_645 = not(_T_644) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 286579:8]
    node _T_647 = and(_T_605, a_first_1) @[Monitor.scala 694:36 chipyard.TestHarness.RocketConfig.fir 286587:4]
    node _T_648 = and(_T_647, io_in_a_valid) @[Monitor.scala 694:47 chipyard.TestHarness.RocketConfig.fir 286588:4]
    node _T_650 = and(_T_648, _same_cycle_resp_T_2) @[Monitor.scala 694:65 chipyard.TestHarness.RocketConfig.fir 286590:4]
    node _T_652 = and(_T_650, _T_607) @[Monitor.scala 694:116 chipyard.TestHarness.RocketConfig.fir 286592:4]
    node _T_653 = not(io_in_d_ready) @[Monitor.scala 695:15 chipyard.TestHarness.RocketConfig.fir 286594:6]
    node _T_654 = or(_T_653, io_in_a_ready) @[Monitor.scala 695:32 chipyard.TestHarness.RocketConfig.fir 286595:6]
    node _T_656 = or(_T_654, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 286597:6]
    node _T_657 = not(_T_656) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 286598:6]
    node a_set_wo_ready = bits(_GEN_15, 159, 0) @[chipyard.TestHarness.RocketConfig.fir 286399:4]
    node d_clr_wo_ready = bits(_GEN_21, 159, 0) @[chipyard.TestHarness.RocketConfig.fir 286486:4]
    node _T_658 = neq(a_set_wo_ready, d_clr_wo_ready) @[Monitor.scala 699:29 chipyard.TestHarness.RocketConfig.fir 286604:4]
    node _T_659 = orr(a_set_wo_ready) @[Monitor.scala 699:67 chipyard.TestHarness.RocketConfig.fir 286605:4]
    node _T_660 = not(_T_659) @[Monitor.scala 699:51 chipyard.TestHarness.RocketConfig.fir 286606:4]
    node _T_661 = or(_T_658, _T_660) @[Monitor.scala 699:48 chipyard.TestHarness.RocketConfig.fir 286607:4]
    node _T_663 = or(_T_661, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 286609:4]
    node _T_664 = not(_T_663) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 286610:4]
    node a_set = bits(_GEN_16, 159, 0) @[chipyard.TestHarness.RocketConfig.fir 286397:4]
    node _inflight_T = or(inflight, a_set) @[Monitor.scala 702:27 chipyard.TestHarness.RocketConfig.fir 286615:4]
    node d_clr = bits(_GEN_22, 159, 0) @[chipyard.TestHarness.RocketConfig.fir 286484:4]
    node _inflight_T_1 = not(d_clr) @[Monitor.scala 702:38 chipyard.TestHarness.RocketConfig.fir 286616:4]
    node _inflight_T_2 = and(_inflight_T, _inflight_T_1) @[Monitor.scala 702:36 chipyard.TestHarness.RocketConfig.fir 286617:4]
    node a_opcodes_set = bits(_GEN_19, 639, 0) @[chipyard.TestHarness.RocketConfig.fir 286401:4]
    node _inflight_opcodes_T = or(inflight_opcodes, a_opcodes_set) @[Monitor.scala 703:43 chipyard.TestHarness.RocketConfig.fir 286619:4]
    node d_opcodes_clr = bits(_GEN_23, 639, 0) @[chipyard.TestHarness.RocketConfig.fir 286488:4]
    node _inflight_opcodes_T_1 = not(d_opcodes_clr) @[Monitor.scala 703:62 chipyard.TestHarness.RocketConfig.fir 286620:4]
    node _inflight_opcodes_T_2 = and(_inflight_opcodes_T, _inflight_opcodes_T_1) @[Monitor.scala 703:60 chipyard.TestHarness.RocketConfig.fir 286621:4]
    node a_sizes_set = bits(_GEN_20, 639, 0) @[chipyard.TestHarness.RocketConfig.fir 286403:4]
    node _inflight_sizes_T = or(inflight_sizes, a_sizes_set) @[Monitor.scala 704:39 chipyard.TestHarness.RocketConfig.fir 286623:4]
    node _inflight_sizes_T_2 = and(_inflight_sizes_T, _inflight_opcodes_T_1) @[Monitor.scala 704:54 chipyard.TestHarness.RocketConfig.fir 286625:4]
    reg watchdog : UInt<32>, clock with :
      reset => (UInt<1>("h0"), watchdog) @[Monitor.scala 706:27 chipyard.TestHarness.RocketConfig.fir 286627:4]
    node _T_665 = orr(inflight) @[Monitor.scala 709:26 chipyard.TestHarness.RocketConfig.fir 286630:4]
    node _T_666 = not(_T_665) @[Monitor.scala 709:16 chipyard.TestHarness.RocketConfig.fir 286631:4]
    node _T_667 = eq(plusarg_reader.out, UInt<32>("h0")) @[Monitor.scala 709:39 chipyard.TestHarness.RocketConfig.fir 286632:4]
    node _T_668 = or(_T_666, _T_667) @[Monitor.scala 709:30 chipyard.TestHarness.RocketConfig.fir 286633:4]
    node _T_669 = lt(watchdog, plusarg_reader.out) @[Monitor.scala 709:59 chipyard.TestHarness.RocketConfig.fir 286634:4]
    node _T_670 = or(_T_668, _T_669) @[Monitor.scala 709:47 chipyard.TestHarness.RocketConfig.fir 286635:4]
    node _T_672 = or(_T_670, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 286637:4]
    node _T_673 = not(_T_672) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 286638:4]
    node _watchdog_T = add(watchdog, UInt<32>("h1")) @[Monitor.scala 711:26 chipyard.TestHarness.RocketConfig.fir 286643:4]
    node _watchdog_T_1 = tail(_watchdog_T, 1) @[Monitor.scala 711:26 chipyard.TestHarness.RocketConfig.fir 286644:4]
    node _T_676 = or(a_first_done, d_first_done) @[Monitor.scala 712:27 chipyard.TestHarness.RocketConfig.fir 286648:4]
    node _GEN_57 = mux(_T_676, UInt<32>("h0"), _watchdog_T_1) @[Monitor.scala 712:47 chipyard.TestHarness.RocketConfig.fir 286649:4 Monitor.scala 712:58 chipyard.TestHarness.RocketConfig.fir 286650:6 Monitor.scala 711:14 chipyard.TestHarness.RocketConfig.fir 286645:4]
    reg inflight_1 : UInt<160>, clock with :
      reset => (UInt<1>("h0"), inflight_1) @[Monitor.scala 723:35 chipyard.TestHarness.RocketConfig.fir 286652:4]
    reg inflight_sizes_1 : UInt<640>, clock with :
      reset => (UInt<1>("h0"), inflight_sizes_1) @[Monitor.scala 725:35 chipyard.TestHarness.RocketConfig.fir 286654:4]
    reg d_first_counter_2 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), d_first_counter_2) @[Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 286689:4]
    node _d_first_counter1_T_2 = sub(d_first_counter_2, UInt<1>("h1")) @[Edges.scala 229:28 chipyard.TestHarness.RocketConfig.fir 286690:4]
    node d_first_counter1_2 = tail(_d_first_counter1_T_2, 1) @[Edges.scala 229:28 chipyard.TestHarness.RocketConfig.fir 286691:4]
    node d_first_2 = not(d_first_counter_2) @[Edges.scala 230:25 chipyard.TestHarness.RocketConfig.fir 286692:4]
    node _d_first_counter_T_2 = mux(d_first_2, UInt<1>("h0"), d_first_counter1_2) @[Edges.scala 235:21 chipyard.TestHarness.RocketConfig.fir 286700:6]
    node _GEN_59 = mux(d_first_done, _d_first_counter_T_2, d_first_counter_2) @[Edges.scala 234:17 chipyard.TestHarness.RocketConfig.fir 286699:4 Edges.scala 235:15 chipyard.TestHarness.RocketConfig.fir 286701:6 Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 286689:4]
    node _c_size_lookup_T_1 = dshr(inflight_sizes_1, _a_opcode_lookup_T) @[Monitor.scala 747:42 chipyard.TestHarness.RocketConfig.fir 286725:4]
    node _c_size_lookup_T_6 = and(_c_size_lookup_T_1, _GEN_73) @[Monitor.scala 747:93 chipyard.TestHarness.RocketConfig.fir 286730:4]
    node _GEN_92 = shr(_c_size_lookup_T_6, 1) @[Monitor.scala 747:146 chipyard.TestHarness.RocketConfig.fir 286731:4]
    node _c_size_lookup_T_7 = pad(_GEN_92, 640) @[Monitor.scala 747:146 chipyard.TestHarness.RocketConfig.fir 286731:4]
    node _T_694 = and(io_in_d_valid, d_first_2) @[Monitor.scala 779:26 chipyard.TestHarness.RocketConfig.fir 286809:4]
    node _T_696 = and(_T_694, _T_401) @[Monitor.scala 779:71 chipyard.TestHarness.RocketConfig.fir 286811:4]
    node _T_698 = and(d_first_done, d_first_2) @[Monitor.scala 783:27 chipyard.TestHarness.RocketConfig.fir 286817:4]
    node _T_700 = and(_T_698, _T_401) @[Monitor.scala 783:72 chipyard.TestHarness.RocketConfig.fir 286819:4]
    node _GEN_67 = mux(_T_700, _d_clr_wo_ready_T, UInt<256>("h0")) @[Monitor.scala 783:90 chipyard.TestHarness.RocketConfig.fir 286820:4 Monitor.scala 784:21 chipyard.TestHarness.RocketConfig.fir 286822:6 chipyard.TestHarness.RocketConfig.fir 286801:4]
    node _GEN_68 = mux(_T_700, _d_opcodes_clr_T_5, UInt<2063>("h0")) @[Monitor.scala 783:90 chipyard.TestHarness.RocketConfig.fir 286820:4 Monitor.scala 785:21 chipyard.TestHarness.RocketConfig.fir 286829:6 chipyard.TestHarness.RocketConfig.fir 286805:4]
    node _T_704 = dshr(inflight_1, io_in_d_bits_source) @[Monitor.scala 791:25 chipyard.TestHarness.RocketConfig.fir 286855:6]
    node _T_705 = bits(_T_704, 0, 0) @[Monitor.scala 791:25 chipyard.TestHarness.RocketConfig.fir 286856:6]
    node _T_708 = or(_T_705, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 286859:6]
    node _T_709 = not(_T_708) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 286860:6]
    node c_size_lookup = bits(_c_size_lookup_T_7, 3, 0) @[chipyard.TestHarness.RocketConfig.fir 286713:4 Monitor.scala 747:21 chipyard.TestHarness.RocketConfig.fir 286732:4]
    node _T_714 = eq(_GEN_86, c_size_lookup) @[Monitor.scala 795:36 chipyard.TestHarness.RocketConfig.fir 286878:8]
    node _T_716 = or(_T_714, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 286880:8]
    node _T_717 = not(_T_716) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 286881:8]
    node d_clr_1 = bits(_GEN_67, 159, 0) @[chipyard.TestHarness.RocketConfig.fir 286800:4]
    node _inflight_T_4 = not(d_clr_1) @[Monitor.scala 809:46 chipyard.TestHarness.RocketConfig.fir 286923:4]
    node _inflight_T_5 = and(inflight_1, _inflight_T_4) @[Monitor.scala 809:44 chipyard.TestHarness.RocketConfig.fir 286924:4]
    node d_opcodes_clr_1 = bits(_GEN_68, 639, 0) @[chipyard.TestHarness.RocketConfig.fir 286804:4]
    node _inflight_opcodes_T_4 = not(d_opcodes_clr_1) @[Monitor.scala 810:62 chipyard.TestHarness.RocketConfig.fir 286927:4]
    node _inflight_sizes_T_5 = and(inflight_sizes_1, _inflight_opcodes_T_4) @[Monitor.scala 811:56 chipyard.TestHarness.RocketConfig.fir 286932:4]
    reg watchdog_1 : UInt<32>, clock with :
      reset => (UInt<1>("h0"), watchdog_1) @[Monitor.scala 813:27 chipyard.TestHarness.RocketConfig.fir 286934:4]
    node _T_734 = orr(inflight_1) @[Monitor.scala 816:26 chipyard.TestHarness.RocketConfig.fir 286937:4]
    node _T_735 = not(_T_734) @[Monitor.scala 816:16 chipyard.TestHarness.RocketConfig.fir 286938:4]
    node _T_736 = eq(plusarg_reader_1.out, UInt<32>("h0")) @[Monitor.scala 816:39 chipyard.TestHarness.RocketConfig.fir 286939:4]
    node _T_737 = or(_T_735, _T_736) @[Monitor.scala 816:30 chipyard.TestHarness.RocketConfig.fir 286940:4]
    node _T_738 = lt(watchdog_1, plusarg_reader_1.out) @[Monitor.scala 816:59 chipyard.TestHarness.RocketConfig.fir 286941:4]
    node _T_739 = or(_T_737, _T_738) @[Monitor.scala 816:47 chipyard.TestHarness.RocketConfig.fir 286942:4]
    node _T_741 = or(_T_739, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 286944:4]
    node _T_742 = not(_T_741) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 286945:4]
    node _watchdog_T_2 = add(watchdog_1, UInt<32>("h1")) @[Monitor.scala 818:26 chipyard.TestHarness.RocketConfig.fir 286950:4]
    node _watchdog_T_3 = tail(_watchdog_T_2, 1) @[Monitor.scala 818:26 chipyard.TestHarness.RocketConfig.fir 286951:4]
    node _GEN_70 = mux(d_first_done, UInt<32>("h0"), _watchdog_T_3) @[Monitor.scala 819:47 chipyard.TestHarness.RocketConfig.fir 286958:4 Monitor.scala 819:58 chipyard.TestHarness.RocketConfig.fir 286959:6 Monitor.scala 818:14 chipyard.TestHarness.RocketConfig.fir 286952:4]
    a_first_counter <= mux(reset, UInt<1>("h0"), _GEN_0) @[Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 286187:4 Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 286187:4]
    opcode <= mux(_T_565, io_in_a_bits_opcode, opcode) @[Monitor.scala 396:32 chipyard.TestHarness.RocketConfig.fir 286252:4 Monitor.scala 397:15 chipyard.TestHarness.RocketConfig.fir 286253:6 Monitor.scala 384:22 chipyard.TestHarness.RocketConfig.fir 286201:4]
    param <= mux(_T_565, io_in_a_bits_param, param) @[Monitor.scala 396:32 chipyard.TestHarness.RocketConfig.fir 286252:4 Monitor.scala 398:15 chipyard.TestHarness.RocketConfig.fir 286254:6 Monitor.scala 385:22 chipyard.TestHarness.RocketConfig.fir 286202:4]
    size <= mux(_T_565, io_in_a_bits_size, size) @[Monitor.scala 396:32 chipyard.TestHarness.RocketConfig.fir 286252:4 Monitor.scala 399:15 chipyard.TestHarness.RocketConfig.fir 286255:6 Monitor.scala 386:22 chipyard.TestHarness.RocketConfig.fir 286203:4]
    source <= mux(_T_565, io_in_a_bits_source, source) @[Monitor.scala 396:32 chipyard.TestHarness.RocketConfig.fir 286252:4 Monitor.scala 400:15 chipyard.TestHarness.RocketConfig.fir 286256:6 Monitor.scala 387:22 chipyard.TestHarness.RocketConfig.fir 286204:4]
    address <= mux(_T_565, io_in_a_bits_address, address) @[Monitor.scala 396:32 chipyard.TestHarness.RocketConfig.fir 286252:4 Monitor.scala 401:15 chipyard.TestHarness.RocketConfig.fir 286257:6 Monitor.scala 388:22 chipyard.TestHarness.RocketConfig.fir 286205:4]
    d_first_counter <= mux(reset, UInt<1>("h0"), _GEN_6) @[Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 286267:4 Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 286267:4]
    opcode_1 <= mux(_T_593, io_in_d_bits_opcode, opcode_1) @[Monitor.scala 549:32 chipyard.TestHarness.RocketConfig.fir 286341:4 Monitor.scala 550:15 chipyard.TestHarness.RocketConfig.fir 286342:6 Monitor.scala 535:22 chipyard.TestHarness.RocketConfig.fir 286281:4]
    size_1 <= mux(_T_593, io_in_d_bits_size, size_1) @[Monitor.scala 549:32 chipyard.TestHarness.RocketConfig.fir 286341:4 Monitor.scala 552:15 chipyard.TestHarness.RocketConfig.fir 286344:6 Monitor.scala 537:22 chipyard.TestHarness.RocketConfig.fir 286283:4]
    source_1 <= mux(_T_593, io_in_d_bits_source, source_1) @[Monitor.scala 549:32 chipyard.TestHarness.RocketConfig.fir 286341:4 Monitor.scala 553:15 chipyard.TestHarness.RocketConfig.fir 286345:6 Monitor.scala 538:22 chipyard.TestHarness.RocketConfig.fir 286284:4]
    inflight <= mux(reset, UInt<160>("h0"), _inflight_T_2) @[Monitor.scala 611:27 chipyard.TestHarness.RocketConfig.fir 286349:4 Monitor.scala 611:27 chipyard.TestHarness.RocketConfig.fir 286349:4 Monitor.scala 702:14 chipyard.TestHarness.RocketConfig.fir 286618:4]
    inflight_opcodes <= mux(reset, UInt<640>("h0"), _inflight_opcodes_T_2) @[Monitor.scala 613:35 chipyard.TestHarness.RocketConfig.fir 286350:4 Monitor.scala 613:35 chipyard.TestHarness.RocketConfig.fir 286350:4 Monitor.scala 703:22 chipyard.TestHarness.RocketConfig.fir 286622:4]
    inflight_sizes <= mux(reset, UInt<640>("h0"), _inflight_sizes_T_2) @[Monitor.scala 615:33 chipyard.TestHarness.RocketConfig.fir 286351:4 Monitor.scala 615:33 chipyard.TestHarness.RocketConfig.fir 286351:4 Monitor.scala 704:20 chipyard.TestHarness.RocketConfig.fir 286626:4]
    a_first_counter_1 <= mux(reset, UInt<1>("h0"), _GEN_13) @[Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 286361:4 Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 286361:4]
    d_first_counter_1 <= mux(reset, UInt<1>("h0"), _GEN_14) @[Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 286383:4 Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 286383:4]
    watchdog <= mux(reset, UInt<32>("h0"), _GEN_57) @[Monitor.scala 706:27 chipyard.TestHarness.RocketConfig.fir 286627:4 Monitor.scala 706:27 chipyard.TestHarness.RocketConfig.fir 286627:4]
    inflight_1 <= mux(reset, UInt<160>("h0"), _inflight_T_5) @[Monitor.scala 723:35 chipyard.TestHarness.RocketConfig.fir 286652:4 Monitor.scala 723:35 chipyard.TestHarness.RocketConfig.fir 286652:4 Monitor.scala 809:22 chipyard.TestHarness.RocketConfig.fir 286925:4]
    inflight_sizes_1 <= mux(reset, UInt<640>("h0"), _inflight_sizes_T_5) @[Monitor.scala 725:35 chipyard.TestHarness.RocketConfig.fir 286654:4 Monitor.scala 725:35 chipyard.TestHarness.RocketConfig.fir 286654:4 Monitor.scala 811:22 chipyard.TestHarness.RocketConfig.fir 286933:4]
    d_first_counter_2 <= mux(reset, UInt<1>("h0"), _GEN_59) @[Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 286689:4 Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 286689:4]
    watchdog_1 <= mux(reset, UInt<32>("h0"), _GEN_70) @[Monitor.scala 813:27 chipyard.TestHarness.RocketConfig.fir 286934:4 Monitor.scala 813:27 chipyard.TestHarness.RocketConfig.fir 286934:4]
    node _GEN_98 = and(io_in_a_valid, _T_20) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285279:10]
    printf(clock, and(_GEN_98, _T_43), "Assertion failed: 'A' channel carries AcquireBlock type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285279:10]
    stop(clock, and(_GEN_98, _T_43), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285280:10]
    printf(clock, and(_GEN_98, _T_43), "Assertion failed: 'A' channel carries AcquireBlock from a client which does not support Probe (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285298:10]
    stop(clock, and(_GEN_98, _T_43), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285299:10]
    printf(clock, and(_GEN_98, _T_61), "Assertion failed: 'A' channel AcquireBlock carries invalid source ID (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285305:10]
    stop(clock, and(_GEN_98, _T_61), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285306:10]
    printf(clock, and(_GEN_98, _T_65), "Assertion failed: 'A' channel AcquireBlock smaller than a beat (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285313:10]
    stop(clock, and(_GEN_98, _T_65), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285314:10]
    printf(clock, and(_GEN_98, _T_68), "Assertion failed: 'A' channel AcquireBlock address not aligned to size (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285320:10]
    stop(clock, and(_GEN_98, _T_68), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285321:10]
    printf(clock, and(_GEN_98, _T_72), "Assertion failed: 'A' channel AcquireBlock carries invalid grow param (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285328:10]
    stop(clock, and(_GEN_98, _T_72), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285329:10]
    printf(clock, and(_GEN_98, _T_77), "Assertion failed: 'A' channel AcquireBlock contains invalid mask (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285337:10]
    stop(clock, and(_GEN_98, _T_77), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285338:10]
    printf(clock, and(_GEN_98, _T_81), "Assertion failed: 'A' channel AcquireBlock is corrupt (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285345:10]
    stop(clock, and(_GEN_98, _T_81), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285346:10]
    node _GEN_114 = and(io_in_a_valid, _T_82) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285377:10]
    printf(clock, and(_GEN_114, _T_43), "Assertion failed: 'A' channel carries AcquirePerm type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285377:10]
    stop(clock, and(_GEN_114, _T_43), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285378:10]
    printf(clock, and(_GEN_114, _T_43), "Assertion failed: 'A' channel carries AcquirePerm from a client which does not support Probe (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285396:10]
    stop(clock, and(_GEN_114, _T_43), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285397:10]
    printf(clock, and(_GEN_114, _T_61), "Assertion failed: 'A' channel AcquirePerm carries invalid source ID (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285403:10]
    stop(clock, and(_GEN_114, _T_61), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285404:10]
    printf(clock, and(_GEN_114, _T_65), "Assertion failed: 'A' channel AcquirePerm smaller than a beat (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285411:10]
    stop(clock, and(_GEN_114, _T_65), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285412:10]
    printf(clock, and(_GEN_114, _T_68), "Assertion failed: 'A' channel AcquirePerm address not aligned to size (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285418:10]
    stop(clock, and(_GEN_114, _T_68), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285419:10]
    printf(clock, and(_GEN_114, _T_72), "Assertion failed: 'A' channel AcquirePerm carries invalid grow param (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285426:10]
    stop(clock, and(_GEN_114, _T_72), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285427:10]
    printf(clock, and(_GEN_114, _T_138), "Assertion failed: 'A' channel AcquirePerm requests NtoB (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285434:10]
    stop(clock, and(_GEN_114, _T_138), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285435:10]
    printf(clock, and(_GEN_114, _T_77), "Assertion failed: 'A' channel AcquirePerm contains invalid mask (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285443:10]
    stop(clock, and(_GEN_114, _T_77), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285444:10]
    printf(clock, and(_GEN_114, _T_81), "Assertion failed: 'A' channel AcquirePerm is corrupt (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285451:10]
    stop(clock, and(_GEN_114, _T_81), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285452:10]
    node _GEN_132 = and(io_in_a_valid, _T_148) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285474:10]
    printf(clock, and(_GEN_132, _T_61), "Assertion failed: 'A' channel carries Get type which master claims it can't emit (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285474:10]
    stop(clock, and(_GEN_132, _T_61), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285475:10]
    printf(clock, and(_GEN_132, _T_176), "Assertion failed: 'A' channel carries Get type which slave claims it can't support (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285492:10]
    stop(clock, and(_GEN_132, _T_176), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285493:10]
    printf(clock, and(_GEN_132, _T_61), "Assertion failed: 'A' channel Get carries invalid source ID (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285499:10]
    stop(clock, and(_GEN_132, _T_61), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285500:10]
    printf(clock, and(_GEN_132, _T_68), "Assertion failed: 'A' channel Get address not aligned to size (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285506:10]
    stop(clock, and(_GEN_132, _T_68), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285507:10]
    printf(clock, and(_GEN_132, _T_186), "Assertion failed: 'A' channel Get carries invalid param (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285514:10]
    stop(clock, and(_GEN_132, _T_186), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285515:10]
    printf(clock, and(_GEN_132, _T_190), "Assertion failed: 'A' channel Get contains invalid mask (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285522:10]
    stop(clock, and(_GEN_132, _T_190), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285523:10]
    printf(clock, and(_GEN_132, _T_81), "Assertion failed: 'A' channel Get is corrupt (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285530:10]
    stop(clock, and(_GEN_132, _T_81), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285531:10]
    node _GEN_146 = and(io_in_a_valid, _T_195) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285565:10]
    printf(clock, and(_GEN_146, _T_221), "Assertion failed: 'A' channel carries PutFull type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285565:10]
    stop(clock, and(_GEN_146, _T_221), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285566:10]
    printf(clock, and(_GEN_146, _T_61), "Assertion failed: 'A' channel PutFull carries invalid source ID (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285572:10]
    stop(clock, and(_GEN_146, _T_61), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285573:10]
    printf(clock, and(_GEN_146, _T_68), "Assertion failed: 'A' channel PutFull address not aligned to size (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285579:10]
    stop(clock, and(_GEN_146, _T_68), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285580:10]
    printf(clock, and(_GEN_146, _T_186), "Assertion failed: 'A' channel PutFull carries invalid param (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285587:10]
    stop(clock, and(_GEN_146, _T_186), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285588:10]
    printf(clock, and(_GEN_146, _T_190), "Assertion failed: 'A' channel PutFull contains invalid mask (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285595:10]
    stop(clock, and(_GEN_146, _T_190), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285596:10]
    node _GEN_156 = and(io_in_a_valid, _T_236) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285630:10]
    printf(clock, and(_GEN_156, _T_221), "Assertion failed: 'A' channel carries PutPartial type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285630:10]
    stop(clock, and(_GEN_156, _T_221), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285631:10]
    printf(clock, and(_GEN_156, _T_61), "Assertion failed: 'A' channel PutPartial carries invalid source ID (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285637:10]
    stop(clock, and(_GEN_156, _T_61), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285638:10]
    printf(clock, and(_GEN_156, _T_68), "Assertion failed: 'A' channel PutPartial address not aligned to size (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285644:10]
    stop(clock, and(_GEN_156, _T_68), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285645:10]
    printf(clock, and(_GEN_156, _T_186), "Assertion failed: 'A' channel PutPartial carries invalid param (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285652:10]
    stop(clock, and(_GEN_156, _T_186), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285653:10]
    printf(clock, and(_GEN_156, _T_278), "Assertion failed: 'A' channel PutPartial contains invalid mask (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285662:10]
    stop(clock, and(_GEN_156, _T_278), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285663:10]
    node _GEN_166 = and(io_in_a_valid, _T_279) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285694:10]
    printf(clock, and(_GEN_166, _T_43), "Assertion failed: 'A' channel carries Arithmetic type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285694:10]
    stop(clock, and(_GEN_166, _T_43), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285695:10]
    printf(clock, and(_GEN_166, _T_61), "Assertion failed: 'A' channel Arithmetic carries invalid source ID (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285701:10]
    stop(clock, and(_GEN_166, _T_61), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285702:10]
    printf(clock, and(_GEN_166, _T_68), "Assertion failed: 'A' channel Arithmetic address not aligned to size (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285708:10]
    stop(clock, and(_GEN_166, _T_68), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285709:10]
    printf(clock, and(_GEN_166, _T_312), "Assertion failed: 'A' channel Arithmetic carries invalid opcode param (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285716:10]
    stop(clock, and(_GEN_166, _T_312), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285717:10]
    printf(clock, and(_GEN_166, _T_190), "Assertion failed: 'A' channel Arithmetic contains invalid mask (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285724:10]
    stop(clock, and(_GEN_166, _T_190), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285725:10]
    node _GEN_176 = and(io_in_a_valid, _T_317) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285756:10]
    printf(clock, and(_GEN_176, _T_43), "Assertion failed: 'A' channel carries Logical type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285756:10]
    stop(clock, and(_GEN_176, _T_43), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285757:10]
    printf(clock, and(_GEN_176, _T_61), "Assertion failed: 'A' channel Logical carries invalid source ID (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285763:10]
    stop(clock, and(_GEN_176, _T_61), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285764:10]
    printf(clock, and(_GEN_176, _T_68), "Assertion failed: 'A' channel Logical address not aligned to size (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285770:10]
    stop(clock, and(_GEN_176, _T_68), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285771:10]
    printf(clock, and(_GEN_176, _T_350), "Assertion failed: 'A' channel Logical carries invalid opcode param (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285778:10]
    stop(clock, and(_GEN_176, _T_350), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285779:10]
    printf(clock, and(_GEN_176, _T_190), "Assertion failed: 'A' channel Logical contains invalid mask (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285786:10]
    stop(clock, and(_GEN_176, _T_190), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285787:10]
    node _GEN_186 = and(io_in_a_valid, _T_355) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285818:10]
    printf(clock, and(_GEN_186, _T_43), "Assertion failed: 'A' channel carries Hint type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285818:10]
    stop(clock, and(_GEN_186, _T_43), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285819:10]
    printf(clock, and(_GEN_186, _T_61), "Assertion failed: 'A' channel Hint carries invalid source ID (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285825:10]
    stop(clock, and(_GEN_186, _T_61), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285826:10]
    printf(clock, and(_GEN_186, _T_68), "Assertion failed: 'A' channel Hint address not aligned to size (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285832:10]
    stop(clock, and(_GEN_186, _T_68), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285833:10]
    printf(clock, and(_GEN_186, _T_388), "Assertion failed: 'A' channel Hint carries invalid opcode param (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285840:10]
    stop(clock, and(_GEN_186, _T_388), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285841:10]
    printf(clock, and(_GEN_186, _T_190), "Assertion failed: 'A' channel Hint contains invalid mask (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285848:10]
    stop(clock, and(_GEN_186, _T_190), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285849:10]
    printf(clock, and(_GEN_186, _T_81), "Assertion failed: 'A' channel Hint is corrupt (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285856:10]
    stop(clock, and(_GEN_186, _T_81), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 285857:10]
    printf(clock, and(io_in_d_valid, _T_400), "Assertion failed: 'D' channel has invalid opcode (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 285867:8]
    stop(clock, and(io_in_d_valid, _T_400), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 285868:8]
    node _GEN_198 = and(io_in_d_valid, _T_401) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 285888:10]
    printf(clock, and(_GEN_198, _T_404), "Assertion failed: 'D' channel ReleaseAck carries invalid source ID (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 285888:10]
    stop(clock, and(_GEN_198, _T_404), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 285889:10]
    printf(clock, and(_GEN_198, _T_408), "Assertion failed: 'D' channel ReleaseAck smaller than a beat (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 285896:10]
    stop(clock, and(_GEN_198, _T_408), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 285897:10]
    node _GEN_202 = and(io_in_d_valid, _T_421) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 285930:10]
    printf(clock, and(_GEN_202, _T_404), "Assertion failed: 'D' channel Grant carries invalid source ID (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 285930:10]
    stop(clock, and(_GEN_202, _T_404), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 285931:10]
    printf(clock, and(_GEN_202, _T_43), "Assertion failed: 'D' channel Grant carries invalid sink ID (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 285937:10]
    stop(clock, and(_GEN_202, _T_43), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 285938:10]
    printf(clock, and(_GEN_202, _T_408), "Assertion failed: 'D' channel Grant smaller than a beat (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 285945:10]
    stop(clock, and(_GEN_202, _T_408), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 285946:10]
    node _GEN_208 = and(io_in_d_valid, _T_449) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 285988:10]
    printf(clock, and(_GEN_208, _T_404), "Assertion failed: 'D' channel GrantData carries invalid source ID (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 285988:10]
    stop(clock, and(_GEN_208, _T_404), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 285989:10]
    printf(clock, and(_GEN_208, _T_43), "Assertion failed: 'D' channel GrantData carries invalid sink ID (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 285995:10]
    stop(clock, and(_GEN_208, _T_43), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 285996:10]
    printf(clock, and(_GEN_208, _T_408), "Assertion failed: 'D' channel GrantData smaller than a beat (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 286003:10]
    stop(clock, and(_GEN_208, _T_408), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 286004:10]
    node _GEN_214 = and(io_in_d_valid, _T_478) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 286047:10]
    printf(clock, and(_GEN_214, _T_404), "Assertion failed: 'D' channel AccessAck carries invalid source ID (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 286047:10]
    stop(clock, and(_GEN_214, _T_404), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 286048:10]
    node _GEN_216 = and(io_in_d_valid, _T_495) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 286082:10]
    printf(clock, and(_GEN_216, _T_404), "Assertion failed: 'D' channel AccessAckData carries invalid source ID (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 286082:10]
    stop(clock, and(_GEN_216, _T_404), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 286083:10]
    node _GEN_218 = and(io_in_d_valid, _T_513) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 286118:10]
    printf(clock, and(_GEN_218, _T_404), "Assertion failed: 'D' channel HintAck carries invalid source ID (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 286118:10]
    stop(clock, and(_GEN_218, _T_404), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 286119:10]
    printf(clock, and(_T_543, _T_547), "Assertion failed: 'A' channel opcode changed within multibeat operation (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 286214:8]
    stop(clock, and(_T_543, _T_547), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 286215:8]
    printf(clock, and(_T_543, _T_551), "Assertion failed: 'A' channel param changed within multibeat operation (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 286222:8]
    stop(clock, and(_T_543, _T_551), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 286223:8]
    printf(clock, and(_T_543, _T_555), "Assertion failed: 'A' channel size changed within multibeat operation (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 286230:8]
    stop(clock, and(_T_543, _T_555), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 286231:8]
    printf(clock, and(_T_543, _T_559), "Assertion failed: 'A' channel source changed within multibeat operation (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 286238:8]
    stop(clock, and(_T_543, _T_559), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 286239:8]
    printf(clock, and(_T_543, _T_563), "Assertion failed: 'A' channel address changed with multibeat operation (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 286246:8]
    stop(clock, and(_T_543, _T_563), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 286247:8]
    printf(clock, and(_T_567, _T_571), "Assertion failed: 'D' channel opcode changed within multibeat operation (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 286295:8]
    stop(clock, and(_T_567, _T_571), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 286296:8]
    printf(clock, and(_T_567, _T_579), "Assertion failed: 'D' channel size changed within multibeat operation (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 286311:8]
    stop(clock, and(_T_567, _T_579), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 286312:8]
    printf(clock, and(_T_567, _T_583), "Assertion failed: 'D' channel source changed within multibeat operation (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 286319:8]
    stop(clock, and(_T_567, _T_583), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 286320:8]
    printf(clock, and(_T_597, _T_604), "Assertion failed: 'A' channel re-used a source ID (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 286480:8]
    stop(clock, and(_T_597, _T_604), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 286481:8]
    printf(clock, and(_T_608, _T_623), "Assertion failed: 'D' channel acknowledged for nothing inflight (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 286540:8]
    stop(clock, and(_T_608, _T_623), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 286541:8]
    node _GEN_220 = and(_T_608, same_cycle_resp) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 286551:10]
    printf(clock, and(_GEN_220, _T_629), "Assertion failed: 'D' channel contains improper opcode response (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 286551:10]
    stop(clock, and(_GEN_220, _T_629), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 286552:10]
    printf(clock, and(_GEN_220, _T_633), "Assertion failed: 'D' channel contains improper response size (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 286559:10]
    stop(clock, and(_GEN_220, _T_633), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 286560:10]
    node _GEN_224 = not(same_cycle_resp) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 286573:10]
    node _GEN_225 = and(_T_608, _GEN_224) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 286573:10]
    printf(clock, and(_GEN_225, _T_641), "Assertion failed: 'D' channel contains improper opcode response (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 286573:10]
    stop(clock, and(_GEN_225, _T_641), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 286574:10]
    printf(clock, and(_GEN_225, _T_645), "Assertion failed: 'D' channel contains improper response size (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 286581:10]
    stop(clock, and(_GEN_225, _T_645), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 286582:10]
    printf(clock, and(_T_652, _T_657), "Assertion failed: ready check\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 286600:8]
    stop(clock, and(_T_652, _T_657), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 286601:8]
    printf(clock, _T_664, "Assertion failed: 'A' and 'D' concurrent, despite minlatency 1 (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 286612:6]
    stop(clock, _T_664, 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 286613:6]
    printf(clock, _T_673, "Assertion failed: TileLink timeout expired (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 286640:6]
    stop(clock, _T_673, 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 286641:6]
    printf(clock, and(_T_696, _T_709), "Assertion failed: 'D' channel acknowledged for nothing inflight (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 286862:8]
    stop(clock, and(_T_696, _T_709), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 286863:8]
    printf(clock, and(_T_696, _T_717), "Assertion failed: 'D' channel contains improper response size (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 286883:10]
    stop(clock, and(_T_696, _T_717), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 286884:10]
    printf(clock, _T_742, "Assertion failed: TileLink timeout expired (connected at SerialAdapter.scala:328:31)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 286947:6]
    stop(clock, _T_742, 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 286948:6]

  module TLRAM_inTestHarness : @[chipyard.TestHarness.RocketConfig.fir 286962:2]
    input clock : Clock @[chipyard.TestHarness.RocketConfig.fir 286963:4]
    input reset : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 286964:4]
    output auto_in_a_ready : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 286965:4]
    input auto_in_a_valid : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 286965:4]
    input auto_in_a_bits_opcode : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 286965:4]
    input auto_in_a_bits_param : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 286965:4]
    input auto_in_a_bits_size : UInt<2> @[chipyard.TestHarness.RocketConfig.fir 286965:4]
    input auto_in_a_bits_source : UInt<8> @[chipyard.TestHarness.RocketConfig.fir 286965:4]
    input auto_in_a_bits_address : UInt<29> @[chipyard.TestHarness.RocketConfig.fir 286965:4]
    input auto_in_a_bits_mask : UInt<8> @[chipyard.TestHarness.RocketConfig.fir 286965:4]
    input auto_in_a_bits_data : UInt<64> @[chipyard.TestHarness.RocketConfig.fir 286965:4]
    input auto_in_a_bits_corrupt : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 286965:4]
    input auto_in_d_ready : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 286965:4]
    output auto_in_d_valid : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 286965:4]
    output auto_in_d_bits_opcode : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 286965:4]
    output auto_in_d_bits_size : UInt<2> @[chipyard.TestHarness.RocketConfig.fir 286965:4]
    output auto_in_d_bits_source : UInt<8> @[chipyard.TestHarness.RocketConfig.fir 286965:4]
    output auto_in_d_bits_data : UInt<64> @[chipyard.TestHarness.RocketConfig.fir 286965:4]

    inst monitor of TLMonitor_54_inTestHarness @[Nodes.scala 24:25 chipyard.TestHarness.RocketConfig.fir 286972:4]
    inst mem of mem_inTestHarness @[DescribedSRAM.scala 19:26 chipyard.TestHarness.RocketConfig.fir 286996:4]
    reg r_full : UInt<1>, clock with :
      reset => (UInt<1>("h0"), r_full) @[SRAM.scala 134:30 chipyard.TestHarness.RocketConfig.fir 287011:4]
    reg r_size : UInt<2>, clock with :
      reset => (UInt<1>("h0"), r_size) @[SRAM.scala 137:26 chipyard.TestHarness.RocketConfig.fir 287014:4]
    reg r_source : UInt<8>, clock with :
      reset => (UInt<1>("h0"), r_source) @[SRAM.scala 138:26 chipyard.TestHarness.RocketConfig.fir 287015:4]
    reg r_read : UInt<1>, clock with :
      reset => (UInt<1>("h0"), r_read) @[SRAM.scala 139:26 chipyard.TestHarness.RocketConfig.fir 287016:4]
    reg REG : UInt<1>, clock with :
      reset => (UInt<1>("h0"), REG) @[SRAM.scala 321:58 chipyard.TestHarness.RocketConfig.fir 287536:4]
    reg r_1 : UInt<8>, clock with :
      reset => (UInt<1>("h0"), r_1) @[Reg.scala 15:16 chipyard.TestHarness.RocketConfig.fir 287538:4]
    node r_raw_data_1 = mux(REG, mem.RW0_rdata_1, r_1) @[package.scala 79:42 chipyard.TestHarness.RocketConfig.fir 287549:4]
    reg r_0 : UInt<8>, clock with :
      reset => (UInt<1>("h0"), r_0) @[Reg.scala 15:16 chipyard.TestHarness.RocketConfig.fir 287538:4]
    node r_raw_data_0 = mux(REG, mem.RW0_rdata_0, r_0) @[package.scala 79:42 chipyard.TestHarness.RocketConfig.fir 287549:4]
    reg r_3 : UInt<8>, clock with :
      reset => (UInt<1>("h0"), r_3) @[Reg.scala 15:16 chipyard.TestHarness.RocketConfig.fir 287538:4]
    node r_raw_data_3 = mux(REG, mem.RW0_rdata_3, r_3) @[package.scala 79:42 chipyard.TestHarness.RocketConfig.fir 287549:4]
    reg r_2 : UInt<8>, clock with :
      reset => (UInt<1>("h0"), r_2) @[Reg.scala 15:16 chipyard.TestHarness.RocketConfig.fir 287538:4]
    node r_raw_data_2 = mux(REG, mem.RW0_rdata_2, r_2) @[package.scala 79:42 chipyard.TestHarness.RocketConfig.fir 287549:4]
    node r_corrected_lo = cat(cat(r_raw_data_3, r_raw_data_2), cat(r_raw_data_1, r_raw_data_0)) @[Cat.scala 30:58 chipyard.TestHarness.RocketConfig.fir 287079:4]
    reg r_5 : UInt<8>, clock with :
      reset => (UInt<1>("h0"), r_5) @[Reg.scala 15:16 chipyard.TestHarness.RocketConfig.fir 287538:4]
    node r_raw_data_5 = mux(REG, mem.RW0_rdata_5, r_5) @[package.scala 79:42 chipyard.TestHarness.RocketConfig.fir 287549:4]
    reg r_4 : UInt<8>, clock with :
      reset => (UInt<1>("h0"), r_4) @[Reg.scala 15:16 chipyard.TestHarness.RocketConfig.fir 287538:4]
    node r_raw_data_4 = mux(REG, mem.RW0_rdata_4, r_4) @[package.scala 79:42 chipyard.TestHarness.RocketConfig.fir 287549:4]
    reg r_7 : UInt<8>, clock with :
      reset => (UInt<1>("h0"), r_7) @[Reg.scala 15:16 chipyard.TestHarness.RocketConfig.fir 287538:4]
    node r_raw_data_7 = mux(REG, mem.RW0_rdata_7, r_7) @[package.scala 79:42 chipyard.TestHarness.RocketConfig.fir 287549:4]
    reg r_6 : UInt<8>, clock with :
      reset => (UInt<1>("h0"), r_6) @[Reg.scala 15:16 chipyard.TestHarness.RocketConfig.fir 287538:4]
    node r_raw_data_6 = mux(REG, mem.RW0_rdata_6, r_6) @[package.scala 79:42 chipyard.TestHarness.RocketConfig.fir 287549:4]
    node r_corrected_hi = cat(cat(r_raw_data_7, r_raw_data_6), cat(r_raw_data_5, r_raw_data_4)) @[Cat.scala 30:58 chipyard.TestHarness.RocketConfig.fir 287082:4]
    node _bundleIn_0_a_ready_T_2 = not(r_full) @[SRAM.scala 243:41 chipyard.TestHarness.RocketConfig.fir 287262:4]
    node in_a_ready = or(_bundleIn_0_a_ready_T_2, auto_in_d_ready) @[SRAM.scala 243:49 chipyard.TestHarness.RocketConfig.fir 287263:4]
    node a_read = eq(auto_in_a_bits_opcode, UInt<3>("h4")) @[SRAM.scala 251:35 chipyard.TestHarness.RocketConfig.fir 287271:4]
    node _GEN_22 = mux(auto_in_d_ready, UInt<1>("h0"), r_full) @[SRAM.scala 273:20 chipyard.TestHarness.RocketConfig.fir 287300:4 SRAM.scala 273:29 chipyard.TestHarness.RocketConfig.fir 287301:6 SRAM.scala 134:30 chipyard.TestHarness.RocketConfig.fir 287011:4]
    node _T_18 = and(in_a_ready, auto_in_a_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.RocketConfig.fir 287303:4]
    node _T_19 = not(a_read) @[SRAM.scala 287:13 chipyard.TestHarness.RocketConfig.fir 287317:6]
    node _GEN_24 = or(_T_18, _GEN_22) @[SRAM.scala 274:24 chipyard.TestHarness.RocketConfig.fir 287304:4 SRAM.scala 275:18 chipyard.TestHarness.RocketConfig.fir 287305:6]
    node _a_lanes_T = bits(auto_in_a_bits_mask, 0, 0) @[SRAM.scala 303:64 chipyard.TestHarness.RocketConfig.fir 287440:4]
    node a_lanes_lo_lo_lo = orr(_a_lanes_T) @[SRAM.scala 303:95 chipyard.TestHarness.RocketConfig.fir 287441:4]
    node _a_lanes_T_1 = bits(auto_in_a_bits_mask, 1, 1) @[SRAM.scala 303:64 chipyard.TestHarness.RocketConfig.fir 287442:4]
    node a_lanes_lo_lo_hi = orr(_a_lanes_T_1) @[SRAM.scala 303:95 chipyard.TestHarness.RocketConfig.fir 287443:4]
    node _a_lanes_T_2 = bits(auto_in_a_bits_mask, 2, 2) @[SRAM.scala 303:64 chipyard.TestHarness.RocketConfig.fir 287444:4]
    node a_lanes_lo_hi_lo = orr(_a_lanes_T_2) @[SRAM.scala 303:95 chipyard.TestHarness.RocketConfig.fir 287445:4]
    node _a_lanes_T_3 = bits(auto_in_a_bits_mask, 3, 3) @[SRAM.scala 303:64 chipyard.TestHarness.RocketConfig.fir 287446:4]
    node a_lanes_lo_hi_hi = orr(_a_lanes_T_3) @[SRAM.scala 303:95 chipyard.TestHarness.RocketConfig.fir 287447:4]
    node _a_lanes_T_4 = bits(auto_in_a_bits_mask, 4, 4) @[SRAM.scala 303:64 chipyard.TestHarness.RocketConfig.fir 287448:4]
    node a_lanes_hi_lo_lo = orr(_a_lanes_T_4) @[SRAM.scala 303:95 chipyard.TestHarness.RocketConfig.fir 287449:4]
    node _a_lanes_T_5 = bits(auto_in_a_bits_mask, 5, 5) @[SRAM.scala 303:64 chipyard.TestHarness.RocketConfig.fir 287450:4]
    node a_lanes_hi_lo_hi = orr(_a_lanes_T_5) @[SRAM.scala 303:95 chipyard.TestHarness.RocketConfig.fir 287451:4]
    node _a_lanes_T_6 = bits(auto_in_a_bits_mask, 6, 6) @[SRAM.scala 303:64 chipyard.TestHarness.RocketConfig.fir 287452:4]
    node a_lanes_hi_hi_lo = orr(_a_lanes_T_6) @[SRAM.scala 303:95 chipyard.TestHarness.RocketConfig.fir 287453:4]
    node _a_lanes_T_7 = bits(auto_in_a_bits_mask, 7, 7) @[SRAM.scala 303:64 chipyard.TestHarness.RocketConfig.fir 287454:4]
    node a_lanes_hi_hi_hi = orr(_a_lanes_T_7) @[SRAM.scala 303:95 chipyard.TestHarness.RocketConfig.fir 287455:4]
    node a_lanes = cat(cat(cat(a_lanes_hi_hi_hi, a_lanes_hi_hi_lo), cat(a_lanes_hi_lo_hi, a_lanes_hi_lo_lo)), cat(cat(a_lanes_lo_hi_hi, a_lanes_lo_hi_lo), cat(a_lanes_lo_lo_hi, a_lanes_lo_lo_lo))) @[Cat.scala 30:58 chipyard.TestHarness.RocketConfig.fir 287462:4]
    node wen = and(_T_18, _T_19) @[SRAM.scala 309:52 chipyard.TestHarness.RocketConfig.fir 287470:4]
    node _ren_T = not(wen) @[SRAM.scala 310:15 chipyard.TestHarness.RocketConfig.fir 287473:4]
    node ren = and(_ren_T, _T_18) @[SRAM.scala 310:20 chipyard.TestHarness.RocketConfig.fir 287475:4]
    node _index_T = shr(auto_in_a_bits_address, 3) @[SRAM.scala 320:36 chipyard.TestHarness.RocketConfig.fir 287493:4]
    node index_lo_lo_lo = bits(_index_T, 0, 0) @[SRAM.scala 320:60 chipyard.TestHarness.RocketConfig.fir 287494:4]
    node index_lo_lo_hi = bits(_index_T, 1, 1) @[SRAM.scala 320:60 chipyard.TestHarness.RocketConfig.fir 287495:4]
    node index_lo_hi_lo = bits(_index_T, 2, 2) @[SRAM.scala 320:60 chipyard.TestHarness.RocketConfig.fir 287496:4]
    node index_lo_hi_hi = bits(_index_T, 3, 3) @[SRAM.scala 320:60 chipyard.TestHarness.RocketConfig.fir 287497:4]
    node index_hi_lo_lo = bits(_index_T, 4, 4) @[SRAM.scala 320:60 chipyard.TestHarness.RocketConfig.fir 287498:4]
    node index_hi_lo_hi = bits(_index_T, 5, 5) @[SRAM.scala 320:60 chipyard.TestHarness.RocketConfig.fir 287499:4]
    node index_hi_hi_lo = bits(_index_T, 6, 6) @[SRAM.scala 320:60 chipyard.TestHarness.RocketConfig.fir 287500:4]
    node index_hi_hi_hi_lo = bits(_index_T, 7, 7) @[SRAM.scala 320:60 chipyard.TestHarness.RocketConfig.fir 287501:4]
    node index_hi_hi_hi_hi = bits(_index_T, 8, 8) @[SRAM.scala 320:60 chipyard.TestHarness.RocketConfig.fir 287502:4]
    node index_lo = cat(cat(index_lo_hi_hi, index_lo_hi_lo), cat(index_lo_lo_hi, index_lo_lo_lo)) @[Cat.scala 30:58 chipyard.TestHarness.RocketConfig.fir 287522:4]
    node index_hi = cat(cat(cat(index_hi_hi_hi_hi, index_hi_hi_hi_lo), index_hi_hi_lo), cat(index_hi_lo_hi, index_hi_lo_lo)) @[Cat.scala 30:58 chipyard.TestHarness.RocketConfig.fir 287526:4]
    auto_in_a_ready <= or(_bundleIn_0_a_ready_T_2, auto_in_d_ready) @[SRAM.scala 243:49 chipyard.TestHarness.RocketConfig.fir 287263:4]
    auto_in_d_valid <= r_full @[SRAM.scala 240:65 chipyard.TestHarness.RocketConfig.fir 287242:4]
    auto_in_d_bits_opcode <= pad(r_read, 3) @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 286970:4 SRAM.scala 209:23 chipyard.TestHarness.RocketConfig.fir 287190:4]
    auto_in_d_bits_size <= r_size @[SRAM.scala 211:29 chipyard.TestHarness.RocketConfig.fir 287192:4]
    auto_in_d_bits_source <= r_source @[SRAM.scala 212:29 chipyard.TestHarness.RocketConfig.fir 287194:4]
    auto_in_d_bits_data <= cat(r_corrected_hi, r_corrected_lo) @[Cat.scala 30:58 chipyard.TestHarness.RocketConfig.fir 287090:4]
    monitor.clock <= clock @[chipyard.TestHarness.RocketConfig.fir 286973:4]
    monitor.reset <= reset @[chipyard.TestHarness.RocketConfig.fir 286974:4]
    monitor.io_in_a_ready <= or(_bundleIn_0_a_ready_T_2, auto_in_d_ready) @[SRAM.scala 243:49 chipyard.TestHarness.RocketConfig.fir 287263:4]
    monitor.io_in_a_valid <= auto_in_a_valid @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 286970:4 LazyModule.scala 309:16 chipyard.TestHarness.RocketConfig.fir 286995:4]
    monitor.io_in_a_bits_opcode <= auto_in_a_bits_opcode @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 286970:4 LazyModule.scala 309:16 chipyard.TestHarness.RocketConfig.fir 286995:4]
    monitor.io_in_a_bits_param <= auto_in_a_bits_param @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 286970:4 LazyModule.scala 309:16 chipyard.TestHarness.RocketConfig.fir 286995:4]
    monitor.io_in_a_bits_size <= auto_in_a_bits_size @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 286970:4 LazyModule.scala 309:16 chipyard.TestHarness.RocketConfig.fir 286995:4]
    monitor.io_in_a_bits_source <= auto_in_a_bits_source @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 286970:4 LazyModule.scala 309:16 chipyard.TestHarness.RocketConfig.fir 286995:4]
    monitor.io_in_a_bits_address <= auto_in_a_bits_address @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 286970:4 LazyModule.scala 309:16 chipyard.TestHarness.RocketConfig.fir 286995:4]
    monitor.io_in_a_bits_mask <= auto_in_a_bits_mask @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 286970:4 LazyModule.scala 309:16 chipyard.TestHarness.RocketConfig.fir 286995:4]
    monitor.io_in_a_bits_corrupt <= auto_in_a_bits_corrupt @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 286970:4 LazyModule.scala 309:16 chipyard.TestHarness.RocketConfig.fir 286995:4]
    monitor.io_in_d_ready <= auto_in_d_ready @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 286970:4 LazyModule.scala 309:16 chipyard.TestHarness.RocketConfig.fir 286995:4]
    monitor.io_in_d_valid <= r_full @[SRAM.scala 240:65 chipyard.TestHarness.RocketConfig.fir 287242:4]
    monitor.io_in_d_bits_opcode <= pad(r_read, 3) @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 286970:4 SRAM.scala 209:23 chipyard.TestHarness.RocketConfig.fir 287190:4]
    monitor.io_in_d_bits_size <= r_size @[SRAM.scala 211:29 chipyard.TestHarness.RocketConfig.fir 287192:4]
    monitor.io_in_d_bits_source <= r_source @[SRAM.scala 212:29 chipyard.TestHarness.RocketConfig.fir 287194:4]
    mem.RW0_wdata_0 <= bits(auto_in_a_bits_data, 7, 0) @[SRAM.scala 291:67 chipyard.TestHarness.RocketConfig.fir 287322:4]
    mem.RW0_wdata_1 <= bits(auto_in_a_bits_data, 15, 8) @[SRAM.scala 291:67 chipyard.TestHarness.RocketConfig.fir 287323:4]
    mem.RW0_wdata_2 <= bits(auto_in_a_bits_data, 23, 16) @[SRAM.scala 291:67 chipyard.TestHarness.RocketConfig.fir 287324:4]
    mem.RW0_wdata_3 <= bits(auto_in_a_bits_data, 31, 24) @[SRAM.scala 291:67 chipyard.TestHarness.RocketConfig.fir 287325:4]
    mem.RW0_wdata_4 <= bits(auto_in_a_bits_data, 39, 32) @[SRAM.scala 291:67 chipyard.TestHarness.RocketConfig.fir 287326:4]
    mem.RW0_wdata_5 <= bits(auto_in_a_bits_data, 47, 40) @[SRAM.scala 291:67 chipyard.TestHarness.RocketConfig.fir 287327:4]
    mem.RW0_wdata_6 <= bits(auto_in_a_bits_data, 55, 48) @[SRAM.scala 291:67 chipyard.TestHarness.RocketConfig.fir 287328:4]
    mem.RW0_wdata_7 <= bits(auto_in_a_bits_data, 63, 56) @[SRAM.scala 291:67 chipyard.TestHarness.RocketConfig.fir 287329:4]
    mem.RW0_wmask_0 <= bits(a_lanes, 0, 0) @[SRAM.scala 322:46 chipyard.TestHarness.RocketConfig.fir 287559:6]
    mem.RW0_wmask_1 <= bits(a_lanes, 1, 1) @[SRAM.scala 322:46 chipyard.TestHarness.RocketConfig.fir 287560:6]
    mem.RW0_wmask_2 <= bits(a_lanes, 2, 2) @[SRAM.scala 322:46 chipyard.TestHarness.RocketConfig.fir 287561:6]
    mem.RW0_wmask_3 <= bits(a_lanes, 3, 3) @[SRAM.scala 322:46 chipyard.TestHarness.RocketConfig.fir 287562:6]
    mem.RW0_wmask_4 <= bits(a_lanes, 4, 4) @[SRAM.scala 322:46 chipyard.TestHarness.RocketConfig.fir 287563:6]
    mem.RW0_wmask_5 <= bits(a_lanes, 5, 5) @[SRAM.scala 322:46 chipyard.TestHarness.RocketConfig.fir 287564:6]
    mem.RW0_wmask_6 <= bits(a_lanes, 6, 6) @[SRAM.scala 322:46 chipyard.TestHarness.RocketConfig.fir 287565:6]
    mem.RW0_wmask_7 <= bits(a_lanes, 7, 7) @[SRAM.scala 322:46 chipyard.TestHarness.RocketConfig.fir 287566:6]
    r_full <= mux(reset, UInt<1>("h0"), _GEN_24) @[SRAM.scala 134:30 chipyard.TestHarness.RocketConfig.fir 287011:4 SRAM.scala 134:30 chipyard.TestHarness.RocketConfig.fir 287011:4]
    r_size <= mux(_T_18, auto_in_a_bits_size, r_size) @[SRAM.scala 274:24 chipyard.TestHarness.RocketConfig.fir 287304:4 SRAM.scala 279:18 chipyard.TestHarness.RocketConfig.fir 287309:6 SRAM.scala 137:26 chipyard.TestHarness.RocketConfig.fir 287014:4]
    r_source <= mux(_T_18, auto_in_a_bits_source, r_source) @[SRAM.scala 274:24 chipyard.TestHarness.RocketConfig.fir 287304:4 SRAM.scala 280:18 chipyard.TestHarness.RocketConfig.fir 287310:6 SRAM.scala 138:26 chipyard.TestHarness.RocketConfig.fir 287015:4]
    r_read <= mux(_T_18, a_read, r_read) @[SRAM.scala 274:24 chipyard.TestHarness.RocketConfig.fir 287304:4 SRAM.scala 281:18 chipyard.TestHarness.RocketConfig.fir 287311:6 SRAM.scala 139:26 chipyard.TestHarness.RocketConfig.fir 287016:4]
    REG <= and(_ren_T, _T_18) @[SRAM.scala 310:20 chipyard.TestHarness.RocketConfig.fir 287475:4]
    r_0 <= mux(REG, mem.RW0_rdata_0, r_0) @[Reg.scala 16:19 chipyard.TestHarness.RocketConfig.fir 287539:4 Reg.scala 16:23 chipyard.TestHarness.RocketConfig.fir 287540:6 Reg.scala 15:16 chipyard.TestHarness.RocketConfig.fir 287538:4]
    r_1 <= mux(REG, mem.RW0_rdata_1, r_1) @[Reg.scala 16:19 chipyard.TestHarness.RocketConfig.fir 287539:4 Reg.scala 16:23 chipyard.TestHarness.RocketConfig.fir 287541:6 Reg.scala 15:16 chipyard.TestHarness.RocketConfig.fir 287538:4]
    r_2 <= mux(REG, mem.RW0_rdata_2, r_2) @[Reg.scala 16:19 chipyard.TestHarness.RocketConfig.fir 287539:4 Reg.scala 16:23 chipyard.TestHarness.RocketConfig.fir 287542:6 Reg.scala 15:16 chipyard.TestHarness.RocketConfig.fir 287538:4]
    r_3 <= mux(REG, mem.RW0_rdata_3, r_3) @[Reg.scala 16:19 chipyard.TestHarness.RocketConfig.fir 287539:4 Reg.scala 16:23 chipyard.TestHarness.RocketConfig.fir 287543:6 Reg.scala 15:16 chipyard.TestHarness.RocketConfig.fir 287538:4]
    r_4 <= mux(REG, mem.RW0_rdata_4, r_4) @[Reg.scala 16:19 chipyard.TestHarness.RocketConfig.fir 287539:4 Reg.scala 16:23 chipyard.TestHarness.RocketConfig.fir 287544:6 Reg.scala 15:16 chipyard.TestHarness.RocketConfig.fir 287538:4]
    r_5 <= mux(REG, mem.RW0_rdata_5, r_5) @[Reg.scala 16:19 chipyard.TestHarness.RocketConfig.fir 287539:4 Reg.scala 16:23 chipyard.TestHarness.RocketConfig.fir 287545:6 Reg.scala 15:16 chipyard.TestHarness.RocketConfig.fir 287538:4]
    r_6 <= mux(REG, mem.RW0_rdata_6, r_6) @[Reg.scala 16:19 chipyard.TestHarness.RocketConfig.fir 287539:4 Reg.scala 16:23 chipyard.TestHarness.RocketConfig.fir 287546:6 Reg.scala 15:16 chipyard.TestHarness.RocketConfig.fir 287538:4]
    r_7 <= mux(REG, mem.RW0_rdata_7, r_7) @[Reg.scala 16:19 chipyard.TestHarness.RocketConfig.fir 287539:4 Reg.scala 16:23 chipyard.TestHarness.RocketConfig.fir 287547:6 Reg.scala 15:16 chipyard.TestHarness.RocketConfig.fir 287538:4]
    mem.RW0_wmode <= and(_T_18, _T_19) @[SRAM.scala 309:52 chipyard.TestHarness.RocketConfig.fir 287470:4]
    mem.RW0_clk <= clock
    mem.RW0_en <= or(ren, wen)
    mem.RW0_addr <= cat(index_hi, index_lo) @[Cat.scala 30:58 chipyard.TestHarness.RocketConfig.fir 287527:4]

  module TLXbar_10_inTestHarness : @[chipyard.TestHarness.RocketConfig.fir 287603:2]
    output auto_in_a_ready : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 287606:4]
    input auto_in_a_valid : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 287606:4]
    input auto_in_a_bits_opcode : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 287606:4]
    input auto_in_a_bits_param : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 287606:4]
    input auto_in_a_bits_size : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 287606:4]
    input auto_in_a_bits_source : UInt<4> @[chipyard.TestHarness.RocketConfig.fir 287606:4]
    input auto_in_a_bits_address : UInt<29> @[chipyard.TestHarness.RocketConfig.fir 287606:4]
    input auto_in_a_bits_mask : UInt<8> @[chipyard.TestHarness.RocketConfig.fir 287606:4]
    input auto_in_a_bits_data : UInt<64> @[chipyard.TestHarness.RocketConfig.fir 287606:4]
    input auto_in_a_bits_corrupt : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 287606:4]
    input auto_in_d_ready : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 287606:4]
    output auto_in_d_valid : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 287606:4]
    output auto_in_d_bits_opcode : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 287606:4]
    output auto_in_d_bits_param : UInt<2> @[chipyard.TestHarness.RocketConfig.fir 287606:4]
    output auto_in_d_bits_size : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 287606:4]
    output auto_in_d_bits_source : UInt<4> @[chipyard.TestHarness.RocketConfig.fir 287606:4]
    output auto_in_d_bits_sink : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 287606:4]
    output auto_in_d_bits_denied : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 287606:4]
    output auto_in_d_bits_data : UInt<64> @[chipyard.TestHarness.RocketConfig.fir 287606:4]
    output auto_in_d_bits_corrupt : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 287606:4]
    input auto_out_a_ready : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 287606:4]
    output auto_out_a_valid : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 287606:4]
    output auto_out_a_bits_opcode : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 287606:4]
    output auto_out_a_bits_param : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 287606:4]
    output auto_out_a_bits_size : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 287606:4]
    output auto_out_a_bits_source : UInt<4> @[chipyard.TestHarness.RocketConfig.fir 287606:4]
    output auto_out_a_bits_address : UInt<29> @[chipyard.TestHarness.RocketConfig.fir 287606:4]
    output auto_out_a_bits_mask : UInt<8> @[chipyard.TestHarness.RocketConfig.fir 287606:4]
    output auto_out_a_bits_data : UInt<64> @[chipyard.TestHarness.RocketConfig.fir 287606:4]
    output auto_out_a_bits_corrupt : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 287606:4]
    output auto_out_d_ready : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 287606:4]
    input auto_out_d_valid : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 287606:4]
    input auto_out_d_bits_opcode : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 287606:4]
    input auto_out_d_bits_param : UInt<2> @[chipyard.TestHarness.RocketConfig.fir 287606:4]
    input auto_out_d_bits_size : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 287606:4]
    input auto_out_d_bits_source : UInt<4> @[chipyard.TestHarness.RocketConfig.fir 287606:4]
    input auto_out_d_bits_sink : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 287606:4]
    input auto_out_d_bits_denied : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 287606:4]
    input auto_out_d_bits_data : UInt<64> @[chipyard.TestHarness.RocketConfig.fir 287606:4]
    input auto_out_d_bits_corrupt : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 287606:4]

    auto_in_a_ready <= auto_out_a_ready @[Nodes.scala 1207:84 chipyard.TestHarness.RocketConfig.fir 287611:4 LazyModule.scala 311:12 chipyard.TestHarness.RocketConfig.fir 287615:4]
    auto_in_d_valid <= auto_out_d_valid @[ReadyValidCancel.scala 21:38 chipyard.TestHarness.RocketConfig.fir 288027:4]
    auto_in_d_bits_opcode <= auto_out_d_bits_opcode @[Nodes.scala 1207:84 chipyard.TestHarness.RocketConfig.fir 287611:4 LazyModule.scala 311:12 chipyard.TestHarness.RocketConfig.fir 287615:4]
    auto_in_d_bits_param <= auto_out_d_bits_param @[Nodes.scala 1207:84 chipyard.TestHarness.RocketConfig.fir 287611:4 LazyModule.scala 311:12 chipyard.TestHarness.RocketConfig.fir 287615:4]
    auto_in_d_bits_size <= auto_out_d_bits_size @[Nodes.scala 1207:84 chipyard.TestHarness.RocketConfig.fir 287611:4 LazyModule.scala 311:12 chipyard.TestHarness.RocketConfig.fir 287615:4]
    auto_in_d_bits_source <= auto_out_d_bits_source @[Xbar.scala 228:69 chipyard.TestHarness.RocketConfig.fir 287726:4]
    auto_in_d_bits_sink <= auto_out_d_bits_sink @[Xbar.scala 323:53 chipyard.TestHarness.RocketConfig.fir 287788:4]
    auto_in_d_bits_denied <= auto_out_d_bits_denied @[Nodes.scala 1207:84 chipyard.TestHarness.RocketConfig.fir 287611:4 LazyModule.scala 311:12 chipyard.TestHarness.RocketConfig.fir 287615:4]
    auto_in_d_bits_data <= auto_out_d_bits_data @[Nodes.scala 1207:84 chipyard.TestHarness.RocketConfig.fir 287611:4 LazyModule.scala 311:12 chipyard.TestHarness.RocketConfig.fir 287615:4]
    auto_in_d_bits_corrupt <= auto_out_d_bits_corrupt @[Nodes.scala 1207:84 chipyard.TestHarness.RocketConfig.fir 287611:4 LazyModule.scala 311:12 chipyard.TestHarness.RocketConfig.fir 287615:4]
    auto_out_a_valid <= auto_in_a_valid @[ReadyValidCancel.scala 21:38 chipyard.TestHarness.RocketConfig.fir 288052:4]
    auto_out_a_bits_opcode <= auto_in_a_bits_opcode @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 287613:4 LazyModule.scala 309:16 chipyard.TestHarness.RocketConfig.fir 287616:4]
    auto_out_a_bits_param <= auto_in_a_bits_param @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 287613:4 LazyModule.scala 309:16 chipyard.TestHarness.RocketConfig.fir 287616:4]
    auto_out_a_bits_size <= auto_in_a_bits_size @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 287613:4 LazyModule.scala 309:16 chipyard.TestHarness.RocketConfig.fir 287616:4]
    auto_out_a_bits_source <= auto_in_a_bits_source @[Xbar.scala 237:55 chipyard.TestHarness.RocketConfig.fir 287680:4]
    auto_out_a_bits_address <= auto_in_a_bits_address @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 287613:4 LazyModule.scala 309:16 chipyard.TestHarness.RocketConfig.fir 287616:4]
    auto_out_a_bits_mask <= auto_in_a_bits_mask @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 287613:4 LazyModule.scala 309:16 chipyard.TestHarness.RocketConfig.fir 287616:4]
    auto_out_a_bits_data <= auto_in_a_bits_data @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 287613:4 LazyModule.scala 309:16 chipyard.TestHarness.RocketConfig.fir 287616:4]
    auto_out_a_bits_corrupt <= auto_in_a_bits_corrupt @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 287613:4 LazyModule.scala 309:16 chipyard.TestHarness.RocketConfig.fir 287616:4]
    auto_out_d_ready <= auto_in_d_ready @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 287613:4 LazyModule.scala 309:16 chipyard.TestHarness.RocketConfig.fir 287616:4]

  module TLMonitor_55_inTestHarness : @[chipyard.TestHarness.RocketConfig.fir 288129:2]
    input clock : Clock @[chipyard.TestHarness.RocketConfig.fir 288130:4]
    input reset : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 288131:4]
    input io_in_a_ready : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 288132:4]
    input io_in_a_valid : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 288132:4]
    input io_in_a_bits_opcode : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 288132:4]
    input io_in_a_bits_param : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 288132:4]
    input io_in_a_bits_size : UInt<2> @[chipyard.TestHarness.RocketConfig.fir 288132:4]
    input io_in_a_bits_source : UInt<8> @[chipyard.TestHarness.RocketConfig.fir 288132:4]
    input io_in_a_bits_address : UInt<29> @[chipyard.TestHarness.RocketConfig.fir 288132:4]
    input io_in_a_bits_mask : UInt<8> @[chipyard.TestHarness.RocketConfig.fir 288132:4]
    input io_in_a_bits_corrupt : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 288132:4]
    input io_in_d_ready : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 288132:4]
    input io_in_d_valid : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 288132:4]
    input io_in_d_bits_opcode : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 288132:4]
    input io_in_d_bits_param : UInt<2> @[chipyard.TestHarness.RocketConfig.fir 288132:4]
    input io_in_d_bits_size : UInt<2> @[chipyard.TestHarness.RocketConfig.fir 288132:4]
    input io_in_d_bits_source : UInt<8> @[chipyard.TestHarness.RocketConfig.fir 288132:4]
    input io_in_d_bits_sink : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 288132:4]
    input io_in_d_bits_denied : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 288132:4]
    input io_in_d_bits_corrupt : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 288132:4]

    inst plusarg_reader of plusarg_reader @[PlusArg.scala 80:11 chipyard.TestHarness.RocketConfig.fir 289623:4]
    inst plusarg_reader_1 of plusarg_reader @[PlusArg.scala 80:11 chipyard.TestHarness.RocketConfig.fir 289930:4]
    node _source_ok_T_4 = leq(io_in_a_bits_source, UInt<8>("h9f")) @[Parameters.scala 57:20 chipyard.TestHarness.RocketConfig.fir 288149:6]
    node _is_aligned_mask_T_1 = dshlw(UInt<6>("h7"), io_in_a_bits_size) @[package.scala 234:77 chipyard.TestHarness.RocketConfig.fir 288155:6]
    node _is_aligned_mask_T_2 = bits(_is_aligned_mask_T_1, 2, 0) @[package.scala 234:82 chipyard.TestHarness.RocketConfig.fir 288156:6]
    node is_aligned_mask = not(_is_aligned_mask_T_2) @[package.scala 234:46 chipyard.TestHarness.RocketConfig.fir 288157:6]
    node _GEN_71 = pad(is_aligned_mask, 29) @[Edges.scala 20:16 chipyard.TestHarness.RocketConfig.fir 288158:6]
    node _is_aligned_T = and(io_in_a_bits_address, _GEN_71) @[Edges.scala 20:16 chipyard.TestHarness.RocketConfig.fir 288158:6]
    node is_aligned = eq(_is_aligned_T, UInt<29>("h0")) @[Edges.scala 20:24 chipyard.TestHarness.RocketConfig.fir 288159:6]
    node _mask_sizeOH_T = pad(io_in_a_bits_size, 3) @[Misc.scala 201:34 chipyard.TestHarness.RocketConfig.fir 288160:6]
    node mask_sizeOH_shiftAmount = bits(_mask_sizeOH_T, 1, 0) @[OneHot.scala 64:49 chipyard.TestHarness.RocketConfig.fir 288161:6]
    node _mask_sizeOH_T_1 = dshlw(UInt<4>("h1"), mask_sizeOH_shiftAmount) @[OneHot.scala 65:12 chipyard.TestHarness.RocketConfig.fir 288162:6]
    node _mask_sizeOH_T_2 = bits(_mask_sizeOH_T_1, 2, 0) @[OneHot.scala 65:27 chipyard.TestHarness.RocketConfig.fir 288163:6]
    node mask_sizeOH = or(_mask_sizeOH_T_2, UInt<3>("h1")) @[Misc.scala 201:81 chipyard.TestHarness.RocketConfig.fir 288164:6]
    node _mask_T = geq(io_in_a_bits_size, UInt<2>("h3")) @[Misc.scala 205:21 chipyard.TestHarness.RocketConfig.fir 288165:6]
    node mask_size = bits(mask_sizeOH, 2, 2) @[Misc.scala 208:26 chipyard.TestHarness.RocketConfig.fir 288166:6]
    node mask_bit = bits(io_in_a_bits_address, 2, 2) @[Misc.scala 209:26 chipyard.TestHarness.RocketConfig.fir 288167:6]
    node mask_nbit = not(mask_bit) @[Misc.scala 210:20 chipyard.TestHarness.RocketConfig.fir 288168:6]
    node _mask_acc_T = and(mask_size, mask_nbit) @[Misc.scala 214:38 chipyard.TestHarness.RocketConfig.fir 288170:6]
    node mask_acc = or(_mask_T, _mask_acc_T) @[Misc.scala 214:29 chipyard.TestHarness.RocketConfig.fir 288171:6]
    node _mask_acc_T_1 = and(mask_size, mask_bit) @[Misc.scala 214:38 chipyard.TestHarness.RocketConfig.fir 288173:6]
    node mask_acc_1 = or(_mask_T, _mask_acc_T_1) @[Misc.scala 214:29 chipyard.TestHarness.RocketConfig.fir 288174:6]
    node mask_size_1 = bits(mask_sizeOH, 1, 1) @[Misc.scala 208:26 chipyard.TestHarness.RocketConfig.fir 288175:6]
    node mask_bit_1 = bits(io_in_a_bits_address, 1, 1) @[Misc.scala 209:26 chipyard.TestHarness.RocketConfig.fir 288176:6]
    node mask_nbit_1 = not(mask_bit_1) @[Misc.scala 210:20 chipyard.TestHarness.RocketConfig.fir 288177:6]
    node mask_eq_2 = and(mask_nbit, mask_nbit_1) @[Misc.scala 213:27 chipyard.TestHarness.RocketConfig.fir 288178:6]
    node _mask_acc_T_2 = and(mask_size_1, mask_eq_2) @[Misc.scala 214:38 chipyard.TestHarness.RocketConfig.fir 288179:6]
    node mask_acc_2 = or(mask_acc, _mask_acc_T_2) @[Misc.scala 214:29 chipyard.TestHarness.RocketConfig.fir 288180:6]
    node mask_eq_3 = and(mask_nbit, mask_bit_1) @[Misc.scala 213:27 chipyard.TestHarness.RocketConfig.fir 288181:6]
    node _mask_acc_T_3 = and(mask_size_1, mask_eq_3) @[Misc.scala 214:38 chipyard.TestHarness.RocketConfig.fir 288182:6]
    node mask_acc_3 = or(mask_acc, _mask_acc_T_3) @[Misc.scala 214:29 chipyard.TestHarness.RocketConfig.fir 288183:6]
    node mask_eq_4 = and(mask_bit, mask_nbit_1) @[Misc.scala 213:27 chipyard.TestHarness.RocketConfig.fir 288184:6]
    node _mask_acc_T_4 = and(mask_size_1, mask_eq_4) @[Misc.scala 214:38 chipyard.TestHarness.RocketConfig.fir 288185:6]
    node mask_acc_4 = or(mask_acc_1, _mask_acc_T_4) @[Misc.scala 214:29 chipyard.TestHarness.RocketConfig.fir 288186:6]
    node mask_eq_5 = and(mask_bit, mask_bit_1) @[Misc.scala 213:27 chipyard.TestHarness.RocketConfig.fir 288187:6]
    node _mask_acc_T_5 = and(mask_size_1, mask_eq_5) @[Misc.scala 214:38 chipyard.TestHarness.RocketConfig.fir 288188:6]
    node mask_acc_5 = or(mask_acc_1, _mask_acc_T_5) @[Misc.scala 214:29 chipyard.TestHarness.RocketConfig.fir 288189:6]
    node mask_size_2 = bits(mask_sizeOH, 0, 0) @[Misc.scala 208:26 chipyard.TestHarness.RocketConfig.fir 288190:6]
    node mask_bit_2 = bits(io_in_a_bits_address, 0, 0) @[Misc.scala 209:26 chipyard.TestHarness.RocketConfig.fir 288191:6]
    node mask_nbit_2 = not(mask_bit_2) @[Misc.scala 210:20 chipyard.TestHarness.RocketConfig.fir 288192:6]
    node mask_eq_6 = and(mask_eq_2, mask_nbit_2) @[Misc.scala 213:27 chipyard.TestHarness.RocketConfig.fir 288193:6]
    node _mask_acc_T_6 = and(mask_size_2, mask_eq_6) @[Misc.scala 214:38 chipyard.TestHarness.RocketConfig.fir 288194:6]
    node mask_lo_lo_lo = or(mask_acc_2, _mask_acc_T_6) @[Misc.scala 214:29 chipyard.TestHarness.RocketConfig.fir 288195:6]
    node mask_eq_7 = and(mask_eq_2, mask_bit_2) @[Misc.scala 213:27 chipyard.TestHarness.RocketConfig.fir 288196:6]
    node _mask_acc_T_7 = and(mask_size_2, mask_eq_7) @[Misc.scala 214:38 chipyard.TestHarness.RocketConfig.fir 288197:6]
    node mask_lo_lo_hi = or(mask_acc_2, _mask_acc_T_7) @[Misc.scala 214:29 chipyard.TestHarness.RocketConfig.fir 288198:6]
    node mask_eq_8 = and(mask_eq_3, mask_nbit_2) @[Misc.scala 213:27 chipyard.TestHarness.RocketConfig.fir 288199:6]
    node _mask_acc_T_8 = and(mask_size_2, mask_eq_8) @[Misc.scala 214:38 chipyard.TestHarness.RocketConfig.fir 288200:6]
    node mask_lo_hi_lo = or(mask_acc_3, _mask_acc_T_8) @[Misc.scala 214:29 chipyard.TestHarness.RocketConfig.fir 288201:6]
    node mask_eq_9 = and(mask_eq_3, mask_bit_2) @[Misc.scala 213:27 chipyard.TestHarness.RocketConfig.fir 288202:6]
    node _mask_acc_T_9 = and(mask_size_2, mask_eq_9) @[Misc.scala 214:38 chipyard.TestHarness.RocketConfig.fir 288203:6]
    node mask_lo_hi_hi = or(mask_acc_3, _mask_acc_T_9) @[Misc.scala 214:29 chipyard.TestHarness.RocketConfig.fir 288204:6]
    node mask_eq_10 = and(mask_eq_4, mask_nbit_2) @[Misc.scala 213:27 chipyard.TestHarness.RocketConfig.fir 288205:6]
    node _mask_acc_T_10 = and(mask_size_2, mask_eq_10) @[Misc.scala 214:38 chipyard.TestHarness.RocketConfig.fir 288206:6]
    node mask_hi_lo_lo = or(mask_acc_4, _mask_acc_T_10) @[Misc.scala 214:29 chipyard.TestHarness.RocketConfig.fir 288207:6]
    node mask_eq_11 = and(mask_eq_4, mask_bit_2) @[Misc.scala 213:27 chipyard.TestHarness.RocketConfig.fir 288208:6]
    node _mask_acc_T_11 = and(mask_size_2, mask_eq_11) @[Misc.scala 214:38 chipyard.TestHarness.RocketConfig.fir 288209:6]
    node mask_hi_lo_hi = or(mask_acc_4, _mask_acc_T_11) @[Misc.scala 214:29 chipyard.TestHarness.RocketConfig.fir 288210:6]
    node mask_eq_12 = and(mask_eq_5, mask_nbit_2) @[Misc.scala 213:27 chipyard.TestHarness.RocketConfig.fir 288211:6]
    node _mask_acc_T_12 = and(mask_size_2, mask_eq_12) @[Misc.scala 214:38 chipyard.TestHarness.RocketConfig.fir 288212:6]
    node mask_hi_hi_lo = or(mask_acc_5, _mask_acc_T_12) @[Misc.scala 214:29 chipyard.TestHarness.RocketConfig.fir 288213:6]
    node mask_eq_13 = and(mask_eq_5, mask_bit_2) @[Misc.scala 213:27 chipyard.TestHarness.RocketConfig.fir 288214:6]
    node _mask_acc_T_13 = and(mask_size_2, mask_eq_13) @[Misc.scala 214:38 chipyard.TestHarness.RocketConfig.fir 288215:6]
    node mask_hi_hi_hi = or(mask_acc_5, _mask_acc_T_13) @[Misc.scala 214:29 chipyard.TestHarness.RocketConfig.fir 288216:6]
    node mask = cat(cat(cat(mask_hi_hi_hi, mask_hi_hi_lo), cat(mask_hi_lo_hi, mask_hi_lo_lo)), cat(cat(mask_lo_hi_hi, mask_lo_hi_lo), cat(mask_lo_lo_hi, mask_lo_lo_lo))) @[Cat.scala 30:58 chipyard.TestHarness.RocketConfig.fir 288223:6]
    node _T_20 = eq(io_in_a_bits_opcode, UInt<3>("h6")) @[Monitor.scala 81:25 chipyard.TestHarness.RocketConfig.fir 288246:6]
    node _T_33 = xor(io_in_a_bits_address, UInt<29>("h10000000")) @[Parameters.scala 137:31 chipyard.TestHarness.RocketConfig.fir 288262:8]
    node _T_34 = cvt(_T_33) @[Parameters.scala 137:49 chipyard.TestHarness.RocketConfig.fir 288263:8]
    node _T_35 = and(_T_34, SInt<30>("h-1000")) @[Parameters.scala 137:52 chipyard.TestHarness.RocketConfig.fir 288264:8]
    node _T_36 = asSInt(_T_35) @[Parameters.scala 137:52 chipyard.TestHarness.RocketConfig.fir 288265:8]
    node _T_37 = eq(_T_36, SInt<30>("h0")) @[Parameters.scala 137:67 chipyard.TestHarness.RocketConfig.fir 288266:8]
    node _T_43 = not(reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288272:8]
    node _T_60 = or(_source_ok_T_4, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288297:8]
    node _T_61 = not(_T_60) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288298:8]
    node _T_64 = or(_mask_T, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288305:8]
    node _T_65 = not(_T_64) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288306:8]
    node _T_67 = or(is_aligned, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288312:8]
    node _T_68 = not(_T_67) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288313:8]
    node _T_69 = leq(io_in_a_bits_param, UInt<3>("h2")) @[Bundles.scala 108:27 chipyard.TestHarness.RocketConfig.fir 288318:8]
    node _T_71 = or(_T_69, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288320:8]
    node _T_72 = not(_T_71) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288321:8]
    node _T_73 = not(io_in_a_bits_mask) @[Monitor.scala 88:18 chipyard.TestHarness.RocketConfig.fir 288326:8]
    node _T_74 = eq(_T_73, UInt<8>("h0")) @[Monitor.scala 88:31 chipyard.TestHarness.RocketConfig.fir 288327:8]
    node _T_76 = or(_T_74, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288329:8]
    node _T_77 = not(_T_76) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288330:8]
    node _T_78 = not(io_in_a_bits_corrupt) @[Monitor.scala 89:18 chipyard.TestHarness.RocketConfig.fir 288335:8]
    node _T_80 = or(_T_78, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288337:8]
    node _T_81 = not(_T_80) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288338:8]
    node _T_82 = eq(io_in_a_bits_opcode, UInt<3>("h7")) @[Monitor.scala 92:25 chipyard.TestHarness.RocketConfig.fir 288344:6]
    node _T_135 = neq(io_in_a_bits_param, UInt<3>("h0")) @[Monitor.scala 99:31 chipyard.TestHarness.RocketConfig.fir 288424:8]
    node _T_137 = or(_T_135, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288426:8]
    node _T_138 = not(_T_137) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288427:8]
    node _T_148 = eq(io_in_a_bits_opcode, UInt<3>("h4")) @[Monitor.scala 104:25 chipyard.TestHarness.RocketConfig.fir 288450:6]
    node _T_175 = or(_T_37, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288484:8]
    node _T_176 = not(_T_175) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288485:8]
    node _T_183 = eq(io_in_a_bits_param, UInt<3>("h0")) @[Monitor.scala 109:31 chipyard.TestHarness.RocketConfig.fir 288504:8]
    node _T_185 = or(_T_183, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288506:8]
    node _T_186 = not(_T_185) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288507:8]
    node _T_187 = eq(io_in_a_bits_mask, mask) @[Monitor.scala 110:30 chipyard.TestHarness.RocketConfig.fir 288512:8]
    node _T_189 = or(_T_187, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288514:8]
    node _T_190 = not(_T_189) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288515:8]
    node _T_195 = eq(io_in_a_bits_opcode, UInt<3>("h0")) @[Monitor.scala 114:25 chipyard.TestHarness.RocketConfig.fir 288529:6]
    node _T_218 = and(_source_ok_T_4, _T_37) @[Monitor.scala 115:71 chipyard.TestHarness.RocketConfig.fir 288555:8]
    node _T_220 = or(_T_218, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288557:8]
    node _T_221 = not(_T_220) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288558:8]
    node _T_236 = eq(io_in_a_bits_opcode, UInt<3>("h1")) @[Monitor.scala 122:25 chipyard.TestHarness.RocketConfig.fir 288594:6]
    node _T_273 = not(mask) @[Monitor.scala 127:33 chipyard.TestHarness.RocketConfig.fir 288650:8]
    node _T_274 = and(io_in_a_bits_mask, _T_273) @[Monitor.scala 127:31 chipyard.TestHarness.RocketConfig.fir 288651:8]
    node _T_275 = eq(_T_274, UInt<8>("h0")) @[Monitor.scala 127:40 chipyard.TestHarness.RocketConfig.fir 288652:8]
    node _T_277 = or(_T_275, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288654:8]
    node _T_278 = not(_T_277) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288655:8]
    node _T_279 = eq(io_in_a_bits_opcode, UInt<3>("h2")) @[Monitor.scala 130:25 chipyard.TestHarness.RocketConfig.fir 288661:6]
    node _T_309 = leq(io_in_a_bits_param, UInt<3>("h4")) @[Bundles.scala 138:33 chipyard.TestHarness.RocketConfig.fir 288706:8]
    node _T_311 = or(_T_309, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288708:8]
    node _T_312 = not(_T_311) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288709:8]
    node _T_317 = eq(io_in_a_bits_opcode, UInt<3>("h3")) @[Monitor.scala 138:25 chipyard.TestHarness.RocketConfig.fir 288723:6]
    node _T_347 = leq(io_in_a_bits_param, UInt<3>("h3")) @[Bundles.scala 145:30 chipyard.TestHarness.RocketConfig.fir 288768:8]
    node _T_349 = or(_T_347, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288770:8]
    node _T_350 = not(_T_349) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288771:8]
    node _T_355 = eq(io_in_a_bits_opcode, UInt<3>("h5")) @[Monitor.scala 146:25 chipyard.TestHarness.RocketConfig.fir 288785:6]
    node _T_385 = leq(io_in_a_bits_param, UInt<3>("h1")) @[Bundles.scala 158:28 chipyard.TestHarness.RocketConfig.fir 288830:8]
    node _T_387 = or(_T_385, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288832:8]
    node _T_388 = not(_T_387) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288833:8]
    node _T_397 = leq(io_in_d_bits_opcode, UInt<3>("h6")) @[Bundles.scala 42:24 chipyard.TestHarness.RocketConfig.fir 288857:6]
    node _T_399 = or(_T_397, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 288859:6]
    node _T_400 = not(_T_399) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 288860:6]
    node _source_ok_T_10 = leq(io_in_d_bits_source, UInt<8>("h9f")) @[Parameters.scala 57:20 chipyard.TestHarness.RocketConfig.fir 288871:6]
    node _T_401 = eq(io_in_d_bits_opcode, UInt<3>("h6")) @[Monitor.scala 310:25 chipyard.TestHarness.RocketConfig.fir 288877:6]
    node _T_403 = or(_source_ok_T_10, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 288880:8]
    node _T_404 = not(_T_403) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 288881:8]
    node _T_405 = geq(io_in_d_bits_size, UInt<2>("h3")) @[Monitor.scala 312:27 chipyard.TestHarness.RocketConfig.fir 288886:8]
    node _T_407 = or(_T_405, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 288888:8]
    node _T_408 = not(_T_407) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 288889:8]
    node _T_409 = eq(io_in_d_bits_param, UInt<2>("h0")) @[Monitor.scala 313:28 chipyard.TestHarness.RocketConfig.fir 288894:8]
    node _T_411 = or(_T_409, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 288896:8]
    node _T_412 = not(_T_411) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 288897:8]
    node _T_413 = not(io_in_d_bits_corrupt) @[Monitor.scala 314:15 chipyard.TestHarness.RocketConfig.fir 288902:8]
    node _T_415 = or(_T_413, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 288904:8]
    node _T_416 = not(_T_415) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 288905:8]
    node _T_417 = not(io_in_d_bits_denied) @[Monitor.scala 315:15 chipyard.TestHarness.RocketConfig.fir 288910:8]
    node _T_419 = or(_T_417, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 288912:8]
    node _T_420 = not(_T_419) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 288913:8]
    node _T_421 = eq(io_in_d_bits_opcode, UInt<3>("h4")) @[Monitor.scala 318:25 chipyard.TestHarness.RocketConfig.fir 288919:6]
    node _T_432 = leq(io_in_d_bits_param, UInt<2>("h2")) @[Bundles.scala 102:26 chipyard.TestHarness.RocketConfig.fir 288943:8]
    node _T_434 = or(_T_432, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 288945:8]
    node _T_435 = not(_T_434) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 288946:8]
    node _T_436 = neq(io_in_d_bits_param, UInt<2>("h2")) @[Monitor.scala 323:28 chipyard.TestHarness.RocketConfig.fir 288951:8]
    node _T_438 = or(_T_436, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 288953:8]
    node _T_439 = not(_T_438) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 288954:8]
    node _T_449 = eq(io_in_d_bits_opcode, UInt<3>("h5")) @[Monitor.scala 328:25 chipyard.TestHarness.RocketConfig.fir 288977:6]
    node _T_469 = or(_T_417, io_in_d_bits_corrupt) @[Monitor.scala 334:30 chipyard.TestHarness.RocketConfig.fir 289018:8]
    node _T_471 = or(_T_469, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289020:8]
    node _T_472 = not(_T_471) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289021:8]
    node _T_478 = eq(io_in_d_bits_opcode, UInt<3>("h0")) @[Monitor.scala 338:25 chipyard.TestHarness.RocketConfig.fir 289036:6]
    node _T_495 = eq(io_in_d_bits_opcode, UInt<3>("h1")) @[Monitor.scala 346:25 chipyard.TestHarness.RocketConfig.fir 289071:6]
    node _T_513 = eq(io_in_d_bits_opcode, UInt<3>("h2")) @[Monitor.scala 354:25 chipyard.TestHarness.RocketConfig.fir 289107:6]
    node a_first_done = and(io_in_a_ready, io_in_a_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.RocketConfig.fir 289173:4]
    reg a_first_counter : UInt<1>, clock with :
      reset => (UInt<1>("h0"), a_first_counter) @[Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 289182:4]
    node _a_first_counter1_T = sub(a_first_counter, UInt<1>("h1")) @[Edges.scala 229:28 chipyard.TestHarness.RocketConfig.fir 289183:4]
    node a_first_counter1 = tail(_a_first_counter1_T, 1) @[Edges.scala 229:28 chipyard.TestHarness.RocketConfig.fir 289184:4]
    node a_first = not(a_first_counter) @[Edges.scala 230:25 chipyard.TestHarness.RocketConfig.fir 289185:4]
    node _a_first_counter_T = mux(a_first, UInt<1>("h0"), a_first_counter1) @[Edges.scala 235:21 chipyard.TestHarness.RocketConfig.fir 289193:6]
    node _GEN_0 = mux(a_first_done, _a_first_counter_T, a_first_counter) @[Edges.scala 234:17 chipyard.TestHarness.RocketConfig.fir 289192:4 Edges.scala 235:15 chipyard.TestHarness.RocketConfig.fir 289194:6 Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 289182:4]
    reg opcode : UInt<3>, clock with :
      reset => (UInt<1>("h0"), opcode) @[Monitor.scala 384:22 chipyard.TestHarness.RocketConfig.fir 289196:4]
    reg param : UInt<3>, clock with :
      reset => (UInt<1>("h0"), param) @[Monitor.scala 385:22 chipyard.TestHarness.RocketConfig.fir 289197:4]
    reg size : UInt<2>, clock with :
      reset => (UInt<1>("h0"), size) @[Monitor.scala 386:22 chipyard.TestHarness.RocketConfig.fir 289198:4]
    reg source : UInt<8>, clock with :
      reset => (UInt<1>("h0"), source) @[Monitor.scala 387:22 chipyard.TestHarness.RocketConfig.fir 289199:4]
    reg address : UInt<29>, clock with :
      reset => (UInt<1>("h0"), address) @[Monitor.scala 388:22 chipyard.TestHarness.RocketConfig.fir 289200:4]
    node _T_542 = not(a_first) @[Monitor.scala 389:22 chipyard.TestHarness.RocketConfig.fir 289201:4]
    node _T_543 = and(io_in_a_valid, _T_542) @[Monitor.scala 389:19 chipyard.TestHarness.RocketConfig.fir 289202:4]
    node _T_544 = eq(io_in_a_bits_opcode, opcode) @[Monitor.scala 390:32 chipyard.TestHarness.RocketConfig.fir 289204:6]
    node _T_546 = or(_T_544, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 289206:6]
    node _T_547 = not(_T_546) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 289207:6]
    node _T_548 = eq(io_in_a_bits_param, param) @[Monitor.scala 391:32 chipyard.TestHarness.RocketConfig.fir 289212:6]
    node _T_550 = or(_T_548, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 289214:6]
    node _T_551 = not(_T_550) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 289215:6]
    node _T_552 = eq(io_in_a_bits_size, size) @[Monitor.scala 392:32 chipyard.TestHarness.RocketConfig.fir 289220:6]
    node _T_554 = or(_T_552, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 289222:6]
    node _T_555 = not(_T_554) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 289223:6]
    node _T_556 = eq(io_in_a_bits_source, source) @[Monitor.scala 393:32 chipyard.TestHarness.RocketConfig.fir 289228:6]
    node _T_558 = or(_T_556, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 289230:6]
    node _T_559 = not(_T_558) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 289231:6]
    node _T_560 = eq(io_in_a_bits_address, address) @[Monitor.scala 394:32 chipyard.TestHarness.RocketConfig.fir 289236:6]
    node _T_562 = or(_T_560, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 289238:6]
    node _T_563 = not(_T_562) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 289239:6]
    node _T_565 = and(a_first_done, a_first) @[Monitor.scala 396:20 chipyard.TestHarness.RocketConfig.fir 289246:4]
    node d_first_done = and(io_in_d_ready, io_in_d_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.RocketConfig.fir 289254:4]
    reg d_first_counter : UInt<1>, clock with :
      reset => (UInt<1>("h0"), d_first_counter) @[Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 289262:4]
    node _d_first_counter1_T = sub(d_first_counter, UInt<1>("h1")) @[Edges.scala 229:28 chipyard.TestHarness.RocketConfig.fir 289263:4]
    node d_first_counter1 = tail(_d_first_counter1_T, 1) @[Edges.scala 229:28 chipyard.TestHarness.RocketConfig.fir 289264:4]
    node d_first = not(d_first_counter) @[Edges.scala 230:25 chipyard.TestHarness.RocketConfig.fir 289265:4]
    node _d_first_counter_T = mux(d_first, UInt<1>("h0"), d_first_counter1) @[Edges.scala 235:21 chipyard.TestHarness.RocketConfig.fir 289273:6]
    node _GEN_6 = mux(d_first_done, _d_first_counter_T, d_first_counter) @[Edges.scala 234:17 chipyard.TestHarness.RocketConfig.fir 289272:4 Edges.scala 235:15 chipyard.TestHarness.RocketConfig.fir 289274:6 Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 289262:4]
    reg opcode_1 : UInt<3>, clock with :
      reset => (UInt<1>("h0"), opcode_1) @[Monitor.scala 535:22 chipyard.TestHarness.RocketConfig.fir 289276:4]
    reg param_1 : UInt<2>, clock with :
      reset => (UInt<1>("h0"), param_1) @[Monitor.scala 536:22 chipyard.TestHarness.RocketConfig.fir 289277:4]
    reg size_1 : UInt<2>, clock with :
      reset => (UInt<1>("h0"), size_1) @[Monitor.scala 537:22 chipyard.TestHarness.RocketConfig.fir 289278:4]
    reg source_1 : UInt<8>, clock with :
      reset => (UInt<1>("h0"), source_1) @[Monitor.scala 538:22 chipyard.TestHarness.RocketConfig.fir 289279:4]
    reg sink : UInt<1>, clock with :
      reset => (UInt<1>("h0"), sink) @[Monitor.scala 539:22 chipyard.TestHarness.RocketConfig.fir 289280:4]
    reg denied : UInt<1>, clock with :
      reset => (UInt<1>("h0"), denied) @[Monitor.scala 540:22 chipyard.TestHarness.RocketConfig.fir 289281:4]
    node _T_566 = not(d_first) @[Monitor.scala 541:22 chipyard.TestHarness.RocketConfig.fir 289282:4]
    node _T_567 = and(io_in_d_valid, _T_566) @[Monitor.scala 541:19 chipyard.TestHarness.RocketConfig.fir 289283:4]
    node _T_568 = eq(io_in_d_bits_opcode, opcode_1) @[Monitor.scala 542:29 chipyard.TestHarness.RocketConfig.fir 289285:6]
    node _T_570 = or(_T_568, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289287:6]
    node _T_571 = not(_T_570) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289288:6]
    node _T_572 = eq(io_in_d_bits_param, param_1) @[Monitor.scala 543:29 chipyard.TestHarness.RocketConfig.fir 289293:6]
    node _T_574 = or(_T_572, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289295:6]
    node _T_575 = not(_T_574) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289296:6]
    node _T_576 = eq(io_in_d_bits_size, size_1) @[Monitor.scala 544:29 chipyard.TestHarness.RocketConfig.fir 289301:6]
    node _T_578 = or(_T_576, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289303:6]
    node _T_579 = not(_T_578) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289304:6]
    node _T_580 = eq(io_in_d_bits_source, source_1) @[Monitor.scala 545:29 chipyard.TestHarness.RocketConfig.fir 289309:6]
    node _T_582 = or(_T_580, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289311:6]
    node _T_583 = not(_T_582) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289312:6]
    node _T_584 = eq(io_in_d_bits_sink, sink) @[Monitor.scala 546:29 chipyard.TestHarness.RocketConfig.fir 289317:6]
    node _T_586 = or(_T_584, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289319:6]
    node _T_587 = not(_T_586) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289320:6]
    node _T_588 = eq(io_in_d_bits_denied, denied) @[Monitor.scala 547:29 chipyard.TestHarness.RocketConfig.fir 289325:6]
    node _T_590 = or(_T_588, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289327:6]
    node _T_591 = not(_T_590) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289328:6]
    node _T_593 = and(d_first_done, d_first) @[Monitor.scala 549:20 chipyard.TestHarness.RocketConfig.fir 289335:4]
    reg inflight : UInt<160>, clock with :
      reset => (UInt<1>("h0"), inflight) @[Monitor.scala 611:27 chipyard.TestHarness.RocketConfig.fir 289344:4]
    reg inflight_opcodes : UInt<640>, clock with :
      reset => (UInt<1>("h0"), inflight_opcodes) @[Monitor.scala 613:35 chipyard.TestHarness.RocketConfig.fir 289345:4]
    reg inflight_sizes : UInt<640>, clock with :
      reset => (UInt<1>("h0"), inflight_sizes) @[Monitor.scala 615:33 chipyard.TestHarness.RocketConfig.fir 289346:4]
    reg a_first_counter_1 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), a_first_counter_1) @[Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 289356:4]
    node _a_first_counter1_T_1 = sub(a_first_counter_1, UInt<1>("h1")) @[Edges.scala 229:28 chipyard.TestHarness.RocketConfig.fir 289357:4]
    node a_first_counter1_1 = tail(_a_first_counter1_T_1, 1) @[Edges.scala 229:28 chipyard.TestHarness.RocketConfig.fir 289358:4]
    node a_first_1 = not(a_first_counter_1) @[Edges.scala 230:25 chipyard.TestHarness.RocketConfig.fir 289359:4]
    node _a_first_counter_T_1 = mux(a_first_1, UInt<1>("h0"), a_first_counter1_1) @[Edges.scala 235:21 chipyard.TestHarness.RocketConfig.fir 289367:6]
    node _GEN_13 = mux(a_first_done, _a_first_counter_T_1, a_first_counter_1) @[Edges.scala 234:17 chipyard.TestHarness.RocketConfig.fir 289366:4 Edges.scala 235:15 chipyard.TestHarness.RocketConfig.fir 289368:6 Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 289356:4]
    reg d_first_counter_1 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), d_first_counter_1) @[Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 289378:4]
    node _d_first_counter1_T_1 = sub(d_first_counter_1, UInt<1>("h1")) @[Edges.scala 229:28 chipyard.TestHarness.RocketConfig.fir 289379:4]
    node d_first_counter1_1 = tail(_d_first_counter1_T_1, 1) @[Edges.scala 229:28 chipyard.TestHarness.RocketConfig.fir 289380:4]
    node d_first_1 = not(d_first_counter_1) @[Edges.scala 230:25 chipyard.TestHarness.RocketConfig.fir 289381:4]
    node _d_first_counter_T_1 = mux(d_first_1, UInt<1>("h0"), d_first_counter1_1) @[Edges.scala 235:21 chipyard.TestHarness.RocketConfig.fir 289389:6]
    node _GEN_14 = mux(d_first_done, _d_first_counter_T_1, d_first_counter_1) @[Edges.scala 234:17 chipyard.TestHarness.RocketConfig.fir 289388:4 Edges.scala 235:15 chipyard.TestHarness.RocketConfig.fir 289390:6 Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 289378:4]
    node _GEN_72 = shl(io_in_d_bits_source, 2) @[Monitor.scala 634:69 chipyard.TestHarness.RocketConfig.fir 289402:4]
    node _a_opcode_lookup_T = pad(_GEN_72, 11) @[Monitor.scala 634:69 chipyard.TestHarness.RocketConfig.fir 289402:4]
    node _a_opcode_lookup_T_1 = dshr(inflight_opcodes, _a_opcode_lookup_T) @[Monitor.scala 634:44 chipyard.TestHarness.RocketConfig.fir 289403:4]
    node _a_opcode_lookup_T_4 = sub(UInt<16>("h10"), UInt<16>("h1")) @[Monitor.scala 609:57 chipyard.TestHarness.RocketConfig.fir 289406:4]
    node _a_opcode_lookup_T_5 = tail(_a_opcode_lookup_T_4, 1) @[Monitor.scala 609:57 chipyard.TestHarness.RocketConfig.fir 289407:4]
    node _GEN_73 = pad(_a_opcode_lookup_T_5, 640) @[Monitor.scala 634:97 chipyard.TestHarness.RocketConfig.fir 289408:4]
    node _a_opcode_lookup_T_6 = and(_a_opcode_lookup_T_1, _GEN_73) @[Monitor.scala 634:97 chipyard.TestHarness.RocketConfig.fir 289408:4]
    node _GEN_74 = shr(_a_opcode_lookup_T_6, 1) @[Monitor.scala 634:152 chipyard.TestHarness.RocketConfig.fir 289409:4]
    node _a_opcode_lookup_T_7 = pad(_GEN_74, 640) @[Monitor.scala 634:152 chipyard.TestHarness.RocketConfig.fir 289409:4]
    node _a_size_lookup_T_1 = dshr(inflight_sizes, _a_opcode_lookup_T) @[Monitor.scala 638:40 chipyard.TestHarness.RocketConfig.fir 289414:4]
    node _a_size_lookup_T_6 = and(_a_size_lookup_T_1, _GEN_73) @[Monitor.scala 638:91 chipyard.TestHarness.RocketConfig.fir 289419:4]
    node _GEN_77 = shr(_a_size_lookup_T_6, 1) @[Monitor.scala 638:144 chipyard.TestHarness.RocketConfig.fir 289420:4]
    node _a_size_lookup_T_7 = pad(_GEN_77, 640) @[Monitor.scala 638:144 chipyard.TestHarness.RocketConfig.fir 289420:4]
    node _T_594 = and(io_in_a_valid, a_first_1) @[Monitor.scala 648:26 chipyard.TestHarness.RocketConfig.fir 289444:4]
    node _a_set_wo_ready_T = dshlw(UInt<256>("h1"), io_in_a_bits_source) @[OneHot.scala 58:35 chipyard.TestHarness.RocketConfig.fir 289447:6]
    node _GEN_15 = mux(_T_594, _a_set_wo_ready_T, UInt<256>("h0")) @[Monitor.scala 648:71 chipyard.TestHarness.RocketConfig.fir 289446:4 Monitor.scala 649:22 chipyard.TestHarness.RocketConfig.fir 289448:6 chipyard.TestHarness.RocketConfig.fir 289395:4]
    node _T_597 = and(a_first_done, a_first_1) @[Monitor.scala 652:27 chipyard.TestHarness.RocketConfig.fir 289451:4]
    node _a_opcodes_set_interm_T = shl(io_in_a_bits_opcode, 1) @[Monitor.scala 654:53 chipyard.TestHarness.RocketConfig.fir 289456:6]
    node _a_opcodes_set_interm_T_1 = or(_a_opcodes_set_interm_T, UInt<4>("h1")) @[Monitor.scala 654:61 chipyard.TestHarness.RocketConfig.fir 289457:6]
    node _a_sizes_set_interm_T = shl(io_in_a_bits_size, 1) @[Monitor.scala 655:51 chipyard.TestHarness.RocketConfig.fir 289459:6]
    node _a_sizes_set_interm_T_1 = or(_a_sizes_set_interm_T, UInt<3>("h1")) @[Monitor.scala 655:59 chipyard.TestHarness.RocketConfig.fir 289460:6]
    node _GEN_78 = shl(io_in_a_bits_source, 2) @[Monitor.scala 656:79 chipyard.TestHarness.RocketConfig.fir 289462:6]
    node _a_opcodes_set_T = pad(_GEN_78, 11) @[Monitor.scala 656:79 chipyard.TestHarness.RocketConfig.fir 289462:6]
    node a_opcodes_set_interm = mux(_T_597, _a_opcodes_set_interm_T_1, UInt<4>("h0")) @[Monitor.scala 652:72 chipyard.TestHarness.RocketConfig.fir 289453:4 Monitor.scala 654:28 chipyard.TestHarness.RocketConfig.fir 289458:6 chipyard.TestHarness.RocketConfig.fir 289441:4]
    node _GEN_79 = pad(a_opcodes_set_interm, 2051) @[Monitor.scala 656:54 chipyard.TestHarness.RocketConfig.fir 289463:6]
    node _a_opcodes_set_T_1 = dshlw(_GEN_79, _a_opcodes_set_T) @[Monitor.scala 656:54 chipyard.TestHarness.RocketConfig.fir 289463:6]
    node a_sizes_set_interm = mux(_T_597, _a_sizes_set_interm_T_1, UInt<3>("h0")) @[Monitor.scala 652:72 chipyard.TestHarness.RocketConfig.fir 289453:4 Monitor.scala 655:28 chipyard.TestHarness.RocketConfig.fir 289461:6 chipyard.TestHarness.RocketConfig.fir 289443:4]
    node _GEN_81 = pad(a_sizes_set_interm, 2050) @[Monitor.scala 657:52 chipyard.TestHarness.RocketConfig.fir 289466:6]
    node _a_sizes_set_T_1 = dshlw(_GEN_81, _a_opcodes_set_T) @[Monitor.scala 657:52 chipyard.TestHarness.RocketConfig.fir 289466:6]
    node _T_599 = dshr(inflight, io_in_a_bits_source) @[Monitor.scala 658:26 chipyard.TestHarness.RocketConfig.fir 289468:6]
    node _T_600 = bits(_T_599, 0, 0) @[Monitor.scala 658:26 chipyard.TestHarness.RocketConfig.fir 289469:6]
    node _T_601 = not(_T_600) @[Monitor.scala 658:17 chipyard.TestHarness.RocketConfig.fir 289470:6]
    node _T_603 = or(_T_601, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 289472:6]
    node _T_604 = not(_T_603) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 289473:6]
    node _GEN_16 = mux(_T_597, _a_set_wo_ready_T, UInt<256>("h0")) @[Monitor.scala 652:72 chipyard.TestHarness.RocketConfig.fir 289453:4 Monitor.scala 653:28 chipyard.TestHarness.RocketConfig.fir 289455:6 chipyard.TestHarness.RocketConfig.fir 289393:4]
    node _GEN_19 = mux(_T_597, _a_opcodes_set_T_1, UInt<2051>("h0")) @[Monitor.scala 652:72 chipyard.TestHarness.RocketConfig.fir 289453:4 Monitor.scala 656:28 chipyard.TestHarness.RocketConfig.fir 289464:6 chipyard.TestHarness.RocketConfig.fir 289397:4]
    node _GEN_20 = mux(_T_597, _a_sizes_set_T_1, UInt<2050>("h0")) @[Monitor.scala 652:72 chipyard.TestHarness.RocketConfig.fir 289453:4 Monitor.scala 657:28 chipyard.TestHarness.RocketConfig.fir 289467:6 chipyard.TestHarness.RocketConfig.fir 289399:4]
    node _T_605 = and(io_in_d_valid, d_first_1) @[Monitor.scala 671:26 chipyard.TestHarness.RocketConfig.fir 289488:4]
    node _T_607 = not(_T_401) @[Monitor.scala 671:74 chipyard.TestHarness.RocketConfig.fir 289490:4]
    node _T_608 = and(_T_605, _T_607) @[Monitor.scala 671:71 chipyard.TestHarness.RocketConfig.fir 289491:4]
    node _d_clr_wo_ready_T = dshlw(UInt<256>("h1"), io_in_d_bits_source) @[OneHot.scala 58:35 chipyard.TestHarness.RocketConfig.fir 289493:6]
    node _GEN_21 = mux(_T_608, _d_clr_wo_ready_T, UInt<256>("h0")) @[Monitor.scala 671:90 chipyard.TestHarness.RocketConfig.fir 289492:4 Monitor.scala 672:22 chipyard.TestHarness.RocketConfig.fir 289494:6 chipyard.TestHarness.RocketConfig.fir 289482:4]
    node _T_610 = and(d_first_done, d_first_1) @[Monitor.scala 675:27 chipyard.TestHarness.RocketConfig.fir 289497:4]
    node _T_613 = and(_T_610, _T_607) @[Monitor.scala 675:72 chipyard.TestHarness.RocketConfig.fir 289500:4]
    node _GEN_83 = pad(_a_opcode_lookup_T_5, 2063) @[Monitor.scala 677:76 chipyard.TestHarness.RocketConfig.fir 289509:6]
    node _d_opcodes_clr_T_5 = dshlw(_GEN_83, _a_opcode_lookup_T) @[Monitor.scala 677:76 chipyard.TestHarness.RocketConfig.fir 289509:6]
    node _GEN_22 = mux(_T_613, _d_clr_wo_ready_T, UInt<256>("h0")) @[Monitor.scala 675:91 chipyard.TestHarness.RocketConfig.fir 289501:4 Monitor.scala 676:21 chipyard.TestHarness.RocketConfig.fir 289503:6 chipyard.TestHarness.RocketConfig.fir 289480:4]
    node _GEN_23 = mux(_T_613, _d_opcodes_clr_T_5, UInt<2063>("h0")) @[Monitor.scala 675:91 chipyard.TestHarness.RocketConfig.fir 289501:4 Monitor.scala 677:21 chipyard.TestHarness.RocketConfig.fir 289510:6 chipyard.TestHarness.RocketConfig.fir 289484:4]
    node _same_cycle_resp_T_2 = eq(io_in_a_bits_source, io_in_d_bits_source) @[Monitor.scala 681:113 chipyard.TestHarness.RocketConfig.fir 289526:6]
    node same_cycle_resp = and(_T_594, _same_cycle_resp_T_2) @[Monitor.scala 681:88 chipyard.TestHarness.RocketConfig.fir 289527:6]
    node _T_618 = dshr(inflight, io_in_d_bits_source) @[Monitor.scala 682:25 chipyard.TestHarness.RocketConfig.fir 289528:6]
    node _T_619 = bits(_T_618, 0, 0) @[Monitor.scala 682:25 chipyard.TestHarness.RocketConfig.fir 289529:6]
    node _T_620 = or(_T_619, same_cycle_resp) @[Monitor.scala 682:49 chipyard.TestHarness.RocketConfig.fir 289530:6]
    node _T_622 = or(_T_620, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289532:6]
    node _T_623 = not(_T_622) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289533:6]
    node _GEN_27 = mux(eq(UInt<3>("h2"), io_in_a_bits_opcode), UInt<3>("h1"), UInt<3>("h0")) @[Monitor.scala 685:38 chipyard.TestHarness.RocketConfig.fir 289539:8 Monitor.scala 685:38 chipyard.TestHarness.RocketConfig.fir 289539:8]
    node _GEN_28 = mux(eq(UInt<3>("h3"), io_in_a_bits_opcode), UInt<3>("h1"), _GEN_27) @[Monitor.scala 685:38 chipyard.TestHarness.RocketConfig.fir 289539:8 Monitor.scala 685:38 chipyard.TestHarness.RocketConfig.fir 289539:8]
    node _GEN_29 = mux(eq(UInt<3>("h4"), io_in_a_bits_opcode), UInt<3>("h1"), _GEN_28) @[Monitor.scala 685:38 chipyard.TestHarness.RocketConfig.fir 289539:8 Monitor.scala 685:38 chipyard.TestHarness.RocketConfig.fir 289539:8]
    node _GEN_30 = mux(eq(UInt<3>("h5"), io_in_a_bits_opcode), UInt<3>("h2"), _GEN_29) @[Monitor.scala 685:38 chipyard.TestHarness.RocketConfig.fir 289539:8 Monitor.scala 685:38 chipyard.TestHarness.RocketConfig.fir 289539:8]
    node _GEN_31 = mux(eq(UInt<3>("h6"), io_in_a_bits_opcode), UInt<3>("h4"), _GEN_30) @[Monitor.scala 685:38 chipyard.TestHarness.RocketConfig.fir 289539:8 Monitor.scala 685:38 chipyard.TestHarness.RocketConfig.fir 289539:8]
    node _GEN_32 = mux(eq(UInt<3>("h7"), io_in_a_bits_opcode), UInt<3>("h4"), _GEN_31) @[Monitor.scala 685:38 chipyard.TestHarness.RocketConfig.fir 289539:8 Monitor.scala 685:38 chipyard.TestHarness.RocketConfig.fir 289539:8]
    node _T_624 = eq(io_in_d_bits_opcode, _GEN_32) @[Monitor.scala 685:38 chipyard.TestHarness.RocketConfig.fir 289539:8]
    node _GEN_39 = mux(eq(UInt<3>("h6"), io_in_a_bits_opcode), UInt<3>("h5"), _GEN_30) @[Monitor.scala 686:39 chipyard.TestHarness.RocketConfig.fir 289540:8 Monitor.scala 686:39 chipyard.TestHarness.RocketConfig.fir 289540:8]
    node _GEN_40 = mux(eq(UInt<3>("h7"), io_in_a_bits_opcode), UInt<3>("h4"), _GEN_39) @[Monitor.scala 686:39 chipyard.TestHarness.RocketConfig.fir 289540:8 Monitor.scala 686:39 chipyard.TestHarness.RocketConfig.fir 289540:8]
    node _T_625 = eq(io_in_d_bits_opcode, _GEN_40) @[Monitor.scala 686:39 chipyard.TestHarness.RocketConfig.fir 289540:8]
    node _T_626 = or(_T_624, _T_625) @[Monitor.scala 685:77 chipyard.TestHarness.RocketConfig.fir 289541:8]
    node _T_628 = or(_T_626, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289543:8]
    node _T_629 = not(_T_628) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289544:8]
    node _T_630 = eq(io_in_a_bits_size, io_in_d_bits_size) @[Monitor.scala 687:36 chipyard.TestHarness.RocketConfig.fir 289549:8]
    node _T_632 = or(_T_630, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289551:8]
    node _T_633 = not(_T_632) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289552:8]
    node a_opcode_lookup = bits(_a_opcode_lookup_T_7, 3, 0) @[chipyard.TestHarness.RocketConfig.fir 289400:4 Monitor.scala 634:21 chipyard.TestHarness.RocketConfig.fir 289410:4]
    node _T_634 = bits(a_opcode_lookup, 2, 0) @[chipyard.TestHarness.RocketConfig.fir 289559:8]
    node _GEN_43 = mux(eq(UInt<3>("h2"), _T_634), UInt<3>("h1"), UInt<3>("h0")) @[Monitor.scala 689:38 chipyard.TestHarness.RocketConfig.fir 289560:8 Monitor.scala 689:38 chipyard.TestHarness.RocketConfig.fir 289560:8]
    node _GEN_44 = mux(eq(UInt<3>("h3"), _T_634), UInt<3>("h1"), _GEN_43) @[Monitor.scala 689:38 chipyard.TestHarness.RocketConfig.fir 289560:8 Monitor.scala 689:38 chipyard.TestHarness.RocketConfig.fir 289560:8]
    node _GEN_45 = mux(eq(UInt<3>("h4"), _T_634), UInt<3>("h1"), _GEN_44) @[Monitor.scala 689:38 chipyard.TestHarness.RocketConfig.fir 289560:8 Monitor.scala 689:38 chipyard.TestHarness.RocketConfig.fir 289560:8]
    node _GEN_46 = mux(eq(UInt<3>("h5"), _T_634), UInt<3>("h2"), _GEN_45) @[Monitor.scala 689:38 chipyard.TestHarness.RocketConfig.fir 289560:8 Monitor.scala 689:38 chipyard.TestHarness.RocketConfig.fir 289560:8]
    node _GEN_47 = mux(eq(UInt<3>("h6"), _T_634), UInt<3>("h4"), _GEN_46) @[Monitor.scala 689:38 chipyard.TestHarness.RocketConfig.fir 289560:8 Monitor.scala 689:38 chipyard.TestHarness.RocketConfig.fir 289560:8]
    node _GEN_48 = mux(eq(UInt<3>("h7"), _T_634), UInt<3>("h4"), _GEN_47) @[Monitor.scala 689:38 chipyard.TestHarness.RocketConfig.fir 289560:8 Monitor.scala 689:38 chipyard.TestHarness.RocketConfig.fir 289560:8]
    node _T_635 = eq(io_in_d_bits_opcode, _GEN_48) @[Monitor.scala 689:38 chipyard.TestHarness.RocketConfig.fir 289560:8]
    node _GEN_55 = mux(eq(UInt<3>("h6"), _T_634), UInt<3>("h5"), _GEN_46) @[Monitor.scala 690:38 chipyard.TestHarness.RocketConfig.fir 289562:8 Monitor.scala 690:38 chipyard.TestHarness.RocketConfig.fir 289562:8]
    node _GEN_56 = mux(eq(UInt<3>("h7"), _T_634), UInt<3>("h4"), _GEN_55) @[Monitor.scala 690:38 chipyard.TestHarness.RocketConfig.fir 289562:8 Monitor.scala 690:38 chipyard.TestHarness.RocketConfig.fir 289562:8]
    node _T_637 = eq(io_in_d_bits_opcode, _GEN_56) @[Monitor.scala 690:38 chipyard.TestHarness.RocketConfig.fir 289562:8]
    node _T_638 = or(_T_635, _T_637) @[Monitor.scala 689:72 chipyard.TestHarness.RocketConfig.fir 289563:8]
    node _T_640 = or(_T_638, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289565:8]
    node _T_641 = not(_T_640) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289566:8]
    node a_size_lookup = bits(_a_size_lookup_T_7, 3, 0) @[chipyard.TestHarness.RocketConfig.fir 289411:4 Monitor.scala 638:19 chipyard.TestHarness.RocketConfig.fir 289421:4]
    node _GEN_86 = pad(io_in_d_bits_size, 4) @[Monitor.scala 691:36 chipyard.TestHarness.RocketConfig.fir 289571:8]
    node _T_642 = eq(_GEN_86, a_size_lookup) @[Monitor.scala 691:36 chipyard.TestHarness.RocketConfig.fir 289571:8]
    node _T_644 = or(_T_642, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289573:8]
    node _T_645 = not(_T_644) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289574:8]
    node _T_647 = and(_T_605, a_first_1) @[Monitor.scala 694:36 chipyard.TestHarness.RocketConfig.fir 289582:4]
    node _T_648 = and(_T_647, io_in_a_valid) @[Monitor.scala 694:47 chipyard.TestHarness.RocketConfig.fir 289583:4]
    node _T_650 = and(_T_648, _same_cycle_resp_T_2) @[Monitor.scala 694:65 chipyard.TestHarness.RocketConfig.fir 289585:4]
    node _T_652 = and(_T_650, _T_607) @[Monitor.scala 694:116 chipyard.TestHarness.RocketConfig.fir 289587:4]
    node _T_653 = not(io_in_d_ready) @[Monitor.scala 695:15 chipyard.TestHarness.RocketConfig.fir 289589:6]
    node _T_654 = or(_T_653, io_in_a_ready) @[Monitor.scala 695:32 chipyard.TestHarness.RocketConfig.fir 289590:6]
    node _T_656 = or(_T_654, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289592:6]
    node _T_657 = not(_T_656) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289593:6]
    node a_set_wo_ready = bits(_GEN_15, 159, 0) @[chipyard.TestHarness.RocketConfig.fir 289394:4]
    node d_clr_wo_ready = bits(_GEN_21, 159, 0) @[chipyard.TestHarness.RocketConfig.fir 289481:4]
    node _T_658 = neq(a_set_wo_ready, d_clr_wo_ready) @[Monitor.scala 699:29 chipyard.TestHarness.RocketConfig.fir 289599:4]
    node _T_659 = orr(a_set_wo_ready) @[Monitor.scala 699:67 chipyard.TestHarness.RocketConfig.fir 289600:4]
    node _T_660 = not(_T_659) @[Monitor.scala 699:51 chipyard.TestHarness.RocketConfig.fir 289601:4]
    node _T_661 = or(_T_658, _T_660) @[Monitor.scala 699:48 chipyard.TestHarness.RocketConfig.fir 289602:4]
    node _T_663 = or(_T_661, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289604:4]
    node _T_664 = not(_T_663) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289605:4]
    node a_set = bits(_GEN_16, 159, 0) @[chipyard.TestHarness.RocketConfig.fir 289392:4]
    node _inflight_T = or(inflight, a_set) @[Monitor.scala 702:27 chipyard.TestHarness.RocketConfig.fir 289610:4]
    node d_clr = bits(_GEN_22, 159, 0) @[chipyard.TestHarness.RocketConfig.fir 289479:4]
    node _inflight_T_1 = not(d_clr) @[Monitor.scala 702:38 chipyard.TestHarness.RocketConfig.fir 289611:4]
    node _inflight_T_2 = and(_inflight_T, _inflight_T_1) @[Monitor.scala 702:36 chipyard.TestHarness.RocketConfig.fir 289612:4]
    node a_opcodes_set = bits(_GEN_19, 639, 0) @[chipyard.TestHarness.RocketConfig.fir 289396:4]
    node _inflight_opcodes_T = or(inflight_opcodes, a_opcodes_set) @[Monitor.scala 703:43 chipyard.TestHarness.RocketConfig.fir 289614:4]
    node d_opcodes_clr = bits(_GEN_23, 639, 0) @[chipyard.TestHarness.RocketConfig.fir 289483:4]
    node _inflight_opcodes_T_1 = not(d_opcodes_clr) @[Monitor.scala 703:62 chipyard.TestHarness.RocketConfig.fir 289615:4]
    node _inflight_opcodes_T_2 = and(_inflight_opcodes_T, _inflight_opcodes_T_1) @[Monitor.scala 703:60 chipyard.TestHarness.RocketConfig.fir 289616:4]
    node a_sizes_set = bits(_GEN_20, 639, 0) @[chipyard.TestHarness.RocketConfig.fir 289398:4]
    node _inflight_sizes_T = or(inflight_sizes, a_sizes_set) @[Monitor.scala 704:39 chipyard.TestHarness.RocketConfig.fir 289618:4]
    node _inflight_sizes_T_2 = and(_inflight_sizes_T, _inflight_opcodes_T_1) @[Monitor.scala 704:54 chipyard.TestHarness.RocketConfig.fir 289620:4]
    reg watchdog : UInt<32>, clock with :
      reset => (UInt<1>("h0"), watchdog) @[Monitor.scala 706:27 chipyard.TestHarness.RocketConfig.fir 289622:4]
    node _T_665 = orr(inflight) @[Monitor.scala 709:26 chipyard.TestHarness.RocketConfig.fir 289625:4]
    node _T_666 = not(_T_665) @[Monitor.scala 709:16 chipyard.TestHarness.RocketConfig.fir 289626:4]
    node _T_667 = eq(plusarg_reader.out, UInt<32>("h0")) @[Monitor.scala 709:39 chipyard.TestHarness.RocketConfig.fir 289627:4]
    node _T_668 = or(_T_666, _T_667) @[Monitor.scala 709:30 chipyard.TestHarness.RocketConfig.fir 289628:4]
    node _T_669 = lt(watchdog, plusarg_reader.out) @[Monitor.scala 709:59 chipyard.TestHarness.RocketConfig.fir 289629:4]
    node _T_670 = or(_T_668, _T_669) @[Monitor.scala 709:47 chipyard.TestHarness.RocketConfig.fir 289630:4]
    node _T_672 = or(_T_670, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 289632:4]
    node _T_673 = not(_T_672) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 289633:4]
    node _watchdog_T = add(watchdog, UInt<32>("h1")) @[Monitor.scala 711:26 chipyard.TestHarness.RocketConfig.fir 289638:4]
    node _watchdog_T_1 = tail(_watchdog_T, 1) @[Monitor.scala 711:26 chipyard.TestHarness.RocketConfig.fir 289639:4]
    node _T_676 = or(a_first_done, d_first_done) @[Monitor.scala 712:27 chipyard.TestHarness.RocketConfig.fir 289643:4]
    node _GEN_57 = mux(_T_676, UInt<32>("h0"), _watchdog_T_1) @[Monitor.scala 712:47 chipyard.TestHarness.RocketConfig.fir 289644:4 Monitor.scala 712:58 chipyard.TestHarness.RocketConfig.fir 289645:6 Monitor.scala 711:14 chipyard.TestHarness.RocketConfig.fir 289640:4]
    reg inflight_1 : UInt<160>, clock with :
      reset => (UInt<1>("h0"), inflight_1) @[Monitor.scala 723:35 chipyard.TestHarness.RocketConfig.fir 289647:4]
    reg inflight_sizes_1 : UInt<640>, clock with :
      reset => (UInt<1>("h0"), inflight_sizes_1) @[Monitor.scala 725:35 chipyard.TestHarness.RocketConfig.fir 289649:4]
    reg d_first_counter_2 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), d_first_counter_2) @[Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 289684:4]
    node _d_first_counter1_T_2 = sub(d_first_counter_2, UInt<1>("h1")) @[Edges.scala 229:28 chipyard.TestHarness.RocketConfig.fir 289685:4]
    node d_first_counter1_2 = tail(_d_first_counter1_T_2, 1) @[Edges.scala 229:28 chipyard.TestHarness.RocketConfig.fir 289686:4]
    node d_first_2 = not(d_first_counter_2) @[Edges.scala 230:25 chipyard.TestHarness.RocketConfig.fir 289687:4]
    node _d_first_counter_T_2 = mux(d_first_2, UInt<1>("h0"), d_first_counter1_2) @[Edges.scala 235:21 chipyard.TestHarness.RocketConfig.fir 289695:6]
    node _GEN_59 = mux(d_first_done, _d_first_counter_T_2, d_first_counter_2) @[Edges.scala 234:17 chipyard.TestHarness.RocketConfig.fir 289694:4 Edges.scala 235:15 chipyard.TestHarness.RocketConfig.fir 289696:6 Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 289684:4]
    node _c_size_lookup_T_1 = dshr(inflight_sizes_1, _a_opcode_lookup_T) @[Monitor.scala 747:42 chipyard.TestHarness.RocketConfig.fir 289720:4]
    node _c_size_lookup_T_6 = and(_c_size_lookup_T_1, _GEN_73) @[Monitor.scala 747:93 chipyard.TestHarness.RocketConfig.fir 289725:4]
    node _GEN_92 = shr(_c_size_lookup_T_6, 1) @[Monitor.scala 747:146 chipyard.TestHarness.RocketConfig.fir 289726:4]
    node _c_size_lookup_T_7 = pad(_GEN_92, 640) @[Monitor.scala 747:146 chipyard.TestHarness.RocketConfig.fir 289726:4]
    node _T_694 = and(io_in_d_valid, d_first_2) @[Monitor.scala 779:26 chipyard.TestHarness.RocketConfig.fir 289804:4]
    node _T_696 = and(_T_694, _T_401) @[Monitor.scala 779:71 chipyard.TestHarness.RocketConfig.fir 289806:4]
    node _T_698 = and(d_first_done, d_first_2) @[Monitor.scala 783:27 chipyard.TestHarness.RocketConfig.fir 289812:4]
    node _T_700 = and(_T_698, _T_401) @[Monitor.scala 783:72 chipyard.TestHarness.RocketConfig.fir 289814:4]
    node _GEN_67 = mux(_T_700, _d_clr_wo_ready_T, UInt<256>("h0")) @[Monitor.scala 783:90 chipyard.TestHarness.RocketConfig.fir 289815:4 Monitor.scala 784:21 chipyard.TestHarness.RocketConfig.fir 289817:6 chipyard.TestHarness.RocketConfig.fir 289796:4]
    node _GEN_68 = mux(_T_700, _d_opcodes_clr_T_5, UInt<2063>("h0")) @[Monitor.scala 783:90 chipyard.TestHarness.RocketConfig.fir 289815:4 Monitor.scala 785:21 chipyard.TestHarness.RocketConfig.fir 289824:6 chipyard.TestHarness.RocketConfig.fir 289800:4]
    node _T_704 = dshr(inflight_1, io_in_d_bits_source) @[Monitor.scala 791:25 chipyard.TestHarness.RocketConfig.fir 289850:6]
    node _T_705 = bits(_T_704, 0, 0) @[Monitor.scala 791:25 chipyard.TestHarness.RocketConfig.fir 289851:6]
    node _T_708 = or(_T_705, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289854:6]
    node _T_709 = not(_T_708) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289855:6]
    node c_size_lookup = bits(_c_size_lookup_T_7, 3, 0) @[chipyard.TestHarness.RocketConfig.fir 289708:4 Monitor.scala 747:21 chipyard.TestHarness.RocketConfig.fir 289727:4]
    node _T_714 = eq(_GEN_86, c_size_lookup) @[Monitor.scala 795:36 chipyard.TestHarness.RocketConfig.fir 289873:8]
    node _T_716 = or(_T_714, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289875:8]
    node _T_717 = not(_T_716) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289876:8]
    node d_clr_1 = bits(_GEN_67, 159, 0) @[chipyard.TestHarness.RocketConfig.fir 289795:4]
    node _inflight_T_4 = not(d_clr_1) @[Monitor.scala 809:46 chipyard.TestHarness.RocketConfig.fir 289918:4]
    node _inflight_T_5 = and(inflight_1, _inflight_T_4) @[Monitor.scala 809:44 chipyard.TestHarness.RocketConfig.fir 289919:4]
    node d_opcodes_clr_1 = bits(_GEN_68, 639, 0) @[chipyard.TestHarness.RocketConfig.fir 289799:4]
    node _inflight_opcodes_T_4 = not(d_opcodes_clr_1) @[Monitor.scala 810:62 chipyard.TestHarness.RocketConfig.fir 289922:4]
    node _inflight_sizes_T_5 = and(inflight_sizes_1, _inflight_opcodes_T_4) @[Monitor.scala 811:56 chipyard.TestHarness.RocketConfig.fir 289927:4]
    reg watchdog_1 : UInt<32>, clock with :
      reset => (UInt<1>("h0"), watchdog_1) @[Monitor.scala 813:27 chipyard.TestHarness.RocketConfig.fir 289929:4]
    node _T_734 = orr(inflight_1) @[Monitor.scala 816:26 chipyard.TestHarness.RocketConfig.fir 289932:4]
    node _T_735 = not(_T_734) @[Monitor.scala 816:16 chipyard.TestHarness.RocketConfig.fir 289933:4]
    node _T_736 = eq(plusarg_reader_1.out, UInt<32>("h0")) @[Monitor.scala 816:39 chipyard.TestHarness.RocketConfig.fir 289934:4]
    node _T_737 = or(_T_735, _T_736) @[Monitor.scala 816:30 chipyard.TestHarness.RocketConfig.fir 289935:4]
    node _T_738 = lt(watchdog_1, plusarg_reader_1.out) @[Monitor.scala 816:59 chipyard.TestHarness.RocketConfig.fir 289936:4]
    node _T_739 = or(_T_737, _T_738) @[Monitor.scala 816:47 chipyard.TestHarness.RocketConfig.fir 289937:4]
    node _T_741 = or(_T_739, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 289939:4]
    node _T_742 = not(_T_741) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 289940:4]
    node _watchdog_T_2 = add(watchdog_1, UInt<32>("h1")) @[Monitor.scala 818:26 chipyard.TestHarness.RocketConfig.fir 289945:4]
    node _watchdog_T_3 = tail(_watchdog_T_2, 1) @[Monitor.scala 818:26 chipyard.TestHarness.RocketConfig.fir 289946:4]
    node _GEN_70 = mux(d_first_done, UInt<32>("h0"), _watchdog_T_3) @[Monitor.scala 819:47 chipyard.TestHarness.RocketConfig.fir 289953:4 Monitor.scala 819:58 chipyard.TestHarness.RocketConfig.fir 289954:6 Monitor.scala 818:14 chipyard.TestHarness.RocketConfig.fir 289947:4]
    a_first_counter <= mux(reset, UInt<1>("h0"), _GEN_0) @[Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 289182:4 Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 289182:4]
    opcode <= mux(_T_565, io_in_a_bits_opcode, opcode) @[Monitor.scala 396:32 chipyard.TestHarness.RocketConfig.fir 289247:4 Monitor.scala 397:15 chipyard.TestHarness.RocketConfig.fir 289248:6 Monitor.scala 384:22 chipyard.TestHarness.RocketConfig.fir 289196:4]
    param <= mux(_T_565, io_in_a_bits_param, param) @[Monitor.scala 396:32 chipyard.TestHarness.RocketConfig.fir 289247:4 Monitor.scala 398:15 chipyard.TestHarness.RocketConfig.fir 289249:6 Monitor.scala 385:22 chipyard.TestHarness.RocketConfig.fir 289197:4]
    size <= mux(_T_565, io_in_a_bits_size, size) @[Monitor.scala 396:32 chipyard.TestHarness.RocketConfig.fir 289247:4 Monitor.scala 399:15 chipyard.TestHarness.RocketConfig.fir 289250:6 Monitor.scala 386:22 chipyard.TestHarness.RocketConfig.fir 289198:4]
    source <= mux(_T_565, io_in_a_bits_source, source) @[Monitor.scala 396:32 chipyard.TestHarness.RocketConfig.fir 289247:4 Monitor.scala 400:15 chipyard.TestHarness.RocketConfig.fir 289251:6 Monitor.scala 387:22 chipyard.TestHarness.RocketConfig.fir 289199:4]
    address <= mux(_T_565, io_in_a_bits_address, address) @[Monitor.scala 396:32 chipyard.TestHarness.RocketConfig.fir 289247:4 Monitor.scala 401:15 chipyard.TestHarness.RocketConfig.fir 289252:6 Monitor.scala 388:22 chipyard.TestHarness.RocketConfig.fir 289200:4]
    d_first_counter <= mux(reset, UInt<1>("h0"), _GEN_6) @[Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 289262:4 Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 289262:4]
    opcode_1 <= mux(_T_593, io_in_d_bits_opcode, opcode_1) @[Monitor.scala 549:32 chipyard.TestHarness.RocketConfig.fir 289336:4 Monitor.scala 550:15 chipyard.TestHarness.RocketConfig.fir 289337:6 Monitor.scala 535:22 chipyard.TestHarness.RocketConfig.fir 289276:4]
    param_1 <= mux(_T_593, io_in_d_bits_param, param_1) @[Monitor.scala 549:32 chipyard.TestHarness.RocketConfig.fir 289336:4 Monitor.scala 551:15 chipyard.TestHarness.RocketConfig.fir 289338:6 Monitor.scala 536:22 chipyard.TestHarness.RocketConfig.fir 289277:4]
    size_1 <= mux(_T_593, io_in_d_bits_size, size_1) @[Monitor.scala 549:32 chipyard.TestHarness.RocketConfig.fir 289336:4 Monitor.scala 552:15 chipyard.TestHarness.RocketConfig.fir 289339:6 Monitor.scala 537:22 chipyard.TestHarness.RocketConfig.fir 289278:4]
    source_1 <= mux(_T_593, io_in_d_bits_source, source_1) @[Monitor.scala 549:32 chipyard.TestHarness.RocketConfig.fir 289336:4 Monitor.scala 553:15 chipyard.TestHarness.RocketConfig.fir 289340:6 Monitor.scala 538:22 chipyard.TestHarness.RocketConfig.fir 289279:4]
    sink <= mux(_T_593, io_in_d_bits_sink, sink) @[Monitor.scala 549:32 chipyard.TestHarness.RocketConfig.fir 289336:4 Monitor.scala 554:15 chipyard.TestHarness.RocketConfig.fir 289341:6 Monitor.scala 539:22 chipyard.TestHarness.RocketConfig.fir 289280:4]
    denied <= mux(_T_593, io_in_d_bits_denied, denied) @[Monitor.scala 549:32 chipyard.TestHarness.RocketConfig.fir 289336:4 Monitor.scala 555:15 chipyard.TestHarness.RocketConfig.fir 289342:6 Monitor.scala 540:22 chipyard.TestHarness.RocketConfig.fir 289281:4]
    inflight <= mux(reset, UInt<160>("h0"), _inflight_T_2) @[Monitor.scala 611:27 chipyard.TestHarness.RocketConfig.fir 289344:4 Monitor.scala 611:27 chipyard.TestHarness.RocketConfig.fir 289344:4 Monitor.scala 702:14 chipyard.TestHarness.RocketConfig.fir 289613:4]
    inflight_opcodes <= mux(reset, UInt<640>("h0"), _inflight_opcodes_T_2) @[Monitor.scala 613:35 chipyard.TestHarness.RocketConfig.fir 289345:4 Monitor.scala 613:35 chipyard.TestHarness.RocketConfig.fir 289345:4 Monitor.scala 703:22 chipyard.TestHarness.RocketConfig.fir 289617:4]
    inflight_sizes <= mux(reset, UInt<640>("h0"), _inflight_sizes_T_2) @[Monitor.scala 615:33 chipyard.TestHarness.RocketConfig.fir 289346:4 Monitor.scala 615:33 chipyard.TestHarness.RocketConfig.fir 289346:4 Monitor.scala 704:20 chipyard.TestHarness.RocketConfig.fir 289621:4]
    a_first_counter_1 <= mux(reset, UInt<1>("h0"), _GEN_13) @[Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 289356:4 Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 289356:4]
    d_first_counter_1 <= mux(reset, UInt<1>("h0"), _GEN_14) @[Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 289378:4 Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 289378:4]
    watchdog <= mux(reset, UInt<32>("h0"), _GEN_57) @[Monitor.scala 706:27 chipyard.TestHarness.RocketConfig.fir 289622:4 Monitor.scala 706:27 chipyard.TestHarness.RocketConfig.fir 289622:4]
    inflight_1 <= mux(reset, UInt<160>("h0"), _inflight_T_5) @[Monitor.scala 723:35 chipyard.TestHarness.RocketConfig.fir 289647:4 Monitor.scala 723:35 chipyard.TestHarness.RocketConfig.fir 289647:4 Monitor.scala 809:22 chipyard.TestHarness.RocketConfig.fir 289920:4]
    inflight_sizes_1 <= mux(reset, UInt<640>("h0"), _inflight_sizes_T_5) @[Monitor.scala 725:35 chipyard.TestHarness.RocketConfig.fir 289649:4 Monitor.scala 725:35 chipyard.TestHarness.RocketConfig.fir 289649:4 Monitor.scala 811:22 chipyard.TestHarness.RocketConfig.fir 289928:4]
    d_first_counter_2 <= mux(reset, UInt<1>("h0"), _GEN_59) @[Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 289684:4 Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 289684:4]
    watchdog_1 <= mux(reset, UInt<32>("h0"), _GEN_70) @[Monitor.scala 813:27 chipyard.TestHarness.RocketConfig.fir 289929:4 Monitor.scala 813:27 chipyard.TestHarness.RocketConfig.fir 289929:4]
    node _GEN_98 = and(io_in_a_valid, _T_20) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288274:10]
    printf(clock, and(_GEN_98, _T_43), "Assertion failed: 'A' channel carries AcquireBlock type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288274:10]
    stop(clock, and(_GEN_98, _T_43), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288275:10]
    printf(clock, and(_GEN_98, _T_43), "Assertion failed: 'A' channel carries AcquireBlock from a client which does not support Probe (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288293:10]
    stop(clock, and(_GEN_98, _T_43), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288294:10]
    printf(clock, and(_GEN_98, _T_61), "Assertion failed: 'A' channel AcquireBlock carries invalid source ID (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288300:10]
    stop(clock, and(_GEN_98, _T_61), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288301:10]
    printf(clock, and(_GEN_98, _T_65), "Assertion failed: 'A' channel AcquireBlock smaller than a beat (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288308:10]
    stop(clock, and(_GEN_98, _T_65), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288309:10]
    printf(clock, and(_GEN_98, _T_68), "Assertion failed: 'A' channel AcquireBlock address not aligned to size (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288315:10]
    stop(clock, and(_GEN_98, _T_68), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288316:10]
    printf(clock, and(_GEN_98, _T_72), "Assertion failed: 'A' channel AcquireBlock carries invalid grow param (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288323:10]
    stop(clock, and(_GEN_98, _T_72), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288324:10]
    printf(clock, and(_GEN_98, _T_77), "Assertion failed: 'A' channel AcquireBlock contains invalid mask (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288332:10]
    stop(clock, and(_GEN_98, _T_77), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288333:10]
    printf(clock, and(_GEN_98, _T_81), "Assertion failed: 'A' channel AcquireBlock is corrupt (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288340:10]
    stop(clock, and(_GEN_98, _T_81), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288341:10]
    node _GEN_114 = and(io_in_a_valid, _T_82) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288372:10]
    printf(clock, and(_GEN_114, _T_43), "Assertion failed: 'A' channel carries AcquirePerm type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288372:10]
    stop(clock, and(_GEN_114, _T_43), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288373:10]
    printf(clock, and(_GEN_114, _T_43), "Assertion failed: 'A' channel carries AcquirePerm from a client which does not support Probe (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288391:10]
    stop(clock, and(_GEN_114, _T_43), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288392:10]
    printf(clock, and(_GEN_114, _T_61), "Assertion failed: 'A' channel AcquirePerm carries invalid source ID (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288398:10]
    stop(clock, and(_GEN_114, _T_61), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288399:10]
    printf(clock, and(_GEN_114, _T_65), "Assertion failed: 'A' channel AcquirePerm smaller than a beat (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288406:10]
    stop(clock, and(_GEN_114, _T_65), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288407:10]
    printf(clock, and(_GEN_114, _T_68), "Assertion failed: 'A' channel AcquirePerm address not aligned to size (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288413:10]
    stop(clock, and(_GEN_114, _T_68), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288414:10]
    printf(clock, and(_GEN_114, _T_72), "Assertion failed: 'A' channel AcquirePerm carries invalid grow param (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288421:10]
    stop(clock, and(_GEN_114, _T_72), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288422:10]
    printf(clock, and(_GEN_114, _T_138), "Assertion failed: 'A' channel AcquirePerm requests NtoB (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288429:10]
    stop(clock, and(_GEN_114, _T_138), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288430:10]
    printf(clock, and(_GEN_114, _T_77), "Assertion failed: 'A' channel AcquirePerm contains invalid mask (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288438:10]
    stop(clock, and(_GEN_114, _T_77), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288439:10]
    printf(clock, and(_GEN_114, _T_81), "Assertion failed: 'A' channel AcquirePerm is corrupt (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288446:10]
    stop(clock, and(_GEN_114, _T_81), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288447:10]
    node _GEN_132 = and(io_in_a_valid, _T_148) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288469:10]
    printf(clock, and(_GEN_132, _T_61), "Assertion failed: 'A' channel carries Get type which master claims it can't emit (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288469:10]
    stop(clock, and(_GEN_132, _T_61), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288470:10]
    printf(clock, and(_GEN_132, _T_176), "Assertion failed: 'A' channel carries Get type which slave claims it can't support (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288487:10]
    stop(clock, and(_GEN_132, _T_176), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288488:10]
    printf(clock, and(_GEN_132, _T_61), "Assertion failed: 'A' channel Get carries invalid source ID (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288494:10]
    stop(clock, and(_GEN_132, _T_61), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288495:10]
    printf(clock, and(_GEN_132, _T_68), "Assertion failed: 'A' channel Get address not aligned to size (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288501:10]
    stop(clock, and(_GEN_132, _T_68), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288502:10]
    printf(clock, and(_GEN_132, _T_186), "Assertion failed: 'A' channel Get carries invalid param (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288509:10]
    stop(clock, and(_GEN_132, _T_186), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288510:10]
    printf(clock, and(_GEN_132, _T_190), "Assertion failed: 'A' channel Get contains invalid mask (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288517:10]
    stop(clock, and(_GEN_132, _T_190), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288518:10]
    printf(clock, and(_GEN_132, _T_81), "Assertion failed: 'A' channel Get is corrupt (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288525:10]
    stop(clock, and(_GEN_132, _T_81), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288526:10]
    node _GEN_146 = and(io_in_a_valid, _T_195) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288560:10]
    printf(clock, and(_GEN_146, _T_221), "Assertion failed: 'A' channel carries PutFull type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288560:10]
    stop(clock, and(_GEN_146, _T_221), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288561:10]
    printf(clock, and(_GEN_146, _T_61), "Assertion failed: 'A' channel PutFull carries invalid source ID (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288567:10]
    stop(clock, and(_GEN_146, _T_61), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288568:10]
    printf(clock, and(_GEN_146, _T_68), "Assertion failed: 'A' channel PutFull address not aligned to size (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288574:10]
    stop(clock, and(_GEN_146, _T_68), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288575:10]
    printf(clock, and(_GEN_146, _T_186), "Assertion failed: 'A' channel PutFull carries invalid param (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288582:10]
    stop(clock, and(_GEN_146, _T_186), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288583:10]
    printf(clock, and(_GEN_146, _T_190), "Assertion failed: 'A' channel PutFull contains invalid mask (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288590:10]
    stop(clock, and(_GEN_146, _T_190), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288591:10]
    node _GEN_156 = and(io_in_a_valid, _T_236) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288625:10]
    printf(clock, and(_GEN_156, _T_221), "Assertion failed: 'A' channel carries PutPartial type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288625:10]
    stop(clock, and(_GEN_156, _T_221), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288626:10]
    printf(clock, and(_GEN_156, _T_61), "Assertion failed: 'A' channel PutPartial carries invalid source ID (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288632:10]
    stop(clock, and(_GEN_156, _T_61), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288633:10]
    printf(clock, and(_GEN_156, _T_68), "Assertion failed: 'A' channel PutPartial address not aligned to size (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288639:10]
    stop(clock, and(_GEN_156, _T_68), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288640:10]
    printf(clock, and(_GEN_156, _T_186), "Assertion failed: 'A' channel PutPartial carries invalid param (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288647:10]
    stop(clock, and(_GEN_156, _T_186), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288648:10]
    printf(clock, and(_GEN_156, _T_278), "Assertion failed: 'A' channel PutPartial contains invalid mask (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288657:10]
    stop(clock, and(_GEN_156, _T_278), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288658:10]
    node _GEN_166 = and(io_in_a_valid, _T_279) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288689:10]
    printf(clock, and(_GEN_166, _T_43), "Assertion failed: 'A' channel carries Arithmetic type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288689:10]
    stop(clock, and(_GEN_166, _T_43), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288690:10]
    printf(clock, and(_GEN_166, _T_61), "Assertion failed: 'A' channel Arithmetic carries invalid source ID (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288696:10]
    stop(clock, and(_GEN_166, _T_61), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288697:10]
    printf(clock, and(_GEN_166, _T_68), "Assertion failed: 'A' channel Arithmetic address not aligned to size (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288703:10]
    stop(clock, and(_GEN_166, _T_68), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288704:10]
    printf(clock, and(_GEN_166, _T_312), "Assertion failed: 'A' channel Arithmetic carries invalid opcode param (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288711:10]
    stop(clock, and(_GEN_166, _T_312), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288712:10]
    printf(clock, and(_GEN_166, _T_190), "Assertion failed: 'A' channel Arithmetic contains invalid mask (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288719:10]
    stop(clock, and(_GEN_166, _T_190), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288720:10]
    node _GEN_176 = and(io_in_a_valid, _T_317) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288751:10]
    printf(clock, and(_GEN_176, _T_43), "Assertion failed: 'A' channel carries Logical type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288751:10]
    stop(clock, and(_GEN_176, _T_43), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288752:10]
    printf(clock, and(_GEN_176, _T_61), "Assertion failed: 'A' channel Logical carries invalid source ID (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288758:10]
    stop(clock, and(_GEN_176, _T_61), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288759:10]
    printf(clock, and(_GEN_176, _T_68), "Assertion failed: 'A' channel Logical address not aligned to size (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288765:10]
    stop(clock, and(_GEN_176, _T_68), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288766:10]
    printf(clock, and(_GEN_176, _T_350), "Assertion failed: 'A' channel Logical carries invalid opcode param (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288773:10]
    stop(clock, and(_GEN_176, _T_350), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288774:10]
    printf(clock, and(_GEN_176, _T_190), "Assertion failed: 'A' channel Logical contains invalid mask (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288781:10]
    stop(clock, and(_GEN_176, _T_190), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288782:10]
    node _GEN_186 = and(io_in_a_valid, _T_355) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288813:10]
    printf(clock, and(_GEN_186, _T_43), "Assertion failed: 'A' channel carries Hint type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288813:10]
    stop(clock, and(_GEN_186, _T_43), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288814:10]
    printf(clock, and(_GEN_186, _T_61), "Assertion failed: 'A' channel Hint carries invalid source ID (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288820:10]
    stop(clock, and(_GEN_186, _T_61), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288821:10]
    printf(clock, and(_GEN_186, _T_68), "Assertion failed: 'A' channel Hint address not aligned to size (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288827:10]
    stop(clock, and(_GEN_186, _T_68), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288828:10]
    printf(clock, and(_GEN_186, _T_388), "Assertion failed: 'A' channel Hint carries invalid opcode param (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288835:10]
    stop(clock, and(_GEN_186, _T_388), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288836:10]
    printf(clock, and(_GEN_186, _T_190), "Assertion failed: 'A' channel Hint contains invalid mask (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288843:10]
    stop(clock, and(_GEN_186, _T_190), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288844:10]
    printf(clock, and(_GEN_186, _T_81), "Assertion failed: 'A' channel Hint is corrupt (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288851:10]
    stop(clock, and(_GEN_186, _T_81), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 288852:10]
    printf(clock, and(io_in_d_valid, _T_400), "Assertion failed: 'D' channel has invalid opcode (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 288862:8]
    stop(clock, and(io_in_d_valid, _T_400), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 288863:8]
    node _GEN_198 = and(io_in_d_valid, _T_401) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 288883:10]
    printf(clock, and(_GEN_198, _T_404), "Assertion failed: 'D' channel ReleaseAck carries invalid source ID (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 288883:10]
    stop(clock, and(_GEN_198, _T_404), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 288884:10]
    printf(clock, and(_GEN_198, _T_408), "Assertion failed: 'D' channel ReleaseAck smaller than a beat (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 288891:10]
    stop(clock, and(_GEN_198, _T_408), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 288892:10]
    printf(clock, and(_GEN_198, _T_412), "Assertion failed: 'D' channel ReleaseeAck carries invalid param (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 288899:10]
    stop(clock, and(_GEN_198, _T_412), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 288900:10]
    printf(clock, and(_GEN_198, _T_416), "Assertion failed: 'D' channel ReleaseAck is corrupt (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 288907:10]
    stop(clock, and(_GEN_198, _T_416), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 288908:10]
    printf(clock, and(_GEN_198, _T_420), "Assertion failed: 'D' channel ReleaseAck is denied (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 288915:10]
    stop(clock, and(_GEN_198, _T_420), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 288916:10]
    node _GEN_208 = and(io_in_d_valid, _T_421) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 288925:10]
    printf(clock, and(_GEN_208, _T_404), "Assertion failed: 'D' channel Grant carries invalid source ID (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 288925:10]
    stop(clock, and(_GEN_208, _T_404), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 288926:10]
    printf(clock, and(_GEN_208, _T_43), "Assertion failed: 'D' channel Grant carries invalid sink ID (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 288932:10]
    stop(clock, and(_GEN_208, _T_43), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 288933:10]
    printf(clock, and(_GEN_208, _T_408), "Assertion failed: 'D' channel Grant smaller than a beat (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 288940:10]
    stop(clock, and(_GEN_208, _T_408), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 288941:10]
    printf(clock, and(_GEN_208, _T_435), "Assertion failed: 'D' channel Grant carries invalid cap param (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 288948:10]
    stop(clock, and(_GEN_208, _T_435), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 288949:10]
    printf(clock, and(_GEN_208, _T_439), "Assertion failed: 'D' channel Grant carries toN param (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 288956:10]
    stop(clock, and(_GEN_208, _T_439), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 288957:10]
    printf(clock, and(_GEN_208, _T_416), "Assertion failed: 'D' channel Grant is corrupt (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 288964:10]
    stop(clock, and(_GEN_208, _T_416), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 288965:10]
    printf(clock, and(_GEN_208, _T_420), "Assertion failed: 'D' channel Grant is denied (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 288973:10]
    stop(clock, and(_GEN_208, _T_420), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 288974:10]
    node _GEN_222 = and(io_in_d_valid, _T_449) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 288983:10]
    printf(clock, and(_GEN_222, _T_404), "Assertion failed: 'D' channel GrantData carries invalid source ID (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 288983:10]
    stop(clock, and(_GEN_222, _T_404), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 288984:10]
    printf(clock, and(_GEN_222, _T_43), "Assertion failed: 'D' channel GrantData carries invalid sink ID (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 288990:10]
    stop(clock, and(_GEN_222, _T_43), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 288991:10]
    printf(clock, and(_GEN_222, _T_408), "Assertion failed: 'D' channel GrantData smaller than a beat (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 288998:10]
    stop(clock, and(_GEN_222, _T_408), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 288999:10]
    printf(clock, and(_GEN_222, _T_435), "Assertion failed: 'D' channel GrantData carries invalid cap param (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289006:10]
    stop(clock, and(_GEN_222, _T_435), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289007:10]
    printf(clock, and(_GEN_222, _T_439), "Assertion failed: 'D' channel GrantData carries toN param (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289014:10]
    stop(clock, and(_GEN_222, _T_439), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289015:10]
    printf(clock, and(_GEN_222, _T_472), "Assertion failed: 'D' channel GrantData is denied but not corrupt (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289023:10]
    stop(clock, and(_GEN_222, _T_472), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289024:10]
    printf(clock, and(_GEN_222, _T_420), "Assertion failed: 'D' channel GrantData is denied (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289032:10]
    stop(clock, and(_GEN_222, _T_420), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289033:10]
    node _GEN_236 = and(io_in_d_valid, _T_478) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289042:10]
    printf(clock, and(_GEN_236, _T_404), "Assertion failed: 'D' channel AccessAck carries invalid source ID (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289042:10]
    stop(clock, and(_GEN_236, _T_404), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289043:10]
    printf(clock, and(_GEN_236, _T_412), "Assertion failed: 'D' channel AccessAck carries invalid param (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289050:10]
    stop(clock, and(_GEN_236, _T_412), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289051:10]
    printf(clock, and(_GEN_236, _T_416), "Assertion failed: 'D' channel AccessAck is corrupt (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289058:10]
    stop(clock, and(_GEN_236, _T_416), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289059:10]
    printf(clock, and(_GEN_236, _T_420), "Assertion failed: 'D' channel AccessAck is denied (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289067:10]
    stop(clock, and(_GEN_236, _T_420), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289068:10]
    node _GEN_244 = and(io_in_d_valid, _T_495) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289077:10]
    printf(clock, and(_GEN_244, _T_404), "Assertion failed: 'D' channel AccessAckData carries invalid source ID (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289077:10]
    stop(clock, and(_GEN_244, _T_404), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289078:10]
    printf(clock, and(_GEN_244, _T_412), "Assertion failed: 'D' channel AccessAckData carries invalid param (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289085:10]
    stop(clock, and(_GEN_244, _T_412), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289086:10]
    printf(clock, and(_GEN_244, _T_472), "Assertion failed: 'D' channel AccessAckData is denied but not corrupt (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289094:10]
    stop(clock, and(_GEN_244, _T_472), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289095:10]
    printf(clock, and(_GEN_244, _T_420), "Assertion failed: 'D' channel AccessAckData is denied (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289103:10]
    stop(clock, and(_GEN_244, _T_420), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289104:10]
    node _GEN_252 = and(io_in_d_valid, _T_513) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289113:10]
    printf(clock, and(_GEN_252, _T_404), "Assertion failed: 'D' channel HintAck carries invalid source ID (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289113:10]
    stop(clock, and(_GEN_252, _T_404), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289114:10]
    printf(clock, and(_GEN_252, _T_412), "Assertion failed: 'D' channel HintAck carries invalid param (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289121:10]
    stop(clock, and(_GEN_252, _T_412), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289122:10]
    printf(clock, and(_GEN_252, _T_416), "Assertion failed: 'D' channel HintAck is corrupt (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289129:10]
    stop(clock, and(_GEN_252, _T_416), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289130:10]
    printf(clock, and(_GEN_252, _T_420), "Assertion failed: 'D' channel HintAck is denied (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289138:10]
    stop(clock, and(_GEN_252, _T_420), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289139:10]
    printf(clock, and(_T_543, _T_547), "Assertion failed: 'A' channel opcode changed within multibeat operation (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 289209:8]
    stop(clock, and(_T_543, _T_547), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 289210:8]
    printf(clock, and(_T_543, _T_551), "Assertion failed: 'A' channel param changed within multibeat operation (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 289217:8]
    stop(clock, and(_T_543, _T_551), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 289218:8]
    printf(clock, and(_T_543, _T_555), "Assertion failed: 'A' channel size changed within multibeat operation (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 289225:8]
    stop(clock, and(_T_543, _T_555), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 289226:8]
    printf(clock, and(_T_543, _T_559), "Assertion failed: 'A' channel source changed within multibeat operation (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 289233:8]
    stop(clock, and(_T_543, _T_559), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 289234:8]
    printf(clock, and(_T_543, _T_563), "Assertion failed: 'A' channel address changed with multibeat operation (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 289241:8]
    stop(clock, and(_T_543, _T_563), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 289242:8]
    printf(clock, and(_T_567, _T_571), "Assertion failed: 'D' channel opcode changed within multibeat operation (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289290:8]
    stop(clock, and(_T_567, _T_571), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289291:8]
    printf(clock, and(_T_567, _T_575), "Assertion failed: 'D' channel param changed within multibeat operation (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289298:8]
    stop(clock, and(_T_567, _T_575), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289299:8]
    printf(clock, and(_T_567, _T_579), "Assertion failed: 'D' channel size changed within multibeat operation (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289306:8]
    stop(clock, and(_T_567, _T_579), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289307:8]
    printf(clock, and(_T_567, _T_583), "Assertion failed: 'D' channel source changed within multibeat operation (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289314:8]
    stop(clock, and(_T_567, _T_583), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289315:8]
    printf(clock, and(_T_567, _T_587), "Assertion failed: 'D' channel sink changed with multibeat operation (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289322:8]
    stop(clock, and(_T_567, _T_587), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289323:8]
    printf(clock, and(_T_567, _T_591), "Assertion failed: 'D' channel denied changed with multibeat operation (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289330:8]
    stop(clock, and(_T_567, _T_591), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289331:8]
    printf(clock, and(_T_597, _T_604), "Assertion failed: 'A' channel re-used a source ID (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 289475:8]
    stop(clock, and(_T_597, _T_604), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 289476:8]
    printf(clock, and(_T_608, _T_623), "Assertion failed: 'D' channel acknowledged for nothing inflight (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289535:8]
    stop(clock, and(_T_608, _T_623), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289536:8]
    node _GEN_260 = and(_T_608, same_cycle_resp) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289546:10]
    printf(clock, and(_GEN_260, _T_629), "Assertion failed: 'D' channel contains improper opcode response (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289546:10]
    stop(clock, and(_GEN_260, _T_629), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289547:10]
    printf(clock, and(_GEN_260, _T_633), "Assertion failed: 'D' channel contains improper response size (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289554:10]
    stop(clock, and(_GEN_260, _T_633), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289555:10]
    node _GEN_264 = not(same_cycle_resp) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289568:10]
    node _GEN_265 = and(_T_608, _GEN_264) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289568:10]
    printf(clock, and(_GEN_265, _T_641), "Assertion failed: 'D' channel contains improper opcode response (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289568:10]
    stop(clock, and(_GEN_265, _T_641), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289569:10]
    printf(clock, and(_GEN_265, _T_645), "Assertion failed: 'D' channel contains improper response size (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289576:10]
    stop(clock, and(_GEN_265, _T_645), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289577:10]
    printf(clock, and(_T_652, _T_657), "Assertion failed: ready check\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289595:8]
    stop(clock, and(_T_652, _T_657), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289596:8]
    printf(clock, _T_664, "Assertion failed: 'A' and 'D' concurrent, despite minlatency 3 (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289607:6]
    stop(clock, _T_664, 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289608:6]
    printf(clock, _T_673, "Assertion failed: TileLink timeout expired (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 289635:6]
    stop(clock, _T_673, 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 289636:6]
    printf(clock, and(_T_696, _T_709), "Assertion failed: 'D' channel acknowledged for nothing inflight (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289857:8]
    stop(clock, and(_T_696, _T_709), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289858:8]
    printf(clock, and(_T_696, _T_717), "Assertion failed: 'D' channel contains improper response size (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289878:10]
    stop(clock, and(_T_696, _T_717), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 289879:10]
    printf(clock, _T_742, "Assertion failed: TileLink timeout expired (connected at SerialAdapter.scala:328:45)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 289942:6]
    stop(clock, _T_742, 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 289943:6]

  module Queue_40_inTestHarness : @[chipyard.TestHarness.RocketConfig.fir 289957:2]
    input clock : Clock @[chipyard.TestHarness.RocketConfig.fir 289958:4]
    input reset : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 289959:4]
    output io_enq_ready : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 289960:4]
    input io_enq_valid : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 289960:4]
    input io_enq_bits_opcode : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 289960:4]
    input io_enq_bits_param : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 289960:4]
    input io_enq_bits_size : UInt<2> @[chipyard.TestHarness.RocketConfig.fir 289960:4]
    input io_enq_bits_source : UInt<8> @[chipyard.TestHarness.RocketConfig.fir 289960:4]
    input io_enq_bits_address : UInt<29> @[chipyard.TestHarness.RocketConfig.fir 289960:4]
    input io_enq_bits_mask : UInt<8> @[chipyard.TestHarness.RocketConfig.fir 289960:4]
    input io_enq_bits_data : UInt<64> @[chipyard.TestHarness.RocketConfig.fir 289960:4]
    input io_enq_bits_corrupt : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 289960:4]
    input io_deq_ready : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 289960:4]
    output io_deq_valid : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 289960:4]
    output io_deq_bits_opcode : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 289960:4]
    output io_deq_bits_param : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 289960:4]
    output io_deq_bits_size : UInt<2> @[chipyard.TestHarness.RocketConfig.fir 289960:4]
    output io_deq_bits_source : UInt<8> @[chipyard.TestHarness.RocketConfig.fir 289960:4]
    output io_deq_bits_address : UInt<29> @[chipyard.TestHarness.RocketConfig.fir 289960:4]
    output io_deq_bits_mask : UInt<8> @[chipyard.TestHarness.RocketConfig.fir 289960:4]
    output io_deq_bits_data : UInt<64> @[chipyard.TestHarness.RocketConfig.fir 289960:4]
    output io_deq_bits_corrupt : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 289960:4]

    mem ram_opcode : @[Decoupled.scala 218:16 chipyard.TestHarness.RocketConfig.fir 289962:4]
      data-type => UInt<3>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    mem ram_param : @[Decoupled.scala 218:16 chipyard.TestHarness.RocketConfig.fir 289962:4]
      data-type => UInt<3>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    mem ram_size : @[Decoupled.scala 218:16 chipyard.TestHarness.RocketConfig.fir 289962:4]
      data-type => UInt<2>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    mem ram_source : @[Decoupled.scala 218:16 chipyard.TestHarness.RocketConfig.fir 289962:4]
      data-type => UInt<8>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    mem ram_address : @[Decoupled.scala 218:16 chipyard.TestHarness.RocketConfig.fir 289962:4]
      data-type => UInt<29>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    mem ram_mask : @[Decoupled.scala 218:16 chipyard.TestHarness.RocketConfig.fir 289962:4]
      data-type => UInt<8>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    mem ram_data : @[Decoupled.scala 218:16 chipyard.TestHarness.RocketConfig.fir 289962:4]
      data-type => UInt<64>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    mem ram_corrupt : @[Decoupled.scala 218:16 chipyard.TestHarness.RocketConfig.fir 289962:4]
      data-type => UInt<1>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    reg value : UInt<1>, clock with :
      reset => (UInt<1>("h0"), value) @[Counter.scala 60:40 chipyard.TestHarness.RocketConfig.fir 289963:4]
    reg value_1 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), value_1) @[Counter.scala 60:40 chipyard.TestHarness.RocketConfig.fir 289964:4]
    reg maybe_full : UInt<1>, clock with :
      reset => (UInt<1>("h0"), maybe_full) @[Decoupled.scala 221:27 chipyard.TestHarness.RocketConfig.fir 289965:4]
    node ptr_match = eq(value, value_1) @[Decoupled.scala 223:33 chipyard.TestHarness.RocketConfig.fir 289966:4]
    node _empty_T = not(maybe_full) @[Decoupled.scala 224:28 chipyard.TestHarness.RocketConfig.fir 289967:4]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 224:25 chipyard.TestHarness.RocketConfig.fir 289968:4]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24 chipyard.TestHarness.RocketConfig.fir 289969:4]
    node do_enq = and(io_enq_ready, io_enq_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.RocketConfig.fir 289970:4]
    node do_deq = and(io_deq_ready, io_deq_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.RocketConfig.fir 289973:4]
    node _value_T = add(value, UInt<1>("h1")) @[Counter.scala 76:24 chipyard.TestHarness.RocketConfig.fir 289987:6]
    node _value_T_1 = tail(_value_T, 1) @[Counter.scala 76:24 chipyard.TestHarness.RocketConfig.fir 289988:6]
    node _GEN_12 = mux(do_enq, _value_T_1, value) @[Decoupled.scala 229:17 chipyard.TestHarness.RocketConfig.fir 289976:4 Counter.scala 76:15 chipyard.TestHarness.RocketConfig.fir 289989:6 Counter.scala 60:40 chipyard.TestHarness.RocketConfig.fir 289963:4]
    node _value_T_2 = add(value_1, UInt<1>("h1")) @[Counter.scala 76:24 chipyard.TestHarness.RocketConfig.fir 289993:6]
    node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 76:24 chipyard.TestHarness.RocketConfig.fir 289994:6]
    node _GEN_13 = mux(do_deq, _value_T_3, value_1) @[Decoupled.scala 233:17 chipyard.TestHarness.RocketConfig.fir 289991:4 Counter.scala 76:15 chipyard.TestHarness.RocketConfig.fir 289995:6 Counter.scala 60:40 chipyard.TestHarness.RocketConfig.fir 289964:4]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 236:16 chipyard.TestHarness.RocketConfig.fir 289997:4]
    node _GEN_14 = mux(_T, do_enq, maybe_full) @[Decoupled.scala 236:28 chipyard.TestHarness.RocketConfig.fir 289998:4 Decoupled.scala 237:16 chipyard.TestHarness.RocketConfig.fir 289999:6 Decoupled.scala 221:27 chipyard.TestHarness.RocketConfig.fir 289965:4]
    io_enq_ready <= not(full) @[Decoupled.scala 241:19 chipyard.TestHarness.RocketConfig.fir 290003:4]
    io_deq_valid <= not(empty) @[Decoupled.scala 240:19 chipyard.TestHarness.RocketConfig.fir 290001:4]
    io_deq_bits_opcode <= ram_opcode.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.RocketConfig.fir 290013:4]
    io_deq_bits_param <= ram_param.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.RocketConfig.fir 290012:4]
    io_deq_bits_size <= ram_size.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.RocketConfig.fir 290011:4]
    io_deq_bits_source <= ram_source.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.RocketConfig.fir 290010:4]
    io_deq_bits_address <= ram_address.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.RocketConfig.fir 290009:4]
    io_deq_bits_mask <= ram_mask.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.RocketConfig.fir 290008:4]
    io_deq_bits_data <= ram_data.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.RocketConfig.fir 290007:4]
    io_deq_bits_corrupt <= ram_corrupt.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.RocketConfig.fir 290006:4]
    value <= mux(reset, UInt<1>("h0"), _GEN_12) @[Counter.scala 60:40 chipyard.TestHarness.RocketConfig.fir 289963:4 Counter.scala 60:40 chipyard.TestHarness.RocketConfig.fir 289963:4]
    value_1 <= mux(reset, UInt<1>("h0"), _GEN_13) @[Counter.scala 60:40 chipyard.TestHarness.RocketConfig.fir 289964:4 Counter.scala 60:40 chipyard.TestHarness.RocketConfig.fir 289964:4]
    maybe_full <= mux(reset, UInt<1>("h0"), _GEN_14) @[Decoupled.scala 221:27 chipyard.TestHarness.RocketConfig.fir 289965:4 Decoupled.scala 221:27 chipyard.TestHarness.RocketConfig.fir 289965:4]
    ram_opcode.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_opcode.io_deq_bits_MPORT.addr <= value_1
    ram_opcode.io_deq_bits_MPORT.clk <= clock
    ram_opcode.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_opcode.MPORT.addr <= value
    ram_opcode.MPORT.mask <= UInt<1>("h1")
    ram_opcode.MPORT.data <= io_enq_bits_opcode
    ram_opcode.MPORT.clk <= clock
    ram_param.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_param.io_deq_bits_MPORT.addr <= value_1
    ram_param.io_deq_bits_MPORT.clk <= clock
    ram_param.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_param.MPORT.addr <= value
    ram_param.MPORT.mask <= UInt<1>("h1")
    ram_param.MPORT.data <= io_enq_bits_param
    ram_param.MPORT.clk <= clock
    ram_size.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_size.io_deq_bits_MPORT.addr <= value_1
    ram_size.io_deq_bits_MPORT.clk <= clock
    ram_size.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_size.MPORT.addr <= value
    ram_size.MPORT.mask <= UInt<1>("h1")
    ram_size.MPORT.data <= io_enq_bits_size
    ram_size.MPORT.clk <= clock
    ram_source.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_source.io_deq_bits_MPORT.addr <= value_1
    ram_source.io_deq_bits_MPORT.clk <= clock
    ram_source.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_source.MPORT.addr <= value
    ram_source.MPORT.mask <= UInt<1>("h1")
    ram_source.MPORT.data <= io_enq_bits_source
    ram_source.MPORT.clk <= clock
    ram_address.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_address.io_deq_bits_MPORT.addr <= value_1
    ram_address.io_deq_bits_MPORT.clk <= clock
    ram_address.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_address.MPORT.addr <= value
    ram_address.MPORT.mask <= UInt<1>("h1")
    ram_address.MPORT.data <= io_enq_bits_address
    ram_address.MPORT.clk <= clock
    ram_mask.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_mask.io_deq_bits_MPORT.addr <= value_1
    ram_mask.io_deq_bits_MPORT.clk <= clock
    ram_mask.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_mask.MPORT.addr <= value
    ram_mask.MPORT.mask <= UInt<1>("h1")
    ram_mask.MPORT.data <= io_enq_bits_mask
    ram_mask.MPORT.clk <= clock
    ram_data.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_data.io_deq_bits_MPORT.addr <= value_1
    ram_data.io_deq_bits_MPORT.clk <= clock
    ram_data.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_data.MPORT.addr <= value
    ram_data.MPORT.mask <= UInt<1>("h1")
    ram_data.MPORT.data <= io_enq_bits_data
    ram_data.MPORT.clk <= clock
    ram_corrupt.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_corrupt.io_deq_bits_MPORT.addr <= value_1
    ram_corrupt.io_deq_bits_MPORT.clk <= clock
    ram_corrupt.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_corrupt.MPORT.addr <= value
    ram_corrupt.MPORT.mask <= UInt<1>("h1")
    ram_corrupt.MPORT.data <= io_enq_bits_corrupt
    ram_corrupt.MPORT.clk <= clock

  module Queue_41_inTestHarness : @[chipyard.TestHarness.RocketConfig.fir 290021:2]
    input clock : Clock @[chipyard.TestHarness.RocketConfig.fir 290022:4]
    input reset : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 290023:4]
    output io_enq_ready : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 290024:4]
    input io_enq_valid : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 290024:4]
    input io_enq_bits_opcode : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 290024:4]
    input io_enq_bits_size : UInt<2> @[chipyard.TestHarness.RocketConfig.fir 290024:4]
    input io_enq_bits_source : UInt<8> @[chipyard.TestHarness.RocketConfig.fir 290024:4]
    input io_enq_bits_data : UInt<64> @[chipyard.TestHarness.RocketConfig.fir 290024:4]
    input io_deq_ready : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 290024:4]
    output io_deq_valid : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 290024:4]
    output io_deq_bits_opcode : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 290024:4]
    output io_deq_bits_param : UInt<2> @[chipyard.TestHarness.RocketConfig.fir 290024:4]
    output io_deq_bits_size : UInt<2> @[chipyard.TestHarness.RocketConfig.fir 290024:4]
    output io_deq_bits_source : UInt<8> @[chipyard.TestHarness.RocketConfig.fir 290024:4]
    output io_deq_bits_sink : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 290024:4]
    output io_deq_bits_denied : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 290024:4]
    output io_deq_bits_data : UInt<64> @[chipyard.TestHarness.RocketConfig.fir 290024:4]
    output io_deq_bits_corrupt : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 290024:4]

    mem ram_opcode : @[Decoupled.scala 218:16 chipyard.TestHarness.RocketConfig.fir 290026:4]
      data-type => UInt<3>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    mem ram_param : @[Decoupled.scala 218:16 chipyard.TestHarness.RocketConfig.fir 290026:4]
      data-type => UInt<2>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    mem ram_size : @[Decoupled.scala 218:16 chipyard.TestHarness.RocketConfig.fir 290026:4]
      data-type => UInt<2>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    mem ram_source : @[Decoupled.scala 218:16 chipyard.TestHarness.RocketConfig.fir 290026:4]
      data-type => UInt<8>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    mem ram_sink : @[Decoupled.scala 218:16 chipyard.TestHarness.RocketConfig.fir 290026:4]
      data-type => UInt<1>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    mem ram_denied : @[Decoupled.scala 218:16 chipyard.TestHarness.RocketConfig.fir 290026:4]
      data-type => UInt<1>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    mem ram_data : @[Decoupled.scala 218:16 chipyard.TestHarness.RocketConfig.fir 290026:4]
      data-type => UInt<64>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    mem ram_corrupt : @[Decoupled.scala 218:16 chipyard.TestHarness.RocketConfig.fir 290026:4]
      data-type => UInt<1>
      depth => 2
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    reg value : UInt<1>, clock with :
      reset => (UInt<1>("h0"), value) @[Counter.scala 60:40 chipyard.TestHarness.RocketConfig.fir 290027:4]
    reg value_1 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), value_1) @[Counter.scala 60:40 chipyard.TestHarness.RocketConfig.fir 290028:4]
    reg maybe_full : UInt<1>, clock with :
      reset => (UInt<1>("h0"), maybe_full) @[Decoupled.scala 221:27 chipyard.TestHarness.RocketConfig.fir 290029:4]
    node ptr_match = eq(value, value_1) @[Decoupled.scala 223:33 chipyard.TestHarness.RocketConfig.fir 290030:4]
    node _empty_T = not(maybe_full) @[Decoupled.scala 224:28 chipyard.TestHarness.RocketConfig.fir 290031:4]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 224:25 chipyard.TestHarness.RocketConfig.fir 290032:4]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24 chipyard.TestHarness.RocketConfig.fir 290033:4]
    node do_enq = and(io_enq_ready, io_enq_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.RocketConfig.fir 290034:4]
    node do_deq = and(io_deq_ready, io_deq_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.RocketConfig.fir 290037:4]
    node _value_T = add(value, UInt<1>("h1")) @[Counter.scala 76:24 chipyard.TestHarness.RocketConfig.fir 290051:6]
    node _value_T_1 = tail(_value_T, 1) @[Counter.scala 76:24 chipyard.TestHarness.RocketConfig.fir 290052:6]
    node _GEN_12 = mux(do_enq, _value_T_1, value) @[Decoupled.scala 229:17 chipyard.TestHarness.RocketConfig.fir 290040:4 Counter.scala 76:15 chipyard.TestHarness.RocketConfig.fir 290053:6 Counter.scala 60:40 chipyard.TestHarness.RocketConfig.fir 290027:4]
    node _value_T_2 = add(value_1, UInt<1>("h1")) @[Counter.scala 76:24 chipyard.TestHarness.RocketConfig.fir 290057:6]
    node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 76:24 chipyard.TestHarness.RocketConfig.fir 290058:6]
    node _GEN_13 = mux(do_deq, _value_T_3, value_1) @[Decoupled.scala 233:17 chipyard.TestHarness.RocketConfig.fir 290055:4 Counter.scala 76:15 chipyard.TestHarness.RocketConfig.fir 290059:6 Counter.scala 60:40 chipyard.TestHarness.RocketConfig.fir 290028:4]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 236:16 chipyard.TestHarness.RocketConfig.fir 290061:4]
    node _GEN_14 = mux(_T, do_enq, maybe_full) @[Decoupled.scala 236:28 chipyard.TestHarness.RocketConfig.fir 290062:4 Decoupled.scala 237:16 chipyard.TestHarness.RocketConfig.fir 290063:6 Decoupled.scala 221:27 chipyard.TestHarness.RocketConfig.fir 290029:4]
    io_enq_ready <= not(full) @[Decoupled.scala 241:19 chipyard.TestHarness.RocketConfig.fir 290067:4]
    io_deq_valid <= not(empty) @[Decoupled.scala 240:19 chipyard.TestHarness.RocketConfig.fir 290065:4]
    io_deq_bits_opcode <= ram_opcode.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.RocketConfig.fir 290077:4]
    io_deq_bits_param <= ram_param.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.RocketConfig.fir 290076:4]
    io_deq_bits_size <= ram_size.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.RocketConfig.fir 290075:4]
    io_deq_bits_source <= ram_source.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.RocketConfig.fir 290074:4]
    io_deq_bits_sink <= ram_sink.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.RocketConfig.fir 290073:4]
    io_deq_bits_denied <= ram_denied.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.RocketConfig.fir 290072:4]
    io_deq_bits_data <= ram_data.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.RocketConfig.fir 290071:4]
    io_deq_bits_corrupt <= ram_corrupt.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.RocketConfig.fir 290070:4]
    value <= mux(reset, UInt<1>("h0"), _GEN_12) @[Counter.scala 60:40 chipyard.TestHarness.RocketConfig.fir 290027:4 Counter.scala 60:40 chipyard.TestHarness.RocketConfig.fir 290027:4]
    value_1 <= mux(reset, UInt<1>("h0"), _GEN_13) @[Counter.scala 60:40 chipyard.TestHarness.RocketConfig.fir 290028:4 Counter.scala 60:40 chipyard.TestHarness.RocketConfig.fir 290028:4]
    maybe_full <= mux(reset, UInt<1>("h0"), _GEN_14) @[Decoupled.scala 221:27 chipyard.TestHarness.RocketConfig.fir 290029:4 Decoupled.scala 221:27 chipyard.TestHarness.RocketConfig.fir 290029:4]
    ram_opcode.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_opcode.io_deq_bits_MPORT.addr <= value_1
    ram_opcode.io_deq_bits_MPORT.clk <= clock
    ram_opcode.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_opcode.MPORT.addr <= value
    ram_opcode.MPORT.mask <= UInt<1>("h1")
    ram_opcode.MPORT.data <= io_enq_bits_opcode
    ram_opcode.MPORT.clk <= clock
    ram_param.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_param.io_deq_bits_MPORT.addr <= value_1
    ram_param.io_deq_bits_MPORT.clk <= clock
    ram_param.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_param.MPORT.addr <= value
    ram_param.MPORT.mask <= UInt<1>("h1")
    ram_param.MPORT.data <= UInt<2>("h0")
    ram_param.MPORT.clk <= clock
    ram_size.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_size.io_deq_bits_MPORT.addr <= value_1
    ram_size.io_deq_bits_MPORT.clk <= clock
    ram_size.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_size.MPORT.addr <= value
    ram_size.MPORT.mask <= UInt<1>("h1")
    ram_size.MPORT.data <= io_enq_bits_size
    ram_size.MPORT.clk <= clock
    ram_source.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_source.io_deq_bits_MPORT.addr <= value_1
    ram_source.io_deq_bits_MPORT.clk <= clock
    ram_source.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_source.MPORT.addr <= value
    ram_source.MPORT.mask <= UInt<1>("h1")
    ram_source.MPORT.data <= io_enq_bits_source
    ram_source.MPORT.clk <= clock
    ram_sink.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_sink.io_deq_bits_MPORT.addr <= value_1
    ram_sink.io_deq_bits_MPORT.clk <= clock
    ram_sink.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_sink.MPORT.addr <= value
    ram_sink.MPORT.mask <= UInt<1>("h1")
    ram_sink.MPORT.data <= UInt<1>("h0")
    ram_sink.MPORT.clk <= clock
    ram_denied.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_denied.io_deq_bits_MPORT.addr <= value_1
    ram_denied.io_deq_bits_MPORT.clk <= clock
    ram_denied.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_denied.MPORT.addr <= value
    ram_denied.MPORT.mask <= UInt<1>("h1")
    ram_denied.MPORT.data <= UInt<1>("h0")
    ram_denied.MPORT.clk <= clock
    ram_data.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_data.io_deq_bits_MPORT.addr <= value_1
    ram_data.io_deq_bits_MPORT.clk <= clock
    ram_data.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_data.MPORT.addr <= value
    ram_data.MPORT.mask <= UInt<1>("h1")
    ram_data.MPORT.data <= io_enq_bits_data
    ram_data.MPORT.clk <= clock
    ram_corrupt.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram_corrupt.io_deq_bits_MPORT.addr <= value_1
    ram_corrupt.io_deq_bits_MPORT.clk <= clock
    ram_corrupt.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram_corrupt.MPORT.addr <= value
    ram_corrupt.MPORT.mask <= UInt<1>("h1")
    ram_corrupt.MPORT.data <= UInt<1>("h0")
    ram_corrupt.MPORT.clk <= clock

  module TLBuffer_20_inTestHarness : @[chipyard.TestHarness.RocketConfig.fir 290085:2]
    input clock : Clock @[chipyard.TestHarness.RocketConfig.fir 290086:4]
    input reset : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 290087:4]
    output auto_in_a_ready : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 290088:4]
    input auto_in_a_valid : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 290088:4]
    input auto_in_a_bits_opcode : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 290088:4]
    input auto_in_a_bits_param : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 290088:4]
    input auto_in_a_bits_size : UInt<2> @[chipyard.TestHarness.RocketConfig.fir 290088:4]
    input auto_in_a_bits_source : UInt<8> @[chipyard.TestHarness.RocketConfig.fir 290088:4]
    input auto_in_a_bits_address : UInt<29> @[chipyard.TestHarness.RocketConfig.fir 290088:4]
    input auto_in_a_bits_mask : UInt<8> @[chipyard.TestHarness.RocketConfig.fir 290088:4]
    input auto_in_a_bits_data : UInt<64> @[chipyard.TestHarness.RocketConfig.fir 290088:4]
    input auto_in_a_bits_corrupt : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 290088:4]
    input auto_in_d_ready : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 290088:4]
    output auto_in_d_valid : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 290088:4]
    output auto_in_d_bits_opcode : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 290088:4]
    output auto_in_d_bits_param : UInt<2> @[chipyard.TestHarness.RocketConfig.fir 290088:4]
    output auto_in_d_bits_size : UInt<2> @[chipyard.TestHarness.RocketConfig.fir 290088:4]
    output auto_in_d_bits_source : UInt<8> @[chipyard.TestHarness.RocketConfig.fir 290088:4]
    output auto_in_d_bits_sink : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 290088:4]
    output auto_in_d_bits_denied : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 290088:4]
    output auto_in_d_bits_data : UInt<64> @[chipyard.TestHarness.RocketConfig.fir 290088:4]
    output auto_in_d_bits_corrupt : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 290088:4]
    input auto_out_a_ready : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 290088:4]
    output auto_out_a_valid : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 290088:4]
    output auto_out_a_bits_opcode : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 290088:4]
    output auto_out_a_bits_param : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 290088:4]
    output auto_out_a_bits_size : UInt<2> @[chipyard.TestHarness.RocketConfig.fir 290088:4]
    output auto_out_a_bits_source : UInt<8> @[chipyard.TestHarness.RocketConfig.fir 290088:4]
    output auto_out_a_bits_address : UInt<29> @[chipyard.TestHarness.RocketConfig.fir 290088:4]
    output auto_out_a_bits_mask : UInt<8> @[chipyard.TestHarness.RocketConfig.fir 290088:4]
    output auto_out_a_bits_data : UInt<64> @[chipyard.TestHarness.RocketConfig.fir 290088:4]
    output auto_out_a_bits_corrupt : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 290088:4]
    output auto_out_d_ready : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 290088:4]
    input auto_out_d_valid : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 290088:4]
    input auto_out_d_bits_opcode : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 290088:4]
    input auto_out_d_bits_size : UInt<2> @[chipyard.TestHarness.RocketConfig.fir 290088:4]
    input auto_out_d_bits_source : UInt<8> @[chipyard.TestHarness.RocketConfig.fir 290088:4]
    input auto_out_d_bits_data : UInt<64> @[chipyard.TestHarness.RocketConfig.fir 290088:4]

    inst monitor of TLMonitor_55_inTestHarness @[Nodes.scala 24:25 chipyard.TestHarness.RocketConfig.fir 290095:4]
    inst bundleOut_0_a_q of Queue_40_inTestHarness @[Decoupled.scala 296:21 chipyard.TestHarness.RocketConfig.fir 290122:4]
    inst bundleIn_0_d_q of Queue_41_inTestHarness @[Decoupled.scala 296:21 chipyard.TestHarness.RocketConfig.fir 290136:4]
    auto_in_a_ready <= bundleOut_0_a_q.io_enq_ready @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 290093:4 Decoupled.scala 299:17 chipyard.TestHarness.RocketConfig.fir 290134:4]
    auto_in_d_valid <= bundleIn_0_d_q.io_deq_valid @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 290093:4 Buffer.scala 38:13 chipyard.TestHarness.RocketConfig.fir 290149:4]
    auto_in_d_bits_opcode <= bundleIn_0_d_q.io_deq_bits_opcode @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 290093:4 Buffer.scala 38:13 chipyard.TestHarness.RocketConfig.fir 290149:4]
    auto_in_d_bits_param <= bundleIn_0_d_q.io_deq_bits_param @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 290093:4 Buffer.scala 38:13 chipyard.TestHarness.RocketConfig.fir 290149:4]
    auto_in_d_bits_size <= bundleIn_0_d_q.io_deq_bits_size @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 290093:4 Buffer.scala 38:13 chipyard.TestHarness.RocketConfig.fir 290149:4]
    auto_in_d_bits_source <= bundleIn_0_d_q.io_deq_bits_source @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 290093:4 Buffer.scala 38:13 chipyard.TestHarness.RocketConfig.fir 290149:4]
    auto_in_d_bits_sink <= bundleIn_0_d_q.io_deq_bits_sink @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 290093:4 Buffer.scala 38:13 chipyard.TestHarness.RocketConfig.fir 290149:4]
    auto_in_d_bits_denied <= bundleIn_0_d_q.io_deq_bits_denied @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 290093:4 Buffer.scala 38:13 chipyard.TestHarness.RocketConfig.fir 290149:4]
    auto_in_d_bits_data <= bundleIn_0_d_q.io_deq_bits_data @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 290093:4 Buffer.scala 38:13 chipyard.TestHarness.RocketConfig.fir 290149:4]
    auto_in_d_bits_corrupt <= bundleIn_0_d_q.io_deq_bits_corrupt @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 290093:4 Buffer.scala 38:13 chipyard.TestHarness.RocketConfig.fir 290149:4]
    auto_out_a_valid <= bundleOut_0_a_q.io_deq_valid @[Nodes.scala 1207:84 chipyard.TestHarness.RocketConfig.fir 290118:4 Buffer.scala 37:13 chipyard.TestHarness.RocketConfig.fir 290135:4]
    auto_out_a_bits_opcode <= bundleOut_0_a_q.io_deq_bits_opcode @[Nodes.scala 1207:84 chipyard.TestHarness.RocketConfig.fir 290118:4 Buffer.scala 37:13 chipyard.TestHarness.RocketConfig.fir 290135:4]
    auto_out_a_bits_param <= bundleOut_0_a_q.io_deq_bits_param @[Nodes.scala 1207:84 chipyard.TestHarness.RocketConfig.fir 290118:4 Buffer.scala 37:13 chipyard.TestHarness.RocketConfig.fir 290135:4]
    auto_out_a_bits_size <= bundleOut_0_a_q.io_deq_bits_size @[Nodes.scala 1207:84 chipyard.TestHarness.RocketConfig.fir 290118:4 Buffer.scala 37:13 chipyard.TestHarness.RocketConfig.fir 290135:4]
    auto_out_a_bits_source <= bundleOut_0_a_q.io_deq_bits_source @[Nodes.scala 1207:84 chipyard.TestHarness.RocketConfig.fir 290118:4 Buffer.scala 37:13 chipyard.TestHarness.RocketConfig.fir 290135:4]
    auto_out_a_bits_address <= bundleOut_0_a_q.io_deq_bits_address @[Nodes.scala 1207:84 chipyard.TestHarness.RocketConfig.fir 290118:4 Buffer.scala 37:13 chipyard.TestHarness.RocketConfig.fir 290135:4]
    auto_out_a_bits_mask <= bundleOut_0_a_q.io_deq_bits_mask @[Nodes.scala 1207:84 chipyard.TestHarness.RocketConfig.fir 290118:4 Buffer.scala 37:13 chipyard.TestHarness.RocketConfig.fir 290135:4]
    auto_out_a_bits_data <= bundleOut_0_a_q.io_deq_bits_data @[Nodes.scala 1207:84 chipyard.TestHarness.RocketConfig.fir 290118:4 Buffer.scala 37:13 chipyard.TestHarness.RocketConfig.fir 290135:4]
    auto_out_a_bits_corrupt <= bundleOut_0_a_q.io_deq_bits_corrupt @[Nodes.scala 1207:84 chipyard.TestHarness.RocketConfig.fir 290118:4 Buffer.scala 37:13 chipyard.TestHarness.RocketConfig.fir 290135:4]
    auto_out_d_ready <= bundleIn_0_d_q.io_enq_ready @[Nodes.scala 1207:84 chipyard.TestHarness.RocketConfig.fir 290118:4 Decoupled.scala 299:17 chipyard.TestHarness.RocketConfig.fir 290148:4]
    monitor.clock <= clock @[chipyard.TestHarness.RocketConfig.fir 290096:4]
    monitor.reset <= reset @[chipyard.TestHarness.RocketConfig.fir 290097:4]
    monitor.io_in_a_ready <= bundleOut_0_a_q.io_enq_ready @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 290093:4 Decoupled.scala 299:17 chipyard.TestHarness.RocketConfig.fir 290134:4]
    monitor.io_in_a_valid <= auto_in_a_valid @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 290093:4 LazyModule.scala 309:16 chipyard.TestHarness.RocketConfig.fir 290121:4]
    monitor.io_in_a_bits_opcode <= auto_in_a_bits_opcode @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 290093:4 LazyModule.scala 309:16 chipyard.TestHarness.RocketConfig.fir 290121:4]
    monitor.io_in_a_bits_param <= auto_in_a_bits_param @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 290093:4 LazyModule.scala 309:16 chipyard.TestHarness.RocketConfig.fir 290121:4]
    monitor.io_in_a_bits_size <= auto_in_a_bits_size @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 290093:4 LazyModule.scala 309:16 chipyard.TestHarness.RocketConfig.fir 290121:4]
    monitor.io_in_a_bits_source <= auto_in_a_bits_source @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 290093:4 LazyModule.scala 309:16 chipyard.TestHarness.RocketConfig.fir 290121:4]
    monitor.io_in_a_bits_address <= auto_in_a_bits_address @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 290093:4 LazyModule.scala 309:16 chipyard.TestHarness.RocketConfig.fir 290121:4]
    monitor.io_in_a_bits_mask <= auto_in_a_bits_mask @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 290093:4 LazyModule.scala 309:16 chipyard.TestHarness.RocketConfig.fir 290121:4]
    monitor.io_in_a_bits_corrupt <= auto_in_a_bits_corrupt @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 290093:4 LazyModule.scala 309:16 chipyard.TestHarness.RocketConfig.fir 290121:4]
    monitor.io_in_d_ready <= auto_in_d_ready @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 290093:4 LazyModule.scala 309:16 chipyard.TestHarness.RocketConfig.fir 290121:4]
    monitor.io_in_d_valid <= bundleIn_0_d_q.io_deq_valid @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 290093:4 Buffer.scala 38:13 chipyard.TestHarness.RocketConfig.fir 290149:4]
    monitor.io_in_d_bits_opcode <= bundleIn_0_d_q.io_deq_bits_opcode @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 290093:4 Buffer.scala 38:13 chipyard.TestHarness.RocketConfig.fir 290149:4]
    monitor.io_in_d_bits_param <= bundleIn_0_d_q.io_deq_bits_param @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 290093:4 Buffer.scala 38:13 chipyard.TestHarness.RocketConfig.fir 290149:4]
    monitor.io_in_d_bits_size <= bundleIn_0_d_q.io_deq_bits_size @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 290093:4 Buffer.scala 38:13 chipyard.TestHarness.RocketConfig.fir 290149:4]
    monitor.io_in_d_bits_source <= bundleIn_0_d_q.io_deq_bits_source @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 290093:4 Buffer.scala 38:13 chipyard.TestHarness.RocketConfig.fir 290149:4]
    monitor.io_in_d_bits_sink <= bundleIn_0_d_q.io_deq_bits_sink @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 290093:4 Buffer.scala 38:13 chipyard.TestHarness.RocketConfig.fir 290149:4]
    monitor.io_in_d_bits_denied <= bundleIn_0_d_q.io_deq_bits_denied @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 290093:4 Buffer.scala 38:13 chipyard.TestHarness.RocketConfig.fir 290149:4]
    monitor.io_in_d_bits_corrupt <= bundleIn_0_d_q.io_deq_bits_corrupt @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 290093:4 Buffer.scala 38:13 chipyard.TestHarness.RocketConfig.fir 290149:4]
    bundleOut_0_a_q.clock <= clock @[chipyard.TestHarness.RocketConfig.fir 290123:4]
    bundleOut_0_a_q.reset <= reset @[chipyard.TestHarness.RocketConfig.fir 290124:4]
    bundleOut_0_a_q.io_enq_valid <= auto_in_a_valid @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 290093:4 LazyModule.scala 309:16 chipyard.TestHarness.RocketConfig.fir 290121:4]
    bundleOut_0_a_q.io_enq_bits_opcode <= auto_in_a_bits_opcode @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 290093:4 LazyModule.scala 309:16 chipyard.TestHarness.RocketConfig.fir 290121:4]
    bundleOut_0_a_q.io_enq_bits_param <= auto_in_a_bits_param @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 290093:4 LazyModule.scala 309:16 chipyard.TestHarness.RocketConfig.fir 290121:4]
    bundleOut_0_a_q.io_enq_bits_size <= auto_in_a_bits_size @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 290093:4 LazyModule.scala 309:16 chipyard.TestHarness.RocketConfig.fir 290121:4]
    bundleOut_0_a_q.io_enq_bits_source <= auto_in_a_bits_source @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 290093:4 LazyModule.scala 309:16 chipyard.TestHarness.RocketConfig.fir 290121:4]
    bundleOut_0_a_q.io_enq_bits_address <= auto_in_a_bits_address @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 290093:4 LazyModule.scala 309:16 chipyard.TestHarness.RocketConfig.fir 290121:4]
    bundleOut_0_a_q.io_enq_bits_mask <= auto_in_a_bits_mask @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 290093:4 LazyModule.scala 309:16 chipyard.TestHarness.RocketConfig.fir 290121:4]
    bundleOut_0_a_q.io_enq_bits_data <= auto_in_a_bits_data @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 290093:4 LazyModule.scala 309:16 chipyard.TestHarness.RocketConfig.fir 290121:4]
    bundleOut_0_a_q.io_enq_bits_corrupt <= auto_in_a_bits_corrupt @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 290093:4 LazyModule.scala 309:16 chipyard.TestHarness.RocketConfig.fir 290121:4]
    bundleOut_0_a_q.io_deq_ready <= auto_out_a_ready @[Nodes.scala 1207:84 chipyard.TestHarness.RocketConfig.fir 290118:4 LazyModule.scala 311:12 chipyard.TestHarness.RocketConfig.fir 290120:4]
    bundleIn_0_d_q.clock <= clock @[chipyard.TestHarness.RocketConfig.fir 290137:4]
    bundleIn_0_d_q.reset <= reset @[chipyard.TestHarness.RocketConfig.fir 290138:4]
    bundleIn_0_d_q.io_enq_valid <= auto_out_d_valid @[Nodes.scala 1207:84 chipyard.TestHarness.RocketConfig.fir 290118:4 LazyModule.scala 311:12 chipyard.TestHarness.RocketConfig.fir 290120:4]
    bundleIn_0_d_q.io_enq_bits_opcode <= auto_out_d_bits_opcode @[Nodes.scala 1207:84 chipyard.TestHarness.RocketConfig.fir 290118:4 LazyModule.scala 311:12 chipyard.TestHarness.RocketConfig.fir 290120:4]
    bundleIn_0_d_q.io_enq_bits_size <= auto_out_d_bits_size @[Nodes.scala 1207:84 chipyard.TestHarness.RocketConfig.fir 290118:4 LazyModule.scala 311:12 chipyard.TestHarness.RocketConfig.fir 290120:4]
    bundleIn_0_d_q.io_enq_bits_source <= auto_out_d_bits_source @[Nodes.scala 1207:84 chipyard.TestHarness.RocketConfig.fir 290118:4 LazyModule.scala 311:12 chipyard.TestHarness.RocketConfig.fir 290120:4]
    bundleIn_0_d_q.io_enq_bits_data <= auto_out_d_bits_data @[Nodes.scala 1207:84 chipyard.TestHarness.RocketConfig.fir 290118:4 LazyModule.scala 311:12 chipyard.TestHarness.RocketConfig.fir 290120:4]
    bundleIn_0_d_q.io_deq_ready <= auto_in_d_ready @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 290093:4 LazyModule.scala 309:16 chipyard.TestHarness.RocketConfig.fir 290121:4]

  module TLMonitor_56_inTestHarness : @[chipyard.TestHarness.RocketConfig.fir 290185:2]
    input clock : Clock @[chipyard.TestHarness.RocketConfig.fir 290186:4]
    input reset : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 290187:4]
    input io_in_a_ready : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 290188:4]
    input io_in_a_valid : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 290188:4]
    input io_in_a_bits_opcode : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 290188:4]
    input io_in_a_bits_param : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 290188:4]
    input io_in_a_bits_size : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 290188:4]
    input io_in_a_bits_source : UInt<4> @[chipyard.TestHarness.RocketConfig.fir 290188:4]
    input io_in_a_bits_address : UInt<29> @[chipyard.TestHarness.RocketConfig.fir 290188:4]
    input io_in_a_bits_mask : UInt<8> @[chipyard.TestHarness.RocketConfig.fir 290188:4]
    input io_in_a_bits_corrupt : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 290188:4]
    input io_in_d_ready : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 290188:4]
    input io_in_d_valid : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 290188:4]
    input io_in_d_bits_opcode : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 290188:4]
    input io_in_d_bits_param : UInt<2> @[chipyard.TestHarness.RocketConfig.fir 290188:4]
    input io_in_d_bits_size : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 290188:4]
    input io_in_d_bits_source : UInt<4> @[chipyard.TestHarness.RocketConfig.fir 290188:4]
    input io_in_d_bits_sink : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 290188:4]
    input io_in_d_bits_denied : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 290188:4]
    input io_in_d_bits_corrupt : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 290188:4]

    inst plusarg_reader of plusarg_reader @[PlusArg.scala 80:11 chipyard.TestHarness.RocketConfig.fir 291679:4]
    inst plusarg_reader_1 of plusarg_reader @[PlusArg.scala 80:11 chipyard.TestHarness.RocketConfig.fir 291986:4]
    node _source_ok_T_4 = leq(io_in_a_bits_source, UInt<4>("h9")) @[Parameters.scala 57:20 chipyard.TestHarness.RocketConfig.fir 290205:6]
    node _is_aligned_mask_T_1 = dshlw(UInt<13>("h3f"), io_in_a_bits_size) @[package.scala 234:77 chipyard.TestHarness.RocketConfig.fir 290211:6]
    node _is_aligned_mask_T_2 = bits(_is_aligned_mask_T_1, 5, 0) @[package.scala 234:82 chipyard.TestHarness.RocketConfig.fir 290212:6]
    node is_aligned_mask = not(_is_aligned_mask_T_2) @[package.scala 234:46 chipyard.TestHarness.RocketConfig.fir 290213:6]
    node _GEN_71 = pad(is_aligned_mask, 29) @[Edges.scala 20:16 chipyard.TestHarness.RocketConfig.fir 290214:6]
    node _is_aligned_T = and(io_in_a_bits_address, _GEN_71) @[Edges.scala 20:16 chipyard.TestHarness.RocketConfig.fir 290214:6]
    node is_aligned = eq(_is_aligned_T, UInt<29>("h0")) @[Edges.scala 20:24 chipyard.TestHarness.RocketConfig.fir 290215:6]
    node mask_sizeOH_shiftAmount = bits(io_in_a_bits_size, 1, 0) @[OneHot.scala 64:49 chipyard.TestHarness.RocketConfig.fir 290217:6]
    node _mask_sizeOH_T_1 = dshlw(UInt<4>("h1"), mask_sizeOH_shiftAmount) @[OneHot.scala 65:12 chipyard.TestHarness.RocketConfig.fir 290218:6]
    node _mask_sizeOH_T_2 = bits(_mask_sizeOH_T_1, 2, 0) @[OneHot.scala 65:27 chipyard.TestHarness.RocketConfig.fir 290219:6]
    node mask_sizeOH = or(_mask_sizeOH_T_2, UInt<3>("h1")) @[Misc.scala 201:81 chipyard.TestHarness.RocketConfig.fir 290220:6]
    node _mask_T = geq(io_in_a_bits_size, UInt<3>("h3")) @[Misc.scala 205:21 chipyard.TestHarness.RocketConfig.fir 290221:6]
    node mask_size = bits(mask_sizeOH, 2, 2) @[Misc.scala 208:26 chipyard.TestHarness.RocketConfig.fir 290222:6]
    node mask_bit = bits(io_in_a_bits_address, 2, 2) @[Misc.scala 209:26 chipyard.TestHarness.RocketConfig.fir 290223:6]
    node mask_nbit = not(mask_bit) @[Misc.scala 210:20 chipyard.TestHarness.RocketConfig.fir 290224:6]
    node _mask_acc_T = and(mask_size, mask_nbit) @[Misc.scala 214:38 chipyard.TestHarness.RocketConfig.fir 290226:6]
    node mask_acc = or(_mask_T, _mask_acc_T) @[Misc.scala 214:29 chipyard.TestHarness.RocketConfig.fir 290227:6]
    node _mask_acc_T_1 = and(mask_size, mask_bit) @[Misc.scala 214:38 chipyard.TestHarness.RocketConfig.fir 290229:6]
    node mask_acc_1 = or(_mask_T, _mask_acc_T_1) @[Misc.scala 214:29 chipyard.TestHarness.RocketConfig.fir 290230:6]
    node mask_size_1 = bits(mask_sizeOH, 1, 1) @[Misc.scala 208:26 chipyard.TestHarness.RocketConfig.fir 290231:6]
    node mask_bit_1 = bits(io_in_a_bits_address, 1, 1) @[Misc.scala 209:26 chipyard.TestHarness.RocketConfig.fir 290232:6]
    node mask_nbit_1 = not(mask_bit_1) @[Misc.scala 210:20 chipyard.TestHarness.RocketConfig.fir 290233:6]
    node mask_eq_2 = and(mask_nbit, mask_nbit_1) @[Misc.scala 213:27 chipyard.TestHarness.RocketConfig.fir 290234:6]
    node _mask_acc_T_2 = and(mask_size_1, mask_eq_2) @[Misc.scala 214:38 chipyard.TestHarness.RocketConfig.fir 290235:6]
    node mask_acc_2 = or(mask_acc, _mask_acc_T_2) @[Misc.scala 214:29 chipyard.TestHarness.RocketConfig.fir 290236:6]
    node mask_eq_3 = and(mask_nbit, mask_bit_1) @[Misc.scala 213:27 chipyard.TestHarness.RocketConfig.fir 290237:6]
    node _mask_acc_T_3 = and(mask_size_1, mask_eq_3) @[Misc.scala 214:38 chipyard.TestHarness.RocketConfig.fir 290238:6]
    node mask_acc_3 = or(mask_acc, _mask_acc_T_3) @[Misc.scala 214:29 chipyard.TestHarness.RocketConfig.fir 290239:6]
    node mask_eq_4 = and(mask_bit, mask_nbit_1) @[Misc.scala 213:27 chipyard.TestHarness.RocketConfig.fir 290240:6]
    node _mask_acc_T_4 = and(mask_size_1, mask_eq_4) @[Misc.scala 214:38 chipyard.TestHarness.RocketConfig.fir 290241:6]
    node mask_acc_4 = or(mask_acc_1, _mask_acc_T_4) @[Misc.scala 214:29 chipyard.TestHarness.RocketConfig.fir 290242:6]
    node mask_eq_5 = and(mask_bit, mask_bit_1) @[Misc.scala 213:27 chipyard.TestHarness.RocketConfig.fir 290243:6]
    node _mask_acc_T_5 = and(mask_size_1, mask_eq_5) @[Misc.scala 214:38 chipyard.TestHarness.RocketConfig.fir 290244:6]
    node mask_acc_5 = or(mask_acc_1, _mask_acc_T_5) @[Misc.scala 214:29 chipyard.TestHarness.RocketConfig.fir 290245:6]
    node mask_size_2 = bits(mask_sizeOH, 0, 0) @[Misc.scala 208:26 chipyard.TestHarness.RocketConfig.fir 290246:6]
    node mask_bit_2 = bits(io_in_a_bits_address, 0, 0) @[Misc.scala 209:26 chipyard.TestHarness.RocketConfig.fir 290247:6]
    node mask_nbit_2 = not(mask_bit_2) @[Misc.scala 210:20 chipyard.TestHarness.RocketConfig.fir 290248:6]
    node mask_eq_6 = and(mask_eq_2, mask_nbit_2) @[Misc.scala 213:27 chipyard.TestHarness.RocketConfig.fir 290249:6]
    node _mask_acc_T_6 = and(mask_size_2, mask_eq_6) @[Misc.scala 214:38 chipyard.TestHarness.RocketConfig.fir 290250:6]
    node mask_lo_lo_lo = or(mask_acc_2, _mask_acc_T_6) @[Misc.scala 214:29 chipyard.TestHarness.RocketConfig.fir 290251:6]
    node mask_eq_7 = and(mask_eq_2, mask_bit_2) @[Misc.scala 213:27 chipyard.TestHarness.RocketConfig.fir 290252:6]
    node _mask_acc_T_7 = and(mask_size_2, mask_eq_7) @[Misc.scala 214:38 chipyard.TestHarness.RocketConfig.fir 290253:6]
    node mask_lo_lo_hi = or(mask_acc_2, _mask_acc_T_7) @[Misc.scala 214:29 chipyard.TestHarness.RocketConfig.fir 290254:6]
    node mask_eq_8 = and(mask_eq_3, mask_nbit_2) @[Misc.scala 213:27 chipyard.TestHarness.RocketConfig.fir 290255:6]
    node _mask_acc_T_8 = and(mask_size_2, mask_eq_8) @[Misc.scala 214:38 chipyard.TestHarness.RocketConfig.fir 290256:6]
    node mask_lo_hi_lo = or(mask_acc_3, _mask_acc_T_8) @[Misc.scala 214:29 chipyard.TestHarness.RocketConfig.fir 290257:6]
    node mask_eq_9 = and(mask_eq_3, mask_bit_2) @[Misc.scala 213:27 chipyard.TestHarness.RocketConfig.fir 290258:6]
    node _mask_acc_T_9 = and(mask_size_2, mask_eq_9) @[Misc.scala 214:38 chipyard.TestHarness.RocketConfig.fir 290259:6]
    node mask_lo_hi_hi = or(mask_acc_3, _mask_acc_T_9) @[Misc.scala 214:29 chipyard.TestHarness.RocketConfig.fir 290260:6]
    node mask_eq_10 = and(mask_eq_4, mask_nbit_2) @[Misc.scala 213:27 chipyard.TestHarness.RocketConfig.fir 290261:6]
    node _mask_acc_T_10 = and(mask_size_2, mask_eq_10) @[Misc.scala 214:38 chipyard.TestHarness.RocketConfig.fir 290262:6]
    node mask_hi_lo_lo = or(mask_acc_4, _mask_acc_T_10) @[Misc.scala 214:29 chipyard.TestHarness.RocketConfig.fir 290263:6]
    node mask_eq_11 = and(mask_eq_4, mask_bit_2) @[Misc.scala 213:27 chipyard.TestHarness.RocketConfig.fir 290264:6]
    node _mask_acc_T_11 = and(mask_size_2, mask_eq_11) @[Misc.scala 214:38 chipyard.TestHarness.RocketConfig.fir 290265:6]
    node mask_hi_lo_hi = or(mask_acc_4, _mask_acc_T_11) @[Misc.scala 214:29 chipyard.TestHarness.RocketConfig.fir 290266:6]
    node mask_eq_12 = and(mask_eq_5, mask_nbit_2) @[Misc.scala 213:27 chipyard.TestHarness.RocketConfig.fir 290267:6]
    node _mask_acc_T_12 = and(mask_size_2, mask_eq_12) @[Misc.scala 214:38 chipyard.TestHarness.RocketConfig.fir 290268:6]
    node mask_hi_hi_lo = or(mask_acc_5, _mask_acc_T_12) @[Misc.scala 214:29 chipyard.TestHarness.RocketConfig.fir 290269:6]
    node mask_eq_13 = and(mask_eq_5, mask_bit_2) @[Misc.scala 213:27 chipyard.TestHarness.RocketConfig.fir 290270:6]
    node _mask_acc_T_13 = and(mask_size_2, mask_eq_13) @[Misc.scala 214:38 chipyard.TestHarness.RocketConfig.fir 290271:6]
    node mask_hi_hi_hi = or(mask_acc_5, _mask_acc_T_13) @[Misc.scala 214:29 chipyard.TestHarness.RocketConfig.fir 290272:6]
    node mask = cat(cat(cat(mask_hi_hi_hi, mask_hi_hi_lo), cat(mask_hi_lo_hi, mask_hi_lo_lo)), cat(cat(mask_lo_hi_hi, mask_lo_hi_lo), cat(mask_lo_lo_hi, mask_lo_lo_lo))) @[Cat.scala 30:58 chipyard.TestHarness.RocketConfig.fir 290279:6]
    node _T_20 = eq(io_in_a_bits_opcode, UInt<3>("h6")) @[Monitor.scala 81:25 chipyard.TestHarness.RocketConfig.fir 290302:6]
    node _T_33 = xor(io_in_a_bits_address, UInt<29>("h10000000")) @[Parameters.scala 137:31 chipyard.TestHarness.RocketConfig.fir 290318:8]
    node _T_34 = cvt(_T_33) @[Parameters.scala 137:49 chipyard.TestHarness.RocketConfig.fir 290319:8]
    node _T_35 = and(_T_34, SInt<30>("h-1000")) @[Parameters.scala 137:52 chipyard.TestHarness.RocketConfig.fir 290320:8]
    node _T_36 = asSInt(_T_35) @[Parameters.scala 137:52 chipyard.TestHarness.RocketConfig.fir 290321:8]
    node _T_37 = eq(_T_36, SInt<30>("h0")) @[Parameters.scala 137:67 chipyard.TestHarness.RocketConfig.fir 290322:8]
    node _T_43 = not(reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290328:8]
    node _T_60 = or(_source_ok_T_4, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290353:8]
    node _T_61 = not(_T_60) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290354:8]
    node _T_64 = or(_mask_T, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290361:8]
    node _T_65 = not(_T_64) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290362:8]
    node _T_67 = or(is_aligned, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290368:8]
    node _T_68 = not(_T_67) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290369:8]
    node _T_69 = leq(io_in_a_bits_param, UInt<3>("h2")) @[Bundles.scala 108:27 chipyard.TestHarness.RocketConfig.fir 290374:8]
    node _T_71 = or(_T_69, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290376:8]
    node _T_72 = not(_T_71) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290377:8]
    node _T_73 = not(io_in_a_bits_mask) @[Monitor.scala 88:18 chipyard.TestHarness.RocketConfig.fir 290382:8]
    node _T_74 = eq(_T_73, UInt<8>("h0")) @[Monitor.scala 88:31 chipyard.TestHarness.RocketConfig.fir 290383:8]
    node _T_76 = or(_T_74, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290385:8]
    node _T_77 = not(_T_76) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290386:8]
    node _T_78 = not(io_in_a_bits_corrupt) @[Monitor.scala 89:18 chipyard.TestHarness.RocketConfig.fir 290391:8]
    node _T_80 = or(_T_78, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290393:8]
    node _T_81 = not(_T_80) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290394:8]
    node _T_82 = eq(io_in_a_bits_opcode, UInt<3>("h7")) @[Monitor.scala 92:25 chipyard.TestHarness.RocketConfig.fir 290400:6]
    node _T_135 = neq(io_in_a_bits_param, UInt<3>("h0")) @[Monitor.scala 99:31 chipyard.TestHarness.RocketConfig.fir 290480:8]
    node _T_137 = or(_T_135, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290482:8]
    node _T_138 = not(_T_137) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290483:8]
    node _T_148 = eq(io_in_a_bits_opcode, UInt<3>("h4")) @[Monitor.scala 104:25 chipyard.TestHarness.RocketConfig.fir 290506:6]
    node _T_164 = leq(io_in_a_bits_size, UInt<3>("h6")) @[Parameters.scala 92:42 chipyard.TestHarness.RocketConfig.fir 290529:8]
    node _T_172 = and(_T_164, _T_37) @[Parameters.scala 670:56 chipyard.TestHarness.RocketConfig.fir 290537:8]
    node _T_175 = or(_T_172, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290540:8]
    node _T_176 = not(_T_175) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290541:8]
    node _T_183 = eq(io_in_a_bits_param, UInt<3>("h0")) @[Monitor.scala 109:31 chipyard.TestHarness.RocketConfig.fir 290560:8]
    node _T_185 = or(_T_183, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290562:8]
    node _T_186 = not(_T_185) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290563:8]
    node _T_187 = eq(io_in_a_bits_mask, mask) @[Monitor.scala 110:30 chipyard.TestHarness.RocketConfig.fir 290568:8]
    node _T_189 = or(_T_187, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290570:8]
    node _T_190 = not(_T_189) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290571:8]
    node _T_195 = eq(io_in_a_bits_opcode, UInt<3>("h0")) @[Monitor.scala 114:25 chipyard.TestHarness.RocketConfig.fir 290585:6]
    node _T_218 = and(_source_ok_T_4, _T_172) @[Monitor.scala 115:71 chipyard.TestHarness.RocketConfig.fir 290611:8]
    node _T_220 = or(_T_218, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290613:8]
    node _T_221 = not(_T_220) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290614:8]
    node _T_236 = eq(io_in_a_bits_opcode, UInt<3>("h1")) @[Monitor.scala 122:25 chipyard.TestHarness.RocketConfig.fir 290650:6]
    node _T_273 = not(mask) @[Monitor.scala 127:33 chipyard.TestHarness.RocketConfig.fir 290706:8]
    node _T_274 = and(io_in_a_bits_mask, _T_273) @[Monitor.scala 127:31 chipyard.TestHarness.RocketConfig.fir 290707:8]
    node _T_275 = eq(_T_274, UInt<8>("h0")) @[Monitor.scala 127:40 chipyard.TestHarness.RocketConfig.fir 290708:8]
    node _T_277 = or(_T_275, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290710:8]
    node _T_278 = not(_T_277) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290711:8]
    node _T_279 = eq(io_in_a_bits_opcode, UInt<3>("h2")) @[Monitor.scala 130:25 chipyard.TestHarness.RocketConfig.fir 290717:6]
    node _T_309 = leq(io_in_a_bits_param, UInt<3>("h4")) @[Bundles.scala 138:33 chipyard.TestHarness.RocketConfig.fir 290762:8]
    node _T_311 = or(_T_309, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290764:8]
    node _T_312 = not(_T_311) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290765:8]
    node _T_317 = eq(io_in_a_bits_opcode, UInt<3>("h3")) @[Monitor.scala 138:25 chipyard.TestHarness.RocketConfig.fir 290779:6]
    node _T_347 = leq(io_in_a_bits_param, UInt<3>("h3")) @[Bundles.scala 145:30 chipyard.TestHarness.RocketConfig.fir 290824:8]
    node _T_349 = or(_T_347, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290826:8]
    node _T_350 = not(_T_349) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290827:8]
    node _T_355 = eq(io_in_a_bits_opcode, UInt<3>("h5")) @[Monitor.scala 146:25 chipyard.TestHarness.RocketConfig.fir 290841:6]
    node _T_385 = leq(io_in_a_bits_param, UInt<3>("h1")) @[Bundles.scala 158:28 chipyard.TestHarness.RocketConfig.fir 290886:8]
    node _T_387 = or(_T_385, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290888:8]
    node _T_388 = not(_T_387) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290889:8]
    node _T_397 = leq(io_in_d_bits_opcode, UInt<3>("h6")) @[Bundles.scala 42:24 chipyard.TestHarness.RocketConfig.fir 290913:6]
    node _T_399 = or(_T_397, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 290915:6]
    node _T_400 = not(_T_399) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 290916:6]
    node _source_ok_T_10 = leq(io_in_d_bits_source, UInt<4>("h9")) @[Parameters.scala 57:20 chipyard.TestHarness.RocketConfig.fir 290927:6]
    node _T_401 = eq(io_in_d_bits_opcode, UInt<3>("h6")) @[Monitor.scala 310:25 chipyard.TestHarness.RocketConfig.fir 290933:6]
    node _T_403 = or(_source_ok_T_10, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 290936:8]
    node _T_404 = not(_T_403) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 290937:8]
    node _T_405 = geq(io_in_d_bits_size, UInt<3>("h3")) @[Monitor.scala 312:27 chipyard.TestHarness.RocketConfig.fir 290942:8]
    node _T_407 = or(_T_405, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 290944:8]
    node _T_408 = not(_T_407) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 290945:8]
    node _T_409 = eq(io_in_d_bits_param, UInt<2>("h0")) @[Monitor.scala 313:28 chipyard.TestHarness.RocketConfig.fir 290950:8]
    node _T_411 = or(_T_409, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 290952:8]
    node _T_412 = not(_T_411) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 290953:8]
    node _T_413 = not(io_in_d_bits_corrupt) @[Monitor.scala 314:15 chipyard.TestHarness.RocketConfig.fir 290958:8]
    node _T_415 = or(_T_413, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 290960:8]
    node _T_416 = not(_T_415) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 290961:8]
    node _T_417 = not(io_in_d_bits_denied) @[Monitor.scala 315:15 chipyard.TestHarness.RocketConfig.fir 290966:8]
    node _T_419 = or(_T_417, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 290968:8]
    node _T_420 = not(_T_419) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 290969:8]
    node _T_421 = eq(io_in_d_bits_opcode, UInt<3>("h4")) @[Monitor.scala 318:25 chipyard.TestHarness.RocketConfig.fir 290975:6]
    node _T_432 = leq(io_in_d_bits_param, UInt<2>("h2")) @[Bundles.scala 102:26 chipyard.TestHarness.RocketConfig.fir 290999:8]
    node _T_434 = or(_T_432, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291001:8]
    node _T_435 = not(_T_434) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291002:8]
    node _T_436 = neq(io_in_d_bits_param, UInt<2>("h2")) @[Monitor.scala 323:28 chipyard.TestHarness.RocketConfig.fir 291007:8]
    node _T_438 = or(_T_436, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291009:8]
    node _T_439 = not(_T_438) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291010:8]
    node _T_449 = eq(io_in_d_bits_opcode, UInt<3>("h5")) @[Monitor.scala 328:25 chipyard.TestHarness.RocketConfig.fir 291033:6]
    node _T_469 = or(_T_417, io_in_d_bits_corrupt) @[Monitor.scala 334:30 chipyard.TestHarness.RocketConfig.fir 291074:8]
    node _T_471 = or(_T_469, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291076:8]
    node _T_472 = not(_T_471) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291077:8]
    node _T_478 = eq(io_in_d_bits_opcode, UInt<3>("h0")) @[Monitor.scala 338:25 chipyard.TestHarness.RocketConfig.fir 291092:6]
    node _T_495 = eq(io_in_d_bits_opcode, UInt<3>("h1")) @[Monitor.scala 346:25 chipyard.TestHarness.RocketConfig.fir 291127:6]
    node _T_513 = eq(io_in_d_bits_opcode, UInt<3>("h2")) @[Monitor.scala 354:25 chipyard.TestHarness.RocketConfig.fir 291163:6]
    node _a_first_T = and(io_in_a_ready, io_in_a_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.RocketConfig.fir 291229:4]
    node a_first_beats1_decode = shr(is_aligned_mask, 3) @[Edges.scala 219:59 chipyard.TestHarness.RocketConfig.fir 291234:4]
    node _a_first_beats1_opdata_T = bits(io_in_a_bits_opcode, 2, 2) @[Edges.scala 91:37 chipyard.TestHarness.RocketConfig.fir 291235:4]
    node a_first_beats1_opdata = not(_a_first_beats1_opdata_T) @[Edges.scala 91:28 chipyard.TestHarness.RocketConfig.fir 291236:4]
    node a_first_beats1 = mux(a_first_beats1_opdata, a_first_beats1_decode, UInt<3>("h0")) @[Edges.scala 220:14 chipyard.TestHarness.RocketConfig.fir 291237:4]
    reg a_first_counter : UInt<3>, clock with :
      reset => (UInt<1>("h0"), a_first_counter) @[Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 291238:4]
    node _a_first_counter1_T = sub(a_first_counter, UInt<3>("h1")) @[Edges.scala 229:28 chipyard.TestHarness.RocketConfig.fir 291239:4]
    node a_first_counter1 = tail(_a_first_counter1_T, 1) @[Edges.scala 229:28 chipyard.TestHarness.RocketConfig.fir 291240:4]
    node a_first = eq(a_first_counter, UInt<3>("h0")) @[Edges.scala 230:25 chipyard.TestHarness.RocketConfig.fir 291241:4]
    node _a_first_counter_T = mux(a_first, a_first_beats1, a_first_counter1) @[Edges.scala 235:21 chipyard.TestHarness.RocketConfig.fir 291249:6]
    node _GEN_0 = mux(_a_first_T, _a_first_counter_T, a_first_counter) @[Edges.scala 234:17 chipyard.TestHarness.RocketConfig.fir 291248:4 Edges.scala 235:15 chipyard.TestHarness.RocketConfig.fir 291250:6 Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 291238:4]
    reg opcode : UInt<3>, clock with :
      reset => (UInt<1>("h0"), opcode) @[Monitor.scala 384:22 chipyard.TestHarness.RocketConfig.fir 291252:4]
    reg param : UInt<3>, clock with :
      reset => (UInt<1>("h0"), param) @[Monitor.scala 385:22 chipyard.TestHarness.RocketConfig.fir 291253:4]
    reg size : UInt<3>, clock with :
      reset => (UInt<1>("h0"), size) @[Monitor.scala 386:22 chipyard.TestHarness.RocketConfig.fir 291254:4]
    reg source : UInt<4>, clock with :
      reset => (UInt<1>("h0"), source) @[Monitor.scala 387:22 chipyard.TestHarness.RocketConfig.fir 291255:4]
    reg address : UInt<29>, clock with :
      reset => (UInt<1>("h0"), address) @[Monitor.scala 388:22 chipyard.TestHarness.RocketConfig.fir 291256:4]
    node _T_542 = not(a_first) @[Monitor.scala 389:22 chipyard.TestHarness.RocketConfig.fir 291257:4]
    node _T_543 = and(io_in_a_valid, _T_542) @[Monitor.scala 389:19 chipyard.TestHarness.RocketConfig.fir 291258:4]
    node _T_544 = eq(io_in_a_bits_opcode, opcode) @[Monitor.scala 390:32 chipyard.TestHarness.RocketConfig.fir 291260:6]
    node _T_546 = or(_T_544, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 291262:6]
    node _T_547 = not(_T_546) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 291263:6]
    node _T_548 = eq(io_in_a_bits_param, param) @[Monitor.scala 391:32 chipyard.TestHarness.RocketConfig.fir 291268:6]
    node _T_550 = or(_T_548, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 291270:6]
    node _T_551 = not(_T_550) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 291271:6]
    node _T_552 = eq(io_in_a_bits_size, size) @[Monitor.scala 392:32 chipyard.TestHarness.RocketConfig.fir 291276:6]
    node _T_554 = or(_T_552, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 291278:6]
    node _T_555 = not(_T_554) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 291279:6]
    node _T_556 = eq(io_in_a_bits_source, source) @[Monitor.scala 393:32 chipyard.TestHarness.RocketConfig.fir 291284:6]
    node _T_558 = or(_T_556, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 291286:6]
    node _T_559 = not(_T_558) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 291287:6]
    node _T_560 = eq(io_in_a_bits_address, address) @[Monitor.scala 394:32 chipyard.TestHarness.RocketConfig.fir 291292:6]
    node _T_562 = or(_T_560, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 291294:6]
    node _T_563 = not(_T_562) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 291295:6]
    node _T_565 = and(_a_first_T, a_first) @[Monitor.scala 396:20 chipyard.TestHarness.RocketConfig.fir 291302:4]
    node _d_first_T = and(io_in_d_ready, io_in_d_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.RocketConfig.fir 291310:4]
    node _d_first_beats1_decode_T_1 = dshlw(UInt<13>("h3f"), io_in_d_bits_size) @[package.scala 234:77 chipyard.TestHarness.RocketConfig.fir 291312:4]
    node _d_first_beats1_decode_T_2 = bits(_d_first_beats1_decode_T_1, 5, 0) @[package.scala 234:82 chipyard.TestHarness.RocketConfig.fir 291313:4]
    node _d_first_beats1_decode_T_3 = not(_d_first_beats1_decode_T_2) @[package.scala 234:46 chipyard.TestHarness.RocketConfig.fir 291314:4]
    node d_first_beats1_decode = shr(_d_first_beats1_decode_T_3, 3) @[Edges.scala 219:59 chipyard.TestHarness.RocketConfig.fir 291315:4]
    node d_first_beats1_opdata = bits(io_in_d_bits_opcode, 0, 0) @[Edges.scala 105:36 chipyard.TestHarness.RocketConfig.fir 291316:4]
    node d_first_beats1 = mux(d_first_beats1_opdata, d_first_beats1_decode, UInt<3>("h0")) @[Edges.scala 220:14 chipyard.TestHarness.RocketConfig.fir 291317:4]
    reg d_first_counter : UInt<3>, clock with :
      reset => (UInt<1>("h0"), d_first_counter) @[Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 291318:4]
    node _d_first_counter1_T = sub(d_first_counter, UInt<3>("h1")) @[Edges.scala 229:28 chipyard.TestHarness.RocketConfig.fir 291319:4]
    node d_first_counter1 = tail(_d_first_counter1_T, 1) @[Edges.scala 229:28 chipyard.TestHarness.RocketConfig.fir 291320:4]
    node d_first = eq(d_first_counter, UInt<3>("h0")) @[Edges.scala 230:25 chipyard.TestHarness.RocketConfig.fir 291321:4]
    node _d_first_counter_T = mux(d_first, d_first_beats1, d_first_counter1) @[Edges.scala 235:21 chipyard.TestHarness.RocketConfig.fir 291329:6]
    node _GEN_6 = mux(_d_first_T, _d_first_counter_T, d_first_counter) @[Edges.scala 234:17 chipyard.TestHarness.RocketConfig.fir 291328:4 Edges.scala 235:15 chipyard.TestHarness.RocketConfig.fir 291330:6 Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 291318:4]
    reg opcode_1 : UInt<3>, clock with :
      reset => (UInt<1>("h0"), opcode_1) @[Monitor.scala 535:22 chipyard.TestHarness.RocketConfig.fir 291332:4]
    reg param_1 : UInt<2>, clock with :
      reset => (UInt<1>("h0"), param_1) @[Monitor.scala 536:22 chipyard.TestHarness.RocketConfig.fir 291333:4]
    reg size_1 : UInt<3>, clock with :
      reset => (UInt<1>("h0"), size_1) @[Monitor.scala 537:22 chipyard.TestHarness.RocketConfig.fir 291334:4]
    reg source_1 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), source_1) @[Monitor.scala 538:22 chipyard.TestHarness.RocketConfig.fir 291335:4]
    reg sink : UInt<1>, clock with :
      reset => (UInt<1>("h0"), sink) @[Monitor.scala 539:22 chipyard.TestHarness.RocketConfig.fir 291336:4]
    reg denied : UInt<1>, clock with :
      reset => (UInt<1>("h0"), denied) @[Monitor.scala 540:22 chipyard.TestHarness.RocketConfig.fir 291337:4]
    node _T_566 = not(d_first) @[Monitor.scala 541:22 chipyard.TestHarness.RocketConfig.fir 291338:4]
    node _T_567 = and(io_in_d_valid, _T_566) @[Monitor.scala 541:19 chipyard.TestHarness.RocketConfig.fir 291339:4]
    node _T_568 = eq(io_in_d_bits_opcode, opcode_1) @[Monitor.scala 542:29 chipyard.TestHarness.RocketConfig.fir 291341:6]
    node _T_570 = or(_T_568, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291343:6]
    node _T_571 = not(_T_570) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291344:6]
    node _T_572 = eq(io_in_d_bits_param, param_1) @[Monitor.scala 543:29 chipyard.TestHarness.RocketConfig.fir 291349:6]
    node _T_574 = or(_T_572, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291351:6]
    node _T_575 = not(_T_574) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291352:6]
    node _T_576 = eq(io_in_d_bits_size, size_1) @[Monitor.scala 544:29 chipyard.TestHarness.RocketConfig.fir 291357:6]
    node _T_578 = or(_T_576, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291359:6]
    node _T_579 = not(_T_578) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291360:6]
    node _T_580 = eq(io_in_d_bits_source, source_1) @[Monitor.scala 545:29 chipyard.TestHarness.RocketConfig.fir 291365:6]
    node _T_582 = or(_T_580, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291367:6]
    node _T_583 = not(_T_582) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291368:6]
    node _T_584 = eq(io_in_d_bits_sink, sink) @[Monitor.scala 546:29 chipyard.TestHarness.RocketConfig.fir 291373:6]
    node _T_586 = or(_T_584, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291375:6]
    node _T_587 = not(_T_586) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291376:6]
    node _T_588 = eq(io_in_d_bits_denied, denied) @[Monitor.scala 547:29 chipyard.TestHarness.RocketConfig.fir 291381:6]
    node _T_590 = or(_T_588, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291383:6]
    node _T_591 = not(_T_590) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291384:6]
    node _T_593 = and(_d_first_T, d_first) @[Monitor.scala 549:20 chipyard.TestHarness.RocketConfig.fir 291391:4]
    reg inflight : UInt<10>, clock with :
      reset => (UInt<1>("h0"), inflight) @[Monitor.scala 611:27 chipyard.TestHarness.RocketConfig.fir 291400:4]
    reg inflight_opcodes : UInt<40>, clock with :
      reset => (UInt<1>("h0"), inflight_opcodes) @[Monitor.scala 613:35 chipyard.TestHarness.RocketConfig.fir 291401:4]
    reg inflight_sizes : UInt<40>, clock with :
      reset => (UInt<1>("h0"), inflight_sizes) @[Monitor.scala 615:33 chipyard.TestHarness.RocketConfig.fir 291402:4]
    reg a_first_counter_1 : UInt<3>, clock with :
      reset => (UInt<1>("h0"), a_first_counter_1) @[Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 291412:4]
    node _a_first_counter1_T_1 = sub(a_first_counter_1, UInt<3>("h1")) @[Edges.scala 229:28 chipyard.TestHarness.RocketConfig.fir 291413:4]
    node a_first_counter1_1 = tail(_a_first_counter1_T_1, 1) @[Edges.scala 229:28 chipyard.TestHarness.RocketConfig.fir 291414:4]
    node a_first_1 = eq(a_first_counter_1, UInt<3>("h0")) @[Edges.scala 230:25 chipyard.TestHarness.RocketConfig.fir 291415:4]
    node _a_first_counter_T_1 = mux(a_first_1, a_first_beats1, a_first_counter1_1) @[Edges.scala 235:21 chipyard.TestHarness.RocketConfig.fir 291423:6]
    node _GEN_13 = mux(_a_first_T, _a_first_counter_T_1, a_first_counter_1) @[Edges.scala 234:17 chipyard.TestHarness.RocketConfig.fir 291422:4 Edges.scala 235:15 chipyard.TestHarness.RocketConfig.fir 291424:6 Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 291412:4]
    reg d_first_counter_1 : UInt<3>, clock with :
      reset => (UInt<1>("h0"), d_first_counter_1) @[Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 291434:4]
    node _d_first_counter1_T_1 = sub(d_first_counter_1, UInt<3>("h1")) @[Edges.scala 229:28 chipyard.TestHarness.RocketConfig.fir 291435:4]
    node d_first_counter1_1 = tail(_d_first_counter1_T_1, 1) @[Edges.scala 229:28 chipyard.TestHarness.RocketConfig.fir 291436:4]
    node d_first_1 = eq(d_first_counter_1, UInt<3>("h0")) @[Edges.scala 230:25 chipyard.TestHarness.RocketConfig.fir 291437:4]
    node _d_first_counter_T_1 = mux(d_first_1, d_first_beats1, d_first_counter1_1) @[Edges.scala 235:21 chipyard.TestHarness.RocketConfig.fir 291445:6]
    node _GEN_14 = mux(_d_first_T, _d_first_counter_T_1, d_first_counter_1) @[Edges.scala 234:17 chipyard.TestHarness.RocketConfig.fir 291444:4 Edges.scala 235:15 chipyard.TestHarness.RocketConfig.fir 291446:6 Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 291434:4]
    node _GEN_72 = shl(io_in_d_bits_source, 2) @[Monitor.scala 634:69 chipyard.TestHarness.RocketConfig.fir 291458:4]
    node _a_opcode_lookup_T = pad(_GEN_72, 7) @[Monitor.scala 634:69 chipyard.TestHarness.RocketConfig.fir 291458:4]
    node _a_opcode_lookup_T_1 = dshr(inflight_opcodes, _a_opcode_lookup_T) @[Monitor.scala 634:44 chipyard.TestHarness.RocketConfig.fir 291459:4]
    node _a_opcode_lookup_T_4 = sub(UInt<16>("h10"), UInt<16>("h1")) @[Monitor.scala 609:57 chipyard.TestHarness.RocketConfig.fir 291462:4]
    node _a_opcode_lookup_T_5 = tail(_a_opcode_lookup_T_4, 1) @[Monitor.scala 609:57 chipyard.TestHarness.RocketConfig.fir 291463:4]
    node _GEN_73 = pad(_a_opcode_lookup_T_5, 40) @[Monitor.scala 634:97 chipyard.TestHarness.RocketConfig.fir 291464:4]
    node _a_opcode_lookup_T_6 = and(_a_opcode_lookup_T_1, _GEN_73) @[Monitor.scala 634:97 chipyard.TestHarness.RocketConfig.fir 291464:4]
    node _GEN_74 = shr(_a_opcode_lookup_T_6, 1) @[Monitor.scala 634:152 chipyard.TestHarness.RocketConfig.fir 291465:4]
    node _a_opcode_lookup_T_7 = pad(_GEN_74, 40) @[Monitor.scala 634:152 chipyard.TestHarness.RocketConfig.fir 291465:4]
    node _a_size_lookup_T_1 = dshr(inflight_sizes, _a_opcode_lookup_T) @[Monitor.scala 638:40 chipyard.TestHarness.RocketConfig.fir 291470:4]
    node _a_size_lookup_T_6 = and(_a_size_lookup_T_1, _GEN_73) @[Monitor.scala 638:91 chipyard.TestHarness.RocketConfig.fir 291475:4]
    node _GEN_77 = shr(_a_size_lookup_T_6, 1) @[Monitor.scala 638:144 chipyard.TestHarness.RocketConfig.fir 291476:4]
    node _a_size_lookup_T_7 = pad(_GEN_77, 40) @[Monitor.scala 638:144 chipyard.TestHarness.RocketConfig.fir 291476:4]
    node _T_594 = and(io_in_a_valid, a_first_1) @[Monitor.scala 648:26 chipyard.TestHarness.RocketConfig.fir 291500:4]
    node _a_set_wo_ready_T = dshlw(UInt<16>("h1"), io_in_a_bits_source) @[OneHot.scala 58:35 chipyard.TestHarness.RocketConfig.fir 291503:6]
    node _GEN_15 = mux(_T_594, _a_set_wo_ready_T, UInt<16>("h0")) @[Monitor.scala 648:71 chipyard.TestHarness.RocketConfig.fir 291502:4 Monitor.scala 649:22 chipyard.TestHarness.RocketConfig.fir 291504:6 chipyard.TestHarness.RocketConfig.fir 291451:4]
    node _T_597 = and(_a_first_T, a_first_1) @[Monitor.scala 652:27 chipyard.TestHarness.RocketConfig.fir 291507:4]
    node _a_opcodes_set_interm_T = shl(io_in_a_bits_opcode, 1) @[Monitor.scala 654:53 chipyard.TestHarness.RocketConfig.fir 291512:6]
    node _a_opcodes_set_interm_T_1 = or(_a_opcodes_set_interm_T, UInt<4>("h1")) @[Monitor.scala 654:61 chipyard.TestHarness.RocketConfig.fir 291513:6]
    node _a_sizes_set_interm_T = shl(io_in_a_bits_size, 1) @[Monitor.scala 655:51 chipyard.TestHarness.RocketConfig.fir 291515:6]
    node _a_sizes_set_interm_T_1 = or(_a_sizes_set_interm_T, UInt<4>("h1")) @[Monitor.scala 655:59 chipyard.TestHarness.RocketConfig.fir 291516:6]
    node _GEN_78 = shl(io_in_a_bits_source, 2) @[Monitor.scala 656:79 chipyard.TestHarness.RocketConfig.fir 291518:6]
    node _a_opcodes_set_T = pad(_GEN_78, 7) @[Monitor.scala 656:79 chipyard.TestHarness.RocketConfig.fir 291518:6]
    node a_opcodes_set_interm = mux(_T_597, _a_opcodes_set_interm_T_1, UInt<4>("h0")) @[Monitor.scala 652:72 chipyard.TestHarness.RocketConfig.fir 291509:4 Monitor.scala 654:28 chipyard.TestHarness.RocketConfig.fir 291514:6 chipyard.TestHarness.RocketConfig.fir 291497:4]
    node _GEN_79 = pad(a_opcodes_set_interm, 131) @[Monitor.scala 656:54 chipyard.TestHarness.RocketConfig.fir 291519:6]
    node _a_opcodes_set_T_1 = dshlw(_GEN_79, _a_opcodes_set_T) @[Monitor.scala 656:54 chipyard.TestHarness.RocketConfig.fir 291519:6]
    node a_sizes_set_interm = mux(_T_597, _a_sizes_set_interm_T_1, UInt<4>("h0")) @[Monitor.scala 652:72 chipyard.TestHarness.RocketConfig.fir 291509:4 Monitor.scala 655:28 chipyard.TestHarness.RocketConfig.fir 291517:6 chipyard.TestHarness.RocketConfig.fir 291499:4]
    node _GEN_81 = pad(a_sizes_set_interm, 131) @[Monitor.scala 657:52 chipyard.TestHarness.RocketConfig.fir 291522:6]
    node _a_sizes_set_T_1 = dshlw(_GEN_81, _a_opcodes_set_T) @[Monitor.scala 657:52 chipyard.TestHarness.RocketConfig.fir 291522:6]
    node _T_599 = dshr(inflight, io_in_a_bits_source) @[Monitor.scala 658:26 chipyard.TestHarness.RocketConfig.fir 291524:6]
    node _T_600 = bits(_T_599, 0, 0) @[Monitor.scala 658:26 chipyard.TestHarness.RocketConfig.fir 291525:6]
    node _T_601 = not(_T_600) @[Monitor.scala 658:17 chipyard.TestHarness.RocketConfig.fir 291526:6]
    node _T_603 = or(_T_601, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 291528:6]
    node _T_604 = not(_T_603) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 291529:6]
    node _GEN_16 = mux(_T_597, _a_set_wo_ready_T, UInt<16>("h0")) @[Monitor.scala 652:72 chipyard.TestHarness.RocketConfig.fir 291509:4 Monitor.scala 653:28 chipyard.TestHarness.RocketConfig.fir 291511:6 chipyard.TestHarness.RocketConfig.fir 291449:4]
    node _GEN_19 = mux(_T_597, _a_opcodes_set_T_1, UInt<131>("h0")) @[Monitor.scala 652:72 chipyard.TestHarness.RocketConfig.fir 291509:4 Monitor.scala 656:28 chipyard.TestHarness.RocketConfig.fir 291520:6 chipyard.TestHarness.RocketConfig.fir 291453:4]
    node _GEN_20 = mux(_T_597, _a_sizes_set_T_1, UInt<131>("h0")) @[Monitor.scala 652:72 chipyard.TestHarness.RocketConfig.fir 291509:4 Monitor.scala 657:28 chipyard.TestHarness.RocketConfig.fir 291523:6 chipyard.TestHarness.RocketConfig.fir 291455:4]
    node _T_605 = and(io_in_d_valid, d_first_1) @[Monitor.scala 671:26 chipyard.TestHarness.RocketConfig.fir 291544:4]
    node _T_607 = not(_T_401) @[Monitor.scala 671:74 chipyard.TestHarness.RocketConfig.fir 291546:4]
    node _T_608 = and(_T_605, _T_607) @[Monitor.scala 671:71 chipyard.TestHarness.RocketConfig.fir 291547:4]
    node _d_clr_wo_ready_T = dshlw(UInt<16>("h1"), io_in_d_bits_source) @[OneHot.scala 58:35 chipyard.TestHarness.RocketConfig.fir 291549:6]
    node _GEN_21 = mux(_T_608, _d_clr_wo_ready_T, UInt<16>("h0")) @[Monitor.scala 671:90 chipyard.TestHarness.RocketConfig.fir 291548:4 Monitor.scala 672:22 chipyard.TestHarness.RocketConfig.fir 291550:6 chipyard.TestHarness.RocketConfig.fir 291538:4]
    node _T_610 = and(_d_first_T, d_first_1) @[Monitor.scala 675:27 chipyard.TestHarness.RocketConfig.fir 291553:4]
    node _T_613 = and(_T_610, _T_607) @[Monitor.scala 675:72 chipyard.TestHarness.RocketConfig.fir 291556:4]
    node _GEN_83 = pad(_a_opcode_lookup_T_5, 143) @[Monitor.scala 677:76 chipyard.TestHarness.RocketConfig.fir 291565:6]
    node _d_opcodes_clr_T_5 = dshlw(_GEN_83, _a_opcode_lookup_T) @[Monitor.scala 677:76 chipyard.TestHarness.RocketConfig.fir 291565:6]
    node _GEN_22 = mux(_T_613, _d_clr_wo_ready_T, UInt<16>("h0")) @[Monitor.scala 675:91 chipyard.TestHarness.RocketConfig.fir 291557:4 Monitor.scala 676:21 chipyard.TestHarness.RocketConfig.fir 291559:6 chipyard.TestHarness.RocketConfig.fir 291536:4]
    node _GEN_23 = mux(_T_613, _d_opcodes_clr_T_5, UInt<143>("h0")) @[Monitor.scala 675:91 chipyard.TestHarness.RocketConfig.fir 291557:4 Monitor.scala 677:21 chipyard.TestHarness.RocketConfig.fir 291566:6 chipyard.TestHarness.RocketConfig.fir 291540:4]
    node _same_cycle_resp_T_2 = eq(io_in_a_bits_source, io_in_d_bits_source) @[Monitor.scala 681:113 chipyard.TestHarness.RocketConfig.fir 291582:6]
    node same_cycle_resp = and(_T_594, _same_cycle_resp_T_2) @[Monitor.scala 681:88 chipyard.TestHarness.RocketConfig.fir 291583:6]
    node _T_618 = dshr(inflight, io_in_d_bits_source) @[Monitor.scala 682:25 chipyard.TestHarness.RocketConfig.fir 291584:6]
    node _T_619 = bits(_T_618, 0, 0) @[Monitor.scala 682:25 chipyard.TestHarness.RocketConfig.fir 291585:6]
    node _T_620 = or(_T_619, same_cycle_resp) @[Monitor.scala 682:49 chipyard.TestHarness.RocketConfig.fir 291586:6]
    node _T_622 = or(_T_620, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291588:6]
    node _T_623 = not(_T_622) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291589:6]
    node _GEN_27 = mux(eq(UInt<3>("h2"), io_in_a_bits_opcode), UInt<3>("h1"), UInt<3>("h0")) @[Monitor.scala 685:38 chipyard.TestHarness.RocketConfig.fir 291595:8 Monitor.scala 685:38 chipyard.TestHarness.RocketConfig.fir 291595:8]
    node _GEN_28 = mux(eq(UInt<3>("h3"), io_in_a_bits_opcode), UInt<3>("h1"), _GEN_27) @[Monitor.scala 685:38 chipyard.TestHarness.RocketConfig.fir 291595:8 Monitor.scala 685:38 chipyard.TestHarness.RocketConfig.fir 291595:8]
    node _GEN_29 = mux(eq(UInt<3>("h4"), io_in_a_bits_opcode), UInt<3>("h1"), _GEN_28) @[Monitor.scala 685:38 chipyard.TestHarness.RocketConfig.fir 291595:8 Monitor.scala 685:38 chipyard.TestHarness.RocketConfig.fir 291595:8]
    node _GEN_30 = mux(eq(UInt<3>("h5"), io_in_a_bits_opcode), UInt<3>("h2"), _GEN_29) @[Monitor.scala 685:38 chipyard.TestHarness.RocketConfig.fir 291595:8 Monitor.scala 685:38 chipyard.TestHarness.RocketConfig.fir 291595:8]
    node _GEN_31 = mux(eq(UInt<3>("h6"), io_in_a_bits_opcode), UInt<3>("h4"), _GEN_30) @[Monitor.scala 685:38 chipyard.TestHarness.RocketConfig.fir 291595:8 Monitor.scala 685:38 chipyard.TestHarness.RocketConfig.fir 291595:8]
    node _GEN_32 = mux(eq(UInt<3>("h7"), io_in_a_bits_opcode), UInt<3>("h4"), _GEN_31) @[Monitor.scala 685:38 chipyard.TestHarness.RocketConfig.fir 291595:8 Monitor.scala 685:38 chipyard.TestHarness.RocketConfig.fir 291595:8]
    node _T_624 = eq(io_in_d_bits_opcode, _GEN_32) @[Monitor.scala 685:38 chipyard.TestHarness.RocketConfig.fir 291595:8]
    node _GEN_39 = mux(eq(UInt<3>("h6"), io_in_a_bits_opcode), UInt<3>("h5"), _GEN_30) @[Monitor.scala 686:39 chipyard.TestHarness.RocketConfig.fir 291596:8 Monitor.scala 686:39 chipyard.TestHarness.RocketConfig.fir 291596:8]
    node _GEN_40 = mux(eq(UInt<3>("h7"), io_in_a_bits_opcode), UInt<3>("h4"), _GEN_39) @[Monitor.scala 686:39 chipyard.TestHarness.RocketConfig.fir 291596:8 Monitor.scala 686:39 chipyard.TestHarness.RocketConfig.fir 291596:8]
    node _T_625 = eq(io_in_d_bits_opcode, _GEN_40) @[Monitor.scala 686:39 chipyard.TestHarness.RocketConfig.fir 291596:8]
    node _T_626 = or(_T_624, _T_625) @[Monitor.scala 685:77 chipyard.TestHarness.RocketConfig.fir 291597:8]
    node _T_628 = or(_T_626, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291599:8]
    node _T_629 = not(_T_628) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291600:8]
    node _T_630 = eq(io_in_a_bits_size, io_in_d_bits_size) @[Monitor.scala 687:36 chipyard.TestHarness.RocketConfig.fir 291605:8]
    node _T_632 = or(_T_630, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291607:8]
    node _T_633 = not(_T_632) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291608:8]
    node a_opcode_lookup = bits(_a_opcode_lookup_T_7, 3, 0) @[chipyard.TestHarness.RocketConfig.fir 291456:4 Monitor.scala 634:21 chipyard.TestHarness.RocketConfig.fir 291466:4]
    node _T_634 = bits(a_opcode_lookup, 2, 0) @[chipyard.TestHarness.RocketConfig.fir 291615:8]
    node _GEN_43 = mux(eq(UInt<3>("h2"), _T_634), UInt<3>("h1"), UInt<3>("h0")) @[Monitor.scala 689:38 chipyard.TestHarness.RocketConfig.fir 291616:8 Monitor.scala 689:38 chipyard.TestHarness.RocketConfig.fir 291616:8]
    node _GEN_44 = mux(eq(UInt<3>("h3"), _T_634), UInt<3>("h1"), _GEN_43) @[Monitor.scala 689:38 chipyard.TestHarness.RocketConfig.fir 291616:8 Monitor.scala 689:38 chipyard.TestHarness.RocketConfig.fir 291616:8]
    node _GEN_45 = mux(eq(UInt<3>("h4"), _T_634), UInt<3>("h1"), _GEN_44) @[Monitor.scala 689:38 chipyard.TestHarness.RocketConfig.fir 291616:8 Monitor.scala 689:38 chipyard.TestHarness.RocketConfig.fir 291616:8]
    node _GEN_46 = mux(eq(UInt<3>("h5"), _T_634), UInt<3>("h2"), _GEN_45) @[Monitor.scala 689:38 chipyard.TestHarness.RocketConfig.fir 291616:8 Monitor.scala 689:38 chipyard.TestHarness.RocketConfig.fir 291616:8]
    node _GEN_47 = mux(eq(UInt<3>("h6"), _T_634), UInt<3>("h4"), _GEN_46) @[Monitor.scala 689:38 chipyard.TestHarness.RocketConfig.fir 291616:8 Monitor.scala 689:38 chipyard.TestHarness.RocketConfig.fir 291616:8]
    node _GEN_48 = mux(eq(UInt<3>("h7"), _T_634), UInt<3>("h4"), _GEN_47) @[Monitor.scala 689:38 chipyard.TestHarness.RocketConfig.fir 291616:8 Monitor.scala 689:38 chipyard.TestHarness.RocketConfig.fir 291616:8]
    node _T_635 = eq(io_in_d_bits_opcode, _GEN_48) @[Monitor.scala 689:38 chipyard.TestHarness.RocketConfig.fir 291616:8]
    node _GEN_55 = mux(eq(UInt<3>("h6"), _T_634), UInt<3>("h5"), _GEN_46) @[Monitor.scala 690:38 chipyard.TestHarness.RocketConfig.fir 291618:8 Monitor.scala 690:38 chipyard.TestHarness.RocketConfig.fir 291618:8]
    node _GEN_56 = mux(eq(UInt<3>("h7"), _T_634), UInt<3>("h4"), _GEN_55) @[Monitor.scala 690:38 chipyard.TestHarness.RocketConfig.fir 291618:8 Monitor.scala 690:38 chipyard.TestHarness.RocketConfig.fir 291618:8]
    node _T_637 = eq(io_in_d_bits_opcode, _GEN_56) @[Monitor.scala 690:38 chipyard.TestHarness.RocketConfig.fir 291618:8]
    node _T_638 = or(_T_635, _T_637) @[Monitor.scala 689:72 chipyard.TestHarness.RocketConfig.fir 291619:8]
    node _T_640 = or(_T_638, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291621:8]
    node _T_641 = not(_T_640) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291622:8]
    node a_size_lookup = bits(_a_size_lookup_T_7, 3, 0) @[chipyard.TestHarness.RocketConfig.fir 291467:4 Monitor.scala 638:19 chipyard.TestHarness.RocketConfig.fir 291477:4]
    node _GEN_86 = pad(io_in_d_bits_size, 4) @[Monitor.scala 691:36 chipyard.TestHarness.RocketConfig.fir 291627:8]
    node _T_642 = eq(_GEN_86, a_size_lookup) @[Monitor.scala 691:36 chipyard.TestHarness.RocketConfig.fir 291627:8]
    node _T_644 = or(_T_642, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291629:8]
    node _T_645 = not(_T_644) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291630:8]
    node _T_647 = and(_T_605, a_first_1) @[Monitor.scala 694:36 chipyard.TestHarness.RocketConfig.fir 291638:4]
    node _T_648 = and(_T_647, io_in_a_valid) @[Monitor.scala 694:47 chipyard.TestHarness.RocketConfig.fir 291639:4]
    node _T_650 = and(_T_648, _same_cycle_resp_T_2) @[Monitor.scala 694:65 chipyard.TestHarness.RocketConfig.fir 291641:4]
    node _T_652 = and(_T_650, _T_607) @[Monitor.scala 694:116 chipyard.TestHarness.RocketConfig.fir 291643:4]
    node _T_653 = not(io_in_d_ready) @[Monitor.scala 695:15 chipyard.TestHarness.RocketConfig.fir 291645:6]
    node _T_654 = or(_T_653, io_in_a_ready) @[Monitor.scala 695:32 chipyard.TestHarness.RocketConfig.fir 291646:6]
    node _T_656 = or(_T_654, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291648:6]
    node _T_657 = not(_T_656) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291649:6]
    node a_set_wo_ready = bits(_GEN_15, 9, 0) @[chipyard.TestHarness.RocketConfig.fir 291450:4]
    node d_clr_wo_ready = bits(_GEN_21, 9, 0) @[chipyard.TestHarness.RocketConfig.fir 291537:4]
    node _T_658 = neq(a_set_wo_ready, d_clr_wo_ready) @[Monitor.scala 699:29 chipyard.TestHarness.RocketConfig.fir 291655:4]
    node _T_659 = orr(a_set_wo_ready) @[Monitor.scala 699:67 chipyard.TestHarness.RocketConfig.fir 291656:4]
    node _T_660 = not(_T_659) @[Monitor.scala 699:51 chipyard.TestHarness.RocketConfig.fir 291657:4]
    node _T_661 = or(_T_658, _T_660) @[Monitor.scala 699:48 chipyard.TestHarness.RocketConfig.fir 291658:4]
    node _T_663 = or(_T_661, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291660:4]
    node _T_664 = not(_T_663) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291661:4]
    node a_set = bits(_GEN_16, 9, 0) @[chipyard.TestHarness.RocketConfig.fir 291448:4]
    node _inflight_T = or(inflight, a_set) @[Monitor.scala 702:27 chipyard.TestHarness.RocketConfig.fir 291666:4]
    node d_clr = bits(_GEN_22, 9, 0) @[chipyard.TestHarness.RocketConfig.fir 291535:4]
    node _inflight_T_1 = not(d_clr) @[Monitor.scala 702:38 chipyard.TestHarness.RocketConfig.fir 291667:4]
    node _inflight_T_2 = and(_inflight_T, _inflight_T_1) @[Monitor.scala 702:36 chipyard.TestHarness.RocketConfig.fir 291668:4]
    node a_opcodes_set = bits(_GEN_19, 39, 0) @[chipyard.TestHarness.RocketConfig.fir 291452:4]
    node _inflight_opcodes_T = or(inflight_opcodes, a_opcodes_set) @[Monitor.scala 703:43 chipyard.TestHarness.RocketConfig.fir 291670:4]
    node d_opcodes_clr = bits(_GEN_23, 39, 0) @[chipyard.TestHarness.RocketConfig.fir 291539:4]
    node _inflight_opcodes_T_1 = not(d_opcodes_clr) @[Monitor.scala 703:62 chipyard.TestHarness.RocketConfig.fir 291671:4]
    node _inflight_opcodes_T_2 = and(_inflight_opcodes_T, _inflight_opcodes_T_1) @[Monitor.scala 703:60 chipyard.TestHarness.RocketConfig.fir 291672:4]
    node a_sizes_set = bits(_GEN_20, 39, 0) @[chipyard.TestHarness.RocketConfig.fir 291454:4]
    node _inflight_sizes_T = or(inflight_sizes, a_sizes_set) @[Monitor.scala 704:39 chipyard.TestHarness.RocketConfig.fir 291674:4]
    node _inflight_sizes_T_2 = and(_inflight_sizes_T, _inflight_opcodes_T_1) @[Monitor.scala 704:54 chipyard.TestHarness.RocketConfig.fir 291676:4]
    reg watchdog : UInt<32>, clock with :
      reset => (UInt<1>("h0"), watchdog) @[Monitor.scala 706:27 chipyard.TestHarness.RocketConfig.fir 291678:4]
    node _T_665 = orr(inflight) @[Monitor.scala 709:26 chipyard.TestHarness.RocketConfig.fir 291681:4]
    node _T_666 = not(_T_665) @[Monitor.scala 709:16 chipyard.TestHarness.RocketConfig.fir 291682:4]
    node _T_667 = eq(plusarg_reader.out, UInt<32>("h0")) @[Monitor.scala 709:39 chipyard.TestHarness.RocketConfig.fir 291683:4]
    node _T_668 = or(_T_666, _T_667) @[Monitor.scala 709:30 chipyard.TestHarness.RocketConfig.fir 291684:4]
    node _T_669 = lt(watchdog, plusarg_reader.out) @[Monitor.scala 709:59 chipyard.TestHarness.RocketConfig.fir 291685:4]
    node _T_670 = or(_T_668, _T_669) @[Monitor.scala 709:47 chipyard.TestHarness.RocketConfig.fir 291686:4]
    node _T_672 = or(_T_670, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 291688:4]
    node _T_673 = not(_T_672) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 291689:4]
    node _watchdog_T = add(watchdog, UInt<32>("h1")) @[Monitor.scala 711:26 chipyard.TestHarness.RocketConfig.fir 291694:4]
    node _watchdog_T_1 = tail(_watchdog_T, 1) @[Monitor.scala 711:26 chipyard.TestHarness.RocketConfig.fir 291695:4]
    node _T_676 = or(_a_first_T, _d_first_T) @[Monitor.scala 712:27 chipyard.TestHarness.RocketConfig.fir 291699:4]
    node _GEN_57 = mux(_T_676, UInt<32>("h0"), _watchdog_T_1) @[Monitor.scala 712:47 chipyard.TestHarness.RocketConfig.fir 291700:4 Monitor.scala 712:58 chipyard.TestHarness.RocketConfig.fir 291701:6 Monitor.scala 711:14 chipyard.TestHarness.RocketConfig.fir 291696:4]
    reg inflight_1 : UInt<10>, clock with :
      reset => (UInt<1>("h0"), inflight_1) @[Monitor.scala 723:35 chipyard.TestHarness.RocketConfig.fir 291703:4]
    reg inflight_sizes_1 : UInt<40>, clock with :
      reset => (UInt<1>("h0"), inflight_sizes_1) @[Monitor.scala 725:35 chipyard.TestHarness.RocketConfig.fir 291705:4]
    reg d_first_counter_2 : UInt<3>, clock with :
      reset => (UInt<1>("h0"), d_first_counter_2) @[Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 291740:4]
    node _d_first_counter1_T_2 = sub(d_first_counter_2, UInt<3>("h1")) @[Edges.scala 229:28 chipyard.TestHarness.RocketConfig.fir 291741:4]
    node d_first_counter1_2 = tail(_d_first_counter1_T_2, 1) @[Edges.scala 229:28 chipyard.TestHarness.RocketConfig.fir 291742:4]
    node d_first_2 = eq(d_first_counter_2, UInt<3>("h0")) @[Edges.scala 230:25 chipyard.TestHarness.RocketConfig.fir 291743:4]
    node _d_first_counter_T_2 = mux(d_first_2, d_first_beats1, d_first_counter1_2) @[Edges.scala 235:21 chipyard.TestHarness.RocketConfig.fir 291751:6]
    node _GEN_59 = mux(_d_first_T, _d_first_counter_T_2, d_first_counter_2) @[Edges.scala 234:17 chipyard.TestHarness.RocketConfig.fir 291750:4 Edges.scala 235:15 chipyard.TestHarness.RocketConfig.fir 291752:6 Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 291740:4]
    node _c_size_lookup_T_1 = dshr(inflight_sizes_1, _a_opcode_lookup_T) @[Monitor.scala 747:42 chipyard.TestHarness.RocketConfig.fir 291776:4]
    node _c_size_lookup_T_6 = and(_c_size_lookup_T_1, _GEN_73) @[Monitor.scala 747:93 chipyard.TestHarness.RocketConfig.fir 291781:4]
    node _GEN_92 = shr(_c_size_lookup_T_6, 1) @[Monitor.scala 747:146 chipyard.TestHarness.RocketConfig.fir 291782:4]
    node _c_size_lookup_T_7 = pad(_GEN_92, 40) @[Monitor.scala 747:146 chipyard.TestHarness.RocketConfig.fir 291782:4]
    node _T_694 = and(io_in_d_valid, d_first_2) @[Monitor.scala 779:26 chipyard.TestHarness.RocketConfig.fir 291860:4]
    node _T_696 = and(_T_694, _T_401) @[Monitor.scala 779:71 chipyard.TestHarness.RocketConfig.fir 291862:4]
    node _T_698 = and(_d_first_T, d_first_2) @[Monitor.scala 783:27 chipyard.TestHarness.RocketConfig.fir 291868:4]
    node _T_700 = and(_T_698, _T_401) @[Monitor.scala 783:72 chipyard.TestHarness.RocketConfig.fir 291870:4]
    node _GEN_67 = mux(_T_700, _d_clr_wo_ready_T, UInt<16>("h0")) @[Monitor.scala 783:90 chipyard.TestHarness.RocketConfig.fir 291871:4 Monitor.scala 784:21 chipyard.TestHarness.RocketConfig.fir 291873:6 chipyard.TestHarness.RocketConfig.fir 291852:4]
    node _GEN_68 = mux(_T_700, _d_opcodes_clr_T_5, UInt<143>("h0")) @[Monitor.scala 783:90 chipyard.TestHarness.RocketConfig.fir 291871:4 Monitor.scala 785:21 chipyard.TestHarness.RocketConfig.fir 291880:6 chipyard.TestHarness.RocketConfig.fir 291856:4]
    node _T_704 = dshr(inflight_1, io_in_d_bits_source) @[Monitor.scala 791:25 chipyard.TestHarness.RocketConfig.fir 291906:6]
    node _T_705 = bits(_T_704, 0, 0) @[Monitor.scala 791:25 chipyard.TestHarness.RocketConfig.fir 291907:6]
    node _T_708 = or(_T_705, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291910:6]
    node _T_709 = not(_T_708) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291911:6]
    node c_size_lookup = bits(_c_size_lookup_T_7, 3, 0) @[chipyard.TestHarness.RocketConfig.fir 291764:4 Monitor.scala 747:21 chipyard.TestHarness.RocketConfig.fir 291783:4]
    node _T_714 = eq(_GEN_86, c_size_lookup) @[Monitor.scala 795:36 chipyard.TestHarness.RocketConfig.fir 291929:8]
    node _T_716 = or(_T_714, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291931:8]
    node _T_717 = not(_T_716) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291932:8]
    node d_clr_1 = bits(_GEN_67, 9, 0) @[chipyard.TestHarness.RocketConfig.fir 291851:4]
    node _inflight_T_4 = not(d_clr_1) @[Monitor.scala 809:46 chipyard.TestHarness.RocketConfig.fir 291974:4]
    node _inflight_T_5 = and(inflight_1, _inflight_T_4) @[Monitor.scala 809:44 chipyard.TestHarness.RocketConfig.fir 291975:4]
    node d_opcodes_clr_1 = bits(_GEN_68, 39, 0) @[chipyard.TestHarness.RocketConfig.fir 291855:4]
    node _inflight_opcodes_T_4 = not(d_opcodes_clr_1) @[Monitor.scala 810:62 chipyard.TestHarness.RocketConfig.fir 291978:4]
    node _inflight_sizes_T_5 = and(inflight_sizes_1, _inflight_opcodes_T_4) @[Monitor.scala 811:56 chipyard.TestHarness.RocketConfig.fir 291983:4]
    reg watchdog_1 : UInt<32>, clock with :
      reset => (UInt<1>("h0"), watchdog_1) @[Monitor.scala 813:27 chipyard.TestHarness.RocketConfig.fir 291985:4]
    node _T_734 = orr(inflight_1) @[Monitor.scala 816:26 chipyard.TestHarness.RocketConfig.fir 291988:4]
    node _T_735 = not(_T_734) @[Monitor.scala 816:16 chipyard.TestHarness.RocketConfig.fir 291989:4]
    node _T_736 = eq(plusarg_reader_1.out, UInt<32>("h0")) @[Monitor.scala 816:39 chipyard.TestHarness.RocketConfig.fir 291990:4]
    node _T_737 = or(_T_735, _T_736) @[Monitor.scala 816:30 chipyard.TestHarness.RocketConfig.fir 291991:4]
    node _T_738 = lt(watchdog_1, plusarg_reader_1.out) @[Monitor.scala 816:59 chipyard.TestHarness.RocketConfig.fir 291992:4]
    node _T_739 = or(_T_737, _T_738) @[Monitor.scala 816:47 chipyard.TestHarness.RocketConfig.fir 291993:4]
    node _T_741 = or(_T_739, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 291995:4]
    node _T_742 = not(_T_741) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 291996:4]
    node _watchdog_T_2 = add(watchdog_1, UInt<32>("h1")) @[Monitor.scala 818:26 chipyard.TestHarness.RocketConfig.fir 292001:4]
    node _watchdog_T_3 = tail(_watchdog_T_2, 1) @[Monitor.scala 818:26 chipyard.TestHarness.RocketConfig.fir 292002:4]
    node _GEN_70 = mux(_d_first_T, UInt<32>("h0"), _watchdog_T_3) @[Monitor.scala 819:47 chipyard.TestHarness.RocketConfig.fir 292009:4 Monitor.scala 819:58 chipyard.TestHarness.RocketConfig.fir 292010:6 Monitor.scala 818:14 chipyard.TestHarness.RocketConfig.fir 292003:4]
    a_first_counter <= mux(reset, UInt<3>("h0"), _GEN_0) @[Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 291238:4 Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 291238:4]
    opcode <= mux(_T_565, io_in_a_bits_opcode, opcode) @[Monitor.scala 396:32 chipyard.TestHarness.RocketConfig.fir 291303:4 Monitor.scala 397:15 chipyard.TestHarness.RocketConfig.fir 291304:6 Monitor.scala 384:22 chipyard.TestHarness.RocketConfig.fir 291252:4]
    param <= mux(_T_565, io_in_a_bits_param, param) @[Monitor.scala 396:32 chipyard.TestHarness.RocketConfig.fir 291303:4 Monitor.scala 398:15 chipyard.TestHarness.RocketConfig.fir 291305:6 Monitor.scala 385:22 chipyard.TestHarness.RocketConfig.fir 291253:4]
    size <= mux(_T_565, io_in_a_bits_size, size) @[Monitor.scala 396:32 chipyard.TestHarness.RocketConfig.fir 291303:4 Monitor.scala 399:15 chipyard.TestHarness.RocketConfig.fir 291306:6 Monitor.scala 386:22 chipyard.TestHarness.RocketConfig.fir 291254:4]
    source <= mux(_T_565, io_in_a_bits_source, source) @[Monitor.scala 396:32 chipyard.TestHarness.RocketConfig.fir 291303:4 Monitor.scala 400:15 chipyard.TestHarness.RocketConfig.fir 291307:6 Monitor.scala 387:22 chipyard.TestHarness.RocketConfig.fir 291255:4]
    address <= mux(_T_565, io_in_a_bits_address, address) @[Monitor.scala 396:32 chipyard.TestHarness.RocketConfig.fir 291303:4 Monitor.scala 401:15 chipyard.TestHarness.RocketConfig.fir 291308:6 Monitor.scala 388:22 chipyard.TestHarness.RocketConfig.fir 291256:4]
    d_first_counter <= mux(reset, UInt<3>("h0"), _GEN_6) @[Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 291318:4 Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 291318:4]
    opcode_1 <= mux(_T_593, io_in_d_bits_opcode, opcode_1) @[Monitor.scala 549:32 chipyard.TestHarness.RocketConfig.fir 291392:4 Monitor.scala 550:15 chipyard.TestHarness.RocketConfig.fir 291393:6 Monitor.scala 535:22 chipyard.TestHarness.RocketConfig.fir 291332:4]
    param_1 <= mux(_T_593, io_in_d_bits_param, param_1) @[Monitor.scala 549:32 chipyard.TestHarness.RocketConfig.fir 291392:4 Monitor.scala 551:15 chipyard.TestHarness.RocketConfig.fir 291394:6 Monitor.scala 536:22 chipyard.TestHarness.RocketConfig.fir 291333:4]
    size_1 <= mux(_T_593, io_in_d_bits_size, size_1) @[Monitor.scala 549:32 chipyard.TestHarness.RocketConfig.fir 291392:4 Monitor.scala 552:15 chipyard.TestHarness.RocketConfig.fir 291395:6 Monitor.scala 537:22 chipyard.TestHarness.RocketConfig.fir 291334:4]
    source_1 <= mux(_T_593, io_in_d_bits_source, source_1) @[Monitor.scala 549:32 chipyard.TestHarness.RocketConfig.fir 291392:4 Monitor.scala 553:15 chipyard.TestHarness.RocketConfig.fir 291396:6 Monitor.scala 538:22 chipyard.TestHarness.RocketConfig.fir 291335:4]
    sink <= mux(_T_593, io_in_d_bits_sink, sink) @[Monitor.scala 549:32 chipyard.TestHarness.RocketConfig.fir 291392:4 Monitor.scala 554:15 chipyard.TestHarness.RocketConfig.fir 291397:6 Monitor.scala 539:22 chipyard.TestHarness.RocketConfig.fir 291336:4]
    denied <= mux(_T_593, io_in_d_bits_denied, denied) @[Monitor.scala 549:32 chipyard.TestHarness.RocketConfig.fir 291392:4 Monitor.scala 555:15 chipyard.TestHarness.RocketConfig.fir 291398:6 Monitor.scala 540:22 chipyard.TestHarness.RocketConfig.fir 291337:4]
    inflight <= mux(reset, UInt<10>("h0"), _inflight_T_2) @[Monitor.scala 611:27 chipyard.TestHarness.RocketConfig.fir 291400:4 Monitor.scala 611:27 chipyard.TestHarness.RocketConfig.fir 291400:4 Monitor.scala 702:14 chipyard.TestHarness.RocketConfig.fir 291669:4]
    inflight_opcodes <= mux(reset, UInt<40>("h0"), _inflight_opcodes_T_2) @[Monitor.scala 613:35 chipyard.TestHarness.RocketConfig.fir 291401:4 Monitor.scala 613:35 chipyard.TestHarness.RocketConfig.fir 291401:4 Monitor.scala 703:22 chipyard.TestHarness.RocketConfig.fir 291673:4]
    inflight_sizes <= mux(reset, UInt<40>("h0"), _inflight_sizes_T_2) @[Monitor.scala 615:33 chipyard.TestHarness.RocketConfig.fir 291402:4 Monitor.scala 615:33 chipyard.TestHarness.RocketConfig.fir 291402:4 Monitor.scala 704:20 chipyard.TestHarness.RocketConfig.fir 291677:4]
    a_first_counter_1 <= mux(reset, UInt<3>("h0"), _GEN_13) @[Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 291412:4 Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 291412:4]
    d_first_counter_1 <= mux(reset, UInt<3>("h0"), _GEN_14) @[Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 291434:4 Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 291434:4]
    watchdog <= mux(reset, UInt<32>("h0"), _GEN_57) @[Monitor.scala 706:27 chipyard.TestHarness.RocketConfig.fir 291678:4 Monitor.scala 706:27 chipyard.TestHarness.RocketConfig.fir 291678:4]
    inflight_1 <= mux(reset, UInt<10>("h0"), _inflight_T_5) @[Monitor.scala 723:35 chipyard.TestHarness.RocketConfig.fir 291703:4 Monitor.scala 723:35 chipyard.TestHarness.RocketConfig.fir 291703:4 Monitor.scala 809:22 chipyard.TestHarness.RocketConfig.fir 291976:4]
    inflight_sizes_1 <= mux(reset, UInt<40>("h0"), _inflight_sizes_T_5) @[Monitor.scala 725:35 chipyard.TestHarness.RocketConfig.fir 291705:4 Monitor.scala 725:35 chipyard.TestHarness.RocketConfig.fir 291705:4 Monitor.scala 811:22 chipyard.TestHarness.RocketConfig.fir 291984:4]
    d_first_counter_2 <= mux(reset, UInt<3>("h0"), _GEN_59) @[Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 291740:4 Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 291740:4]
    watchdog_1 <= mux(reset, UInt<32>("h0"), _GEN_70) @[Monitor.scala 813:27 chipyard.TestHarness.RocketConfig.fir 291985:4 Monitor.scala 813:27 chipyard.TestHarness.RocketConfig.fir 291985:4]
    node _GEN_98 = and(io_in_a_valid, _T_20) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290330:10]
    printf(clock, and(_GEN_98, _T_43), "Assertion failed: 'A' channel carries AcquireBlock type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290330:10]
    stop(clock, and(_GEN_98, _T_43), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290331:10]
    printf(clock, and(_GEN_98, _T_43), "Assertion failed: 'A' channel carries AcquireBlock from a client which does not support Probe (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290349:10]
    stop(clock, and(_GEN_98, _T_43), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290350:10]
    printf(clock, and(_GEN_98, _T_61), "Assertion failed: 'A' channel AcquireBlock carries invalid source ID (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290356:10]
    stop(clock, and(_GEN_98, _T_61), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290357:10]
    printf(clock, and(_GEN_98, _T_65), "Assertion failed: 'A' channel AcquireBlock smaller than a beat (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290364:10]
    stop(clock, and(_GEN_98, _T_65), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290365:10]
    printf(clock, and(_GEN_98, _T_68), "Assertion failed: 'A' channel AcquireBlock address not aligned to size (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290371:10]
    stop(clock, and(_GEN_98, _T_68), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290372:10]
    printf(clock, and(_GEN_98, _T_72), "Assertion failed: 'A' channel AcquireBlock carries invalid grow param (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290379:10]
    stop(clock, and(_GEN_98, _T_72), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290380:10]
    printf(clock, and(_GEN_98, _T_77), "Assertion failed: 'A' channel AcquireBlock contains invalid mask (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290388:10]
    stop(clock, and(_GEN_98, _T_77), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290389:10]
    printf(clock, and(_GEN_98, _T_81), "Assertion failed: 'A' channel AcquireBlock is corrupt (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290396:10]
    stop(clock, and(_GEN_98, _T_81), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290397:10]
    node _GEN_114 = and(io_in_a_valid, _T_82) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290428:10]
    printf(clock, and(_GEN_114, _T_43), "Assertion failed: 'A' channel carries AcquirePerm type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290428:10]
    stop(clock, and(_GEN_114, _T_43), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290429:10]
    printf(clock, and(_GEN_114, _T_43), "Assertion failed: 'A' channel carries AcquirePerm from a client which does not support Probe (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290447:10]
    stop(clock, and(_GEN_114, _T_43), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290448:10]
    printf(clock, and(_GEN_114, _T_61), "Assertion failed: 'A' channel AcquirePerm carries invalid source ID (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290454:10]
    stop(clock, and(_GEN_114, _T_61), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290455:10]
    printf(clock, and(_GEN_114, _T_65), "Assertion failed: 'A' channel AcquirePerm smaller than a beat (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290462:10]
    stop(clock, and(_GEN_114, _T_65), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290463:10]
    printf(clock, and(_GEN_114, _T_68), "Assertion failed: 'A' channel AcquirePerm address not aligned to size (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290469:10]
    stop(clock, and(_GEN_114, _T_68), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290470:10]
    printf(clock, and(_GEN_114, _T_72), "Assertion failed: 'A' channel AcquirePerm carries invalid grow param (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290477:10]
    stop(clock, and(_GEN_114, _T_72), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290478:10]
    printf(clock, and(_GEN_114, _T_138), "Assertion failed: 'A' channel AcquirePerm requests NtoB (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290485:10]
    stop(clock, and(_GEN_114, _T_138), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290486:10]
    printf(clock, and(_GEN_114, _T_77), "Assertion failed: 'A' channel AcquirePerm contains invalid mask (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290494:10]
    stop(clock, and(_GEN_114, _T_77), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290495:10]
    printf(clock, and(_GEN_114, _T_81), "Assertion failed: 'A' channel AcquirePerm is corrupt (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290502:10]
    stop(clock, and(_GEN_114, _T_81), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290503:10]
    node _GEN_132 = and(io_in_a_valid, _T_148) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290525:10]
    printf(clock, and(_GEN_132, _T_61), "Assertion failed: 'A' channel carries Get type which master claims it can't emit (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290525:10]
    stop(clock, and(_GEN_132, _T_61), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290526:10]
    printf(clock, and(_GEN_132, _T_176), "Assertion failed: 'A' channel carries Get type which slave claims it can't support (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290543:10]
    stop(clock, and(_GEN_132, _T_176), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290544:10]
    printf(clock, and(_GEN_132, _T_61), "Assertion failed: 'A' channel Get carries invalid source ID (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290550:10]
    stop(clock, and(_GEN_132, _T_61), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290551:10]
    printf(clock, and(_GEN_132, _T_68), "Assertion failed: 'A' channel Get address not aligned to size (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290557:10]
    stop(clock, and(_GEN_132, _T_68), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290558:10]
    printf(clock, and(_GEN_132, _T_186), "Assertion failed: 'A' channel Get carries invalid param (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290565:10]
    stop(clock, and(_GEN_132, _T_186), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290566:10]
    printf(clock, and(_GEN_132, _T_190), "Assertion failed: 'A' channel Get contains invalid mask (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290573:10]
    stop(clock, and(_GEN_132, _T_190), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290574:10]
    printf(clock, and(_GEN_132, _T_81), "Assertion failed: 'A' channel Get is corrupt (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290581:10]
    stop(clock, and(_GEN_132, _T_81), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290582:10]
    node _GEN_146 = and(io_in_a_valid, _T_195) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290616:10]
    printf(clock, and(_GEN_146, _T_221), "Assertion failed: 'A' channel carries PutFull type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290616:10]
    stop(clock, and(_GEN_146, _T_221), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290617:10]
    printf(clock, and(_GEN_146, _T_61), "Assertion failed: 'A' channel PutFull carries invalid source ID (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290623:10]
    stop(clock, and(_GEN_146, _T_61), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290624:10]
    printf(clock, and(_GEN_146, _T_68), "Assertion failed: 'A' channel PutFull address not aligned to size (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290630:10]
    stop(clock, and(_GEN_146, _T_68), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290631:10]
    printf(clock, and(_GEN_146, _T_186), "Assertion failed: 'A' channel PutFull carries invalid param (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290638:10]
    stop(clock, and(_GEN_146, _T_186), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290639:10]
    printf(clock, and(_GEN_146, _T_190), "Assertion failed: 'A' channel PutFull contains invalid mask (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290646:10]
    stop(clock, and(_GEN_146, _T_190), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290647:10]
    node _GEN_156 = and(io_in_a_valid, _T_236) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290681:10]
    printf(clock, and(_GEN_156, _T_221), "Assertion failed: 'A' channel carries PutPartial type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290681:10]
    stop(clock, and(_GEN_156, _T_221), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290682:10]
    printf(clock, and(_GEN_156, _T_61), "Assertion failed: 'A' channel PutPartial carries invalid source ID (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290688:10]
    stop(clock, and(_GEN_156, _T_61), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290689:10]
    printf(clock, and(_GEN_156, _T_68), "Assertion failed: 'A' channel PutPartial address not aligned to size (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290695:10]
    stop(clock, and(_GEN_156, _T_68), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290696:10]
    printf(clock, and(_GEN_156, _T_186), "Assertion failed: 'A' channel PutPartial carries invalid param (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290703:10]
    stop(clock, and(_GEN_156, _T_186), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290704:10]
    printf(clock, and(_GEN_156, _T_278), "Assertion failed: 'A' channel PutPartial contains invalid mask (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290713:10]
    stop(clock, and(_GEN_156, _T_278), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290714:10]
    node _GEN_166 = and(io_in_a_valid, _T_279) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290745:10]
    printf(clock, and(_GEN_166, _T_43), "Assertion failed: 'A' channel carries Arithmetic type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290745:10]
    stop(clock, and(_GEN_166, _T_43), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290746:10]
    printf(clock, and(_GEN_166, _T_61), "Assertion failed: 'A' channel Arithmetic carries invalid source ID (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290752:10]
    stop(clock, and(_GEN_166, _T_61), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290753:10]
    printf(clock, and(_GEN_166, _T_68), "Assertion failed: 'A' channel Arithmetic address not aligned to size (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290759:10]
    stop(clock, and(_GEN_166, _T_68), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290760:10]
    printf(clock, and(_GEN_166, _T_312), "Assertion failed: 'A' channel Arithmetic carries invalid opcode param (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290767:10]
    stop(clock, and(_GEN_166, _T_312), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290768:10]
    printf(clock, and(_GEN_166, _T_190), "Assertion failed: 'A' channel Arithmetic contains invalid mask (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290775:10]
    stop(clock, and(_GEN_166, _T_190), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290776:10]
    node _GEN_176 = and(io_in_a_valid, _T_317) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290807:10]
    printf(clock, and(_GEN_176, _T_43), "Assertion failed: 'A' channel carries Logical type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290807:10]
    stop(clock, and(_GEN_176, _T_43), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290808:10]
    printf(clock, and(_GEN_176, _T_61), "Assertion failed: 'A' channel Logical carries invalid source ID (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290814:10]
    stop(clock, and(_GEN_176, _T_61), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290815:10]
    printf(clock, and(_GEN_176, _T_68), "Assertion failed: 'A' channel Logical address not aligned to size (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290821:10]
    stop(clock, and(_GEN_176, _T_68), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290822:10]
    printf(clock, and(_GEN_176, _T_350), "Assertion failed: 'A' channel Logical carries invalid opcode param (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290829:10]
    stop(clock, and(_GEN_176, _T_350), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290830:10]
    printf(clock, and(_GEN_176, _T_190), "Assertion failed: 'A' channel Logical contains invalid mask (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290837:10]
    stop(clock, and(_GEN_176, _T_190), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290838:10]
    node _GEN_186 = and(io_in_a_valid, _T_355) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290869:10]
    printf(clock, and(_GEN_186, _T_43), "Assertion failed: 'A' channel carries Hint type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290869:10]
    stop(clock, and(_GEN_186, _T_43), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290870:10]
    printf(clock, and(_GEN_186, _T_61), "Assertion failed: 'A' channel Hint carries invalid source ID (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290876:10]
    stop(clock, and(_GEN_186, _T_61), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290877:10]
    printf(clock, and(_GEN_186, _T_68), "Assertion failed: 'A' channel Hint address not aligned to size (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290883:10]
    stop(clock, and(_GEN_186, _T_68), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290884:10]
    printf(clock, and(_GEN_186, _T_388), "Assertion failed: 'A' channel Hint carries invalid opcode param (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290891:10]
    stop(clock, and(_GEN_186, _T_388), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290892:10]
    printf(clock, and(_GEN_186, _T_190), "Assertion failed: 'A' channel Hint contains invalid mask (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290899:10]
    stop(clock, and(_GEN_186, _T_190), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290900:10]
    printf(clock, and(_GEN_186, _T_81), "Assertion failed: 'A' channel Hint is corrupt (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290907:10]
    stop(clock, and(_GEN_186, _T_81), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 290908:10]
    printf(clock, and(io_in_d_valid, _T_400), "Assertion failed: 'D' channel has invalid opcode (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 290918:8]
    stop(clock, and(io_in_d_valid, _T_400), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 290919:8]
    node _GEN_198 = and(io_in_d_valid, _T_401) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 290939:10]
    printf(clock, and(_GEN_198, _T_404), "Assertion failed: 'D' channel ReleaseAck carries invalid source ID (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 290939:10]
    stop(clock, and(_GEN_198, _T_404), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 290940:10]
    printf(clock, and(_GEN_198, _T_408), "Assertion failed: 'D' channel ReleaseAck smaller than a beat (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 290947:10]
    stop(clock, and(_GEN_198, _T_408), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 290948:10]
    printf(clock, and(_GEN_198, _T_412), "Assertion failed: 'D' channel ReleaseeAck carries invalid param (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 290955:10]
    stop(clock, and(_GEN_198, _T_412), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 290956:10]
    printf(clock, and(_GEN_198, _T_416), "Assertion failed: 'D' channel ReleaseAck is corrupt (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 290963:10]
    stop(clock, and(_GEN_198, _T_416), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 290964:10]
    printf(clock, and(_GEN_198, _T_420), "Assertion failed: 'D' channel ReleaseAck is denied (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 290971:10]
    stop(clock, and(_GEN_198, _T_420), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 290972:10]
    node _GEN_208 = and(io_in_d_valid, _T_421) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 290981:10]
    printf(clock, and(_GEN_208, _T_404), "Assertion failed: 'D' channel Grant carries invalid source ID (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 290981:10]
    stop(clock, and(_GEN_208, _T_404), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 290982:10]
    printf(clock, and(_GEN_208, _T_43), "Assertion failed: 'D' channel Grant carries invalid sink ID (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 290988:10]
    stop(clock, and(_GEN_208, _T_43), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 290989:10]
    printf(clock, and(_GEN_208, _T_408), "Assertion failed: 'D' channel Grant smaller than a beat (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 290996:10]
    stop(clock, and(_GEN_208, _T_408), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 290997:10]
    printf(clock, and(_GEN_208, _T_435), "Assertion failed: 'D' channel Grant carries invalid cap param (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291004:10]
    stop(clock, and(_GEN_208, _T_435), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291005:10]
    printf(clock, and(_GEN_208, _T_439), "Assertion failed: 'D' channel Grant carries toN param (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291012:10]
    stop(clock, and(_GEN_208, _T_439), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291013:10]
    printf(clock, and(_GEN_208, _T_416), "Assertion failed: 'D' channel Grant is corrupt (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291020:10]
    stop(clock, and(_GEN_208, _T_416), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291021:10]
    printf(clock, and(_GEN_208, _T_420), "Assertion failed: 'D' channel Grant is denied (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291029:10]
    stop(clock, and(_GEN_208, _T_420), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291030:10]
    node _GEN_222 = and(io_in_d_valid, _T_449) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291039:10]
    printf(clock, and(_GEN_222, _T_404), "Assertion failed: 'D' channel GrantData carries invalid source ID (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291039:10]
    stop(clock, and(_GEN_222, _T_404), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291040:10]
    printf(clock, and(_GEN_222, _T_43), "Assertion failed: 'D' channel GrantData carries invalid sink ID (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291046:10]
    stop(clock, and(_GEN_222, _T_43), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291047:10]
    printf(clock, and(_GEN_222, _T_408), "Assertion failed: 'D' channel GrantData smaller than a beat (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291054:10]
    stop(clock, and(_GEN_222, _T_408), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291055:10]
    printf(clock, and(_GEN_222, _T_435), "Assertion failed: 'D' channel GrantData carries invalid cap param (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291062:10]
    stop(clock, and(_GEN_222, _T_435), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291063:10]
    printf(clock, and(_GEN_222, _T_439), "Assertion failed: 'D' channel GrantData carries toN param (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291070:10]
    stop(clock, and(_GEN_222, _T_439), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291071:10]
    printf(clock, and(_GEN_222, _T_472), "Assertion failed: 'D' channel GrantData is denied but not corrupt (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291079:10]
    stop(clock, and(_GEN_222, _T_472), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291080:10]
    printf(clock, and(_GEN_222, _T_420), "Assertion failed: 'D' channel GrantData is denied (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291088:10]
    stop(clock, and(_GEN_222, _T_420), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291089:10]
    node _GEN_236 = and(io_in_d_valid, _T_478) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291098:10]
    printf(clock, and(_GEN_236, _T_404), "Assertion failed: 'D' channel AccessAck carries invalid source ID (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291098:10]
    stop(clock, and(_GEN_236, _T_404), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291099:10]
    printf(clock, and(_GEN_236, _T_412), "Assertion failed: 'D' channel AccessAck carries invalid param (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291106:10]
    stop(clock, and(_GEN_236, _T_412), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291107:10]
    printf(clock, and(_GEN_236, _T_416), "Assertion failed: 'D' channel AccessAck is corrupt (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291114:10]
    stop(clock, and(_GEN_236, _T_416), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291115:10]
    printf(clock, and(_GEN_236, _T_420), "Assertion failed: 'D' channel AccessAck is denied (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291123:10]
    stop(clock, and(_GEN_236, _T_420), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291124:10]
    node _GEN_244 = and(io_in_d_valid, _T_495) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291133:10]
    printf(clock, and(_GEN_244, _T_404), "Assertion failed: 'D' channel AccessAckData carries invalid source ID (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291133:10]
    stop(clock, and(_GEN_244, _T_404), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291134:10]
    printf(clock, and(_GEN_244, _T_412), "Assertion failed: 'D' channel AccessAckData carries invalid param (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291141:10]
    stop(clock, and(_GEN_244, _T_412), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291142:10]
    printf(clock, and(_GEN_244, _T_472), "Assertion failed: 'D' channel AccessAckData is denied but not corrupt (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291150:10]
    stop(clock, and(_GEN_244, _T_472), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291151:10]
    printf(clock, and(_GEN_244, _T_420), "Assertion failed: 'D' channel AccessAckData is denied (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291159:10]
    stop(clock, and(_GEN_244, _T_420), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291160:10]
    node _GEN_252 = and(io_in_d_valid, _T_513) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291169:10]
    printf(clock, and(_GEN_252, _T_404), "Assertion failed: 'D' channel HintAck carries invalid source ID (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291169:10]
    stop(clock, and(_GEN_252, _T_404), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291170:10]
    printf(clock, and(_GEN_252, _T_412), "Assertion failed: 'D' channel HintAck carries invalid param (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291177:10]
    stop(clock, and(_GEN_252, _T_412), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291178:10]
    printf(clock, and(_GEN_252, _T_416), "Assertion failed: 'D' channel HintAck is corrupt (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291185:10]
    stop(clock, and(_GEN_252, _T_416), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291186:10]
    printf(clock, and(_GEN_252, _T_420), "Assertion failed: 'D' channel HintAck is denied (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291194:10]
    stop(clock, and(_GEN_252, _T_420), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291195:10]
    printf(clock, and(_T_543, _T_547), "Assertion failed: 'A' channel opcode changed within multibeat operation (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 291265:8]
    stop(clock, and(_T_543, _T_547), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 291266:8]
    printf(clock, and(_T_543, _T_551), "Assertion failed: 'A' channel param changed within multibeat operation (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 291273:8]
    stop(clock, and(_T_543, _T_551), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 291274:8]
    printf(clock, and(_T_543, _T_555), "Assertion failed: 'A' channel size changed within multibeat operation (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 291281:8]
    stop(clock, and(_T_543, _T_555), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 291282:8]
    printf(clock, and(_T_543, _T_559), "Assertion failed: 'A' channel source changed within multibeat operation (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 291289:8]
    stop(clock, and(_T_543, _T_559), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 291290:8]
    printf(clock, and(_T_543, _T_563), "Assertion failed: 'A' channel address changed with multibeat operation (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 291297:8]
    stop(clock, and(_T_543, _T_563), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 291298:8]
    printf(clock, and(_T_567, _T_571), "Assertion failed: 'D' channel opcode changed within multibeat operation (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291346:8]
    stop(clock, and(_T_567, _T_571), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291347:8]
    printf(clock, and(_T_567, _T_575), "Assertion failed: 'D' channel param changed within multibeat operation (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291354:8]
    stop(clock, and(_T_567, _T_575), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291355:8]
    printf(clock, and(_T_567, _T_579), "Assertion failed: 'D' channel size changed within multibeat operation (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291362:8]
    stop(clock, and(_T_567, _T_579), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291363:8]
    printf(clock, and(_T_567, _T_583), "Assertion failed: 'D' channel source changed within multibeat operation (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291370:8]
    stop(clock, and(_T_567, _T_583), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291371:8]
    printf(clock, and(_T_567, _T_587), "Assertion failed: 'D' channel sink changed with multibeat operation (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291378:8]
    stop(clock, and(_T_567, _T_587), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291379:8]
    printf(clock, and(_T_567, _T_591), "Assertion failed: 'D' channel denied changed with multibeat operation (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291386:8]
    stop(clock, and(_T_567, _T_591), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291387:8]
    printf(clock, and(_T_597, _T_604), "Assertion failed: 'A' channel re-used a source ID (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 291531:8]
    stop(clock, and(_T_597, _T_604), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 291532:8]
    printf(clock, and(_T_608, _T_623), "Assertion failed: 'D' channel acknowledged for nothing inflight (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291591:8]
    stop(clock, and(_T_608, _T_623), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291592:8]
    node _GEN_260 = and(_T_608, same_cycle_resp) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291602:10]
    printf(clock, and(_GEN_260, _T_629), "Assertion failed: 'D' channel contains improper opcode response (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291602:10]
    stop(clock, and(_GEN_260, _T_629), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291603:10]
    printf(clock, and(_GEN_260, _T_633), "Assertion failed: 'D' channel contains improper response size (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291610:10]
    stop(clock, and(_GEN_260, _T_633), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291611:10]
    node _GEN_264 = not(same_cycle_resp) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291624:10]
    node _GEN_265 = and(_T_608, _GEN_264) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291624:10]
    printf(clock, and(_GEN_265, _T_641), "Assertion failed: 'D' channel contains improper opcode response (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291624:10]
    stop(clock, and(_GEN_265, _T_641), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291625:10]
    printf(clock, and(_GEN_265, _T_645), "Assertion failed: 'D' channel contains improper response size (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291632:10]
    stop(clock, and(_GEN_265, _T_645), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291633:10]
    printf(clock, and(_T_652, _T_657), "Assertion failed: ready check\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291651:8]
    stop(clock, and(_T_652, _T_657), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291652:8]
    printf(clock, _T_664, "Assertion failed: 'A' and 'D' concurrent, despite minlatency 3 (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291663:6]
    stop(clock, _T_664, 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291664:6]
    printf(clock, _T_673, "Assertion failed: TileLink timeout expired (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 291691:6]
    stop(clock, _T_673, 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 291692:6]
    printf(clock, and(_T_696, _T_709), "Assertion failed: 'D' channel acknowledged for nothing inflight (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291913:8]
    stop(clock, and(_T_696, _T_709), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291914:8]
    printf(clock, and(_T_696, _T_717), "Assertion failed: 'D' channel contains improper response size (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291934:10]
    stop(clock, and(_T_696, _T_717), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 291935:10]
    printf(clock, _T_742, "Assertion failed: TileLink timeout expired (connected at SerialAdapter.scala:328:92)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 291998:6]
    stop(clock, _T_742, 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 291999:6]

  module Repeater_7_inTestHarness : @[chipyard.TestHarness.RocketConfig.fir 292013:2]
    input clock : Clock @[chipyard.TestHarness.RocketConfig.fir 292014:4]
    input reset : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 292015:4]
    input io_repeat : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 292016:4]
    output io_full : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 292016:4]
    output io_enq_ready : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 292016:4]
    input io_enq_valid : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 292016:4]
    input io_enq_bits_opcode : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 292016:4]
    input io_enq_bits_param : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 292016:4]
    input io_enq_bits_size : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 292016:4]
    input io_enq_bits_source : UInt<4> @[chipyard.TestHarness.RocketConfig.fir 292016:4]
    input io_enq_bits_address : UInt<29> @[chipyard.TestHarness.RocketConfig.fir 292016:4]
    input io_enq_bits_mask : UInt<8> @[chipyard.TestHarness.RocketConfig.fir 292016:4]
    input io_enq_bits_corrupt : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 292016:4]
    input io_deq_ready : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 292016:4]
    output io_deq_valid : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 292016:4]
    output io_deq_bits_opcode : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 292016:4]
    output io_deq_bits_param : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 292016:4]
    output io_deq_bits_size : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 292016:4]
    output io_deq_bits_source : UInt<4> @[chipyard.TestHarness.RocketConfig.fir 292016:4]
    output io_deq_bits_address : UInt<29> @[chipyard.TestHarness.RocketConfig.fir 292016:4]
    output io_deq_bits_mask : UInt<8> @[chipyard.TestHarness.RocketConfig.fir 292016:4]
    output io_deq_bits_corrupt : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 292016:4]

    reg full : UInt<1>, clock with :
      reset => (UInt<1>("h0"), full) @[Repeater.scala 19:21 chipyard.TestHarness.RocketConfig.fir 292018:4]
    reg saved_opcode : UInt<3>, clock with :
      reset => (UInt<1>("h0"), saved_opcode) @[Repeater.scala 20:18 chipyard.TestHarness.RocketConfig.fir 292019:4]
    reg saved_param : UInt<3>, clock with :
      reset => (UInt<1>("h0"), saved_param) @[Repeater.scala 20:18 chipyard.TestHarness.RocketConfig.fir 292019:4]
    reg saved_size : UInt<3>, clock with :
      reset => (UInt<1>("h0"), saved_size) @[Repeater.scala 20:18 chipyard.TestHarness.RocketConfig.fir 292019:4]
    reg saved_source : UInt<4>, clock with :
      reset => (UInt<1>("h0"), saved_source) @[Repeater.scala 20:18 chipyard.TestHarness.RocketConfig.fir 292019:4]
    reg saved_address : UInt<29>, clock with :
      reset => (UInt<1>("h0"), saved_address) @[Repeater.scala 20:18 chipyard.TestHarness.RocketConfig.fir 292019:4]
    reg saved_mask : UInt<8>, clock with :
      reset => (UInt<1>("h0"), saved_mask) @[Repeater.scala 20:18 chipyard.TestHarness.RocketConfig.fir 292019:4]
    reg saved_corrupt : UInt<1>, clock with :
      reset => (UInt<1>("h0"), saved_corrupt) @[Repeater.scala 20:18 chipyard.TestHarness.RocketConfig.fir 292019:4]
    node _io_enq_ready_T = not(full) @[Repeater.scala 24:35 chipyard.TestHarness.RocketConfig.fir 292022:4]
    node _T = and(io_enq_ready, io_enq_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.RocketConfig.fir 292035:4]
    node _T_1 = and(_T, io_repeat) @[Repeater.scala 28:23 chipyard.TestHarness.RocketConfig.fir 292036:4]
    node _GEN_0 = or(_T_1, full) @[Repeater.scala 28:38 chipyard.TestHarness.RocketConfig.fir 292037:4 Repeater.scala 28:45 chipyard.TestHarness.RocketConfig.fir 292038:6 Repeater.scala 19:21 chipyard.TestHarness.RocketConfig.fir 292018:4]
    node _T_2 = and(io_deq_ready, io_deq_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.RocketConfig.fir 292048:4]
    node _T_3 = not(io_repeat) @[Repeater.scala 29:26 chipyard.TestHarness.RocketConfig.fir 292049:4]
    node _T_4 = and(_T_2, _T_3) @[Repeater.scala 29:23 chipyard.TestHarness.RocketConfig.fir 292050:4]
    node _GEN_9 = mux(_T_4, UInt<1>("h0"), _GEN_0) @[Repeater.scala 29:38 chipyard.TestHarness.RocketConfig.fir 292051:4 Repeater.scala 29:45 chipyard.TestHarness.RocketConfig.fir 292052:6]
    io_full <= full @[Repeater.scala 26:11 chipyard.TestHarness.RocketConfig.fir 292034:4]
    io_enq_ready <= and(io_deq_ready, _io_enq_ready_T) @[Repeater.scala 24:32 chipyard.TestHarness.RocketConfig.fir 292023:4]
    io_deq_valid <= or(io_enq_valid, full) @[Repeater.scala 23:32 chipyard.TestHarness.RocketConfig.fir 292020:4]
    io_deq_bits_opcode <= mux(full, saved_opcode, io_enq_bits_opcode) @[Repeater.scala 25:21 chipyard.TestHarness.RocketConfig.fir 292025:4]
    io_deq_bits_param <= mux(full, saved_param, io_enq_bits_param) @[Repeater.scala 25:21 chipyard.TestHarness.RocketConfig.fir 292025:4]
    io_deq_bits_size <= mux(full, saved_size, io_enq_bits_size) @[Repeater.scala 25:21 chipyard.TestHarness.RocketConfig.fir 292025:4]
    io_deq_bits_source <= mux(full, saved_source, io_enq_bits_source) @[Repeater.scala 25:21 chipyard.TestHarness.RocketConfig.fir 292025:4]
    io_deq_bits_address <= mux(full, saved_address, io_enq_bits_address) @[Repeater.scala 25:21 chipyard.TestHarness.RocketConfig.fir 292025:4]
    io_deq_bits_mask <= mux(full, saved_mask, io_enq_bits_mask) @[Repeater.scala 25:21 chipyard.TestHarness.RocketConfig.fir 292025:4]
    io_deq_bits_corrupt <= mux(full, saved_corrupt, io_enq_bits_corrupt) @[Repeater.scala 25:21 chipyard.TestHarness.RocketConfig.fir 292025:4]
    full <= mux(reset, UInt<1>("h0"), _GEN_9) @[Repeater.scala 19:21 chipyard.TestHarness.RocketConfig.fir 292018:4 Repeater.scala 19:21 chipyard.TestHarness.RocketConfig.fir 292018:4]
    saved_opcode <= mux(_T_1, io_enq_bits_opcode, saved_opcode) @[Repeater.scala 28:38 chipyard.TestHarness.RocketConfig.fir 292037:4 Repeater.scala 28:62 chipyard.TestHarness.RocketConfig.fir 292046:6 Repeater.scala 20:18 chipyard.TestHarness.RocketConfig.fir 292019:4]
    saved_param <= mux(_T_1, io_enq_bits_param, saved_param) @[Repeater.scala 28:38 chipyard.TestHarness.RocketConfig.fir 292037:4 Repeater.scala 28:62 chipyard.TestHarness.RocketConfig.fir 292045:6 Repeater.scala 20:18 chipyard.TestHarness.RocketConfig.fir 292019:4]
    saved_size <= mux(_T_1, io_enq_bits_size, saved_size) @[Repeater.scala 28:38 chipyard.TestHarness.RocketConfig.fir 292037:4 Repeater.scala 28:62 chipyard.TestHarness.RocketConfig.fir 292044:6 Repeater.scala 20:18 chipyard.TestHarness.RocketConfig.fir 292019:4]
    saved_source <= mux(_T_1, io_enq_bits_source, saved_source) @[Repeater.scala 28:38 chipyard.TestHarness.RocketConfig.fir 292037:4 Repeater.scala 28:62 chipyard.TestHarness.RocketConfig.fir 292043:6 Repeater.scala 20:18 chipyard.TestHarness.RocketConfig.fir 292019:4]
    saved_address <= mux(_T_1, io_enq_bits_address, saved_address) @[Repeater.scala 28:38 chipyard.TestHarness.RocketConfig.fir 292037:4 Repeater.scala 28:62 chipyard.TestHarness.RocketConfig.fir 292042:6 Repeater.scala 20:18 chipyard.TestHarness.RocketConfig.fir 292019:4]
    saved_mask <= mux(_T_1, io_enq_bits_mask, saved_mask) @[Repeater.scala 28:38 chipyard.TestHarness.RocketConfig.fir 292037:4 Repeater.scala 28:62 chipyard.TestHarness.RocketConfig.fir 292041:6 Repeater.scala 20:18 chipyard.TestHarness.RocketConfig.fir 292019:4]
    saved_corrupt <= mux(_T_1, io_enq_bits_corrupt, saved_corrupt) @[Repeater.scala 28:38 chipyard.TestHarness.RocketConfig.fir 292037:4 Repeater.scala 28:62 chipyard.TestHarness.RocketConfig.fir 292039:6 Repeater.scala 20:18 chipyard.TestHarness.RocketConfig.fir 292019:4]

  module TLFragmenter_8_inTestHarness : @[chipyard.TestHarness.RocketConfig.fir 292055:2]
    input clock : Clock @[chipyard.TestHarness.RocketConfig.fir 292056:4]
    input reset : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 292057:4]
    output auto_in_a_ready : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 292058:4]
    input auto_in_a_valid : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 292058:4]
    input auto_in_a_bits_opcode : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 292058:4]
    input auto_in_a_bits_param : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 292058:4]
    input auto_in_a_bits_size : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 292058:4]
    input auto_in_a_bits_source : UInt<4> @[chipyard.TestHarness.RocketConfig.fir 292058:4]
    input auto_in_a_bits_address : UInt<29> @[chipyard.TestHarness.RocketConfig.fir 292058:4]
    input auto_in_a_bits_mask : UInt<8> @[chipyard.TestHarness.RocketConfig.fir 292058:4]
    input auto_in_a_bits_data : UInt<64> @[chipyard.TestHarness.RocketConfig.fir 292058:4]
    input auto_in_a_bits_corrupt : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 292058:4]
    input auto_in_d_ready : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 292058:4]
    output auto_in_d_valid : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 292058:4]
    output auto_in_d_bits_opcode : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 292058:4]
    output auto_in_d_bits_param : UInt<2> @[chipyard.TestHarness.RocketConfig.fir 292058:4]
    output auto_in_d_bits_size : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 292058:4]
    output auto_in_d_bits_source : UInt<4> @[chipyard.TestHarness.RocketConfig.fir 292058:4]
    output auto_in_d_bits_sink : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 292058:4]
    output auto_in_d_bits_denied : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 292058:4]
    output auto_in_d_bits_data : UInt<64> @[chipyard.TestHarness.RocketConfig.fir 292058:4]
    output auto_in_d_bits_corrupt : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 292058:4]
    input auto_out_a_ready : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 292058:4]
    output auto_out_a_valid : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 292058:4]
    output auto_out_a_bits_opcode : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 292058:4]
    output auto_out_a_bits_param : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 292058:4]
    output auto_out_a_bits_size : UInt<2> @[chipyard.TestHarness.RocketConfig.fir 292058:4]
    output auto_out_a_bits_source : UInt<8> @[chipyard.TestHarness.RocketConfig.fir 292058:4]
    output auto_out_a_bits_address : UInt<29> @[chipyard.TestHarness.RocketConfig.fir 292058:4]
    output auto_out_a_bits_mask : UInt<8> @[chipyard.TestHarness.RocketConfig.fir 292058:4]
    output auto_out_a_bits_data : UInt<64> @[chipyard.TestHarness.RocketConfig.fir 292058:4]
    output auto_out_a_bits_corrupt : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 292058:4]
    output auto_out_d_ready : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 292058:4]
    input auto_out_d_valid : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 292058:4]
    input auto_out_d_bits_opcode : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 292058:4]
    input auto_out_d_bits_param : UInt<2> @[chipyard.TestHarness.RocketConfig.fir 292058:4]
    input auto_out_d_bits_size : UInt<2> @[chipyard.TestHarness.RocketConfig.fir 292058:4]
    input auto_out_d_bits_source : UInt<8> @[chipyard.TestHarness.RocketConfig.fir 292058:4]
    input auto_out_d_bits_sink : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 292058:4]
    input auto_out_d_bits_denied : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 292058:4]
    input auto_out_d_bits_data : UInt<64> @[chipyard.TestHarness.RocketConfig.fir 292058:4]
    input auto_out_d_bits_corrupt : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 292058:4]

    inst monitor of TLMonitor_56_inTestHarness @[Nodes.scala 24:25 chipyard.TestHarness.RocketConfig.fir 292065:4]
    inst repeater of Repeater_7_inTestHarness @[Fragmenter.scala 262:30 chipyard.TestHarness.RocketConfig.fir 292167:4]
    reg acknum : UInt<3>, clock with :
      reset => (UInt<1>("h0"), acknum) @[Fragmenter.scala 189:29 chipyard.TestHarness.RocketConfig.fir 292092:4]
    reg dOrig : UInt<3>, clock with :
      reset => (UInt<1>("h0"), dOrig) @[Fragmenter.scala 190:24 chipyard.TestHarness.RocketConfig.fir 292093:4]
    reg dToggle : UInt<1>, clock with :
      reset => (UInt<1>("h0"), dToggle) @[Fragmenter.scala 191:30 chipyard.TestHarness.RocketConfig.fir 292094:4]
    node dFragnum = bits(auto_out_d_bits_source, 2, 0) @[Fragmenter.scala 192:41 chipyard.TestHarness.RocketConfig.fir 292095:4]
    node dFirst = eq(acknum, UInt<3>("h0")) @[Fragmenter.scala 193:29 chipyard.TestHarness.RocketConfig.fir 292096:4]
    node dLast = eq(dFragnum, UInt<3>("h0")) @[Fragmenter.scala 194:30 chipyard.TestHarness.RocketConfig.fir 292097:4]
    node dsizeOH = dshlw(UInt<4>("h1"), auto_out_d_bits_size) @[OneHot.scala 65:12 chipyard.TestHarness.RocketConfig.fir 292099:4]
    node _dsizeOH1_T_1 = dshlw(UInt<6>("h7"), auto_out_d_bits_size) @[package.scala 234:77 chipyard.TestHarness.RocketConfig.fir 292102:4]
    node _dsizeOH1_T_2 = bits(_dsizeOH1_T_1, 2, 0) @[package.scala 234:82 chipyard.TestHarness.RocketConfig.fir 292103:4]
    node dsizeOH1 = not(_dsizeOH1_T_2) @[package.scala 234:46 chipyard.TestHarness.RocketConfig.fir 292104:4]
    node dHasData = bits(auto_out_d_bits_opcode, 0, 0) @[Edges.scala 105:36 chipyard.TestHarness.RocketConfig.fir 292105:4]
    node _ack_decrement_T = shr(dsizeOH, 3) @[Fragmenter.scala 204:60 chipyard.TestHarness.RocketConfig.fir 292121:4]
    node ack_decrement = or(dHasData, _ack_decrement_T) @[Fragmenter.scala 204:32 chipyard.TestHarness.RocketConfig.fir 292122:4]
    node _dFirst_size_T = shl(dFragnum, 3) @[Fragmenter.scala 206:47 chipyard.TestHarness.RocketConfig.fir 292123:4]
    node _GEN_7 = pad(dsizeOH1, 6) @[Fragmenter.scala 206:69 chipyard.TestHarness.RocketConfig.fir 292124:4]
    node dFirst_size_lo = or(_dFirst_size_T, _GEN_7) @[Fragmenter.scala 206:69 chipyard.TestHarness.RocketConfig.fir 292124:4]
    node _dFirst_size_T_1 = shl(dFirst_size_lo, 1) @[package.scala 232:35 chipyard.TestHarness.RocketConfig.fir 292125:4]
    node _dFirst_size_T_2 = or(_dFirst_size_T_1, UInt<7>("h1")) @[package.scala 232:40 chipyard.TestHarness.RocketConfig.fir 292126:4]
    node _dFirst_size_T_3 = cat(UInt<1>("h0"), dFirst_size_lo) @[Cat.scala 30:58 chipyard.TestHarness.RocketConfig.fir 292127:4]
    node _dFirst_size_T_4 = not(_dFirst_size_T_3) @[package.scala 232:53 chipyard.TestHarness.RocketConfig.fir 292128:4]
    node _dFirst_size_T_5 = and(_dFirst_size_T_2, _dFirst_size_T_4) @[package.scala 232:51 chipyard.TestHarness.RocketConfig.fir 292129:4]
    node dFirst_size_hi = bits(_dFirst_size_T_5, 6, 4) @[OneHot.scala 30:18 chipyard.TestHarness.RocketConfig.fir 292130:4]
    node dFirst_size_lo_1 = bits(_dFirst_size_T_5, 3, 0) @[OneHot.scala 31:18 chipyard.TestHarness.RocketConfig.fir 292131:4]
    node dFirst_size_hi_1 = orr(dFirst_size_hi) @[OneHot.scala 32:14 chipyard.TestHarness.RocketConfig.fir 292132:4]
    node _GEN_8 = pad(dFirst_size_hi, 4) @[OneHot.scala 32:28 chipyard.TestHarness.RocketConfig.fir 292133:4]
    node _dFirst_size_T_6 = or(_GEN_8, dFirst_size_lo_1) @[OneHot.scala 32:28 chipyard.TestHarness.RocketConfig.fir 292133:4]
    node dFirst_size_hi_2 = bits(_dFirst_size_T_6, 3, 2) @[OneHot.scala 30:18 chipyard.TestHarness.RocketConfig.fir 292134:4]
    node dFirst_size_lo_2 = bits(_dFirst_size_T_6, 1, 0) @[OneHot.scala 31:18 chipyard.TestHarness.RocketConfig.fir 292135:4]
    node dFirst_size_hi_3 = orr(dFirst_size_hi_2) @[OneHot.scala 32:14 chipyard.TestHarness.RocketConfig.fir 292136:4]
    node _dFirst_size_T_7 = or(dFirst_size_hi_2, dFirst_size_lo_2) @[OneHot.scala 32:28 chipyard.TestHarness.RocketConfig.fir 292137:4]
    node dFirst_size_lo_3 = bits(_dFirst_size_T_7, 1, 1) @[CircuitMath.scala 30:8 chipyard.TestHarness.RocketConfig.fir 292138:4]
    node dFirst_size = cat(dFirst_size_hi_1, cat(dFirst_size_hi_3, dFirst_size_lo_3)) @[Cat.scala 30:58 chipyard.TestHarness.RocketConfig.fir 292140:4]
    node _drop_T = not(dHasData) @[Fragmenter.scala 222:20 chipyard.TestHarness.RocketConfig.fir 292153:4]
    node _drop_T_2 = not(dLast) @[Fragmenter.scala 222:33 chipyard.TestHarness.RocketConfig.fir 292155:4]
    node drop = and(_drop_T, _drop_T_2) @[Fragmenter.scala 222:30 chipyard.TestHarness.RocketConfig.fir 292156:4]
    node bundleOut_0_d_ready = or(auto_in_d_ready, drop) @[Fragmenter.scala 223:35 chipyard.TestHarness.RocketConfig.fir 292157:4]
    node _T_7 = and(bundleOut_0_d_ready, auto_out_d_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.RocketConfig.fir 292141:4]
    node _GEN_9 = pad(ack_decrement, 3) @[Fragmenter.scala 209:55 chipyard.TestHarness.RocketConfig.fir 292143:6]
    node _acknum_T = sub(acknum, _GEN_9) @[Fragmenter.scala 209:55 chipyard.TestHarness.RocketConfig.fir 292143:6]
    node _acknum_T_1 = tail(_acknum_T, 1) @[Fragmenter.scala 209:55 chipyard.TestHarness.RocketConfig.fir 292144:6]
    node _acknum_T_2 = mux(dFirst, dFragnum, _acknum_T_1) @[Fragmenter.scala 209:24 chipyard.TestHarness.RocketConfig.fir 292145:6]
    node _dToggle_T = bits(auto_out_d_bits_source, 3, 3) @[Fragmenter.scala 212:41 chipyard.TestHarness.RocketConfig.fir 292149:8]
    node _GEN_0 = mux(dFirst, dFirst_size, dOrig) @[Fragmenter.scala 210:25 chipyard.TestHarness.RocketConfig.fir 292147:6 Fragmenter.scala 211:19 chipyard.TestHarness.RocketConfig.fir 292148:8 Fragmenter.scala 190:24 chipyard.TestHarness.RocketConfig.fir 292093:4]
    node _GEN_1 = mux(dFirst, _dToggle_T, dToggle) @[Fragmenter.scala 210:25 chipyard.TestHarness.RocketConfig.fir 292147:6 Fragmenter.scala 212:21 chipyard.TestHarness.RocketConfig.fir 292150:8 Fragmenter.scala 191:30 chipyard.TestHarness.RocketConfig.fir 292094:4]
    node _GEN_2 = mux(_T_7, _acknum_T_2, acknum) @[Fragmenter.scala 208:29 chipyard.TestHarness.RocketConfig.fir 292142:4 Fragmenter.scala 209:18 chipyard.TestHarness.RocketConfig.fir 292146:6 Fragmenter.scala 189:29 chipyard.TestHarness.RocketConfig.fir 292092:4]
    node _GEN_4 = mux(_T_7, _GEN_1, dToggle) @[Fragmenter.scala 208:29 chipyard.TestHarness.RocketConfig.fir 292142:4 Fragmenter.scala 191:30 chipyard.TestHarness.RocketConfig.fir 292094:4]
    node _bundleIn_0_d_valid_T = not(drop) @[Fragmenter.scala 224:39 chipyard.TestHarness.RocketConfig.fir 292159:4]
    node _aFrag_T = gt(repeater.io_deq_bits_size, UInt<3>("h3")) @[Fragmenter.scala 285:31 chipyard.TestHarness.RocketConfig.fir 292192:4]
    node aFrag = mux(_aFrag_T, UInt<3>("h3"), repeater.io_deq_bits_size) @[Fragmenter.scala 285:24 chipyard.TestHarness.RocketConfig.fir 292193:4]
    node _aOrigOH1_T_1 = dshlw(UInt<13>("h3f"), repeater.io_deq_bits_size) @[package.scala 234:77 chipyard.TestHarness.RocketConfig.fir 292195:4]
    node _aOrigOH1_T_2 = bits(_aOrigOH1_T_1, 5, 0) @[package.scala 234:82 chipyard.TestHarness.RocketConfig.fir 292196:4]
    node aOrigOH1 = not(_aOrigOH1_T_2) @[package.scala 234:46 chipyard.TestHarness.RocketConfig.fir 292197:4]
    node _aFragOH1_T_1 = dshlw(UInt<10>("h7"), aFrag) @[package.scala 234:77 chipyard.TestHarness.RocketConfig.fir 292199:4]
    node _aFragOH1_T_2 = bits(_aFragOH1_T_1, 2, 0) @[package.scala 234:82 chipyard.TestHarness.RocketConfig.fir 292200:4]
    node aFragOH1 = not(_aFragOH1_T_2) @[package.scala 234:46 chipyard.TestHarness.RocketConfig.fir 292201:4]
    node _aHasData_opdata_T = bits(repeater.io_deq_bits_opcode, 2, 2) @[Edges.scala 91:37 chipyard.TestHarness.RocketConfig.fir 292202:4]
    node aHasData = not(_aHasData_opdata_T) @[Edges.scala 91:28 chipyard.TestHarness.RocketConfig.fir 292203:4]
    reg gennum : UInt<3>, clock with :
      reset => (UInt<1>("h0"), gennum) @[Fragmenter.scala 291:29 chipyard.TestHarness.RocketConfig.fir 292205:4]
    node aFirst = eq(gennum, UInt<3>("h0")) @[Fragmenter.scala 292:29 chipyard.TestHarness.RocketConfig.fir 292206:4]
    node _old_gennum1_T = shr(aOrigOH1, 3) @[Fragmenter.scala 293:48 chipyard.TestHarness.RocketConfig.fir 292207:4]
    node _old_gennum1_T_1 = sub(gennum, UInt<3>("h1")) @[Fragmenter.scala 293:79 chipyard.TestHarness.RocketConfig.fir 292208:4]
    node _old_gennum1_T_2 = tail(_old_gennum1_T_1, 1) @[Fragmenter.scala 293:79 chipyard.TestHarness.RocketConfig.fir 292209:4]
    node old_gennum1 = mux(aFirst, _old_gennum1_T, _old_gennum1_T_2) @[Fragmenter.scala 293:30 chipyard.TestHarness.RocketConfig.fir 292210:4]
    node _new_gennum_T = not(old_gennum1) @[Fragmenter.scala 294:28 chipyard.TestHarness.RocketConfig.fir 292211:4]
    node new_gennum = not(_new_gennum_T) @[Fragmenter.scala 294:26 chipyard.TestHarness.RocketConfig.fir 292214:4]
    reg aToggle_r : UInt<1>, clock with :
      reset => (UInt<1>("h0"), aToggle_r) @[Reg.scala 15:16 chipyard.TestHarness.RocketConfig.fir 292221:4]
    node _GEN_5 = mux(aFirst, dToggle, aToggle_r) @[Reg.scala 16:19 chipyard.TestHarness.RocketConfig.fir 292222:4 Reg.scala 16:23 chipyard.TestHarness.RocketConfig.fir 292223:6 Reg.scala 15:16 chipyard.TestHarness.RocketConfig.fir 292221:4]
    node bundleOut_0_a_bits_source_hi_lo = not(_GEN_5) @[Fragmenter.scala 297:23 chipyard.TestHarness.RocketConfig.fir 292226:4]
    node bundleOut_0_a_valid = repeater.io_deq_valid @[Nodes.scala 1207:84 chipyard.TestHarness.RocketConfig.fir 292088:4 Fragmenter.scala 303:15 chipyard.TestHarness.RocketConfig.fir 292235:4]
    node _T_8 = and(auto_out_a_ready, bundleOut_0_a_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.RocketConfig.fir 292227:4]
    node _GEN_6 = mux(_T_8, new_gennum, gennum) @[Fragmenter.scala 300:29 chipyard.TestHarness.RocketConfig.fir 292228:4 Fragmenter.scala 300:38 chipyard.TestHarness.RocketConfig.fir 292229:6 Fragmenter.scala 291:29 chipyard.TestHarness.RocketConfig.fir 292205:4]
    node _repeater_io_repeat_T = not(aHasData) @[Fragmenter.scala 302:31 chipyard.TestHarness.RocketConfig.fir 292231:4]
    node _repeater_io_repeat_T_1 = neq(new_gennum, UInt<3>("h0")) @[Fragmenter.scala 302:53 chipyard.TestHarness.RocketConfig.fir 292232:4]
    node _bundleOut_0_a_bits_address_T = shl(old_gennum1, 3) @[Fragmenter.scala 304:65 chipyard.TestHarness.RocketConfig.fir 292236:4]
    node _bundleOut_0_a_bits_address_T_1 = not(aOrigOH1) @[Fragmenter.scala 304:90 chipyard.TestHarness.RocketConfig.fir 292237:4]
    node _bundleOut_0_a_bits_address_T_2 = or(_bundleOut_0_a_bits_address_T, _bundleOut_0_a_bits_address_T_1) @[Fragmenter.scala 304:88 chipyard.TestHarness.RocketConfig.fir 292238:4]
    node _GEN_10 = pad(aFragOH1, 6) @[Fragmenter.scala 304:100 chipyard.TestHarness.RocketConfig.fir 292239:4]
    node _bundleOut_0_a_bits_address_T_3 = or(_bundleOut_0_a_bits_address_T_2, _GEN_10) @[Fragmenter.scala 304:100 chipyard.TestHarness.RocketConfig.fir 292239:4]
    node _bundleOut_0_a_bits_address_T_4 = or(_bundleOut_0_a_bits_address_T_3, UInt<6>("h7")) @[Fragmenter.scala 304:111 chipyard.TestHarness.RocketConfig.fir 292240:4]
    node _bundleOut_0_a_bits_address_T_5 = not(_bundleOut_0_a_bits_address_T_4) @[Fragmenter.scala 304:51 chipyard.TestHarness.RocketConfig.fir 292241:4]
    node _GEN_11 = pad(_bundleOut_0_a_bits_address_T_5, 29) @[Fragmenter.scala 304:49 chipyard.TestHarness.RocketConfig.fir 292242:4]
    node bundleOut_0_a_bits_source_hi = cat(repeater.io_deq_bits_source, bundleOut_0_a_bits_source_hi_lo) @[Cat.scala 30:58 chipyard.TestHarness.RocketConfig.fir 292244:4]
    node _T_9 = not(repeater.io_full) @[Fragmenter.scala 309:17 chipyard.TestHarness.RocketConfig.fir 292248:4]
    node _T_11 = or(_T_9, _repeater_io_repeat_T) @[Fragmenter.scala 309:35 chipyard.TestHarness.RocketConfig.fir 292250:4]
    node _T_13 = or(_T_11, reset) @[Fragmenter.scala 309:16 chipyard.TestHarness.RocketConfig.fir 292252:4]
    node _T_14 = not(_T_13) @[Fragmenter.scala 309:16 chipyard.TestHarness.RocketConfig.fir 292253:4]
    node _T_16 = eq(repeater.io_deq_bits_mask, UInt<8>("hff")) @[Fragmenter.scala 312:53 chipyard.TestHarness.RocketConfig.fir 292260:4]
    node _T_17 = or(_T_9, _T_16) @[Fragmenter.scala 312:35 chipyard.TestHarness.RocketConfig.fir 292261:4]
    node _T_19 = or(_T_17, reset) @[Fragmenter.scala 312:16 chipyard.TestHarness.RocketConfig.fir 292263:4]
    node _T_20 = not(_T_19) @[Fragmenter.scala 312:16 chipyard.TestHarness.RocketConfig.fir 292264:4]
    auto_in_a_ready <= repeater.io_enq_ready @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 292063:4 Fragmenter.scala 263:25 chipyard.TestHarness.RocketConfig.fir 292171:4]
    auto_in_d_valid <= and(auto_out_d_valid, _bundleIn_0_d_valid_T) @[Fragmenter.scala 224:36 chipyard.TestHarness.RocketConfig.fir 292160:4]
    auto_in_d_bits_opcode <= auto_out_d_bits_opcode @[Nodes.scala 1207:84 chipyard.TestHarness.RocketConfig.fir 292088:4 LazyModule.scala 311:12 chipyard.TestHarness.RocketConfig.fir 292090:4]
    auto_in_d_bits_param <= auto_out_d_bits_param @[Nodes.scala 1207:84 chipyard.TestHarness.RocketConfig.fir 292088:4 LazyModule.scala 311:12 chipyard.TestHarness.RocketConfig.fir 292090:4]
    auto_in_d_bits_size <= mux(dFirst, dFirst_size, dOrig) @[Fragmenter.scala 227:32 chipyard.TestHarness.RocketConfig.fir 292165:4]
    auto_in_d_bits_source <= shr(auto_out_d_bits_source, 4) @[Fragmenter.scala 226:47 chipyard.TestHarness.RocketConfig.fir 292163:4]
    auto_in_d_bits_sink <= auto_out_d_bits_sink @[Nodes.scala 1207:84 chipyard.TestHarness.RocketConfig.fir 292088:4 LazyModule.scala 311:12 chipyard.TestHarness.RocketConfig.fir 292090:4]
    auto_in_d_bits_denied <= auto_out_d_bits_denied @[Nodes.scala 1207:84 chipyard.TestHarness.RocketConfig.fir 292088:4 LazyModule.scala 311:12 chipyard.TestHarness.RocketConfig.fir 292090:4]
    auto_in_d_bits_data <= auto_out_d_bits_data @[Nodes.scala 1207:84 chipyard.TestHarness.RocketConfig.fir 292088:4 LazyModule.scala 311:12 chipyard.TestHarness.RocketConfig.fir 292090:4]
    auto_in_d_bits_corrupt <= auto_out_d_bits_corrupt @[Nodes.scala 1207:84 chipyard.TestHarness.RocketConfig.fir 292088:4 LazyModule.scala 311:12 chipyard.TestHarness.RocketConfig.fir 292090:4]
    auto_out_a_valid <= repeater.io_deq_valid @[Nodes.scala 1207:84 chipyard.TestHarness.RocketConfig.fir 292088:4 Fragmenter.scala 303:15 chipyard.TestHarness.RocketConfig.fir 292235:4]
    auto_out_a_bits_opcode <= repeater.io_deq_bits_opcode @[Nodes.scala 1207:84 chipyard.TestHarness.RocketConfig.fir 292088:4 Fragmenter.scala 303:15 chipyard.TestHarness.RocketConfig.fir 292235:4]
    auto_out_a_bits_param <= repeater.io_deq_bits_param @[Nodes.scala 1207:84 chipyard.TestHarness.RocketConfig.fir 292088:4 Fragmenter.scala 303:15 chipyard.TestHarness.RocketConfig.fir 292235:4]
    auto_out_a_bits_size <= bits(aFrag, 1, 0) @[Nodes.scala 1207:84 chipyard.TestHarness.RocketConfig.fir 292088:4 Fragmenter.scala 306:25 chipyard.TestHarness.RocketConfig.fir 292247:4]
    auto_out_a_bits_source <= cat(bundleOut_0_a_bits_source_hi, new_gennum) @[Cat.scala 30:58 chipyard.TestHarness.RocketConfig.fir 292245:4]
    auto_out_a_bits_address <= or(repeater.io_deq_bits_address, _GEN_11) @[Fragmenter.scala 304:49 chipyard.TestHarness.RocketConfig.fir 292242:4]
    auto_out_a_bits_mask <= mux(repeater.io_full, UInt<8>("hff"), auto_in_a_bits_mask) @[Fragmenter.scala 313:31 chipyard.TestHarness.RocketConfig.fir 292269:4]
    auto_out_a_bits_data <= auto_in_a_bits_data @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 292063:4 LazyModule.scala 309:16 chipyard.TestHarness.RocketConfig.fir 292091:4]
    auto_out_a_bits_corrupt <= repeater.io_deq_bits_corrupt @[Nodes.scala 1207:84 chipyard.TestHarness.RocketConfig.fir 292088:4 Fragmenter.scala 303:15 chipyard.TestHarness.RocketConfig.fir 292235:4]
    auto_out_d_ready <= or(auto_in_d_ready, drop) @[Fragmenter.scala 223:35 chipyard.TestHarness.RocketConfig.fir 292157:4]
    monitor.clock <= clock @[chipyard.TestHarness.RocketConfig.fir 292066:4]
    monitor.reset <= reset @[chipyard.TestHarness.RocketConfig.fir 292067:4]
    monitor.io_in_a_ready <= repeater.io_enq_ready @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 292063:4 Fragmenter.scala 263:25 chipyard.TestHarness.RocketConfig.fir 292171:4]
    monitor.io_in_a_valid <= auto_in_a_valid @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 292063:4 LazyModule.scala 309:16 chipyard.TestHarness.RocketConfig.fir 292091:4]
    monitor.io_in_a_bits_opcode <= auto_in_a_bits_opcode @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 292063:4 LazyModule.scala 309:16 chipyard.TestHarness.RocketConfig.fir 292091:4]
    monitor.io_in_a_bits_param <= auto_in_a_bits_param @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 292063:4 LazyModule.scala 309:16 chipyard.TestHarness.RocketConfig.fir 292091:4]
    monitor.io_in_a_bits_size <= auto_in_a_bits_size @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 292063:4 LazyModule.scala 309:16 chipyard.TestHarness.RocketConfig.fir 292091:4]
    monitor.io_in_a_bits_source <= auto_in_a_bits_source @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 292063:4 LazyModule.scala 309:16 chipyard.TestHarness.RocketConfig.fir 292091:4]
    monitor.io_in_a_bits_address <= auto_in_a_bits_address @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 292063:4 LazyModule.scala 309:16 chipyard.TestHarness.RocketConfig.fir 292091:4]
    monitor.io_in_a_bits_mask <= auto_in_a_bits_mask @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 292063:4 LazyModule.scala 309:16 chipyard.TestHarness.RocketConfig.fir 292091:4]
    monitor.io_in_a_bits_corrupt <= auto_in_a_bits_corrupt @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 292063:4 LazyModule.scala 309:16 chipyard.TestHarness.RocketConfig.fir 292091:4]
    monitor.io_in_d_ready <= auto_in_d_ready @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 292063:4 LazyModule.scala 309:16 chipyard.TestHarness.RocketConfig.fir 292091:4]
    monitor.io_in_d_valid <= and(auto_out_d_valid, _bundleIn_0_d_valid_T) @[Fragmenter.scala 224:36 chipyard.TestHarness.RocketConfig.fir 292160:4]
    monitor.io_in_d_bits_opcode <= auto_out_d_bits_opcode @[Nodes.scala 1207:84 chipyard.TestHarness.RocketConfig.fir 292088:4 LazyModule.scala 311:12 chipyard.TestHarness.RocketConfig.fir 292090:4]
    monitor.io_in_d_bits_param <= auto_out_d_bits_param @[Nodes.scala 1207:84 chipyard.TestHarness.RocketConfig.fir 292088:4 LazyModule.scala 311:12 chipyard.TestHarness.RocketConfig.fir 292090:4]
    monitor.io_in_d_bits_size <= mux(dFirst, dFirst_size, dOrig) @[Fragmenter.scala 227:32 chipyard.TestHarness.RocketConfig.fir 292165:4]
    monitor.io_in_d_bits_source <= shr(auto_out_d_bits_source, 4) @[Fragmenter.scala 226:47 chipyard.TestHarness.RocketConfig.fir 292163:4]
    monitor.io_in_d_bits_sink <= auto_out_d_bits_sink @[Nodes.scala 1207:84 chipyard.TestHarness.RocketConfig.fir 292088:4 LazyModule.scala 311:12 chipyard.TestHarness.RocketConfig.fir 292090:4]
    monitor.io_in_d_bits_denied <= auto_out_d_bits_denied @[Nodes.scala 1207:84 chipyard.TestHarness.RocketConfig.fir 292088:4 LazyModule.scala 311:12 chipyard.TestHarness.RocketConfig.fir 292090:4]
    monitor.io_in_d_bits_corrupt <= auto_out_d_bits_corrupt @[Nodes.scala 1207:84 chipyard.TestHarness.RocketConfig.fir 292088:4 LazyModule.scala 311:12 chipyard.TestHarness.RocketConfig.fir 292090:4]
    acknum <= mux(reset, UInt<3>("h0"), _GEN_2) @[Fragmenter.scala 189:29 chipyard.TestHarness.RocketConfig.fir 292092:4 Fragmenter.scala 189:29 chipyard.TestHarness.RocketConfig.fir 292092:4]
    dOrig <= mux(_T_7, _GEN_0, dOrig) @[Fragmenter.scala 208:29 chipyard.TestHarness.RocketConfig.fir 292142:4 Fragmenter.scala 190:24 chipyard.TestHarness.RocketConfig.fir 292093:4]
    dToggle <= mux(reset, UInt<1>("h0"), _GEN_4) @[Fragmenter.scala 191:30 chipyard.TestHarness.RocketConfig.fir 292094:4 Fragmenter.scala 191:30 chipyard.TestHarness.RocketConfig.fir 292094:4]
    repeater.clock <= clock @[chipyard.TestHarness.RocketConfig.fir 292169:4]
    repeater.reset <= reset @[chipyard.TestHarness.RocketConfig.fir 292170:4]
    repeater.io_repeat <= and(_repeater_io_repeat_T, _repeater_io_repeat_T_1) @[Fragmenter.scala 302:41 chipyard.TestHarness.RocketConfig.fir 292233:4]
    repeater.io_enq_valid <= auto_in_a_valid @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 292063:4 LazyModule.scala 309:16 chipyard.TestHarness.RocketConfig.fir 292091:4]
    repeater.io_enq_bits_opcode <= auto_in_a_bits_opcode @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 292063:4 LazyModule.scala 309:16 chipyard.TestHarness.RocketConfig.fir 292091:4]
    repeater.io_enq_bits_param <= auto_in_a_bits_param @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 292063:4 LazyModule.scala 309:16 chipyard.TestHarness.RocketConfig.fir 292091:4]
    repeater.io_enq_bits_size <= auto_in_a_bits_size @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 292063:4 LazyModule.scala 309:16 chipyard.TestHarness.RocketConfig.fir 292091:4]
    repeater.io_enq_bits_source <= auto_in_a_bits_source @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 292063:4 LazyModule.scala 309:16 chipyard.TestHarness.RocketConfig.fir 292091:4]
    repeater.io_enq_bits_address <= auto_in_a_bits_address @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 292063:4 LazyModule.scala 309:16 chipyard.TestHarness.RocketConfig.fir 292091:4]
    repeater.io_enq_bits_mask <= auto_in_a_bits_mask @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 292063:4 LazyModule.scala 309:16 chipyard.TestHarness.RocketConfig.fir 292091:4]
    repeater.io_enq_bits_corrupt <= auto_in_a_bits_corrupt @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 292063:4 LazyModule.scala 309:16 chipyard.TestHarness.RocketConfig.fir 292091:4]
    repeater.io_deq_ready <= auto_out_a_ready @[Nodes.scala 1207:84 chipyard.TestHarness.RocketConfig.fir 292088:4 LazyModule.scala 311:12 chipyard.TestHarness.RocketConfig.fir 292090:4]
    gennum <= mux(reset, UInt<3>("h0"), _GEN_6) @[Fragmenter.scala 291:29 chipyard.TestHarness.RocketConfig.fir 292205:4 Fragmenter.scala 291:29 chipyard.TestHarness.RocketConfig.fir 292205:4]
    aToggle_r <= mux(aFirst, dToggle, aToggle_r) @[Reg.scala 16:19 chipyard.TestHarness.RocketConfig.fir 292222:4 Reg.scala 16:23 chipyard.TestHarness.RocketConfig.fir 292223:6 Reg.scala 15:16 chipyard.TestHarness.RocketConfig.fir 292221:4]
    printf(clock, _T_14, "Assertion failed\n    at Fragmenter.scala:309 assert (!repeater.io.full || !aHasData)\n") @[Fragmenter.scala 309:16 chipyard.TestHarness.RocketConfig.fir 292255:6]
    stop(clock, _T_14, 1) @[Fragmenter.scala 309:16 chipyard.TestHarness.RocketConfig.fir 292256:6]
    printf(clock, _T_20, "Assertion failed\n    at Fragmenter.scala:312 assert (!repeater.io.full || in_a.bits.mask === fullMask)\n") @[Fragmenter.scala 312:16 chipyard.TestHarness.RocketConfig.fir 292266:6]
    stop(clock, _T_20, 1) @[Fragmenter.scala 312:16 chipyard.TestHarness.RocketConfig.fir 292267:6]

  module TLMonitor_57_inTestHarness : @[chipyard.TestHarness.RocketConfig.fir 292307:2]
    input clock : Clock @[chipyard.TestHarness.RocketConfig.fir 292308:4]
    input reset : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 292309:4]
    input io_in_a_ready : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 292310:4]
    input io_in_a_valid : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 292310:4]
    input io_in_a_bits_opcode : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 292310:4]
    input io_in_a_bits_size : UInt<4> @[chipyard.TestHarness.RocketConfig.fir 292310:4]
    input io_in_a_bits_address : UInt<32> @[chipyard.TestHarness.RocketConfig.fir 292310:4]
    input io_in_a_bits_mask : UInt<8> @[chipyard.TestHarness.RocketConfig.fir 292310:4]
    input io_in_d_ready : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 292310:4]
    input io_in_d_valid : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 292310:4]
    input io_in_d_bits_opcode : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 292310:4]
    input io_in_d_bits_param : UInt<2> @[chipyard.TestHarness.RocketConfig.fir 292310:4]
    input io_in_d_bits_size : UInt<4> @[chipyard.TestHarness.RocketConfig.fir 292310:4]
    input io_in_d_bits_source : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 292310:4]
    input io_in_d_bits_sink : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 292310:4]
    input io_in_d_bits_denied : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 292310:4]
    input io_in_d_bits_corrupt : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 292310:4]

    inst plusarg_reader of plusarg_reader @[PlusArg.scala 80:11 chipyard.TestHarness.RocketConfig.fir 294249:4]
    inst plusarg_reader_1 of plusarg_reader @[PlusArg.scala 80:11 chipyard.TestHarness.RocketConfig.fir 294556:4]
    node _is_aligned_mask_T_1 = dshlw(UInt<27>("hfff"), io_in_a_bits_size) @[package.scala 234:77 chipyard.TestHarness.RocketConfig.fir 292326:6]
    node _is_aligned_mask_T_2 = bits(_is_aligned_mask_T_1, 11, 0) @[package.scala 234:82 chipyard.TestHarness.RocketConfig.fir 292327:6]
    node is_aligned_mask = not(_is_aligned_mask_T_2) @[package.scala 234:46 chipyard.TestHarness.RocketConfig.fir 292328:6]
    node _GEN_71 = pad(is_aligned_mask, 32) @[Edges.scala 20:16 chipyard.TestHarness.RocketConfig.fir 292329:6]
    node _is_aligned_T = and(io_in_a_bits_address, _GEN_71) @[Edges.scala 20:16 chipyard.TestHarness.RocketConfig.fir 292329:6]
    node is_aligned = eq(_is_aligned_T, UInt<32>("h0")) @[Edges.scala 20:24 chipyard.TestHarness.RocketConfig.fir 292330:6]
    node mask_sizeOH_shiftAmount = bits(io_in_a_bits_size, 1, 0) @[OneHot.scala 64:49 chipyard.TestHarness.RocketConfig.fir 292332:6]
    node _mask_sizeOH_T_1 = dshlw(UInt<4>("h1"), mask_sizeOH_shiftAmount) @[OneHot.scala 65:12 chipyard.TestHarness.RocketConfig.fir 292333:6]
    node _mask_sizeOH_T_2 = bits(_mask_sizeOH_T_1, 2, 0) @[OneHot.scala 65:27 chipyard.TestHarness.RocketConfig.fir 292334:6]
    node mask_sizeOH = or(_mask_sizeOH_T_2, UInt<3>("h1")) @[Misc.scala 201:81 chipyard.TestHarness.RocketConfig.fir 292335:6]
    node _mask_T = geq(io_in_a_bits_size, UInt<4>("h3")) @[Misc.scala 205:21 chipyard.TestHarness.RocketConfig.fir 292336:6]
    node mask_size = bits(mask_sizeOH, 2, 2) @[Misc.scala 208:26 chipyard.TestHarness.RocketConfig.fir 292337:6]
    node mask_bit = bits(io_in_a_bits_address, 2, 2) @[Misc.scala 209:26 chipyard.TestHarness.RocketConfig.fir 292338:6]
    node mask_nbit = not(mask_bit) @[Misc.scala 210:20 chipyard.TestHarness.RocketConfig.fir 292339:6]
    node _mask_acc_T = and(mask_size, mask_nbit) @[Misc.scala 214:38 chipyard.TestHarness.RocketConfig.fir 292341:6]
    node mask_acc = or(_mask_T, _mask_acc_T) @[Misc.scala 214:29 chipyard.TestHarness.RocketConfig.fir 292342:6]
    node _mask_acc_T_1 = and(mask_size, mask_bit) @[Misc.scala 214:38 chipyard.TestHarness.RocketConfig.fir 292344:6]
    node mask_acc_1 = or(_mask_T, _mask_acc_T_1) @[Misc.scala 214:29 chipyard.TestHarness.RocketConfig.fir 292345:6]
    node mask_size_1 = bits(mask_sizeOH, 1, 1) @[Misc.scala 208:26 chipyard.TestHarness.RocketConfig.fir 292346:6]
    node mask_bit_1 = bits(io_in_a_bits_address, 1, 1) @[Misc.scala 209:26 chipyard.TestHarness.RocketConfig.fir 292347:6]
    node mask_nbit_1 = not(mask_bit_1) @[Misc.scala 210:20 chipyard.TestHarness.RocketConfig.fir 292348:6]
    node mask_eq_2 = and(mask_nbit, mask_nbit_1) @[Misc.scala 213:27 chipyard.TestHarness.RocketConfig.fir 292349:6]
    node _mask_acc_T_2 = and(mask_size_1, mask_eq_2) @[Misc.scala 214:38 chipyard.TestHarness.RocketConfig.fir 292350:6]
    node mask_acc_2 = or(mask_acc, _mask_acc_T_2) @[Misc.scala 214:29 chipyard.TestHarness.RocketConfig.fir 292351:6]
    node mask_eq_3 = and(mask_nbit, mask_bit_1) @[Misc.scala 213:27 chipyard.TestHarness.RocketConfig.fir 292352:6]
    node _mask_acc_T_3 = and(mask_size_1, mask_eq_3) @[Misc.scala 214:38 chipyard.TestHarness.RocketConfig.fir 292353:6]
    node mask_acc_3 = or(mask_acc, _mask_acc_T_3) @[Misc.scala 214:29 chipyard.TestHarness.RocketConfig.fir 292354:6]
    node mask_eq_4 = and(mask_bit, mask_nbit_1) @[Misc.scala 213:27 chipyard.TestHarness.RocketConfig.fir 292355:6]
    node _mask_acc_T_4 = and(mask_size_1, mask_eq_4) @[Misc.scala 214:38 chipyard.TestHarness.RocketConfig.fir 292356:6]
    node mask_acc_4 = or(mask_acc_1, _mask_acc_T_4) @[Misc.scala 214:29 chipyard.TestHarness.RocketConfig.fir 292357:6]
    node mask_eq_5 = and(mask_bit, mask_bit_1) @[Misc.scala 213:27 chipyard.TestHarness.RocketConfig.fir 292358:6]
    node _mask_acc_T_5 = and(mask_size_1, mask_eq_5) @[Misc.scala 214:38 chipyard.TestHarness.RocketConfig.fir 292359:6]
    node mask_acc_5 = or(mask_acc_1, _mask_acc_T_5) @[Misc.scala 214:29 chipyard.TestHarness.RocketConfig.fir 292360:6]
    node mask_size_2 = bits(mask_sizeOH, 0, 0) @[Misc.scala 208:26 chipyard.TestHarness.RocketConfig.fir 292361:6]
    node mask_bit_2 = bits(io_in_a_bits_address, 0, 0) @[Misc.scala 209:26 chipyard.TestHarness.RocketConfig.fir 292362:6]
    node mask_nbit_2 = not(mask_bit_2) @[Misc.scala 210:20 chipyard.TestHarness.RocketConfig.fir 292363:6]
    node mask_eq_6 = and(mask_eq_2, mask_nbit_2) @[Misc.scala 213:27 chipyard.TestHarness.RocketConfig.fir 292364:6]
    node _mask_acc_T_6 = and(mask_size_2, mask_eq_6) @[Misc.scala 214:38 chipyard.TestHarness.RocketConfig.fir 292365:6]
    node mask_lo_lo_lo = or(mask_acc_2, _mask_acc_T_6) @[Misc.scala 214:29 chipyard.TestHarness.RocketConfig.fir 292366:6]
    node mask_eq_7 = and(mask_eq_2, mask_bit_2) @[Misc.scala 213:27 chipyard.TestHarness.RocketConfig.fir 292367:6]
    node _mask_acc_T_7 = and(mask_size_2, mask_eq_7) @[Misc.scala 214:38 chipyard.TestHarness.RocketConfig.fir 292368:6]
    node mask_lo_lo_hi = or(mask_acc_2, _mask_acc_T_7) @[Misc.scala 214:29 chipyard.TestHarness.RocketConfig.fir 292369:6]
    node mask_eq_8 = and(mask_eq_3, mask_nbit_2) @[Misc.scala 213:27 chipyard.TestHarness.RocketConfig.fir 292370:6]
    node _mask_acc_T_8 = and(mask_size_2, mask_eq_8) @[Misc.scala 214:38 chipyard.TestHarness.RocketConfig.fir 292371:6]
    node mask_lo_hi_lo = or(mask_acc_3, _mask_acc_T_8) @[Misc.scala 214:29 chipyard.TestHarness.RocketConfig.fir 292372:6]
    node mask_eq_9 = and(mask_eq_3, mask_bit_2) @[Misc.scala 213:27 chipyard.TestHarness.RocketConfig.fir 292373:6]
    node _mask_acc_T_9 = and(mask_size_2, mask_eq_9) @[Misc.scala 214:38 chipyard.TestHarness.RocketConfig.fir 292374:6]
    node mask_lo_hi_hi = or(mask_acc_3, _mask_acc_T_9) @[Misc.scala 214:29 chipyard.TestHarness.RocketConfig.fir 292375:6]
    node mask_eq_10 = and(mask_eq_4, mask_nbit_2) @[Misc.scala 213:27 chipyard.TestHarness.RocketConfig.fir 292376:6]
    node _mask_acc_T_10 = and(mask_size_2, mask_eq_10) @[Misc.scala 214:38 chipyard.TestHarness.RocketConfig.fir 292377:6]
    node mask_hi_lo_lo = or(mask_acc_4, _mask_acc_T_10) @[Misc.scala 214:29 chipyard.TestHarness.RocketConfig.fir 292378:6]
    node mask_eq_11 = and(mask_eq_4, mask_bit_2) @[Misc.scala 213:27 chipyard.TestHarness.RocketConfig.fir 292379:6]
    node _mask_acc_T_11 = and(mask_size_2, mask_eq_11) @[Misc.scala 214:38 chipyard.TestHarness.RocketConfig.fir 292380:6]
    node mask_hi_lo_hi = or(mask_acc_4, _mask_acc_T_11) @[Misc.scala 214:29 chipyard.TestHarness.RocketConfig.fir 292381:6]
    node mask_eq_12 = and(mask_eq_5, mask_nbit_2) @[Misc.scala 213:27 chipyard.TestHarness.RocketConfig.fir 292382:6]
    node _mask_acc_T_12 = and(mask_size_2, mask_eq_12) @[Misc.scala 214:38 chipyard.TestHarness.RocketConfig.fir 292383:6]
    node mask_hi_hi_lo = or(mask_acc_5, _mask_acc_T_12) @[Misc.scala 214:29 chipyard.TestHarness.RocketConfig.fir 292384:6]
    node mask_eq_13 = and(mask_eq_5, mask_bit_2) @[Misc.scala 213:27 chipyard.TestHarness.RocketConfig.fir 292385:6]
    node _mask_acc_T_13 = and(mask_size_2, mask_eq_13) @[Misc.scala 214:38 chipyard.TestHarness.RocketConfig.fir 292386:6]
    node mask_hi_hi_hi = or(mask_acc_5, _mask_acc_T_13) @[Misc.scala 214:29 chipyard.TestHarness.RocketConfig.fir 292387:6]
    node mask = cat(cat(cat(mask_hi_hi_hi, mask_hi_hi_lo), cat(mask_hi_lo_hi, mask_hi_lo_lo)), cat(cat(mask_lo_hi_hi, mask_lo_hi_lo), cat(mask_lo_lo_hi, mask_lo_lo_lo))) @[Cat.scala 30:58 chipyard.TestHarness.RocketConfig.fir 292394:6]
    node _T_7 = cvt(io_in_a_bits_address) @[Parameters.scala 137:49 chipyard.TestHarness.RocketConfig.fir 292398:6]
    node _T_15 = eq(io_in_a_bits_opcode, UInt<3>("h6")) @[Monitor.scala 81:25 chipyard.TestHarness.RocketConfig.fir 292410:6]
    node _T_17 = leq(io_in_a_bits_size, UInt<4>("hc")) @[Parameters.scala 92:42 chipyard.TestHarness.RocketConfig.fir 292413:8]
    node _T_25 = and(_T_7, SInt<33>("h-101000")) @[Parameters.scala 137:52 chipyard.TestHarness.RocketConfig.fir 292421:8]
    node _T_26 = asSInt(_T_25) @[Parameters.scala 137:52 chipyard.TestHarness.RocketConfig.fir 292422:8]
    node _T_27 = eq(_T_26, SInt<33>("h0")) @[Parameters.scala 137:67 chipyard.TestHarness.RocketConfig.fir 292423:8]
    node _T_28 = xor(io_in_a_bits_address, UInt<32>("h3000")) @[Parameters.scala 137:31 chipyard.TestHarness.RocketConfig.fir 292424:8]
    node _T_29 = cvt(_T_28) @[Parameters.scala 137:49 chipyard.TestHarness.RocketConfig.fir 292425:8]
    node _T_30 = and(_T_29, SInt<33>("h-1000")) @[Parameters.scala 137:52 chipyard.TestHarness.RocketConfig.fir 292426:8]
    node _T_31 = asSInt(_T_30) @[Parameters.scala 137:52 chipyard.TestHarness.RocketConfig.fir 292427:8]
    node _T_32 = eq(_T_31, SInt<33>("h0")) @[Parameters.scala 137:67 chipyard.TestHarness.RocketConfig.fir 292428:8]
    node _T_33 = xor(io_in_a_bits_address, UInt<32>("h10000")) @[Parameters.scala 137:31 chipyard.TestHarness.RocketConfig.fir 292429:8]
    node _T_34 = cvt(_T_33) @[Parameters.scala 137:49 chipyard.TestHarness.RocketConfig.fir 292430:8]
    node _T_35 = and(_T_34, SInt<33>("h-10000")) @[Parameters.scala 137:52 chipyard.TestHarness.RocketConfig.fir 292431:8]
    node _T_36 = asSInt(_T_35) @[Parameters.scala 137:52 chipyard.TestHarness.RocketConfig.fir 292432:8]
    node _T_37 = eq(_T_36, SInt<33>("h0")) @[Parameters.scala 137:67 chipyard.TestHarness.RocketConfig.fir 292433:8]
    node _T_38 = xor(io_in_a_bits_address, UInt<32>("h2000000")) @[Parameters.scala 137:31 chipyard.TestHarness.RocketConfig.fir 292434:8]
    node _T_39 = cvt(_T_38) @[Parameters.scala 137:49 chipyard.TestHarness.RocketConfig.fir 292435:8]
    node _T_40 = and(_T_39, SInt<33>("h-10000")) @[Parameters.scala 137:52 chipyard.TestHarness.RocketConfig.fir 292436:8]
    node _T_41 = asSInt(_T_40) @[Parameters.scala 137:52 chipyard.TestHarness.RocketConfig.fir 292437:8]
    node _T_42 = eq(_T_41, SInt<33>("h0")) @[Parameters.scala 137:67 chipyard.TestHarness.RocketConfig.fir 292438:8]
    node _T_43 = xor(io_in_a_bits_address, UInt<32>("h2010000")) @[Parameters.scala 137:31 chipyard.TestHarness.RocketConfig.fir 292439:8]
    node _T_44 = cvt(_T_43) @[Parameters.scala 137:49 chipyard.TestHarness.RocketConfig.fir 292440:8]
    node _T_45 = and(_T_44, SInt<33>("h-1000")) @[Parameters.scala 137:52 chipyard.TestHarness.RocketConfig.fir 292441:8]
    node _T_46 = asSInt(_T_45) @[Parameters.scala 137:52 chipyard.TestHarness.RocketConfig.fir 292442:8]
    node _T_47 = eq(_T_46, SInt<33>("h0")) @[Parameters.scala 137:67 chipyard.TestHarness.RocketConfig.fir 292443:8]
    node _T_48 = xor(io_in_a_bits_address, UInt<32>("hc000000")) @[Parameters.scala 137:31 chipyard.TestHarness.RocketConfig.fir 292444:8]
    node _T_49 = cvt(_T_48) @[Parameters.scala 137:49 chipyard.TestHarness.RocketConfig.fir 292445:8]
    node _T_50 = and(_T_49, SInt<33>("h-4000000")) @[Parameters.scala 137:52 chipyard.TestHarness.RocketConfig.fir 292446:8]
    node _T_51 = asSInt(_T_50) @[Parameters.scala 137:52 chipyard.TestHarness.RocketConfig.fir 292447:8]
    node _T_52 = eq(_T_51, SInt<33>("h0")) @[Parameters.scala 137:67 chipyard.TestHarness.RocketConfig.fir 292448:8]
    node _T_53 = xor(io_in_a_bits_address, UInt<32>("h54000000")) @[Parameters.scala 137:31 chipyard.TestHarness.RocketConfig.fir 292449:8]
    node _T_54 = cvt(_T_53) @[Parameters.scala 137:49 chipyard.TestHarness.RocketConfig.fir 292450:8]
    node _T_55 = and(_T_54, SInt<33>("h-1000")) @[Parameters.scala 137:52 chipyard.TestHarness.RocketConfig.fir 292451:8]
    node _T_56 = asSInt(_T_55) @[Parameters.scala 137:52 chipyard.TestHarness.RocketConfig.fir 292452:8]
    node _T_57 = eq(_T_56, SInt<33>("h0")) @[Parameters.scala 137:67 chipyard.TestHarness.RocketConfig.fir 292453:8]
    node _T_58 = or(_T_27, _T_32) @[Parameters.scala 671:42 chipyard.TestHarness.RocketConfig.fir 292454:8]
    node _T_65 = eq(UInt<4>("h6"), io_in_a_bits_size) @[Parameters.scala 91:48 chipyard.TestHarness.RocketConfig.fir 292461:8]
    node _T_67 = xor(io_in_a_bits_address, UInt<32>("h10000000")) @[Parameters.scala 137:31 chipyard.TestHarness.RocketConfig.fir 292463:8]
    node _T_68 = cvt(_T_67) @[Parameters.scala 137:49 chipyard.TestHarness.RocketConfig.fir 292464:8]
    node _T_69 = and(_T_68, SInt<33>("h-1000")) @[Parameters.scala 137:52 chipyard.TestHarness.RocketConfig.fir 292465:8]
    node _T_70 = asSInt(_T_69) @[Parameters.scala 137:52 chipyard.TestHarness.RocketConfig.fir 292466:8]
    node _T_71 = eq(_T_70, SInt<33>("h0")) @[Parameters.scala 137:67 chipyard.TestHarness.RocketConfig.fir 292467:8]
    node _T_72 = xor(io_in_a_bits_address, UInt<32>("h80000000")) @[Parameters.scala 137:31 chipyard.TestHarness.RocketConfig.fir 292468:8]
    node _T_73 = cvt(_T_72) @[Parameters.scala 137:49 chipyard.TestHarness.RocketConfig.fir 292469:8]
    node _T_74 = and(_T_73, SInt<33>("h-10000000")) @[Parameters.scala 137:52 chipyard.TestHarness.RocketConfig.fir 292470:8]
    node _T_75 = asSInt(_T_74) @[Parameters.scala 137:52 chipyard.TestHarness.RocketConfig.fir 292471:8]
    node _T_76 = eq(_T_75, SInt<33>("h0")) @[Parameters.scala 137:67 chipyard.TestHarness.RocketConfig.fir 292472:8]
    node _T_77 = or(_T_71, _T_76) @[Parameters.scala 671:42 chipyard.TestHarness.RocketConfig.fir 292473:8]
    node _T_78 = and(_T_65, _T_77) @[Parameters.scala 670:56 chipyard.TestHarness.RocketConfig.fir 292474:8]
    node _T_81 = and(_T_17, _T_78) @[Monitor.scala 82:72 chipyard.TestHarness.RocketConfig.fir 292477:8]
    node _T_83 = or(_T_81, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 292479:8]
    node _T_84 = not(_T_83) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 292480:8]
    node _T_147 = not(reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 292547:8]
    node _T_153 = or(_mask_T, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 292561:8]
    node _T_154 = not(_T_153) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 292562:8]
    node _T_156 = or(is_aligned, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 292568:8]
    node _T_157 = not(_T_156) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 292569:8]
    node _T_162 = not(io_in_a_bits_mask) @[Monitor.scala 88:18 chipyard.TestHarness.RocketConfig.fir 292582:8]
    node _T_163 = eq(_T_162, UInt<8>("h0")) @[Monitor.scala 88:31 chipyard.TestHarness.RocketConfig.fir 292583:8]
    node _T_165 = or(_T_163, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 292585:8]
    node _T_166 = not(_T_165) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 292586:8]
    node _T_171 = eq(io_in_a_bits_opcode, UInt<3>("h7")) @[Monitor.scala 92:25 chipyard.TestHarness.RocketConfig.fir 292600:6]
    node _T_331 = eq(io_in_a_bits_opcode, UInt<3>("h4")) @[Monitor.scala 104:25 chipyard.TestHarness.RocketConfig.fir 292798:6]
    node _T_339 = or(_T_17, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 292807:8]
    node _T_340 = not(_T_339) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 292808:8]
    node _T_350 = and(_T_17, _T_32) @[Parameters.scala 670:56 chipyard.TestHarness.RocketConfig.fir 292822:8]
    node _T_352 = leq(io_in_a_bits_size, UInt<4>("h6")) @[Parameters.scala 92:42 chipyard.TestHarness.RocketConfig.fir 292824:8]
    node _T_395 = or(_T_27, _T_37) @[Parameters.scala 671:42 chipyard.TestHarness.RocketConfig.fir 292867:8]
    node _T_396 = or(_T_395, _T_42) @[Parameters.scala 671:42 chipyard.TestHarness.RocketConfig.fir 292868:8]
    node _T_397 = or(_T_396, _T_47) @[Parameters.scala 671:42 chipyard.TestHarness.RocketConfig.fir 292869:8]
    node _T_398 = or(_T_397, _T_52) @[Parameters.scala 671:42 chipyard.TestHarness.RocketConfig.fir 292870:8]
    node _T_399 = or(_T_398, _T_71) @[Parameters.scala 671:42 chipyard.TestHarness.RocketConfig.fir 292871:8]
    node _T_400 = or(_T_399, _T_57) @[Parameters.scala 671:42 chipyard.TestHarness.RocketConfig.fir 292872:8]
    node _T_401 = or(_T_400, _T_76) @[Parameters.scala 671:42 chipyard.TestHarness.RocketConfig.fir 292873:8]
    node _T_402 = and(_T_352, _T_401) @[Parameters.scala 670:56 chipyard.TestHarness.RocketConfig.fir 292874:8]
    node _T_404 = or(_T_350, _T_402) @[Parameters.scala 672:30 chipyard.TestHarness.RocketConfig.fir 292876:8]
    node _T_406 = or(_T_404, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 292878:8]
    node _T_407 = not(_T_406) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 292879:8]
    node _T_418 = eq(io_in_a_bits_mask, mask) @[Monitor.scala 110:30 chipyard.TestHarness.RocketConfig.fir 292906:8]
    node _T_420 = or(_T_418, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 292908:8]
    node _T_421 = not(_T_420) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 292909:8]
    node _T_426 = eq(io_in_a_bits_opcode, UInt<3>("h0")) @[Monitor.scala 114:25 chipyard.TestHarness.RocketConfig.fir 292923:6]
    node _T_482 = or(_T_27, _T_42) @[Parameters.scala 671:42 chipyard.TestHarness.RocketConfig.fir 292980:8]
    node _T_483 = or(_T_482, _T_47) @[Parameters.scala 671:42 chipyard.TestHarness.RocketConfig.fir 292981:8]
    node _T_484 = or(_T_483, _T_52) @[Parameters.scala 671:42 chipyard.TestHarness.RocketConfig.fir 292982:8]
    node _T_485 = or(_T_484, _T_71) @[Parameters.scala 671:42 chipyard.TestHarness.RocketConfig.fir 292983:8]
    node _T_486 = or(_T_485, _T_57) @[Parameters.scala 671:42 chipyard.TestHarness.RocketConfig.fir 292984:8]
    node _T_487 = or(_T_486, _T_76) @[Parameters.scala 671:42 chipyard.TestHarness.RocketConfig.fir 292985:8]
    node _T_488 = and(_T_352, _T_487) @[Parameters.scala 670:56 chipyard.TestHarness.RocketConfig.fir 292986:8]
    node _T_497 = or(_T_350, _T_488) @[Parameters.scala 672:30 chipyard.TestHarness.RocketConfig.fir 292995:8]
    node _T_499 = and(_T_17, _T_497) @[Monitor.scala 115:71 chipyard.TestHarness.RocketConfig.fir 292997:8]
    node _T_501 = or(_T_499, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 292999:8]
    node _T_502 = not(_T_501) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 293000:8]
    node _T_517 = eq(io_in_a_bits_opcode, UInt<3>("h1")) @[Monitor.scala 122:25 chipyard.TestHarness.RocketConfig.fir 293036:6]
    node _T_604 = not(mask) @[Monitor.scala 127:33 chipyard.TestHarness.RocketConfig.fir 293140:8]
    node _T_605 = and(io_in_a_bits_mask, _T_604) @[Monitor.scala 127:31 chipyard.TestHarness.RocketConfig.fir 293141:8]
    node _T_606 = eq(_T_605, UInt<8>("h0")) @[Monitor.scala 127:40 chipyard.TestHarness.RocketConfig.fir 293142:8]
    node _T_608 = or(_T_606, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 293144:8]
    node _T_609 = not(_T_608) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 293145:8]
    node _T_610 = eq(io_in_a_bits_opcode, UInt<3>("h2")) @[Monitor.scala 130:25 chipyard.TestHarness.RocketConfig.fir 293151:6]
    node _T_618 = leq(io_in_a_bits_size, UInt<4>("h3")) @[Parameters.scala 92:42 chipyard.TestHarness.RocketConfig.fir 293160:8]
    node _T_662 = or(_T_58, _T_42) @[Parameters.scala 671:42 chipyard.TestHarness.RocketConfig.fir 293204:8]
    node _T_663 = or(_T_662, _T_47) @[Parameters.scala 671:42 chipyard.TestHarness.RocketConfig.fir 293205:8]
    node _T_664 = or(_T_663, _T_52) @[Parameters.scala 671:42 chipyard.TestHarness.RocketConfig.fir 293206:8]
    node _T_665 = or(_T_664, _T_71) @[Parameters.scala 671:42 chipyard.TestHarness.RocketConfig.fir 293207:8]
    node _T_666 = or(_T_665, _T_57) @[Parameters.scala 671:42 chipyard.TestHarness.RocketConfig.fir 293208:8]
    node _T_667 = or(_T_666, _T_76) @[Parameters.scala 671:42 chipyard.TestHarness.RocketConfig.fir 293209:8]
    node _T_668 = and(_T_618, _T_667) @[Parameters.scala 670:56 chipyard.TestHarness.RocketConfig.fir 293210:8]
    node _T_678 = and(_T_17, _T_668) @[Monitor.scala 131:74 chipyard.TestHarness.RocketConfig.fir 293220:8]
    node _T_680 = or(_T_678, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 293222:8]
    node _T_681 = not(_T_680) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 293223:8]
    node _T_696 = eq(io_in_a_bits_opcode, UInt<3>("h3")) @[Monitor.scala 138:25 chipyard.TestHarness.RocketConfig.fir 293259:6]
    node _T_782 = eq(io_in_a_bits_opcode, UInt<3>("h5")) @[Monitor.scala 146:25 chipyard.TestHarness.RocketConfig.fir 293367:6]
    node _T_851 = and(_T_352, _T_77) @[Parameters.scala 670:56 chipyard.TestHarness.RocketConfig.fir 293437:8]
    node _T_854 = or(_T_350, _T_851) @[Parameters.scala 672:30 chipyard.TestHarness.RocketConfig.fir 293440:8]
    node _T_855 = and(_T_17, _T_854) @[Monitor.scala 147:68 chipyard.TestHarness.RocketConfig.fir 293441:8]
    node _T_857 = or(_T_855, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 293443:8]
    node _T_858 = not(_T_857) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 293444:8]
    node _T_877 = leq(io_in_d_bits_opcode, UInt<3>("h6")) @[Bundles.scala 42:24 chipyard.TestHarness.RocketConfig.fir 293490:6]
    node _T_879 = or(_T_877, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293492:6]
    node _T_880 = not(_T_879) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293493:6]
    node _source_ok_T_1 = not(io_in_d_bits_source) @[Parameters.scala 46:9 chipyard.TestHarness.RocketConfig.fir 293498:6]
    node _T_881 = eq(io_in_d_bits_opcode, UInt<3>("h6")) @[Monitor.scala 310:25 chipyard.TestHarness.RocketConfig.fir 293503:6]
    node _T_883 = or(_source_ok_T_1, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293506:8]
    node _T_884 = not(_T_883) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293507:8]
    node _T_885 = geq(io_in_d_bits_size, UInt<4>("h3")) @[Monitor.scala 312:27 chipyard.TestHarness.RocketConfig.fir 293512:8]
    node _T_887 = or(_T_885, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293514:8]
    node _T_888 = not(_T_887) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293515:8]
    node _T_889 = eq(io_in_d_bits_param, UInt<2>("h0")) @[Monitor.scala 313:28 chipyard.TestHarness.RocketConfig.fir 293520:8]
    node _T_891 = or(_T_889, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293522:8]
    node _T_892 = not(_T_891) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293523:8]
    node _T_893 = not(io_in_d_bits_corrupt) @[Monitor.scala 314:15 chipyard.TestHarness.RocketConfig.fir 293528:8]
    node _T_895 = or(_T_893, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293530:8]
    node _T_896 = not(_T_895) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293531:8]
    node _T_897 = not(io_in_d_bits_denied) @[Monitor.scala 315:15 chipyard.TestHarness.RocketConfig.fir 293536:8]
    node _T_899 = or(_T_897, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293538:8]
    node _T_900 = not(_T_899) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293539:8]
    node _T_901 = eq(io_in_d_bits_opcode, UInt<3>("h4")) @[Monitor.scala 318:25 chipyard.TestHarness.RocketConfig.fir 293545:6]
    node _T_912 = leq(io_in_d_bits_param, UInt<2>("h2")) @[Bundles.scala 102:26 chipyard.TestHarness.RocketConfig.fir 293569:8]
    node _T_914 = or(_T_912, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293571:8]
    node _T_915 = not(_T_914) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293572:8]
    node _T_916 = neq(io_in_d_bits_param, UInt<2>("h2")) @[Monitor.scala 323:28 chipyard.TestHarness.RocketConfig.fir 293577:8]
    node _T_918 = or(_T_916, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293579:8]
    node _T_919 = not(_T_918) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293580:8]
    node _T_929 = eq(io_in_d_bits_opcode, UInt<3>("h5")) @[Monitor.scala 328:25 chipyard.TestHarness.RocketConfig.fir 293603:6]
    node _T_949 = or(_T_897, io_in_d_bits_corrupt) @[Monitor.scala 334:30 chipyard.TestHarness.RocketConfig.fir 293644:8]
    node _T_951 = or(_T_949, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293646:8]
    node _T_952 = not(_T_951) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293647:8]
    node _T_958 = eq(io_in_d_bits_opcode, UInt<3>("h0")) @[Monitor.scala 338:25 chipyard.TestHarness.RocketConfig.fir 293662:6]
    node _T_975 = eq(io_in_d_bits_opcode, UInt<3>("h1")) @[Monitor.scala 346:25 chipyard.TestHarness.RocketConfig.fir 293697:6]
    node _T_993 = eq(io_in_d_bits_opcode, UInt<3>("h2")) @[Monitor.scala 354:25 chipyard.TestHarness.RocketConfig.fir 293733:6]
    node _a_first_T = and(io_in_a_ready, io_in_a_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.RocketConfig.fir 293799:4]
    node a_first_beats1_decode = shr(is_aligned_mask, 3) @[Edges.scala 219:59 chipyard.TestHarness.RocketConfig.fir 293804:4]
    node _a_first_beats1_opdata_T = bits(io_in_a_bits_opcode, 2, 2) @[Edges.scala 91:37 chipyard.TestHarness.RocketConfig.fir 293805:4]
    node a_first_beats1_opdata = not(_a_first_beats1_opdata_T) @[Edges.scala 91:28 chipyard.TestHarness.RocketConfig.fir 293806:4]
    node a_first_beats1 = mux(a_first_beats1_opdata, a_first_beats1_decode, UInt<9>("h0")) @[Edges.scala 220:14 chipyard.TestHarness.RocketConfig.fir 293807:4]
    reg a_first_counter : UInt<9>, clock with :
      reset => (UInt<1>("h0"), a_first_counter) @[Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 293808:4]
    node _a_first_counter1_T = sub(a_first_counter, UInt<9>("h1")) @[Edges.scala 229:28 chipyard.TestHarness.RocketConfig.fir 293809:4]
    node a_first_counter1 = tail(_a_first_counter1_T, 1) @[Edges.scala 229:28 chipyard.TestHarness.RocketConfig.fir 293810:4]
    node a_first = eq(a_first_counter, UInt<9>("h0")) @[Edges.scala 230:25 chipyard.TestHarness.RocketConfig.fir 293811:4]
    node _a_first_counter_T = mux(a_first, a_first_beats1, a_first_counter1) @[Edges.scala 235:21 chipyard.TestHarness.RocketConfig.fir 293819:6]
    node _GEN_0 = mux(_a_first_T, _a_first_counter_T, a_first_counter) @[Edges.scala 234:17 chipyard.TestHarness.RocketConfig.fir 293818:4 Edges.scala 235:15 chipyard.TestHarness.RocketConfig.fir 293820:6 Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 293808:4]
    reg opcode : UInt<3>, clock with :
      reset => (UInt<1>("h0"), opcode) @[Monitor.scala 384:22 chipyard.TestHarness.RocketConfig.fir 293822:4]
    reg size : UInt<4>, clock with :
      reset => (UInt<1>("h0"), size) @[Monitor.scala 386:22 chipyard.TestHarness.RocketConfig.fir 293824:4]
    reg address : UInt<32>, clock with :
      reset => (UInt<1>("h0"), address) @[Monitor.scala 388:22 chipyard.TestHarness.RocketConfig.fir 293826:4]
    node _T_1022 = not(a_first) @[Monitor.scala 389:22 chipyard.TestHarness.RocketConfig.fir 293827:4]
    node _T_1023 = and(io_in_a_valid, _T_1022) @[Monitor.scala 389:19 chipyard.TestHarness.RocketConfig.fir 293828:4]
    node _T_1024 = eq(io_in_a_bits_opcode, opcode) @[Monitor.scala 390:32 chipyard.TestHarness.RocketConfig.fir 293830:6]
    node _T_1026 = or(_T_1024, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 293832:6]
    node _T_1027 = not(_T_1026) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 293833:6]
    node _T_1032 = eq(io_in_a_bits_size, size) @[Monitor.scala 392:32 chipyard.TestHarness.RocketConfig.fir 293846:6]
    node _T_1034 = or(_T_1032, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 293848:6]
    node _T_1035 = not(_T_1034) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 293849:6]
    node _T_1040 = eq(io_in_a_bits_address, address) @[Monitor.scala 394:32 chipyard.TestHarness.RocketConfig.fir 293862:6]
    node _T_1042 = or(_T_1040, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 293864:6]
    node _T_1043 = not(_T_1042) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 293865:6]
    node _T_1045 = and(_a_first_T, a_first) @[Monitor.scala 396:20 chipyard.TestHarness.RocketConfig.fir 293872:4]
    node _d_first_T = and(io_in_d_ready, io_in_d_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.RocketConfig.fir 293880:4]
    node _d_first_beats1_decode_T_1 = dshlw(UInt<27>("hfff"), io_in_d_bits_size) @[package.scala 234:77 chipyard.TestHarness.RocketConfig.fir 293882:4]
    node _d_first_beats1_decode_T_2 = bits(_d_first_beats1_decode_T_1, 11, 0) @[package.scala 234:82 chipyard.TestHarness.RocketConfig.fir 293883:4]
    node _d_first_beats1_decode_T_3 = not(_d_first_beats1_decode_T_2) @[package.scala 234:46 chipyard.TestHarness.RocketConfig.fir 293884:4]
    node d_first_beats1_decode = shr(_d_first_beats1_decode_T_3, 3) @[Edges.scala 219:59 chipyard.TestHarness.RocketConfig.fir 293885:4]
    node d_first_beats1_opdata = bits(io_in_d_bits_opcode, 0, 0) @[Edges.scala 105:36 chipyard.TestHarness.RocketConfig.fir 293886:4]
    node d_first_beats1 = mux(d_first_beats1_opdata, d_first_beats1_decode, UInt<9>("h0")) @[Edges.scala 220:14 chipyard.TestHarness.RocketConfig.fir 293887:4]
    reg d_first_counter : UInt<9>, clock with :
      reset => (UInt<1>("h0"), d_first_counter) @[Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 293888:4]
    node _d_first_counter1_T = sub(d_first_counter, UInt<9>("h1")) @[Edges.scala 229:28 chipyard.TestHarness.RocketConfig.fir 293889:4]
    node d_first_counter1 = tail(_d_first_counter1_T, 1) @[Edges.scala 229:28 chipyard.TestHarness.RocketConfig.fir 293890:4]
    node d_first = eq(d_first_counter, UInt<9>("h0")) @[Edges.scala 230:25 chipyard.TestHarness.RocketConfig.fir 293891:4]
    node _d_first_counter_T = mux(d_first, d_first_beats1, d_first_counter1) @[Edges.scala 235:21 chipyard.TestHarness.RocketConfig.fir 293899:6]
    node _GEN_6 = mux(_d_first_T, _d_first_counter_T, d_first_counter) @[Edges.scala 234:17 chipyard.TestHarness.RocketConfig.fir 293898:4 Edges.scala 235:15 chipyard.TestHarness.RocketConfig.fir 293900:6 Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 293888:4]
    reg opcode_1 : UInt<3>, clock with :
      reset => (UInt<1>("h0"), opcode_1) @[Monitor.scala 535:22 chipyard.TestHarness.RocketConfig.fir 293902:4]
    reg param_1 : UInt<2>, clock with :
      reset => (UInt<1>("h0"), param_1) @[Monitor.scala 536:22 chipyard.TestHarness.RocketConfig.fir 293903:4]
    reg size_1 : UInt<4>, clock with :
      reset => (UInt<1>("h0"), size_1) @[Monitor.scala 537:22 chipyard.TestHarness.RocketConfig.fir 293904:4]
    reg source_1 : UInt<1>, clock with :
      reset => (UInt<1>("h0"), source_1) @[Monitor.scala 538:22 chipyard.TestHarness.RocketConfig.fir 293905:4]
    reg sink : UInt<3>, clock with :
      reset => (UInt<1>("h0"), sink) @[Monitor.scala 539:22 chipyard.TestHarness.RocketConfig.fir 293906:4]
    reg denied : UInt<1>, clock with :
      reset => (UInt<1>("h0"), denied) @[Monitor.scala 540:22 chipyard.TestHarness.RocketConfig.fir 293907:4]
    node _T_1046 = not(d_first) @[Monitor.scala 541:22 chipyard.TestHarness.RocketConfig.fir 293908:4]
    node _T_1047 = and(io_in_d_valid, _T_1046) @[Monitor.scala 541:19 chipyard.TestHarness.RocketConfig.fir 293909:4]
    node _T_1048 = eq(io_in_d_bits_opcode, opcode_1) @[Monitor.scala 542:29 chipyard.TestHarness.RocketConfig.fir 293911:6]
    node _T_1050 = or(_T_1048, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293913:6]
    node _T_1051 = not(_T_1050) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293914:6]
    node _T_1052 = eq(io_in_d_bits_param, param_1) @[Monitor.scala 543:29 chipyard.TestHarness.RocketConfig.fir 293919:6]
    node _T_1054 = or(_T_1052, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293921:6]
    node _T_1055 = not(_T_1054) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293922:6]
    node _T_1056 = eq(io_in_d_bits_size, size_1) @[Monitor.scala 544:29 chipyard.TestHarness.RocketConfig.fir 293927:6]
    node _T_1058 = or(_T_1056, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293929:6]
    node _T_1059 = not(_T_1058) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293930:6]
    node _T_1060 = eq(io_in_d_bits_source, source_1) @[Monitor.scala 545:29 chipyard.TestHarness.RocketConfig.fir 293935:6]
    node _T_1062 = or(_T_1060, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293937:6]
    node _T_1063 = not(_T_1062) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293938:6]
    node _T_1064 = eq(io_in_d_bits_sink, sink) @[Monitor.scala 546:29 chipyard.TestHarness.RocketConfig.fir 293943:6]
    node _T_1066 = or(_T_1064, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293945:6]
    node _T_1067 = not(_T_1066) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293946:6]
    node _T_1068 = eq(io_in_d_bits_denied, denied) @[Monitor.scala 547:29 chipyard.TestHarness.RocketConfig.fir 293951:6]
    node _T_1070 = or(_T_1068, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293953:6]
    node _T_1071 = not(_T_1070) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293954:6]
    node _T_1073 = and(_d_first_T, d_first) @[Monitor.scala 549:20 chipyard.TestHarness.RocketConfig.fir 293961:4]
    reg inflight : UInt<1>, clock with :
      reset => (UInt<1>("h0"), inflight) @[Monitor.scala 611:27 chipyard.TestHarness.RocketConfig.fir 293970:4]
    reg inflight_opcodes : UInt<4>, clock with :
      reset => (UInt<1>("h0"), inflight_opcodes) @[Monitor.scala 613:35 chipyard.TestHarness.RocketConfig.fir 293971:4]
    reg inflight_sizes : UInt<8>, clock with :
      reset => (UInt<1>("h0"), inflight_sizes) @[Monitor.scala 615:33 chipyard.TestHarness.RocketConfig.fir 293972:4]
    reg a_first_counter_1 : UInt<9>, clock with :
      reset => (UInt<1>("h0"), a_first_counter_1) @[Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 293982:4]
    node _a_first_counter1_T_1 = sub(a_first_counter_1, UInt<9>("h1")) @[Edges.scala 229:28 chipyard.TestHarness.RocketConfig.fir 293983:4]
    node a_first_counter1_1 = tail(_a_first_counter1_T_1, 1) @[Edges.scala 229:28 chipyard.TestHarness.RocketConfig.fir 293984:4]
    node a_first_1 = eq(a_first_counter_1, UInt<9>("h0")) @[Edges.scala 230:25 chipyard.TestHarness.RocketConfig.fir 293985:4]
    node _a_first_counter_T_1 = mux(a_first_1, a_first_beats1, a_first_counter1_1) @[Edges.scala 235:21 chipyard.TestHarness.RocketConfig.fir 293993:6]
    node _GEN_13 = mux(_a_first_T, _a_first_counter_T_1, a_first_counter_1) @[Edges.scala 234:17 chipyard.TestHarness.RocketConfig.fir 293992:4 Edges.scala 235:15 chipyard.TestHarness.RocketConfig.fir 293994:6 Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 293982:4]
    reg d_first_counter_1 : UInt<9>, clock with :
      reset => (UInt<1>("h0"), d_first_counter_1) @[Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 294004:4]
    node _d_first_counter1_T_1 = sub(d_first_counter_1, UInt<9>("h1")) @[Edges.scala 229:28 chipyard.TestHarness.RocketConfig.fir 294005:4]
    node d_first_counter1_1 = tail(_d_first_counter1_T_1, 1) @[Edges.scala 229:28 chipyard.TestHarness.RocketConfig.fir 294006:4]
    node d_first_1 = eq(d_first_counter_1, UInt<9>("h0")) @[Edges.scala 230:25 chipyard.TestHarness.RocketConfig.fir 294007:4]
    node _d_first_counter_T_1 = mux(d_first_1, d_first_beats1, d_first_counter1_1) @[Edges.scala 235:21 chipyard.TestHarness.RocketConfig.fir 294015:6]
    node _GEN_14 = mux(_d_first_T, _d_first_counter_T_1, d_first_counter_1) @[Edges.scala 234:17 chipyard.TestHarness.RocketConfig.fir 294014:4 Edges.scala 235:15 chipyard.TestHarness.RocketConfig.fir 294016:6 Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 294004:4]
    node _GEN_72 = shl(io_in_d_bits_source, 2) @[Monitor.scala 634:69 chipyard.TestHarness.RocketConfig.fir 294028:4]
    node _a_opcode_lookup_T = pad(_GEN_72, 4) @[Monitor.scala 634:69 chipyard.TestHarness.RocketConfig.fir 294028:4]
    node _a_opcode_lookup_T_1 = dshr(inflight_opcodes, _a_opcode_lookup_T) @[Monitor.scala 634:44 chipyard.TestHarness.RocketConfig.fir 294029:4]
    node _a_opcode_lookup_T_4 = sub(UInt<16>("h10"), UInt<16>("h1")) @[Monitor.scala 609:57 chipyard.TestHarness.RocketConfig.fir 294032:4]
    node _a_opcode_lookup_T_5 = tail(_a_opcode_lookup_T_4, 1) @[Monitor.scala 609:57 chipyard.TestHarness.RocketConfig.fir 294033:4]
    node _GEN_73 = pad(_a_opcode_lookup_T_1, 16) @[Monitor.scala 634:97 chipyard.TestHarness.RocketConfig.fir 294034:4]
    node _a_opcode_lookup_T_6 = and(_GEN_73, _a_opcode_lookup_T_5) @[Monitor.scala 634:97 chipyard.TestHarness.RocketConfig.fir 294034:4]
    node _GEN_74 = shr(_a_opcode_lookup_T_6, 1) @[Monitor.scala 634:152 chipyard.TestHarness.RocketConfig.fir 294035:4]
    node _a_opcode_lookup_T_7 = pad(_GEN_74, 16) @[Monitor.scala 634:152 chipyard.TestHarness.RocketConfig.fir 294035:4]
    node _a_size_lookup_T = shl(io_in_d_bits_source, 3) @[Monitor.scala 638:65 chipyard.TestHarness.RocketConfig.fir 294039:4]
    node _a_size_lookup_T_1 = dshr(inflight_sizes, _a_size_lookup_T) @[Monitor.scala 638:40 chipyard.TestHarness.RocketConfig.fir 294040:4]
    node _a_size_lookup_T_4 = sub(UInt<16>("h100"), UInt<16>("h1")) @[Monitor.scala 609:57 chipyard.TestHarness.RocketConfig.fir 294043:4]
    node _a_size_lookup_T_5 = tail(_a_size_lookup_T_4, 1) @[Monitor.scala 609:57 chipyard.TestHarness.RocketConfig.fir 294044:4]
    node _GEN_75 = pad(_a_size_lookup_T_1, 16) @[Monitor.scala 638:91 chipyard.TestHarness.RocketConfig.fir 294045:4]
    node _a_size_lookup_T_6 = and(_GEN_75, _a_size_lookup_T_5) @[Monitor.scala 638:91 chipyard.TestHarness.RocketConfig.fir 294045:4]
    node _GEN_76 = shr(_a_size_lookup_T_6, 1) @[Monitor.scala 638:144 chipyard.TestHarness.RocketConfig.fir 294046:4]
    node _a_size_lookup_T_7 = pad(_GEN_76, 16) @[Monitor.scala 638:144 chipyard.TestHarness.RocketConfig.fir 294046:4]
    node _T_1074 = and(io_in_a_valid, a_first_1) @[Monitor.scala 648:26 chipyard.TestHarness.RocketConfig.fir 294070:4]
    node _GEN_15 = mux(_T_1074, UInt<2>("h1"), UInt<2>("h0")) @[Monitor.scala 648:71 chipyard.TestHarness.RocketConfig.fir 294072:4 Monitor.scala 649:22 chipyard.TestHarness.RocketConfig.fir 294074:6 chipyard.TestHarness.RocketConfig.fir 294021:4]
    node _T_1077 = and(_a_first_T, a_first_1) @[Monitor.scala 652:27 chipyard.TestHarness.RocketConfig.fir 294077:4]
    node _a_opcodes_set_interm_T = shl(io_in_a_bits_opcode, 1) @[Monitor.scala 654:53 chipyard.TestHarness.RocketConfig.fir 294082:6]
    node _a_opcodes_set_interm_T_1 = or(_a_opcodes_set_interm_T, UInt<4>("h1")) @[Monitor.scala 654:61 chipyard.TestHarness.RocketConfig.fir 294083:6]
    node _a_sizes_set_interm_T = shl(io_in_a_bits_size, 1) @[Monitor.scala 655:51 chipyard.TestHarness.RocketConfig.fir 294085:6]
    node _a_sizes_set_interm_T_1 = or(_a_sizes_set_interm_T, UInt<5>("h1")) @[Monitor.scala 655:59 chipyard.TestHarness.RocketConfig.fir 294086:6]
    node a_opcodes_set_interm = mux(_T_1077, _a_opcodes_set_interm_T_1, UInt<4>("h0")) @[Monitor.scala 652:72 chipyard.TestHarness.RocketConfig.fir 294079:4 Monitor.scala 654:28 chipyard.TestHarness.RocketConfig.fir 294084:6 chipyard.TestHarness.RocketConfig.fir 294067:4]
    node _a_opcodes_set_T_1 = pad(a_opcodes_set_interm, 19) @[Monitor.scala 656:54 chipyard.TestHarness.RocketConfig.fir 294089:6]
    node a_sizes_set_interm = mux(_T_1077, _a_sizes_set_interm_T_1, UInt<5>("h0")) @[Monitor.scala 652:72 chipyard.TestHarness.RocketConfig.fir 294079:4 Monitor.scala 655:28 chipyard.TestHarness.RocketConfig.fir 294087:6 chipyard.TestHarness.RocketConfig.fir 294069:4]
    node _a_sizes_set_T_1 = pad(a_sizes_set_interm, 20) @[Monitor.scala 657:52 chipyard.TestHarness.RocketConfig.fir 294092:6]
    node _T_1081 = not(inflight) @[Monitor.scala 658:17 chipyard.TestHarness.RocketConfig.fir 294096:6]
    node _T_1083 = or(_T_1081, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 294098:6]
    node _T_1084 = not(_T_1083) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 294099:6]
    node _GEN_16 = mux(_T_1077, UInt<2>("h1"), UInt<2>("h0")) @[Monitor.scala 652:72 chipyard.TestHarness.RocketConfig.fir 294079:4 Monitor.scala 653:28 chipyard.TestHarness.RocketConfig.fir 294081:6 chipyard.TestHarness.RocketConfig.fir 294019:4]
    node _GEN_19 = mux(_T_1077, _a_opcodes_set_T_1, UInt<19>("h0")) @[Monitor.scala 652:72 chipyard.TestHarness.RocketConfig.fir 294079:4 Monitor.scala 656:28 chipyard.TestHarness.RocketConfig.fir 294090:6 chipyard.TestHarness.RocketConfig.fir 294023:4]
    node _GEN_20 = mux(_T_1077, _a_sizes_set_T_1, UInt<20>("h0")) @[Monitor.scala 652:72 chipyard.TestHarness.RocketConfig.fir 294079:4 Monitor.scala 657:28 chipyard.TestHarness.RocketConfig.fir 294093:6 chipyard.TestHarness.RocketConfig.fir 294025:4]
    node _T_1085 = and(io_in_d_valid, d_first_1) @[Monitor.scala 671:26 chipyard.TestHarness.RocketConfig.fir 294114:4]
    node _T_1087 = not(_T_881) @[Monitor.scala 671:74 chipyard.TestHarness.RocketConfig.fir 294116:4]
    node _T_1088 = and(_T_1085, _T_1087) @[Monitor.scala 671:71 chipyard.TestHarness.RocketConfig.fir 294117:4]
    node _d_clr_wo_ready_T = dshlw(UInt<2>("h1"), io_in_d_bits_source) @[OneHot.scala 58:35 chipyard.TestHarness.RocketConfig.fir 294119:6]
    node _GEN_21 = mux(_T_1088, _d_clr_wo_ready_T, UInt<2>("h0")) @[Monitor.scala 671:90 chipyard.TestHarness.RocketConfig.fir 294118:4 Monitor.scala 672:22 chipyard.TestHarness.RocketConfig.fir 294120:6 chipyard.TestHarness.RocketConfig.fir 294108:4]
    node _T_1090 = and(_d_first_T, d_first_1) @[Monitor.scala 675:27 chipyard.TestHarness.RocketConfig.fir 294123:4]
    node _T_1093 = and(_T_1090, _T_1087) @[Monitor.scala 675:72 chipyard.TestHarness.RocketConfig.fir 294126:4]
    node _GEN_78 = pad(_a_opcode_lookup_T_5, 31) @[Monitor.scala 677:76 chipyard.TestHarness.RocketConfig.fir 294135:6]
    node _d_opcodes_clr_T_5 = dshlw(_GEN_78, _a_opcode_lookup_T) @[Monitor.scala 677:76 chipyard.TestHarness.RocketConfig.fir 294135:6]
    node _GEN_79 = pad(_a_size_lookup_T_5, 31) @[Monitor.scala 678:74 chipyard.TestHarness.RocketConfig.fir 294142:6]
    node _d_sizes_clr_T_5 = dshlw(_GEN_79, _a_size_lookup_T) @[Monitor.scala 678:74 chipyard.TestHarness.RocketConfig.fir 294142:6]
    node _GEN_22 = mux(_T_1093, _d_clr_wo_ready_T, UInt<2>("h0")) @[Monitor.scala 675:91 chipyard.TestHarness.RocketConfig.fir 294127:4 Monitor.scala 676:21 chipyard.TestHarness.RocketConfig.fir 294129:6 chipyard.TestHarness.RocketConfig.fir 294106:4]
    node _GEN_23 = mux(_T_1093, _d_opcodes_clr_T_5, UInt<31>("h0")) @[Monitor.scala 675:91 chipyard.TestHarness.RocketConfig.fir 294127:4 Monitor.scala 677:21 chipyard.TestHarness.RocketConfig.fir 294136:6 chipyard.TestHarness.RocketConfig.fir 294110:4]
    node _GEN_24 = mux(_T_1093, _d_sizes_clr_T_5, UInt<31>("h0")) @[Monitor.scala 675:91 chipyard.TestHarness.RocketConfig.fir 294127:4 Monitor.scala 678:21 chipyard.TestHarness.RocketConfig.fir 294143:6 chipyard.TestHarness.RocketConfig.fir 294112:4]
    node same_cycle_resp = and(_T_1074, _source_ok_T_1) @[Monitor.scala 681:88 chipyard.TestHarness.RocketConfig.fir 294153:6]
    node _T_1098 = dshr(inflight, io_in_d_bits_source) @[Monitor.scala 682:25 chipyard.TestHarness.RocketConfig.fir 294154:6]
    node _T_1100 = or(_T_1098, same_cycle_resp) @[Monitor.scala 682:49 chipyard.TestHarness.RocketConfig.fir 294156:6]
    node _T_1102 = or(_T_1100, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 294158:6]
    node _T_1103 = not(_T_1102) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 294159:6]
    node _GEN_27 = mux(eq(UInt<3>("h2"), io_in_a_bits_opcode), UInt<3>("h1"), UInt<3>("h0")) @[Monitor.scala 685:38 chipyard.TestHarness.RocketConfig.fir 294165:8 Monitor.scala 685:38 chipyard.TestHarness.RocketConfig.fir 294165:8]
    node _GEN_28 = mux(eq(UInt<3>("h3"), io_in_a_bits_opcode), UInt<3>("h1"), _GEN_27) @[Monitor.scala 685:38 chipyard.TestHarness.RocketConfig.fir 294165:8 Monitor.scala 685:38 chipyard.TestHarness.RocketConfig.fir 294165:8]
    node _GEN_29 = mux(eq(UInt<3>("h4"), io_in_a_bits_opcode), UInt<3>("h1"), _GEN_28) @[Monitor.scala 685:38 chipyard.TestHarness.RocketConfig.fir 294165:8 Monitor.scala 685:38 chipyard.TestHarness.RocketConfig.fir 294165:8]
    node _GEN_30 = mux(eq(UInt<3>("h5"), io_in_a_bits_opcode), UInt<3>("h2"), _GEN_29) @[Monitor.scala 685:38 chipyard.TestHarness.RocketConfig.fir 294165:8 Monitor.scala 685:38 chipyard.TestHarness.RocketConfig.fir 294165:8]
    node _GEN_31 = mux(eq(UInt<3>("h6"), io_in_a_bits_opcode), UInt<3>("h4"), _GEN_30) @[Monitor.scala 685:38 chipyard.TestHarness.RocketConfig.fir 294165:8 Monitor.scala 685:38 chipyard.TestHarness.RocketConfig.fir 294165:8]
    node _GEN_32 = mux(eq(UInt<3>("h7"), io_in_a_bits_opcode), UInt<3>("h4"), _GEN_31) @[Monitor.scala 685:38 chipyard.TestHarness.RocketConfig.fir 294165:8 Monitor.scala 685:38 chipyard.TestHarness.RocketConfig.fir 294165:8]
    node _T_1104 = eq(io_in_d_bits_opcode, _GEN_32) @[Monitor.scala 685:38 chipyard.TestHarness.RocketConfig.fir 294165:8]
    node _GEN_39 = mux(eq(UInt<3>("h6"), io_in_a_bits_opcode), UInt<3>("h5"), _GEN_30) @[Monitor.scala 686:39 chipyard.TestHarness.RocketConfig.fir 294166:8 Monitor.scala 686:39 chipyard.TestHarness.RocketConfig.fir 294166:8]
    node _GEN_40 = mux(eq(UInt<3>("h7"), io_in_a_bits_opcode), UInt<3>("h4"), _GEN_39) @[Monitor.scala 686:39 chipyard.TestHarness.RocketConfig.fir 294166:8 Monitor.scala 686:39 chipyard.TestHarness.RocketConfig.fir 294166:8]
    node _T_1105 = eq(io_in_d_bits_opcode, _GEN_40) @[Monitor.scala 686:39 chipyard.TestHarness.RocketConfig.fir 294166:8]
    node _T_1106 = or(_T_1104, _T_1105) @[Monitor.scala 685:77 chipyard.TestHarness.RocketConfig.fir 294167:8]
    node _T_1108 = or(_T_1106, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 294169:8]
    node _T_1109 = not(_T_1108) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 294170:8]
    node _T_1110 = eq(io_in_a_bits_size, io_in_d_bits_size) @[Monitor.scala 687:36 chipyard.TestHarness.RocketConfig.fir 294175:8]
    node _T_1112 = or(_T_1110, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 294177:8]
    node _T_1113 = not(_T_1112) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 294178:8]
    node a_opcode_lookup = bits(_a_opcode_lookup_T_7, 3, 0) @[chipyard.TestHarness.RocketConfig.fir 294026:4 Monitor.scala 634:21 chipyard.TestHarness.RocketConfig.fir 294036:4]
    node _T_1114 = bits(a_opcode_lookup, 2, 0) @[chipyard.TestHarness.RocketConfig.fir 294185:8]
    node _GEN_43 = mux(eq(UInt<3>("h2"), _T_1114), UInt<3>("h1"), UInt<3>("h0")) @[Monitor.scala 689:38 chipyard.TestHarness.RocketConfig.fir 294186:8 Monitor.scala 689:38 chipyard.TestHarness.RocketConfig.fir 294186:8]
    node _GEN_44 = mux(eq(UInt<3>("h3"), _T_1114), UInt<3>("h1"), _GEN_43) @[Monitor.scala 689:38 chipyard.TestHarness.RocketConfig.fir 294186:8 Monitor.scala 689:38 chipyard.TestHarness.RocketConfig.fir 294186:8]
    node _GEN_45 = mux(eq(UInt<3>("h4"), _T_1114), UInt<3>("h1"), _GEN_44) @[Monitor.scala 689:38 chipyard.TestHarness.RocketConfig.fir 294186:8 Monitor.scala 689:38 chipyard.TestHarness.RocketConfig.fir 294186:8]
    node _GEN_46 = mux(eq(UInt<3>("h5"), _T_1114), UInt<3>("h2"), _GEN_45) @[Monitor.scala 689:38 chipyard.TestHarness.RocketConfig.fir 294186:8 Monitor.scala 689:38 chipyard.TestHarness.RocketConfig.fir 294186:8]
    node _GEN_47 = mux(eq(UInt<3>("h6"), _T_1114), UInt<3>("h4"), _GEN_46) @[Monitor.scala 689:38 chipyard.TestHarness.RocketConfig.fir 294186:8 Monitor.scala 689:38 chipyard.TestHarness.RocketConfig.fir 294186:8]
    node _GEN_48 = mux(eq(UInt<3>("h7"), _T_1114), UInt<3>("h4"), _GEN_47) @[Monitor.scala 689:38 chipyard.TestHarness.RocketConfig.fir 294186:8 Monitor.scala 689:38 chipyard.TestHarness.RocketConfig.fir 294186:8]
    node _T_1115 = eq(io_in_d_bits_opcode, _GEN_48) @[Monitor.scala 689:38 chipyard.TestHarness.RocketConfig.fir 294186:8]
    node _GEN_55 = mux(eq(UInt<3>("h6"), _T_1114), UInt<3>("h5"), _GEN_46) @[Monitor.scala 690:38 chipyard.TestHarness.RocketConfig.fir 294188:8 Monitor.scala 690:38 chipyard.TestHarness.RocketConfig.fir 294188:8]
    node _GEN_56 = mux(eq(UInt<3>("h7"), _T_1114), UInt<3>("h4"), _GEN_55) @[Monitor.scala 690:38 chipyard.TestHarness.RocketConfig.fir 294188:8 Monitor.scala 690:38 chipyard.TestHarness.RocketConfig.fir 294188:8]
    node _T_1117 = eq(io_in_d_bits_opcode, _GEN_56) @[Monitor.scala 690:38 chipyard.TestHarness.RocketConfig.fir 294188:8]
    node _T_1118 = or(_T_1115, _T_1117) @[Monitor.scala 689:72 chipyard.TestHarness.RocketConfig.fir 294189:8]
    node _T_1120 = or(_T_1118, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 294191:8]
    node _T_1121 = not(_T_1120) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 294192:8]
    node a_size_lookup = bits(_a_size_lookup_T_7, 7, 0) @[chipyard.TestHarness.RocketConfig.fir 294037:4 Monitor.scala 638:19 chipyard.TestHarness.RocketConfig.fir 294047:4]
    node _GEN_80 = pad(io_in_d_bits_size, 8) @[Monitor.scala 691:36 chipyard.TestHarness.RocketConfig.fir 294197:8]
    node _T_1122 = eq(_GEN_80, a_size_lookup) @[Monitor.scala 691:36 chipyard.TestHarness.RocketConfig.fir 294197:8]
    node _T_1124 = or(_T_1122, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 294199:8]
    node _T_1125 = not(_T_1124) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 294200:8]
    node _T_1127 = and(_T_1085, a_first_1) @[Monitor.scala 694:36 chipyard.TestHarness.RocketConfig.fir 294208:4]
    node _T_1128 = and(_T_1127, io_in_a_valid) @[Monitor.scala 694:47 chipyard.TestHarness.RocketConfig.fir 294209:4]
    node _T_1130 = and(_T_1128, _source_ok_T_1) @[Monitor.scala 694:65 chipyard.TestHarness.RocketConfig.fir 294211:4]
    node _T_1132 = and(_T_1130, _T_1087) @[Monitor.scala 694:116 chipyard.TestHarness.RocketConfig.fir 294213:4]
    node _T_1133 = not(io_in_d_ready) @[Monitor.scala 695:15 chipyard.TestHarness.RocketConfig.fir 294215:6]
    node _T_1134 = or(_T_1133, io_in_a_ready) @[Monitor.scala 695:32 chipyard.TestHarness.RocketConfig.fir 294216:6]
    node _T_1136 = or(_T_1134, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 294218:6]
    node _T_1137 = not(_T_1136) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 294219:6]
    node a_set_wo_ready = bits(_GEN_15, 0, 0) @[chipyard.TestHarness.RocketConfig.fir 294020:4]
    node d_clr_wo_ready = bits(_GEN_21, 0, 0) @[chipyard.TestHarness.RocketConfig.fir 294107:4]
    node _T_1138 = neq(a_set_wo_ready, d_clr_wo_ready) @[Monitor.scala 699:29 chipyard.TestHarness.RocketConfig.fir 294225:4]
    node _T_1139 = orr(a_set_wo_ready) @[Monitor.scala 699:67 chipyard.TestHarness.RocketConfig.fir 294226:4]
    node _T_1140 = not(_T_1139) @[Monitor.scala 699:51 chipyard.TestHarness.RocketConfig.fir 294227:4]
    node _T_1141 = or(_T_1138, _T_1140) @[Monitor.scala 699:48 chipyard.TestHarness.RocketConfig.fir 294228:4]
    node _T_1143 = or(_T_1141, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 294230:4]
    node _T_1144 = not(_T_1143) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 294231:4]
    node a_set = bits(_GEN_16, 0, 0) @[chipyard.TestHarness.RocketConfig.fir 294018:4]
    node _inflight_T = or(inflight, a_set) @[Monitor.scala 702:27 chipyard.TestHarness.RocketConfig.fir 294236:4]
    node d_clr = bits(_GEN_22, 0, 0) @[chipyard.TestHarness.RocketConfig.fir 294105:4]
    node _inflight_T_1 = not(d_clr) @[Monitor.scala 702:38 chipyard.TestHarness.RocketConfig.fir 294237:4]
    node _inflight_T_2 = and(_inflight_T, _inflight_T_1) @[Monitor.scala 702:36 chipyard.TestHarness.RocketConfig.fir 294238:4]
    node a_opcodes_set = bits(_GEN_19, 3, 0) @[chipyard.TestHarness.RocketConfig.fir 294022:4]
    node _inflight_opcodes_T = or(inflight_opcodes, a_opcodes_set) @[Monitor.scala 703:43 chipyard.TestHarness.RocketConfig.fir 294240:4]
    node d_opcodes_clr = bits(_GEN_23, 3, 0) @[chipyard.TestHarness.RocketConfig.fir 294109:4]
    node _inflight_opcodes_T_1 = not(d_opcodes_clr) @[Monitor.scala 703:62 chipyard.TestHarness.RocketConfig.fir 294241:4]
    node _inflight_opcodes_T_2 = and(_inflight_opcodes_T, _inflight_opcodes_T_1) @[Monitor.scala 703:60 chipyard.TestHarness.RocketConfig.fir 294242:4]
    node a_sizes_set = bits(_GEN_20, 7, 0) @[chipyard.TestHarness.RocketConfig.fir 294024:4]
    node _inflight_sizes_T = or(inflight_sizes, a_sizes_set) @[Monitor.scala 704:39 chipyard.TestHarness.RocketConfig.fir 294244:4]
    node d_sizes_clr = bits(_GEN_24, 7, 0) @[chipyard.TestHarness.RocketConfig.fir 294111:4]
    node _inflight_sizes_T_1 = not(d_sizes_clr) @[Monitor.scala 704:56 chipyard.TestHarness.RocketConfig.fir 294245:4]
    node _inflight_sizes_T_2 = and(_inflight_sizes_T, _inflight_sizes_T_1) @[Monitor.scala 704:54 chipyard.TestHarness.RocketConfig.fir 294246:4]
    reg watchdog : UInt<32>, clock with :
      reset => (UInt<1>("h0"), watchdog) @[Monitor.scala 706:27 chipyard.TestHarness.RocketConfig.fir 294248:4]
    node _T_1145 = orr(inflight) @[Monitor.scala 709:26 chipyard.TestHarness.RocketConfig.fir 294251:4]
    node _T_1146 = not(_T_1145) @[Monitor.scala 709:16 chipyard.TestHarness.RocketConfig.fir 294252:4]
    node _T_1147 = eq(plusarg_reader.out, UInt<32>("h0")) @[Monitor.scala 709:39 chipyard.TestHarness.RocketConfig.fir 294253:4]
    node _T_1148 = or(_T_1146, _T_1147) @[Monitor.scala 709:30 chipyard.TestHarness.RocketConfig.fir 294254:4]
    node _T_1149 = lt(watchdog, plusarg_reader.out) @[Monitor.scala 709:59 chipyard.TestHarness.RocketConfig.fir 294255:4]
    node _T_1150 = or(_T_1148, _T_1149) @[Monitor.scala 709:47 chipyard.TestHarness.RocketConfig.fir 294256:4]
    node _T_1152 = or(_T_1150, reset) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 294258:4]
    node _T_1153 = not(_T_1152) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 294259:4]
    node _watchdog_T = add(watchdog, UInt<32>("h1")) @[Monitor.scala 711:26 chipyard.TestHarness.RocketConfig.fir 294264:4]
    node _watchdog_T_1 = tail(_watchdog_T, 1) @[Monitor.scala 711:26 chipyard.TestHarness.RocketConfig.fir 294265:4]
    node _T_1156 = or(_a_first_T, _d_first_T) @[Monitor.scala 712:27 chipyard.TestHarness.RocketConfig.fir 294269:4]
    node _GEN_57 = mux(_T_1156, UInt<32>("h0"), _watchdog_T_1) @[Monitor.scala 712:47 chipyard.TestHarness.RocketConfig.fir 294270:4 Monitor.scala 712:58 chipyard.TestHarness.RocketConfig.fir 294271:6 Monitor.scala 711:14 chipyard.TestHarness.RocketConfig.fir 294266:4]
    reg inflight_sizes_1 : UInt<8>, clock with :
      reset => (UInt<1>("h0"), inflight_sizes_1) @[Monitor.scala 725:35 chipyard.TestHarness.RocketConfig.fir 294275:4]
    reg d_first_counter_2 : UInt<9>, clock with :
      reset => (UInt<1>("h0"), d_first_counter_2) @[Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 294310:4]
    node _d_first_counter1_T_2 = sub(d_first_counter_2, UInt<9>("h1")) @[Edges.scala 229:28 chipyard.TestHarness.RocketConfig.fir 294311:4]
    node d_first_counter1_2 = tail(_d_first_counter1_T_2, 1) @[Edges.scala 229:28 chipyard.TestHarness.RocketConfig.fir 294312:4]
    node d_first_2 = eq(d_first_counter_2, UInt<9>("h0")) @[Edges.scala 230:25 chipyard.TestHarness.RocketConfig.fir 294313:4]
    node _d_first_counter_T_2 = mux(d_first_2, d_first_beats1, d_first_counter1_2) @[Edges.scala 235:21 chipyard.TestHarness.RocketConfig.fir 294321:6]
    node _GEN_59 = mux(_d_first_T, _d_first_counter_T_2, d_first_counter_2) @[Edges.scala 234:17 chipyard.TestHarness.RocketConfig.fir 294320:4 Edges.scala 235:15 chipyard.TestHarness.RocketConfig.fir 294322:6 Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 294310:4]
    node _c_size_lookup_T_1 = dshr(inflight_sizes_1, _a_size_lookup_T) @[Monitor.scala 747:42 chipyard.TestHarness.RocketConfig.fir 294346:4]
    node _GEN_84 = pad(_c_size_lookup_T_1, 16) @[Monitor.scala 747:93 chipyard.TestHarness.RocketConfig.fir 294351:4]
    node _c_size_lookup_T_6 = and(_GEN_84, _a_size_lookup_T_5) @[Monitor.scala 747:93 chipyard.TestHarness.RocketConfig.fir 294351:4]
    node _GEN_85 = shr(_c_size_lookup_T_6, 1) @[Monitor.scala 747:146 chipyard.TestHarness.RocketConfig.fir 294352:4]
    node _c_size_lookup_T_7 = pad(_GEN_85, 16) @[Monitor.scala 747:146 chipyard.TestHarness.RocketConfig.fir 294352:4]
    node _T_1174 = and(io_in_d_valid, d_first_2) @[Monitor.scala 779:26 chipyard.TestHarness.RocketConfig.fir 294430:4]
    node _T_1176 = and(_T_1174, _T_881) @[Monitor.scala 779:71 chipyard.TestHarness.RocketConfig.fir 294432:4]
    node _T_1178 = and(_d_first_T, d_first_2) @[Monitor.scala 783:27 chipyard.TestHarness.RocketConfig.fir 294438:4]
    node _T_1180 = and(_T_1178, _T_881) @[Monitor.scala 783:72 chipyard.TestHarness.RocketConfig.fir 294440:4]
    node _GEN_69 = mux(_T_1180, _d_sizes_clr_T_5, UInt<31>("h0")) @[Monitor.scala 783:90 chipyard.TestHarness.RocketConfig.fir 294441:4 Monitor.scala 786:21 chipyard.TestHarness.RocketConfig.fir 294457:6 chipyard.TestHarness.RocketConfig.fir 294428:4]
    node _T_1184 = dshr(UInt<1>("h0"), io_in_d_bits_source) @[Monitor.scala 791:25 chipyard.TestHarness.RocketConfig.fir 294476:6]
    node _T_1188 = or(_T_1184, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 294480:6]
    node _T_1189 = not(_T_1188) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 294481:6]
    node c_size_lookup = bits(_c_size_lookup_T_7, 7, 0) @[chipyard.TestHarness.RocketConfig.fir 294334:4 Monitor.scala 747:21 chipyard.TestHarness.RocketConfig.fir 294353:4]
    node _T_1194 = eq(_GEN_80, c_size_lookup) @[Monitor.scala 795:36 chipyard.TestHarness.RocketConfig.fir 294499:8]
    node _T_1196 = or(_T_1194, reset) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 294501:8]
    node _T_1197 = not(_T_1196) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 294502:8]
    node d_sizes_clr_1 = bits(_GEN_69, 7, 0) @[chipyard.TestHarness.RocketConfig.fir 294427:4]
    node _inflight_sizes_T_4 = not(d_sizes_clr_1) @[Monitor.scala 811:58 chipyard.TestHarness.RocketConfig.fir 294552:4]
    node _inflight_sizes_T_5 = and(inflight_sizes_1, _inflight_sizes_T_4) @[Monitor.scala 811:56 chipyard.TestHarness.RocketConfig.fir 294553:4]
    a_first_counter <= mux(reset, UInt<9>("h0"), _GEN_0) @[Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 293808:4 Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 293808:4]
    opcode <= mux(_T_1045, io_in_a_bits_opcode, opcode) @[Monitor.scala 396:32 chipyard.TestHarness.RocketConfig.fir 293873:4 Monitor.scala 397:15 chipyard.TestHarness.RocketConfig.fir 293874:6 Monitor.scala 384:22 chipyard.TestHarness.RocketConfig.fir 293822:4]
    size <= mux(_T_1045, io_in_a_bits_size, size) @[Monitor.scala 396:32 chipyard.TestHarness.RocketConfig.fir 293873:4 Monitor.scala 399:15 chipyard.TestHarness.RocketConfig.fir 293876:6 Monitor.scala 386:22 chipyard.TestHarness.RocketConfig.fir 293824:4]
    address <= mux(_T_1045, io_in_a_bits_address, address) @[Monitor.scala 396:32 chipyard.TestHarness.RocketConfig.fir 293873:4 Monitor.scala 401:15 chipyard.TestHarness.RocketConfig.fir 293878:6 Monitor.scala 388:22 chipyard.TestHarness.RocketConfig.fir 293826:4]
    d_first_counter <= mux(reset, UInt<9>("h0"), _GEN_6) @[Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 293888:4 Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 293888:4]
    opcode_1 <= mux(_T_1073, io_in_d_bits_opcode, opcode_1) @[Monitor.scala 549:32 chipyard.TestHarness.RocketConfig.fir 293962:4 Monitor.scala 550:15 chipyard.TestHarness.RocketConfig.fir 293963:6 Monitor.scala 535:22 chipyard.TestHarness.RocketConfig.fir 293902:4]
    param_1 <= mux(_T_1073, io_in_d_bits_param, param_1) @[Monitor.scala 549:32 chipyard.TestHarness.RocketConfig.fir 293962:4 Monitor.scala 551:15 chipyard.TestHarness.RocketConfig.fir 293964:6 Monitor.scala 536:22 chipyard.TestHarness.RocketConfig.fir 293903:4]
    size_1 <= mux(_T_1073, io_in_d_bits_size, size_1) @[Monitor.scala 549:32 chipyard.TestHarness.RocketConfig.fir 293962:4 Monitor.scala 552:15 chipyard.TestHarness.RocketConfig.fir 293965:6 Monitor.scala 537:22 chipyard.TestHarness.RocketConfig.fir 293904:4]
    source_1 <= mux(_T_1073, io_in_d_bits_source, source_1) @[Monitor.scala 549:32 chipyard.TestHarness.RocketConfig.fir 293962:4 Monitor.scala 553:15 chipyard.TestHarness.RocketConfig.fir 293966:6 Monitor.scala 538:22 chipyard.TestHarness.RocketConfig.fir 293905:4]
    sink <= mux(_T_1073, io_in_d_bits_sink, sink) @[Monitor.scala 549:32 chipyard.TestHarness.RocketConfig.fir 293962:4 Monitor.scala 554:15 chipyard.TestHarness.RocketConfig.fir 293967:6 Monitor.scala 539:22 chipyard.TestHarness.RocketConfig.fir 293906:4]
    denied <= mux(_T_1073, io_in_d_bits_denied, denied) @[Monitor.scala 549:32 chipyard.TestHarness.RocketConfig.fir 293962:4 Monitor.scala 555:15 chipyard.TestHarness.RocketConfig.fir 293968:6 Monitor.scala 540:22 chipyard.TestHarness.RocketConfig.fir 293907:4]
    inflight <= mux(reset, UInt<1>("h0"), _inflight_T_2) @[Monitor.scala 611:27 chipyard.TestHarness.RocketConfig.fir 293970:4 Monitor.scala 611:27 chipyard.TestHarness.RocketConfig.fir 293970:4 Monitor.scala 702:14 chipyard.TestHarness.RocketConfig.fir 294239:4]
    inflight_opcodes <= mux(reset, UInt<4>("h0"), _inflight_opcodes_T_2) @[Monitor.scala 613:35 chipyard.TestHarness.RocketConfig.fir 293971:4 Monitor.scala 613:35 chipyard.TestHarness.RocketConfig.fir 293971:4 Monitor.scala 703:22 chipyard.TestHarness.RocketConfig.fir 294243:4]
    inflight_sizes <= mux(reset, UInt<8>("h0"), _inflight_sizes_T_2) @[Monitor.scala 615:33 chipyard.TestHarness.RocketConfig.fir 293972:4 Monitor.scala 615:33 chipyard.TestHarness.RocketConfig.fir 293972:4 Monitor.scala 704:20 chipyard.TestHarness.RocketConfig.fir 294247:4]
    a_first_counter_1 <= mux(reset, UInt<9>("h0"), _GEN_13) @[Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 293982:4 Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 293982:4]
    d_first_counter_1 <= mux(reset, UInt<9>("h0"), _GEN_14) @[Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 294004:4 Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 294004:4]
    watchdog <= mux(reset, UInt<32>("h0"), _GEN_57) @[Monitor.scala 706:27 chipyard.TestHarness.RocketConfig.fir 294248:4 Monitor.scala 706:27 chipyard.TestHarness.RocketConfig.fir 294248:4]
    inflight_sizes_1 <= mux(reset, UInt<8>("h0"), _inflight_sizes_T_5) @[Monitor.scala 725:35 chipyard.TestHarness.RocketConfig.fir 294275:4 Monitor.scala 725:35 chipyard.TestHarness.RocketConfig.fir 294275:4 Monitor.scala 811:22 chipyard.TestHarness.RocketConfig.fir 294554:4]
    d_first_counter_2 <= mux(reset, UInt<9>("h0"), _GEN_59) @[Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 294310:4 Edges.scala 228:27 chipyard.TestHarness.RocketConfig.fir 294310:4]
    node _GEN_90 = and(io_in_a_valid, _T_15) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 292482:10]
    printf(clock, and(_GEN_90, _T_84), "Assertion failed: 'A' channel carries AcquireBlock type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 292482:10]
    stop(clock, and(_GEN_90, _T_84), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 292483:10]
    printf(clock, and(_GEN_90, _T_147), "Assertion failed: 'A' channel carries AcquireBlock from a client which does not support Probe (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 292549:10]
    stop(clock, and(_GEN_90, _T_147), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 292550:10]
    printf(clock, and(_GEN_90, _T_154), "Assertion failed: 'A' channel AcquireBlock smaller than a beat (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 292564:10]
    stop(clock, and(_GEN_90, _T_154), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 292565:10]
    printf(clock, and(_GEN_90, _T_157), "Assertion failed: 'A' channel AcquireBlock address not aligned to size (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 292571:10]
    stop(clock, and(_GEN_90, _T_157), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 292572:10]
    printf(clock, and(_GEN_90, _T_166), "Assertion failed: 'A' channel AcquireBlock contains invalid mask (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 292588:10]
    stop(clock, and(_GEN_90, _T_166), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 292589:10]
    node _GEN_100 = and(io_in_a_valid, _T_171) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 292672:10]
    printf(clock, and(_GEN_100, _T_84), "Assertion failed: 'A' channel carries AcquirePerm type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 292672:10]
    stop(clock, and(_GEN_100, _T_84), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 292673:10]
    printf(clock, and(_GEN_100, _T_147), "Assertion failed: 'A' channel carries AcquirePerm from a client which does not support Probe (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 292739:10]
    stop(clock, and(_GEN_100, _T_147), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 292740:10]
    printf(clock, and(_GEN_100, _T_154), "Assertion failed: 'A' channel AcquirePerm smaller than a beat (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 292754:10]
    stop(clock, and(_GEN_100, _T_154), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 292755:10]
    printf(clock, and(_GEN_100, _T_157), "Assertion failed: 'A' channel AcquirePerm address not aligned to size (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 292761:10]
    stop(clock, and(_GEN_100, _T_157), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 292762:10]
    printf(clock, and(_GEN_100, _T_147), "Assertion failed: 'A' channel AcquirePerm requests NtoB (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 292777:10]
    stop(clock, and(_GEN_100, _T_147), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 292778:10]
    printf(clock, and(_GEN_100, _T_166), "Assertion failed: 'A' channel AcquirePerm contains invalid mask (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 292786:10]
    stop(clock, and(_GEN_100, _T_166), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 292787:10]
    node _GEN_112 = and(io_in_a_valid, _T_331) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 292810:10]
    printf(clock, and(_GEN_112, _T_340), "Assertion failed: 'A' channel carries Get type which master claims it can't emit (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 292810:10]
    stop(clock, and(_GEN_112, _T_340), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 292811:10]
    printf(clock, and(_GEN_112, _T_407), "Assertion failed: 'A' channel carries Get type which slave claims it can't support (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 292881:10]
    stop(clock, and(_GEN_112, _T_407), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 292882:10]
    printf(clock, and(_GEN_112, _T_157), "Assertion failed: 'A' channel Get address not aligned to size (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 292895:10]
    stop(clock, and(_GEN_112, _T_157), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 292896:10]
    printf(clock, and(_GEN_112, _T_421), "Assertion failed: 'A' channel Get contains invalid mask (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 292911:10]
    stop(clock, and(_GEN_112, _T_421), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 292912:10]
    node _GEN_120 = and(io_in_a_valid, _T_426) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 293002:10]
    printf(clock, and(_GEN_120, _T_502), "Assertion failed: 'A' channel carries PutFull type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 293002:10]
    stop(clock, and(_GEN_120, _T_502), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 293003:10]
    printf(clock, and(_GEN_120, _T_157), "Assertion failed: 'A' channel PutFull address not aligned to size (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 293016:10]
    stop(clock, and(_GEN_120, _T_157), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 293017:10]
    printf(clock, and(_GEN_120, _T_421), "Assertion failed: 'A' channel PutFull contains invalid mask (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 293032:10]
    stop(clock, and(_GEN_120, _T_421), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 293033:10]
    node _GEN_126 = and(io_in_a_valid, _T_517) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 293115:10]
    printf(clock, and(_GEN_126, _T_502), "Assertion failed: 'A' channel carries PutPartial type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 293115:10]
    stop(clock, and(_GEN_126, _T_502), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 293116:10]
    printf(clock, and(_GEN_126, _T_157), "Assertion failed: 'A' channel PutPartial address not aligned to size (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 293129:10]
    stop(clock, and(_GEN_126, _T_157), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 293130:10]
    printf(clock, and(_GEN_126, _T_609), "Assertion failed: 'A' channel PutPartial contains invalid mask (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 293147:10]
    stop(clock, and(_GEN_126, _T_609), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 293148:10]
    node _GEN_132 = and(io_in_a_valid, _T_610) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 293225:10]
    printf(clock, and(_GEN_132, _T_681), "Assertion failed: 'A' channel carries Arithmetic type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 293225:10]
    stop(clock, and(_GEN_132, _T_681), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 293226:10]
    printf(clock, and(_GEN_132, _T_157), "Assertion failed: 'A' channel Arithmetic address not aligned to size (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 293239:10]
    stop(clock, and(_GEN_132, _T_157), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 293240:10]
    printf(clock, and(_GEN_132, _T_421), "Assertion failed: 'A' channel Arithmetic contains invalid mask (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 293255:10]
    stop(clock, and(_GEN_132, _T_421), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 293256:10]
    node _GEN_138 = and(io_in_a_valid, _T_696) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 293333:10]
    printf(clock, and(_GEN_138, _T_681), "Assertion failed: 'A' channel carries Logical type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 293333:10]
    stop(clock, and(_GEN_138, _T_681), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 293334:10]
    printf(clock, and(_GEN_138, _T_157), "Assertion failed: 'A' channel Logical address not aligned to size (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 293347:10]
    stop(clock, and(_GEN_138, _T_157), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 293348:10]
    printf(clock, and(_GEN_138, _T_421), "Assertion failed: 'A' channel Logical contains invalid mask (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 293363:10]
    stop(clock, and(_GEN_138, _T_421), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 293364:10]
    node _GEN_144 = and(io_in_a_valid, _T_782) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 293446:10]
    printf(clock, and(_GEN_144, _T_858), "Assertion failed: 'A' channel carries Hint type which is unexpected using diplomatic parameters (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 293446:10]
    stop(clock, and(_GEN_144, _T_858), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 293447:10]
    printf(clock, and(_GEN_144, _T_157), "Assertion failed: 'A' channel Hint address not aligned to size (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 293460:10]
    stop(clock, and(_GEN_144, _T_157), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 293461:10]
    printf(clock, and(_GEN_144, _T_421), "Assertion failed: 'A' channel Hint contains invalid mask (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 293476:10]
    stop(clock, and(_GEN_144, _T_421), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 293477:10]
    printf(clock, and(io_in_d_valid, _T_880), "Assertion failed: 'D' channel has invalid opcode (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293495:8]
    stop(clock, and(io_in_d_valid, _T_880), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293496:8]
    node _GEN_150 = and(io_in_d_valid, _T_881) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293509:10]
    printf(clock, and(_GEN_150, _T_884), "Assertion failed: 'D' channel ReleaseAck carries invalid source ID (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293509:10]
    stop(clock, and(_GEN_150, _T_884), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293510:10]
    printf(clock, and(_GEN_150, _T_888), "Assertion failed: 'D' channel ReleaseAck smaller than a beat (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293517:10]
    stop(clock, and(_GEN_150, _T_888), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293518:10]
    printf(clock, and(_GEN_150, _T_892), "Assertion failed: 'D' channel ReleaseeAck carries invalid param (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293525:10]
    stop(clock, and(_GEN_150, _T_892), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293526:10]
    printf(clock, and(_GEN_150, _T_896), "Assertion failed: 'D' channel ReleaseAck is corrupt (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293533:10]
    stop(clock, and(_GEN_150, _T_896), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293534:10]
    printf(clock, and(_GEN_150, _T_900), "Assertion failed: 'D' channel ReleaseAck is denied (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293541:10]
    stop(clock, and(_GEN_150, _T_900), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293542:10]
    node _GEN_160 = and(io_in_d_valid, _T_901) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293551:10]
    printf(clock, and(_GEN_160, _T_884), "Assertion failed: 'D' channel Grant carries invalid source ID (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293551:10]
    stop(clock, and(_GEN_160, _T_884), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293552:10]
    printf(clock, and(_GEN_160, _T_888), "Assertion failed: 'D' channel Grant smaller than a beat (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293566:10]
    stop(clock, and(_GEN_160, _T_888), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293567:10]
    printf(clock, and(_GEN_160, _T_915), "Assertion failed: 'D' channel Grant carries invalid cap param (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293574:10]
    stop(clock, and(_GEN_160, _T_915), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293575:10]
    printf(clock, and(_GEN_160, _T_919), "Assertion failed: 'D' channel Grant carries toN param (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293582:10]
    stop(clock, and(_GEN_160, _T_919), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293583:10]
    printf(clock, and(_GEN_160, _T_896), "Assertion failed: 'D' channel Grant is corrupt (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293590:10]
    stop(clock, and(_GEN_160, _T_896), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293591:10]
    node _GEN_170 = and(io_in_d_valid, _T_929) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293609:10]
    printf(clock, and(_GEN_170, _T_884), "Assertion failed: 'D' channel GrantData carries invalid source ID (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293609:10]
    stop(clock, and(_GEN_170, _T_884), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293610:10]
    printf(clock, and(_GEN_170, _T_888), "Assertion failed: 'D' channel GrantData smaller than a beat (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293624:10]
    stop(clock, and(_GEN_170, _T_888), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293625:10]
    printf(clock, and(_GEN_170, _T_915), "Assertion failed: 'D' channel GrantData carries invalid cap param (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293632:10]
    stop(clock, and(_GEN_170, _T_915), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293633:10]
    printf(clock, and(_GEN_170, _T_919), "Assertion failed: 'D' channel GrantData carries toN param (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293640:10]
    stop(clock, and(_GEN_170, _T_919), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293641:10]
    printf(clock, and(_GEN_170, _T_952), "Assertion failed: 'D' channel GrantData is denied but not corrupt (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293649:10]
    stop(clock, and(_GEN_170, _T_952), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293650:10]
    node _GEN_180 = and(io_in_d_valid, _T_958) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293668:10]
    printf(clock, and(_GEN_180, _T_884), "Assertion failed: 'D' channel AccessAck carries invalid source ID (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293668:10]
    stop(clock, and(_GEN_180, _T_884), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293669:10]
    printf(clock, and(_GEN_180, _T_892), "Assertion failed: 'D' channel AccessAck carries invalid param (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293676:10]
    stop(clock, and(_GEN_180, _T_892), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293677:10]
    printf(clock, and(_GEN_180, _T_896), "Assertion failed: 'D' channel AccessAck is corrupt (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293684:10]
    stop(clock, and(_GEN_180, _T_896), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293685:10]
    node _GEN_186 = and(io_in_d_valid, _T_975) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293703:10]
    printf(clock, and(_GEN_186, _T_884), "Assertion failed: 'D' channel AccessAckData carries invalid source ID (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293703:10]
    stop(clock, and(_GEN_186, _T_884), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293704:10]
    printf(clock, and(_GEN_186, _T_892), "Assertion failed: 'D' channel AccessAckData carries invalid param (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293711:10]
    stop(clock, and(_GEN_186, _T_892), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293712:10]
    printf(clock, and(_GEN_186, _T_952), "Assertion failed: 'D' channel AccessAckData is denied but not corrupt (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293720:10]
    stop(clock, and(_GEN_186, _T_952), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293721:10]
    node _GEN_192 = and(io_in_d_valid, _T_993) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293739:10]
    printf(clock, and(_GEN_192, _T_884), "Assertion failed: 'D' channel HintAck carries invalid source ID (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293739:10]
    stop(clock, and(_GEN_192, _T_884), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293740:10]
    printf(clock, and(_GEN_192, _T_892), "Assertion failed: 'D' channel HintAck carries invalid param (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293747:10]
    stop(clock, and(_GEN_192, _T_892), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293748:10]
    printf(clock, and(_GEN_192, _T_896), "Assertion failed: 'D' channel HintAck is corrupt (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293755:10]
    stop(clock, and(_GEN_192, _T_896), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293756:10]
    printf(clock, and(_T_1023, _T_1027), "Assertion failed: 'A' channel opcode changed within multibeat operation (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 293835:8]
    stop(clock, and(_T_1023, _T_1027), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 293836:8]
    printf(clock, and(_T_1023, _T_1035), "Assertion failed: 'A' channel size changed within multibeat operation (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 293851:8]
    stop(clock, and(_T_1023, _T_1035), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 293852:8]
    printf(clock, and(_T_1023, _T_1043), "Assertion failed: 'A' channel address changed with multibeat operation (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 293867:8]
    stop(clock, and(_T_1023, _T_1043), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 293868:8]
    printf(clock, and(_T_1047, _T_1051), "Assertion failed: 'D' channel opcode changed within multibeat operation (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293916:8]
    stop(clock, and(_T_1047, _T_1051), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293917:8]
    printf(clock, and(_T_1047, _T_1055), "Assertion failed: 'D' channel param changed within multibeat operation (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293924:8]
    stop(clock, and(_T_1047, _T_1055), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293925:8]
    printf(clock, and(_T_1047, _T_1059), "Assertion failed: 'D' channel size changed within multibeat operation (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293932:8]
    stop(clock, and(_T_1047, _T_1059), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293933:8]
    printf(clock, and(_T_1047, _T_1063), "Assertion failed: 'D' channel source changed within multibeat operation (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293940:8]
    stop(clock, and(_T_1047, _T_1063), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293941:8]
    printf(clock, and(_T_1047, _T_1067), "Assertion failed: 'D' channel sink changed with multibeat operation (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293948:8]
    stop(clock, and(_T_1047, _T_1067), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293949:8]
    printf(clock, and(_T_1047, _T_1071), "Assertion failed: 'D' channel denied changed with multibeat operation (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293956:8]
    stop(clock, and(_T_1047, _T_1071), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 293957:8]
    printf(clock, and(_T_1077, _T_1084), "Assertion failed: 'A' channel re-used a source ID (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 294101:8]
    stop(clock, and(_T_1077, _T_1084), 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 294102:8]
    printf(clock, and(_T_1088, _T_1103), "Assertion failed: 'D' channel acknowledged for nothing inflight (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 294161:8]
    stop(clock, and(_T_1088, _T_1103), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 294162:8]
    node _GEN_198 = and(_T_1088, same_cycle_resp) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 294172:10]
    printf(clock, and(_GEN_198, _T_1109), "Assertion failed: 'D' channel contains improper opcode response (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 294172:10]
    stop(clock, and(_GEN_198, _T_1109), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 294173:10]
    printf(clock, and(_GEN_198, _T_1113), "Assertion failed: 'D' channel contains improper response size (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 294180:10]
    stop(clock, and(_GEN_198, _T_1113), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 294181:10]
    node _GEN_202 = not(same_cycle_resp) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 294194:10]
    node _GEN_203 = and(_T_1088, _GEN_202) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 294194:10]
    printf(clock, and(_GEN_203, _T_1121), "Assertion failed: 'D' channel contains improper opcode response (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 294194:10]
    stop(clock, and(_GEN_203, _T_1121), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 294195:10]
    printf(clock, and(_GEN_203, _T_1125), "Assertion failed: 'D' channel contains improper response size (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 294202:10]
    stop(clock, and(_GEN_203, _T_1125), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 294203:10]
    printf(clock, and(_T_1132, _T_1137), "Assertion failed: ready check\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 294221:8]
    stop(clock, and(_T_1132, _T_1137), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 294222:8]
    printf(clock, _T_1144, "Assertion failed: 'A' and 'D' concurrent, despite minlatency 8 (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 294233:6]
    stop(clock, _T_1144, 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 294234:6]
    printf(clock, _T_1153, "Assertion failed: TileLink timeout expired (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:42 assert(cond, message)\n") @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 294261:6]
    stop(clock, _T_1153, 1) @[Monitor.scala 42:11 chipyard.TestHarness.RocketConfig.fir 294262:6]
    printf(clock, and(_T_1176, _T_1189), "Assertion failed: 'D' channel acknowledged for nothing inflight (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 294483:8]
    stop(clock, and(_T_1176, _T_1189), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 294484:8]
    printf(clock, and(_T_1176, _T_1197), "Assertion failed: 'D' channel contains improper response size (connected at SerialAdapter.scala:331:39)\n    at Monitor.scala:49 assert(cond, message)\n") @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 294504:10]
    stop(clock, and(_T_1176, _T_1197), 1) @[Monitor.scala 49:11 chipyard.TestHarness.RocketConfig.fir 294505:10]

  module TLBuffer_21_inTestHarness : @[chipyard.TestHarness.RocketConfig.fir 294711:2]
    input clock : Clock @[chipyard.TestHarness.RocketConfig.fir 294712:4]
    input reset : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 294713:4]
    output auto_in_a_ready : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 294714:4]
    input auto_in_a_valid : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 294714:4]
    input auto_in_a_bits_opcode : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 294714:4]
    input auto_in_a_bits_size : UInt<4> @[chipyard.TestHarness.RocketConfig.fir 294714:4]
    input auto_in_a_bits_address : UInt<32> @[chipyard.TestHarness.RocketConfig.fir 294714:4]
    input auto_in_a_bits_mask : UInt<8> @[chipyard.TestHarness.RocketConfig.fir 294714:4]
    input auto_in_a_bits_data : UInt<64> @[chipyard.TestHarness.RocketConfig.fir 294714:4]
    input auto_in_d_ready : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 294714:4]
    output auto_in_d_valid : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 294714:4]
    output auto_in_d_bits_data : UInt<64> @[chipyard.TestHarness.RocketConfig.fir 294714:4]
    input auto_out_a_ready : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 294714:4]
    output auto_out_a_valid : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 294714:4]
    output auto_out_a_bits_opcode : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 294714:4]
    output auto_out_a_bits_param : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 294714:4]
    output auto_out_a_bits_size : UInt<4> @[chipyard.TestHarness.RocketConfig.fir 294714:4]
    output auto_out_a_bits_source : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 294714:4]
    output auto_out_a_bits_address : UInt<32> @[chipyard.TestHarness.RocketConfig.fir 294714:4]
    output auto_out_a_bits_mask : UInt<8> @[chipyard.TestHarness.RocketConfig.fir 294714:4]
    output auto_out_a_bits_data : UInt<64> @[chipyard.TestHarness.RocketConfig.fir 294714:4]
    output auto_out_a_bits_corrupt : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 294714:4]
    output auto_out_d_ready : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 294714:4]
    input auto_out_d_valid : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 294714:4]
    input auto_out_d_bits_opcode : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 294714:4]
    input auto_out_d_bits_param : UInt<2> @[chipyard.TestHarness.RocketConfig.fir 294714:4]
    input auto_out_d_bits_size : UInt<4> @[chipyard.TestHarness.RocketConfig.fir 294714:4]
    input auto_out_d_bits_source : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 294714:4]
    input auto_out_d_bits_sink : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 294714:4]
    input auto_out_d_bits_denied : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 294714:4]
    input auto_out_d_bits_data : UInt<64> @[chipyard.TestHarness.RocketConfig.fir 294714:4]
    input auto_out_d_bits_corrupt : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 294714:4]

    inst monitor of TLMonitor_57_inTestHarness @[Nodes.scala 24:25 chipyard.TestHarness.RocketConfig.fir 294721:4]
    inst bundleOut_0_a_q of Queue_6_inTestHarness @[Decoupled.scala 296:21 chipyard.TestHarness.RocketConfig.fir 294748:4]
    inst bundleIn_0_d_q of Queue_7_inTestHarness @[Decoupled.scala 296:21 chipyard.TestHarness.RocketConfig.fir 294762:4]
    auto_in_a_ready <= bundleOut_0_a_q.io_enq_ready @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 294719:4 Decoupled.scala 299:17 chipyard.TestHarness.RocketConfig.fir 294760:4]
    auto_in_d_valid <= bundleIn_0_d_q.io_deq_valid @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 294719:4 Buffer.scala 38:13 chipyard.TestHarness.RocketConfig.fir 294775:4]
    auto_in_d_bits_data <= bundleIn_0_d_q.io_deq_bits_data @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 294719:4 Buffer.scala 38:13 chipyard.TestHarness.RocketConfig.fir 294775:4]
    auto_out_a_valid <= bundleOut_0_a_q.io_deq_valid @[Nodes.scala 1207:84 chipyard.TestHarness.RocketConfig.fir 294744:4 Buffer.scala 37:13 chipyard.TestHarness.RocketConfig.fir 294761:4]
    auto_out_a_bits_opcode <= bundleOut_0_a_q.io_deq_bits_opcode @[Nodes.scala 1207:84 chipyard.TestHarness.RocketConfig.fir 294744:4 Buffer.scala 37:13 chipyard.TestHarness.RocketConfig.fir 294761:4]
    auto_out_a_bits_param <= bundleOut_0_a_q.io_deq_bits_param @[Nodes.scala 1207:84 chipyard.TestHarness.RocketConfig.fir 294744:4 Buffer.scala 37:13 chipyard.TestHarness.RocketConfig.fir 294761:4]
    auto_out_a_bits_size <= bundleOut_0_a_q.io_deq_bits_size @[Nodes.scala 1207:84 chipyard.TestHarness.RocketConfig.fir 294744:4 Buffer.scala 37:13 chipyard.TestHarness.RocketConfig.fir 294761:4]
    auto_out_a_bits_source <= bundleOut_0_a_q.io_deq_bits_source @[Nodes.scala 1207:84 chipyard.TestHarness.RocketConfig.fir 294744:4 Buffer.scala 37:13 chipyard.TestHarness.RocketConfig.fir 294761:4]
    auto_out_a_bits_address <= bundleOut_0_a_q.io_deq_bits_address @[Nodes.scala 1207:84 chipyard.TestHarness.RocketConfig.fir 294744:4 Buffer.scala 37:13 chipyard.TestHarness.RocketConfig.fir 294761:4]
    auto_out_a_bits_mask <= bundleOut_0_a_q.io_deq_bits_mask @[Nodes.scala 1207:84 chipyard.TestHarness.RocketConfig.fir 294744:4 Buffer.scala 37:13 chipyard.TestHarness.RocketConfig.fir 294761:4]
    auto_out_a_bits_data <= bundleOut_0_a_q.io_deq_bits_data @[Nodes.scala 1207:84 chipyard.TestHarness.RocketConfig.fir 294744:4 Buffer.scala 37:13 chipyard.TestHarness.RocketConfig.fir 294761:4]
    auto_out_a_bits_corrupt <= bundleOut_0_a_q.io_deq_bits_corrupt @[Nodes.scala 1207:84 chipyard.TestHarness.RocketConfig.fir 294744:4 Buffer.scala 37:13 chipyard.TestHarness.RocketConfig.fir 294761:4]
    auto_out_d_ready <= bundleIn_0_d_q.io_enq_ready @[Nodes.scala 1207:84 chipyard.TestHarness.RocketConfig.fir 294744:4 Decoupled.scala 299:17 chipyard.TestHarness.RocketConfig.fir 294774:4]
    monitor.clock <= clock @[chipyard.TestHarness.RocketConfig.fir 294722:4]
    monitor.reset <= reset @[chipyard.TestHarness.RocketConfig.fir 294723:4]
    monitor.io_in_a_ready <= bundleOut_0_a_q.io_enq_ready @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 294719:4 Decoupled.scala 299:17 chipyard.TestHarness.RocketConfig.fir 294760:4]
    monitor.io_in_a_valid <= auto_in_a_valid @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 294719:4 LazyModule.scala 309:16 chipyard.TestHarness.RocketConfig.fir 294747:4]
    monitor.io_in_a_bits_opcode <= auto_in_a_bits_opcode @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 294719:4 LazyModule.scala 309:16 chipyard.TestHarness.RocketConfig.fir 294747:4]
    monitor.io_in_a_bits_size <= auto_in_a_bits_size @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 294719:4 LazyModule.scala 309:16 chipyard.TestHarness.RocketConfig.fir 294747:4]
    monitor.io_in_a_bits_address <= auto_in_a_bits_address @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 294719:4 LazyModule.scala 309:16 chipyard.TestHarness.RocketConfig.fir 294747:4]
    monitor.io_in_a_bits_mask <= auto_in_a_bits_mask @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 294719:4 LazyModule.scala 309:16 chipyard.TestHarness.RocketConfig.fir 294747:4]
    monitor.io_in_d_ready <= auto_in_d_ready @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 294719:4 LazyModule.scala 309:16 chipyard.TestHarness.RocketConfig.fir 294747:4]
    monitor.io_in_d_valid <= bundleIn_0_d_q.io_deq_valid @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 294719:4 Buffer.scala 38:13 chipyard.TestHarness.RocketConfig.fir 294775:4]
    monitor.io_in_d_bits_opcode <= bundleIn_0_d_q.io_deq_bits_opcode @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 294719:4 Buffer.scala 38:13 chipyard.TestHarness.RocketConfig.fir 294775:4]
    monitor.io_in_d_bits_param <= bundleIn_0_d_q.io_deq_bits_param @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 294719:4 Buffer.scala 38:13 chipyard.TestHarness.RocketConfig.fir 294775:4]
    monitor.io_in_d_bits_size <= bundleIn_0_d_q.io_deq_bits_size @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 294719:4 Buffer.scala 38:13 chipyard.TestHarness.RocketConfig.fir 294775:4]
    monitor.io_in_d_bits_source <= bundleIn_0_d_q.io_deq_bits_source @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 294719:4 Buffer.scala 38:13 chipyard.TestHarness.RocketConfig.fir 294775:4]
    monitor.io_in_d_bits_sink <= bundleIn_0_d_q.io_deq_bits_sink @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 294719:4 Buffer.scala 38:13 chipyard.TestHarness.RocketConfig.fir 294775:4]
    monitor.io_in_d_bits_denied <= bundleIn_0_d_q.io_deq_bits_denied @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 294719:4 Buffer.scala 38:13 chipyard.TestHarness.RocketConfig.fir 294775:4]
    monitor.io_in_d_bits_corrupt <= bundleIn_0_d_q.io_deq_bits_corrupt @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 294719:4 Buffer.scala 38:13 chipyard.TestHarness.RocketConfig.fir 294775:4]
    bundleOut_0_a_q.clock <= clock @[chipyard.TestHarness.RocketConfig.fir 294749:4]
    bundleOut_0_a_q.reset <= reset @[chipyard.TestHarness.RocketConfig.fir 294750:4]
    bundleOut_0_a_q.io_enq_valid <= auto_in_a_valid @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 294719:4 LazyModule.scala 309:16 chipyard.TestHarness.RocketConfig.fir 294747:4]
    bundleOut_0_a_q.io_enq_bits_opcode <= auto_in_a_bits_opcode @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 294719:4 LazyModule.scala 309:16 chipyard.TestHarness.RocketConfig.fir 294747:4]
    bundleOut_0_a_q.io_enq_bits_size <= auto_in_a_bits_size @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 294719:4 LazyModule.scala 309:16 chipyard.TestHarness.RocketConfig.fir 294747:4]
    bundleOut_0_a_q.io_enq_bits_address <= auto_in_a_bits_address @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 294719:4 LazyModule.scala 309:16 chipyard.TestHarness.RocketConfig.fir 294747:4]
    bundleOut_0_a_q.io_enq_bits_mask <= auto_in_a_bits_mask @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 294719:4 LazyModule.scala 309:16 chipyard.TestHarness.RocketConfig.fir 294747:4]
    bundleOut_0_a_q.io_enq_bits_data <= auto_in_a_bits_data @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 294719:4 LazyModule.scala 309:16 chipyard.TestHarness.RocketConfig.fir 294747:4]
    bundleOut_0_a_q.io_deq_ready <= auto_out_a_ready @[Nodes.scala 1207:84 chipyard.TestHarness.RocketConfig.fir 294744:4 LazyModule.scala 311:12 chipyard.TestHarness.RocketConfig.fir 294746:4]
    bundleIn_0_d_q.clock <= clock @[chipyard.TestHarness.RocketConfig.fir 294763:4]
    bundleIn_0_d_q.reset <= reset @[chipyard.TestHarness.RocketConfig.fir 294764:4]
    bundleIn_0_d_q.io_enq_valid <= auto_out_d_valid @[Nodes.scala 1207:84 chipyard.TestHarness.RocketConfig.fir 294744:4 LazyModule.scala 311:12 chipyard.TestHarness.RocketConfig.fir 294746:4]
    bundleIn_0_d_q.io_enq_bits_opcode <= auto_out_d_bits_opcode @[Nodes.scala 1207:84 chipyard.TestHarness.RocketConfig.fir 294744:4 LazyModule.scala 311:12 chipyard.TestHarness.RocketConfig.fir 294746:4]
    bundleIn_0_d_q.io_enq_bits_param <= auto_out_d_bits_param @[Nodes.scala 1207:84 chipyard.TestHarness.RocketConfig.fir 294744:4 LazyModule.scala 311:12 chipyard.TestHarness.RocketConfig.fir 294746:4]
    bundleIn_0_d_q.io_enq_bits_size <= auto_out_d_bits_size @[Nodes.scala 1207:84 chipyard.TestHarness.RocketConfig.fir 294744:4 LazyModule.scala 311:12 chipyard.TestHarness.RocketConfig.fir 294746:4]
    bundleIn_0_d_q.io_enq_bits_source <= auto_out_d_bits_source @[Nodes.scala 1207:84 chipyard.TestHarness.RocketConfig.fir 294744:4 LazyModule.scala 311:12 chipyard.TestHarness.RocketConfig.fir 294746:4]
    bundleIn_0_d_q.io_enq_bits_sink <= auto_out_d_bits_sink @[Nodes.scala 1207:84 chipyard.TestHarness.RocketConfig.fir 294744:4 LazyModule.scala 311:12 chipyard.TestHarness.RocketConfig.fir 294746:4]
    bundleIn_0_d_q.io_enq_bits_denied <= auto_out_d_bits_denied @[Nodes.scala 1207:84 chipyard.TestHarness.RocketConfig.fir 294744:4 LazyModule.scala 311:12 chipyard.TestHarness.RocketConfig.fir 294746:4]
    bundleIn_0_d_q.io_enq_bits_data <= auto_out_d_bits_data @[Nodes.scala 1207:84 chipyard.TestHarness.RocketConfig.fir 294744:4 LazyModule.scala 311:12 chipyard.TestHarness.RocketConfig.fir 294746:4]
    bundleIn_0_d_q.io_enq_bits_corrupt <= auto_out_d_bits_corrupt @[Nodes.scala 1207:84 chipyard.TestHarness.RocketConfig.fir 294744:4 LazyModule.scala 311:12 chipyard.TestHarness.RocketConfig.fir 294746:4]
    bundleIn_0_d_q.io_deq_ready <= auto_in_d_ready @[Nodes.scala 1210:84 chipyard.TestHarness.RocketConfig.fir 294719:4 LazyModule.scala 309:16 chipyard.TestHarness.RocketConfig.fir 294747:4]

  module SerialRAM_inTestHarness : @[chipyard.TestHarness.RocketConfig.fir 294795:2]
    input clock : Clock @[chipyard.TestHarness.RocketConfig.fir 294796:4]
    input reset : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 294797:4]
    input io_ser_in_ready : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 294799:4]
    output io_ser_in_valid : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 294799:4]
    output io_ser_in_bits : UInt<4> @[chipyard.TestHarness.RocketConfig.fir 294799:4]
    output io_ser_out_ready : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 294799:4]
    input io_ser_out_valid : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 294799:4]
    input io_ser_out_bits : UInt<4> @[chipyard.TestHarness.RocketConfig.fir 294799:4]
    output io_tsi_ser_in_ready : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 294799:4]
    input io_tsi_ser_in_valid : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 294799:4]
    input io_tsi_ser_in_bits : UInt<32> @[chipyard.TestHarness.RocketConfig.fir 294799:4]
    input io_tsi_ser_out_ready : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 294799:4]
    output io_tsi_ser_out_valid : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 294799:4]
    output io_tsi_ser_out_bits : UInt<32> @[chipyard.TestHarness.RocketConfig.fir 294799:4]

    inst adapter of SerialAdapter_inTestHarness @[SerialAdapter.scala 311:27 chipyard.TestHarness.RocketConfig.fir 294805:4]
    inst serdesser of TLSerdesser_1_inTestHarness @[SerialAdapter.scala 312:29 chipyard.TestHarness.RocketConfig.fir 294812:4]
    inst srams of TLRAM_inTestHarness @[SerialAdapter.scala 322:15 chipyard.TestHarness.RocketConfig.fir 294819:4]
    inst xbar of TLXbar_10_inTestHarness @[Xbar.scala 142:26 chipyard.TestHarness.RocketConfig.fir 294825:4]
    inst buffer of TLBuffer_20_inTestHarness @[Buffer.scala 68:28 chipyard.TestHarness.RocketConfig.fir 294831:4]
    inst fragmenter of TLFragmenter_8_inTestHarness @[Fragmenter.scala 333:34 chipyard.TestHarness.RocketConfig.fir 294837:4]
    inst buffer_1 of TLBuffer_21_inTestHarness @[Buffer.scala 68:28 chipyard.TestHarness.RocketConfig.fir 294843:4]
    io_ser_in_valid <= serdesser.io_ser_out_valid @[SerialAdapter.scala 340:15 chipyard.TestHarness.RocketConfig.fir 294859:4]
    io_ser_in_bits <= serdesser.io_ser_out_bits @[SerialAdapter.scala 340:15 chipyard.TestHarness.RocketConfig.fir 294858:4]
    io_ser_out_ready <= serdesser.io_ser_in_ready @[SerialAdapter.scala 339:32 chipyard.TestHarness.RocketConfig.fir 294857:4]
    io_tsi_ser_in_ready <= adapter.io_serial_in_ready @[SerialAdapter.scala 341:16 chipyard.TestHarness.RocketConfig.fir 294866:4]
    io_tsi_ser_out_valid <= adapter.io_serial_out_valid @[SerialAdapter.scala 341:16 chipyard.TestHarness.RocketConfig.fir 294862:4]
    io_tsi_ser_out_bits <= adapter.io_serial_out_bits @[SerialAdapter.scala 341:16 chipyard.TestHarness.RocketConfig.fir 294861:4]
    adapter.clock <= clock @[chipyard.TestHarness.RocketConfig.fir 294810:4]
    adapter.reset <= reset @[chipyard.TestHarness.RocketConfig.fir 294811:4]
    adapter.auto_out_a_ready <= buffer_1.auto_in_a_ready @[LazyModule.scala 298:16 chipyard.TestHarness.RocketConfig.fir 294849:4]
    adapter.auto_out_d_valid <= buffer_1.auto_in_d_valid @[LazyModule.scala 298:16 chipyard.TestHarness.RocketConfig.fir 294849:4]
    adapter.auto_out_d_bits_data <= buffer_1.auto_in_d_bits_data @[LazyModule.scala 298:16 chipyard.TestHarness.RocketConfig.fir 294849:4]
    adapter.io_serial_in_valid <= io_tsi_ser_in_valid @[SerialAdapter.scala 341:16 chipyard.TestHarness.RocketConfig.fir 294865:4]
    adapter.io_serial_in_bits <= io_tsi_ser_in_bits @[SerialAdapter.scala 341:16 chipyard.TestHarness.RocketConfig.fir 294864:4]
    adapter.io_serial_out_ready <= io_tsi_ser_out_ready @[SerialAdapter.scala 341:16 chipyard.TestHarness.RocketConfig.fir 294863:4]
    serdesser.clock <= clock @[chipyard.TestHarness.RocketConfig.fir 294817:4]
    serdesser.reset <= reset @[chipyard.TestHarness.RocketConfig.fir 294818:4]
    serdesser.auto_manager_in_a_valid <= buffer_1.auto_out_a_valid @[LazyModule.scala 296:16 chipyard.TestHarness.RocketConfig.fir 294854:4]
    serdesser.auto_manager_in_a_bits_opcode <= buffer_1.auto_out_a_bits_opcode @[LazyModule.scala 296:16 chipyard.TestHarness.RocketConfig.fir 294854:4]
    serdesser.auto_manager_in_a_bits_param <= buffer_1.auto_out_a_bits_param @[LazyModule.scala 296:16 chipyard.TestHarness.RocketConfig.fir 294854:4]
    serdesser.auto_manager_in_a_bits_size <= buffer_1.auto_out_a_bits_size @[LazyModule.scala 296:16 chipyard.TestHarness.RocketConfig.fir 294854:4]
    serdesser.auto_manager_in_a_bits_source <= buffer_1.auto_out_a_bits_source @[LazyModule.scala 296:16 chipyard.TestHarness.RocketConfig.fir 294854:4]
    serdesser.auto_manager_in_a_bits_address <= buffer_1.auto_out_a_bits_address @[LazyModule.scala 296:16 chipyard.TestHarness.RocketConfig.fir 294854:4]
    serdesser.auto_manager_in_a_bits_mask <= buffer_1.auto_out_a_bits_mask @[LazyModule.scala 296:16 chipyard.TestHarness.RocketConfig.fir 294854:4]
    serdesser.auto_manager_in_a_bits_data <= buffer_1.auto_out_a_bits_data @[LazyModule.scala 296:16 chipyard.TestHarness.RocketConfig.fir 294854:4]
    serdesser.auto_manager_in_a_bits_corrupt <= buffer_1.auto_out_a_bits_corrupt @[LazyModule.scala 296:16 chipyard.TestHarness.RocketConfig.fir 294854:4]
    serdesser.auto_manager_in_d_ready <= buffer_1.auto_out_d_ready @[LazyModule.scala 296:16 chipyard.TestHarness.RocketConfig.fir 294854:4]
    serdesser.auto_client_out_a_ready <= xbar.auto_in_a_ready @[LazyModule.scala 298:16 chipyard.TestHarness.RocketConfig.fir 294850:4]
    serdesser.auto_client_out_d_valid <= xbar.auto_in_d_valid @[LazyModule.scala 298:16 chipyard.TestHarness.RocketConfig.fir 294850:4]
    serdesser.auto_client_out_d_bits_opcode <= xbar.auto_in_d_bits_opcode @[LazyModule.scala 298:16 chipyard.TestHarness.RocketConfig.fir 294850:4]
    serdesser.auto_client_out_d_bits_param <= xbar.auto_in_d_bits_param @[LazyModule.scala 298:16 chipyard.TestHarness.RocketConfig.fir 294850:4]
    serdesser.auto_client_out_d_bits_size <= xbar.auto_in_d_bits_size @[LazyModule.scala 298:16 chipyard.TestHarness.RocketConfig.fir 294850:4]
    serdesser.auto_client_out_d_bits_source <= xbar.auto_in_d_bits_source @[LazyModule.scala 298:16 chipyard.TestHarness.RocketConfig.fir 294850:4]
    serdesser.auto_client_out_d_bits_sink <= xbar.auto_in_d_bits_sink @[LazyModule.scala 298:16 chipyard.TestHarness.RocketConfig.fir 294850:4]
    serdesser.auto_client_out_d_bits_denied <= xbar.auto_in_d_bits_denied @[LazyModule.scala 298:16 chipyard.TestHarness.RocketConfig.fir 294850:4]
    serdesser.auto_client_out_d_bits_data <= xbar.auto_in_d_bits_data @[LazyModule.scala 298:16 chipyard.TestHarness.RocketConfig.fir 294850:4]
    serdesser.auto_client_out_d_bits_corrupt <= xbar.auto_in_d_bits_corrupt @[LazyModule.scala 298:16 chipyard.TestHarness.RocketConfig.fir 294850:4]
    serdesser.io_ser_in_valid <= io_ser_out_valid @[SerialAdapter.scala 339:32 chipyard.TestHarness.RocketConfig.fir 294856:4]
    serdesser.io_ser_in_bits <= io_ser_out_bits @[SerialAdapter.scala 339:32 chipyard.TestHarness.RocketConfig.fir 294855:4]
    serdesser.io_ser_out_ready <= io_ser_in_ready @[SerialAdapter.scala 340:15 chipyard.TestHarness.RocketConfig.fir 294860:4]
    srams.clock <= clock @[chipyard.TestHarness.RocketConfig.fir 294823:4]
    srams.reset <= reset @[chipyard.TestHarness.RocketConfig.fir 294824:4]
    srams.auto_in_a_valid <= buffer.auto_out_a_valid @[LazyModule.scala 296:16 chipyard.TestHarness.RocketConfig.fir 294852:4]
    srams.auto_in_a_bits_opcode <= buffer.auto_out_a_bits_opcode @[LazyModule.scala 296:16 chipyard.TestHarness.RocketConfig.fir 294852:4]
    srams.auto_in_a_bits_param <= buffer.auto_out_a_bits_param @[LazyModule.scala 296:16 chipyard.TestHarness.RocketConfig.fir 294852:4]
    srams.auto_in_a_bits_size <= buffer.auto_out_a_bits_size @[LazyModule.scala 296:16 chipyard.TestHarness.RocketConfig.fir 294852:4]
    srams.auto_in_a_bits_source <= buffer.auto_out_a_bits_source @[LazyModule.scala 296:16 chipyard.TestHarness.RocketConfig.fir 294852:4]
    srams.auto_in_a_bits_address <= buffer.auto_out_a_bits_address @[LazyModule.scala 296:16 chipyard.TestHarness.RocketConfig.fir 294852:4]
    srams.auto_in_a_bits_mask <= buffer.auto_out_a_bits_mask @[LazyModule.scala 296:16 chipyard.TestHarness.RocketConfig.fir 294852:4]
    srams.auto_in_a_bits_data <= buffer.auto_out_a_bits_data @[LazyModule.scala 296:16 chipyard.TestHarness.RocketConfig.fir 294852:4]
    srams.auto_in_a_bits_corrupt <= buffer.auto_out_a_bits_corrupt @[LazyModule.scala 296:16 chipyard.TestHarness.RocketConfig.fir 294852:4]
    srams.auto_in_d_ready <= buffer.auto_out_d_ready @[LazyModule.scala 296:16 chipyard.TestHarness.RocketConfig.fir 294852:4]
    xbar.auto_in_a_valid <= serdesser.auto_client_out_a_valid @[LazyModule.scala 298:16 chipyard.TestHarness.RocketConfig.fir 294850:4]
    xbar.auto_in_a_bits_opcode <= serdesser.auto_client_out_a_bits_opcode @[LazyModule.scala 298:16 chipyard.TestHarness.RocketConfig.fir 294850:4]
    xbar.auto_in_a_bits_param <= serdesser.auto_client_out_a_bits_param @[LazyModule.scala 298:16 chipyard.TestHarness.RocketConfig.fir 294850:4]
    xbar.auto_in_a_bits_size <= serdesser.auto_client_out_a_bits_size @[LazyModule.scala 298:16 chipyard.TestHarness.RocketConfig.fir 294850:4]
    xbar.auto_in_a_bits_source <= serdesser.auto_client_out_a_bits_source @[LazyModule.scala 298:16 chipyard.TestHarness.RocketConfig.fir 294850:4]
    xbar.auto_in_a_bits_address <= serdesser.auto_client_out_a_bits_address @[LazyModule.scala 298:16 chipyard.TestHarness.RocketConfig.fir 294850:4]
    xbar.auto_in_a_bits_mask <= serdesser.auto_client_out_a_bits_mask @[LazyModule.scala 298:16 chipyard.TestHarness.RocketConfig.fir 294850:4]
    xbar.auto_in_a_bits_data <= serdesser.auto_client_out_a_bits_data @[LazyModule.scala 298:16 chipyard.TestHarness.RocketConfig.fir 294850:4]
    xbar.auto_in_a_bits_corrupt <= serdesser.auto_client_out_a_bits_corrupt @[LazyModule.scala 298:16 chipyard.TestHarness.RocketConfig.fir 294850:4]
    xbar.auto_in_d_ready <= serdesser.auto_client_out_d_ready @[LazyModule.scala 298:16 chipyard.TestHarness.RocketConfig.fir 294850:4]
    xbar.auto_out_a_ready <= fragmenter.auto_in_a_ready @[LazyModule.scala 298:16 chipyard.TestHarness.RocketConfig.fir 294851:4]
    xbar.auto_out_d_valid <= fragmenter.auto_in_d_valid @[LazyModule.scala 298:16 chipyard.TestHarness.RocketConfig.fir 294851:4]
    xbar.auto_out_d_bits_opcode <= fragmenter.auto_in_d_bits_opcode @[LazyModule.scala 298:16 chipyard.TestHarness.RocketConfig.fir 294851:4]
    xbar.auto_out_d_bits_param <= fragmenter.auto_in_d_bits_param @[LazyModule.scala 298:16 chipyard.TestHarness.RocketConfig.fir 294851:4]
    xbar.auto_out_d_bits_size <= fragmenter.auto_in_d_bits_size @[LazyModule.scala 298:16 chipyard.TestHarness.RocketConfig.fir 294851:4]
    xbar.auto_out_d_bits_source <= fragmenter.auto_in_d_bits_source @[LazyModule.scala 298:16 chipyard.TestHarness.RocketConfig.fir 294851:4]
    xbar.auto_out_d_bits_sink <= fragmenter.auto_in_d_bits_sink @[LazyModule.scala 298:16 chipyard.TestHarness.RocketConfig.fir 294851:4]
    xbar.auto_out_d_bits_denied <= fragmenter.auto_in_d_bits_denied @[LazyModule.scala 298:16 chipyard.TestHarness.RocketConfig.fir 294851:4]
    xbar.auto_out_d_bits_data <= fragmenter.auto_in_d_bits_data @[LazyModule.scala 298:16 chipyard.TestHarness.RocketConfig.fir 294851:4]
    xbar.auto_out_d_bits_corrupt <= fragmenter.auto_in_d_bits_corrupt @[LazyModule.scala 298:16 chipyard.TestHarness.RocketConfig.fir 294851:4]
    buffer.clock <= clock @[chipyard.TestHarness.RocketConfig.fir 294835:4]
    buffer.reset <= reset @[chipyard.TestHarness.RocketConfig.fir 294836:4]
    buffer.auto_in_a_valid <= fragmenter.auto_out_a_valid @[LazyModule.scala 296:16 chipyard.TestHarness.RocketConfig.fir 294853:4]
    buffer.auto_in_a_bits_opcode <= fragmenter.auto_out_a_bits_opcode @[LazyModule.scala 296:16 chipyard.TestHarness.RocketConfig.fir 294853:4]
    buffer.auto_in_a_bits_param <= fragmenter.auto_out_a_bits_param @[LazyModule.scala 296:16 chipyard.TestHarness.RocketConfig.fir 294853:4]
    buffer.auto_in_a_bits_size <= fragmenter.auto_out_a_bits_size @[LazyModule.scala 296:16 chipyard.TestHarness.RocketConfig.fir 294853:4]
    buffer.auto_in_a_bits_source <= fragmenter.auto_out_a_bits_source @[LazyModule.scala 296:16 chipyard.TestHarness.RocketConfig.fir 294853:4]
    buffer.auto_in_a_bits_address <= fragmenter.auto_out_a_bits_address @[LazyModule.scala 296:16 chipyard.TestHarness.RocketConfig.fir 294853:4]
    buffer.auto_in_a_bits_mask <= fragmenter.auto_out_a_bits_mask @[LazyModule.scala 296:16 chipyard.TestHarness.RocketConfig.fir 294853:4]
    buffer.auto_in_a_bits_data <= fragmenter.auto_out_a_bits_data @[LazyModule.scala 296:16 chipyard.TestHarness.RocketConfig.fir 294853:4]
    buffer.auto_in_a_bits_corrupt <= fragmenter.auto_out_a_bits_corrupt @[LazyModule.scala 296:16 chipyard.TestHarness.RocketConfig.fir 294853:4]
    buffer.auto_in_d_ready <= fragmenter.auto_out_d_ready @[LazyModule.scala 296:16 chipyard.TestHarness.RocketConfig.fir 294853:4]
    buffer.auto_out_a_ready <= srams.auto_in_a_ready @[LazyModule.scala 296:16 chipyard.TestHarness.RocketConfig.fir 294852:4]
    buffer.auto_out_d_valid <= srams.auto_in_d_valid @[LazyModule.scala 296:16 chipyard.TestHarness.RocketConfig.fir 294852:4]
    buffer.auto_out_d_bits_opcode <= srams.auto_in_d_bits_opcode @[LazyModule.scala 296:16 chipyard.TestHarness.RocketConfig.fir 294852:4]
    buffer.auto_out_d_bits_size <= srams.auto_in_d_bits_size @[LazyModule.scala 296:16 chipyard.TestHarness.RocketConfig.fir 294852:4]
    buffer.auto_out_d_bits_source <= srams.auto_in_d_bits_source @[LazyModule.scala 296:16 chipyard.TestHarness.RocketConfig.fir 294852:4]
    buffer.auto_out_d_bits_data <= srams.auto_in_d_bits_data @[LazyModule.scala 296:16 chipyard.TestHarness.RocketConfig.fir 294852:4]
    fragmenter.clock <= clock @[chipyard.TestHarness.RocketConfig.fir 294841:4]
    fragmenter.reset <= reset @[chipyard.TestHarness.RocketConfig.fir 294842:4]
    fragmenter.auto_in_a_valid <= xbar.auto_out_a_valid @[LazyModule.scala 298:16 chipyard.TestHarness.RocketConfig.fir 294851:4]
    fragmenter.auto_in_a_bits_opcode <= xbar.auto_out_a_bits_opcode @[LazyModule.scala 298:16 chipyard.TestHarness.RocketConfig.fir 294851:4]
    fragmenter.auto_in_a_bits_param <= xbar.auto_out_a_bits_param @[LazyModule.scala 298:16 chipyard.TestHarness.RocketConfig.fir 294851:4]
    fragmenter.auto_in_a_bits_size <= xbar.auto_out_a_bits_size @[LazyModule.scala 298:16 chipyard.TestHarness.RocketConfig.fir 294851:4]
    fragmenter.auto_in_a_bits_source <= xbar.auto_out_a_bits_source @[LazyModule.scala 298:16 chipyard.TestHarness.RocketConfig.fir 294851:4]
    fragmenter.auto_in_a_bits_address <= xbar.auto_out_a_bits_address @[LazyModule.scala 298:16 chipyard.TestHarness.RocketConfig.fir 294851:4]
    fragmenter.auto_in_a_bits_mask <= xbar.auto_out_a_bits_mask @[LazyModule.scala 298:16 chipyard.TestHarness.RocketConfig.fir 294851:4]
    fragmenter.auto_in_a_bits_data <= xbar.auto_out_a_bits_data @[LazyModule.scala 298:16 chipyard.TestHarness.RocketConfig.fir 294851:4]
    fragmenter.auto_in_a_bits_corrupt <= xbar.auto_out_a_bits_corrupt @[LazyModule.scala 298:16 chipyard.TestHarness.RocketConfig.fir 294851:4]
    fragmenter.auto_in_d_ready <= xbar.auto_out_d_ready @[LazyModule.scala 298:16 chipyard.TestHarness.RocketConfig.fir 294851:4]
    fragmenter.auto_out_a_ready <= buffer.auto_in_a_ready @[LazyModule.scala 296:16 chipyard.TestHarness.RocketConfig.fir 294853:4]
    fragmenter.auto_out_d_valid <= buffer.auto_in_d_valid @[LazyModule.scala 296:16 chipyard.TestHarness.RocketConfig.fir 294853:4]
    fragmenter.auto_out_d_bits_opcode <= buffer.auto_in_d_bits_opcode @[LazyModule.scala 296:16 chipyard.TestHarness.RocketConfig.fir 294853:4]
    fragmenter.auto_out_d_bits_param <= buffer.auto_in_d_bits_param @[LazyModule.scala 296:16 chipyard.TestHarness.RocketConfig.fir 294853:4]
    fragmenter.auto_out_d_bits_size <= buffer.auto_in_d_bits_size @[LazyModule.scala 296:16 chipyard.TestHarness.RocketConfig.fir 294853:4]
    fragmenter.auto_out_d_bits_source <= buffer.auto_in_d_bits_source @[LazyModule.scala 296:16 chipyard.TestHarness.RocketConfig.fir 294853:4]
    fragmenter.auto_out_d_bits_sink <= buffer.auto_in_d_bits_sink @[LazyModule.scala 296:16 chipyard.TestHarness.RocketConfig.fir 294853:4]
    fragmenter.auto_out_d_bits_denied <= buffer.auto_in_d_bits_denied @[LazyModule.scala 296:16 chipyard.TestHarness.RocketConfig.fir 294853:4]
    fragmenter.auto_out_d_bits_data <= buffer.auto_in_d_bits_data @[LazyModule.scala 296:16 chipyard.TestHarness.RocketConfig.fir 294853:4]
    fragmenter.auto_out_d_bits_corrupt <= buffer.auto_in_d_bits_corrupt @[LazyModule.scala 296:16 chipyard.TestHarness.RocketConfig.fir 294853:4]
    buffer_1.clock <= clock @[chipyard.TestHarness.RocketConfig.fir 294847:4]
    buffer_1.reset <= reset @[chipyard.TestHarness.RocketConfig.fir 294848:4]
    buffer_1.auto_in_a_valid <= adapter.auto_out_a_valid @[LazyModule.scala 298:16 chipyard.TestHarness.RocketConfig.fir 294849:4]
    buffer_1.auto_in_a_bits_opcode <= adapter.auto_out_a_bits_opcode @[LazyModule.scala 298:16 chipyard.TestHarness.RocketConfig.fir 294849:4]
    buffer_1.auto_in_a_bits_size <= adapter.auto_out_a_bits_size @[LazyModule.scala 298:16 chipyard.TestHarness.RocketConfig.fir 294849:4]
    buffer_1.auto_in_a_bits_address <= adapter.auto_out_a_bits_address @[LazyModule.scala 298:16 chipyard.TestHarness.RocketConfig.fir 294849:4]
    buffer_1.auto_in_a_bits_mask <= adapter.auto_out_a_bits_mask @[LazyModule.scala 298:16 chipyard.TestHarness.RocketConfig.fir 294849:4]
    buffer_1.auto_in_a_bits_data <= adapter.auto_out_a_bits_data @[LazyModule.scala 298:16 chipyard.TestHarness.RocketConfig.fir 294849:4]
    buffer_1.auto_in_d_ready <= adapter.auto_out_d_ready @[LazyModule.scala 298:16 chipyard.TestHarness.RocketConfig.fir 294849:4]
    buffer_1.auto_out_a_ready <= serdesser.auto_manager_in_a_ready @[LazyModule.scala 296:16 chipyard.TestHarness.RocketConfig.fir 294854:4]
    buffer_1.auto_out_d_valid <= serdesser.auto_manager_in_d_valid @[LazyModule.scala 296:16 chipyard.TestHarness.RocketConfig.fir 294854:4]
    buffer_1.auto_out_d_bits_opcode <= serdesser.auto_manager_in_d_bits_opcode @[LazyModule.scala 296:16 chipyard.TestHarness.RocketConfig.fir 294854:4]
    buffer_1.auto_out_d_bits_param <= serdesser.auto_manager_in_d_bits_param @[LazyModule.scala 296:16 chipyard.TestHarness.RocketConfig.fir 294854:4]
    buffer_1.auto_out_d_bits_size <= serdesser.auto_manager_in_d_bits_size @[LazyModule.scala 296:16 chipyard.TestHarness.RocketConfig.fir 294854:4]
    buffer_1.auto_out_d_bits_source <= serdesser.auto_manager_in_d_bits_source @[LazyModule.scala 296:16 chipyard.TestHarness.RocketConfig.fir 294854:4]
    buffer_1.auto_out_d_bits_sink <= serdesser.auto_manager_in_d_bits_sink @[LazyModule.scala 296:16 chipyard.TestHarness.RocketConfig.fir 294854:4]
    buffer_1.auto_out_d_bits_denied <= serdesser.auto_manager_in_d_bits_denied @[LazyModule.scala 296:16 chipyard.TestHarness.RocketConfig.fir 294854:4]
    buffer_1.auto_out_d_bits_data <= serdesser.auto_manager_in_d_bits_data @[LazyModule.scala 296:16 chipyard.TestHarness.RocketConfig.fir 294854:4]
    buffer_1.auto_out_d_bits_corrupt <= serdesser.auto_manager_in_d_bits_corrupt @[LazyModule.scala 296:16 chipyard.TestHarness.RocketConfig.fir 294854:4]

  extmodule SimSerial : @[chipyard.TestHarness.RocketConfig.fir 294868:2]
    input clock : Clock @[chipyard.TestHarness.RocketConfig.fir 294869:4]
    input reset : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 294870:4]
    input serial_in_ready : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 294871:4]
    output serial_in_valid : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 294871:4]
    output serial_in_bits : UInt<32> @[chipyard.TestHarness.RocketConfig.fir 294871:4]
    output serial_out_ready : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 294871:4]
    input serial_out_valid : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 294871:4]
    input serial_out_bits : UInt<32> @[chipyard.TestHarness.RocketConfig.fir 294871:4]
    output exit : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 294872:4]
    defname = SimSerial

  extmodule SimDRAM : @[chipyard.TestHarness.RocketConfig.fir 294877:2]
    input clock : Clock @[chipyard.TestHarness.RocketConfig.fir 294878:4]
    input reset : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 294879:4]
    output axi_aw_ready : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 294880:4]
    input axi_aw_valid : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 294880:4]
    input axi_aw_bits_id : UInt<4> @[chipyard.TestHarness.RocketConfig.fir 294880:4]
    input axi_aw_bits_addr : UInt<32> @[chipyard.TestHarness.RocketConfig.fir 294880:4]
    input axi_aw_bits_len : UInt<8> @[chipyard.TestHarness.RocketConfig.fir 294880:4]
    input axi_aw_bits_size : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 294880:4]
    input axi_aw_bits_burst : UInt<2> @[chipyard.TestHarness.RocketConfig.fir 294880:4]
    input axi_aw_bits_lock : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 294880:4]
    input axi_aw_bits_cache : UInt<4> @[chipyard.TestHarness.RocketConfig.fir 294880:4]
    input axi_aw_bits_prot : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 294880:4]
    input axi_aw_bits_qos : UInt<4> @[chipyard.TestHarness.RocketConfig.fir 294880:4]
    output axi_w_ready : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 294880:4]
    input axi_w_valid : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 294880:4]
    input axi_w_bits_data : UInt<64> @[chipyard.TestHarness.RocketConfig.fir 294880:4]
    input axi_w_bits_strb : UInt<8> @[chipyard.TestHarness.RocketConfig.fir 294880:4]
    input axi_w_bits_last : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 294880:4]
    input axi_b_ready : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 294880:4]
    output axi_b_valid : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 294880:4]
    output axi_b_bits_id : UInt<4> @[chipyard.TestHarness.RocketConfig.fir 294880:4]
    output axi_b_bits_resp : UInt<2> @[chipyard.TestHarness.RocketConfig.fir 294880:4]
    output axi_ar_ready : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 294880:4]
    input axi_ar_valid : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 294880:4]
    input axi_ar_bits_id : UInt<4> @[chipyard.TestHarness.RocketConfig.fir 294880:4]
    input axi_ar_bits_addr : UInt<32> @[chipyard.TestHarness.RocketConfig.fir 294880:4]
    input axi_ar_bits_len : UInt<8> @[chipyard.TestHarness.RocketConfig.fir 294880:4]
    input axi_ar_bits_size : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 294880:4]
    input axi_ar_bits_burst : UInt<2> @[chipyard.TestHarness.RocketConfig.fir 294880:4]
    input axi_ar_bits_lock : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 294880:4]
    input axi_ar_bits_cache : UInt<4> @[chipyard.TestHarness.RocketConfig.fir 294880:4]
    input axi_ar_bits_prot : UInt<3> @[chipyard.TestHarness.RocketConfig.fir 294880:4]
    input axi_ar_bits_qos : UInt<4> @[chipyard.TestHarness.RocketConfig.fir 294880:4]
    input axi_r_ready : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 294880:4]
    output axi_r_valid : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 294880:4]
    output axi_r_bits_id : UInt<4> @[chipyard.TestHarness.RocketConfig.fir 294880:4]
    output axi_r_bits_data : UInt<64> @[chipyard.TestHarness.RocketConfig.fir 294880:4]
    output axi_r_bits_resp : UInt<2> @[chipyard.TestHarness.RocketConfig.fir 294880:4]
    output axi_r_bits_last : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 294880:4]
    defname = SimDRAM
    parameter LINE_SIZE = 64
    parameter ID_BITS = 4
    parameter ADDR_BITS = 32
    parameter MEM_SIZE = 268435456
    parameter DATA_BITS = 64

  module Queue_44_inTestHarness : @[chipyard.TestHarness.RocketConfig.fir 294889:2]
    input clock : Clock @[chipyard.TestHarness.RocketConfig.fir 294890:4]
    input reset : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 294891:4]
    output io_enq_ready : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 294892:4]
    input io_enq_valid : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 294892:4]
    input io_enq_bits : UInt<8> @[chipyard.TestHarness.RocketConfig.fir 294892:4]
    input io_deq_ready : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 294892:4]
    output io_deq_valid : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 294892:4]
    output io_deq_bits : UInt<8> @[chipyard.TestHarness.RocketConfig.fir 294892:4]

    mem ram : @[Decoupled.scala 218:16 chipyard.TestHarness.RocketConfig.fir 294894:4]
      data-type => UInt<8>
      depth => 128
      read-latency => 0
      write-latency => 1
      reader => io_deq_bits_MPORT
      writer => MPORT
      read-under-write => undefined
    reg enq_ptr_value : UInt<7>, clock with :
      reset => (UInt<1>("h0"), enq_ptr_value) @[Counter.scala 60:40 chipyard.TestHarness.RocketConfig.fir 294895:4]
    reg deq_ptr_value : UInt<7>, clock with :
      reset => (UInt<1>("h0"), deq_ptr_value) @[Counter.scala 60:40 chipyard.TestHarness.RocketConfig.fir 294896:4]
    reg maybe_full : UInt<1>, clock with :
      reset => (UInt<1>("h0"), maybe_full) @[Decoupled.scala 221:27 chipyard.TestHarness.RocketConfig.fir 294897:4]
    node ptr_match = eq(enq_ptr_value, deq_ptr_value) @[Decoupled.scala 223:33 chipyard.TestHarness.RocketConfig.fir 294898:4]
    node _empty_T = not(maybe_full) @[Decoupled.scala 224:28 chipyard.TestHarness.RocketConfig.fir 294899:4]
    node empty = and(ptr_match, _empty_T) @[Decoupled.scala 224:25 chipyard.TestHarness.RocketConfig.fir 294900:4]
    node full = and(ptr_match, maybe_full) @[Decoupled.scala 225:24 chipyard.TestHarness.RocketConfig.fir 294901:4]
    node do_enq = and(io_enq_ready, io_enq_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.RocketConfig.fir 294902:4]
    node do_deq = and(io_deq_ready, io_deq_valid) @[Decoupled.scala 40:37 chipyard.TestHarness.RocketConfig.fir 294905:4]
    node _value_T = add(enq_ptr_value, UInt<7>("h1")) @[Counter.scala 76:24 chipyard.TestHarness.RocketConfig.fir 294912:6]
    node _value_T_1 = tail(_value_T, 1) @[Counter.scala 76:24 chipyard.TestHarness.RocketConfig.fir 294913:6]
    node _GEN_5 = mux(do_enq, _value_T_1, enq_ptr_value) @[Decoupled.scala 229:17 chipyard.TestHarness.RocketConfig.fir 294908:4 Counter.scala 76:15 chipyard.TestHarness.RocketConfig.fir 294914:6 Counter.scala 60:40 chipyard.TestHarness.RocketConfig.fir 294895:4]
    node _value_T_2 = add(deq_ptr_value, UInt<7>("h1")) @[Counter.scala 76:24 chipyard.TestHarness.RocketConfig.fir 294918:6]
    node _value_T_3 = tail(_value_T_2, 1) @[Counter.scala 76:24 chipyard.TestHarness.RocketConfig.fir 294919:6]
    node _GEN_6 = mux(do_deq, _value_T_3, deq_ptr_value) @[Decoupled.scala 233:17 chipyard.TestHarness.RocketConfig.fir 294916:4 Counter.scala 76:15 chipyard.TestHarness.RocketConfig.fir 294920:6 Counter.scala 60:40 chipyard.TestHarness.RocketConfig.fir 294896:4]
    node _T = neq(do_enq, do_deq) @[Decoupled.scala 236:16 chipyard.TestHarness.RocketConfig.fir 294922:4]
    node _GEN_7 = mux(_T, do_enq, maybe_full) @[Decoupled.scala 236:28 chipyard.TestHarness.RocketConfig.fir 294923:4 Decoupled.scala 237:16 chipyard.TestHarness.RocketConfig.fir 294924:6 Decoupled.scala 221:27 chipyard.TestHarness.RocketConfig.fir 294897:4]
    io_enq_ready <= not(full) @[Decoupled.scala 241:19 chipyard.TestHarness.RocketConfig.fir 294928:4]
    io_deq_valid <= not(empty) @[Decoupled.scala 240:19 chipyard.TestHarness.RocketConfig.fir 294926:4]
    io_deq_bits <= ram.io_deq_bits_MPORT.data @[Decoupled.scala 242:15 chipyard.TestHarness.RocketConfig.fir 294931:4]
    enq_ptr_value <= mux(reset, UInt<7>("h0"), _GEN_5) @[Counter.scala 60:40 chipyard.TestHarness.RocketConfig.fir 294895:4 Counter.scala 60:40 chipyard.TestHarness.RocketConfig.fir 294895:4]
    deq_ptr_value <= mux(reset, UInt<7>("h0"), _GEN_6) @[Counter.scala 60:40 chipyard.TestHarness.RocketConfig.fir 294896:4 Counter.scala 60:40 chipyard.TestHarness.RocketConfig.fir 294896:4]
    maybe_full <= mux(reset, UInt<1>("h0"), _GEN_7) @[Decoupled.scala 221:27 chipyard.TestHarness.RocketConfig.fir 294897:4 Decoupled.scala 221:27 chipyard.TestHarness.RocketConfig.fir 294897:4]
    ram.io_deq_bits_MPORT.en <= UInt<1>("h1")
    ram.io_deq_bits_MPORT.addr <= deq_ptr_value
    ram.io_deq_bits_MPORT.clk <= clock
    ram.MPORT.en <= and(io_enq_ready, io_enq_valid)
    ram.MPORT.addr <= enq_ptr_value
    ram.MPORT.mask <= UInt<1>("h1")
    ram.MPORT.data <= io_enq_bits
    ram.MPORT.clk <= clock

  extmodule SimUART : @[chipyard.TestHarness.RocketConfig.fir 294989:2]
    input clock : Clock @[chipyard.TestHarness.RocketConfig.fir 294990:4]
    input reset : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 294991:4]
    input serial_in_ready : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 294992:4]
    output serial_in_valid : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 294992:4]
    output serial_in_bits : UInt<8> @[chipyard.TestHarness.RocketConfig.fir 294992:4]
    output serial_out_ready : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 294992:4]
    input serial_out_valid : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 294992:4]
    input serial_out_bits : UInt<8> @[chipyard.TestHarness.RocketConfig.fir 294992:4]
    defname = SimUART
    parameter UARTNO = 0

  module UARTAdapter_inTestHarness : @[chipyard.TestHarness.RocketConfig.fir 294997:2]
    input clock : Clock @[chipyard.TestHarness.RocketConfig.fir 294998:4]
    input reset : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 294999:4]
    input io_uart_txd : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 295000:4]
    output io_uart_rxd : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 295000:4]

    inst txfifo of Queue_44_inTestHarness @[UARTAdapter.scala 32:22 chipyard.TestHarness.RocketConfig.fir 295002:4]
    inst rxfifo of Queue_44_inTestHarness @[UARTAdapter.scala 33:22 chipyard.TestHarness.RocketConfig.fir 295005:4]
    inst sim of SimUART @[UARTAdapter.scala 108:19 chipyard.TestHarness.RocketConfig.fir 295154:4]
    reg txState : UInt<2>, clock with :
      reset => (UInt<1>("h0"), txState) @[UARTAdapter.scala 38:24 chipyard.TestHarness.RocketConfig.fir 295008:4]
    reg txData : UInt<8>, clock with :
      reset => (UInt<1>("h0"), txData) @[UARTAdapter.scala 39:19 chipyard.TestHarness.RocketConfig.fir 295009:4]
    node _T = eq(txState, UInt<2>("h2")) @[UARTAdapter.scala 41:49 chipyard.TestHarness.RocketConfig.fir 295010:4]
    node _T_1 = and(_T, txfifo.io_enq_ready) @[UARTAdapter.scala 41:61 chipyard.TestHarness.RocketConfig.fir 295011:4]
    reg txDataIdx : UInt<3>, clock with :
      reset => (UInt<1>("h0"), txDataIdx) @[Counter.scala 60:40 chipyard.TestHarness.RocketConfig.fir 295012:4]
    node wrap_wrap = eq(txDataIdx, UInt<3>("h7")) @[Counter.scala 72:24 chipyard.TestHarness.RocketConfig.fir 295016:6]
    node _wrap_value_T = add(txDataIdx, UInt<3>("h1")) @[Counter.scala 76:24 chipyard.TestHarness.RocketConfig.fir 295017:6]
    node _wrap_value_T_1 = tail(_wrap_value_T, 1) @[Counter.scala 76:24 chipyard.TestHarness.RocketConfig.fir 295018:6]
    node _GEN_0 = mux(_T_1, _wrap_value_T_1, txDataIdx) @[Counter.scala 118:17 chipyard.TestHarness.RocketConfig.fir 295015:4 Counter.scala 76:15 chipyard.TestHarness.RocketConfig.fir 295019:6 Counter.scala 60:40 chipyard.TestHarness.RocketConfig.fir 295012:4]
    node txDataWrap = and(_T_1, wrap_wrap) @[Counter.scala 118:17 chipyard.TestHarness.RocketConfig.fir 295015:4 Counter.scala 118:24 chipyard.TestHarness.RocketConfig.fir 295020:6 chipyard.TestHarness.RocketConfig.fir 295014:4]
    node _T_2 = eq(txState, UInt<2>("h1")) @[UARTAdapter.scala 43:51 chipyard.TestHarness.RocketConfig.fir 295022:4]
    node _T_3 = and(_T_2, txfifo.io_enq_ready) @[UARTAdapter.scala 43:63 chipyard.TestHarness.RocketConfig.fir 295023:4]
    reg txBaudCount : UInt<10>, clock with :
      reset => (UInt<1>("h0"), txBaudCount) @[Counter.scala 60:40 chipyard.TestHarness.RocketConfig.fir 295024:4]
    node wrap_wrap_1 = eq(txBaudCount, UInt<10>("h363")) @[Counter.scala 72:24 chipyard.TestHarness.RocketConfig.fir 295028:6]
    node _wrap_value_T_2 = add(txBaudCount, UInt<10>("h1")) @[Counter.scala 76:24 chipyard.TestHarness.RocketConfig.fir 295029:6]
    node _wrap_value_T_3 = tail(_wrap_value_T_2, 1) @[Counter.scala 76:24 chipyard.TestHarness.RocketConfig.fir 295030:6]
    node _GEN_2 = mux(wrap_wrap_1, UInt<10>("h0"), _wrap_value_T_3) @[Counter.scala 86:20 chipyard.TestHarness.RocketConfig.fir 295032:6 Counter.scala 86:28 chipyard.TestHarness.RocketConfig.fir 295033:8 Counter.scala 76:15 chipyard.TestHarness.RocketConfig.fir 295031:6]
    node _GEN_3 = mux(_T_3, _GEN_2, txBaudCount) @[Counter.scala 118:17 chipyard.TestHarness.RocketConfig.fir 295027:4 Counter.scala 60:40 chipyard.TestHarness.RocketConfig.fir 295024:4]
    node txBaudWrap = and(_T_3, wrap_wrap_1) @[Counter.scala 118:17 chipyard.TestHarness.RocketConfig.fir 295027:4 Counter.scala 118:24 chipyard.TestHarness.RocketConfig.fir 295035:6 chipyard.TestHarness.RocketConfig.fir 295026:4]
    node _T_4 = eq(txState, UInt<2>("h0")) @[UARTAdapter.scala 44:53 chipyard.TestHarness.RocketConfig.fir 295037:4]
    node _T_5 = not(io_uart_txd) @[UARTAdapter.scala 44:80 chipyard.TestHarness.RocketConfig.fir 295038:4]
    node _T_6 = and(_T_4, _T_5) @[UARTAdapter.scala 44:65 chipyard.TestHarness.RocketConfig.fir 295039:4]
    node _T_7 = and(_T_6, txfifo.io_enq_ready) @[UARTAdapter.scala 44:88 chipyard.TestHarness.RocketConfig.fir 295040:4]
    reg txSlackCount : UInt<2>, clock with :
      reset => (UInt<1>("h0"), txSlackCount) @[Counter.scala 60:40 chipyard.TestHarness.RocketConfig.fir 295041:4]
    node wrap_wrap_2 = eq(txSlackCount, UInt<2>("h3")) @[Counter.scala 72:24 chipyard.TestHarness.RocketConfig.fir 295045:6]
    node _wrap_value_T_4 = add(txSlackCount, UInt<2>("h1")) @[Counter.scala 76:24 chipyard.TestHarness.RocketConfig.fir 295046:6]
    node _wrap_value_T_5 = tail(_wrap_value_T_4, 1) @[Counter.scala 76:24 chipyard.TestHarness.RocketConfig.fir 295047:6]
    node _GEN_5 = mux(_T_7, _wrap_value_T_5, txSlackCount) @[Counter.scala 118:17 chipyard.TestHarness.RocketConfig.fir 295044:4 Counter.scala 76:15 chipyard.TestHarness.RocketConfig.fir 295048:6 Counter.scala 60:40 chipyard.TestHarness.RocketConfig.fir 295041:4]
    node txSlackWrap = and(_T_7, wrap_wrap_2) @[Counter.scala 118:17 chipyard.TestHarness.RocketConfig.fir 295044:4 Counter.scala 118:24 chipyard.TestHarness.RocketConfig.fir 295049:6 chipyard.TestHarness.RocketConfig.fir 295043:4]
    node _T_8 = eq(UInt<2>("h0"), txState) @[Conditional.scala 37:30 chipyard.TestHarness.RocketConfig.fir 295051:4]
    node _GEN_7 = mux(txSlackWrap, UInt<8>("h0"), txData) @[UARTAdapter.scala 48:25 chipyard.TestHarness.RocketConfig.fir 295053:6 UARTAdapter.scala 49:17 chipyard.TestHarness.RocketConfig.fir 295054:8 UARTAdapter.scala 39:19 chipyard.TestHarness.RocketConfig.fir 295009:4]
    node _GEN_8 = mux(txSlackWrap, UInt<2>("h1"), txState) @[UARTAdapter.scala 48:25 chipyard.TestHarness.RocketConfig.fir 295053:6 UARTAdapter.scala 50:17 chipyard.TestHarness.RocketConfig.fir 295055:8 UARTAdapter.scala 38:24 chipyard.TestHarness.RocketConfig.fir 295008:4]
    node _T_9 = eq(UInt<2>("h1"), txState) @[Conditional.scala 37:30 chipyard.TestHarness.RocketConfig.fir 295059:6]
    node _GEN_9 = mux(txBaudWrap, UInt<2>("h2"), txState) @[UARTAdapter.scala 54:24 chipyard.TestHarness.RocketConfig.fir 295061:8 UARTAdapter.scala 55:17 chipyard.TestHarness.RocketConfig.fir 295062:10 UARTAdapter.scala 38:24 chipyard.TestHarness.RocketConfig.fir 295008:4]
    node _T_10 = eq(UInt<2>("h2"), txState) @[Conditional.scala 37:30 chipyard.TestHarness.RocketConfig.fir 295066:8]
    node _GEN_35 = pad(io_uart_txd, 8) @[UARTAdapter.scala 60:41 chipyard.TestHarness.RocketConfig.fir 295069:12]
    node _txData_T = dshlw(_GEN_35, txDataIdx) @[UARTAdapter.scala 60:41 chipyard.TestHarness.RocketConfig.fir 295069:12]
    node _txData_T_1 = or(txData, _txData_T) @[UARTAdapter.scala 60:26 chipyard.TestHarness.RocketConfig.fir 295070:12]
    node _GEN_10 = mux(txfifo.io_enq_ready, _txData_T_1, txData) @[UARTAdapter.scala 59:34 chipyard.TestHarness.RocketConfig.fir 295068:10 UARTAdapter.scala 60:16 chipyard.TestHarness.RocketConfig.fir 295071:12 UARTAdapter.scala 39:19 chipyard.TestHarness.RocketConfig.fir 295009:4]
    node _txState_T_1 = mux(io_uart_txd, UInt<2>("h0"), UInt<2>("h3")) @[UARTAdapter.scala 63:23 chipyard.TestHarness.RocketConfig.fir 295075:12]
    node _GEN_11 = mux(txfifo.io_enq_ready, UInt<2>("h1"), txState) @[UARTAdapter.scala 64:39 chipyard.TestHarness.RocketConfig.fir 295079:12 UARTAdapter.scala 65:17 chipyard.TestHarness.RocketConfig.fir 295080:14 UARTAdapter.scala 38:24 chipyard.TestHarness.RocketConfig.fir 295008:4]
    node _GEN_12 = mux(txDataWrap, _txState_T_1, _GEN_11) @[UARTAdapter.scala 62:24 chipyard.TestHarness.RocketConfig.fir 295073:10 UARTAdapter.scala 63:17 chipyard.TestHarness.RocketConfig.fir 295076:12]
    node _T_11 = eq(UInt<2>("h3"), txState) @[Conditional.scala 37:30 chipyard.TestHarness.RocketConfig.fir 295084:10]
    node _T_13 = and(io_uart_txd, txfifo.io_enq_ready) @[UARTAdapter.scala 69:32 chipyard.TestHarness.RocketConfig.fir 295087:12]
    node _GEN_13 = mux(_T_13, UInt<2>("h0"), txState) @[UARTAdapter.scala 69:56 chipyard.TestHarness.RocketConfig.fir 295088:12 UARTAdapter.scala 70:17 chipyard.TestHarness.RocketConfig.fir 295089:14 UARTAdapter.scala 38:24 chipyard.TestHarness.RocketConfig.fir 295008:4]
    node _GEN_14 = mux(_T_11, _GEN_13, txState) @[Conditional.scala 39:67 chipyard.TestHarness.RocketConfig.fir 295085:10 UARTAdapter.scala 38:24 chipyard.TestHarness.RocketConfig.fir 295008:4]
    node _GEN_15 = mux(_T_10, _GEN_10, txData) @[Conditional.scala 39:67 chipyard.TestHarness.RocketConfig.fir 295067:8 UARTAdapter.scala 39:19 chipyard.TestHarness.RocketConfig.fir 295009:4]
    node _GEN_16 = mux(_T_10, _GEN_12, _GEN_14) @[Conditional.scala 39:67 chipyard.TestHarness.RocketConfig.fir 295067:8]
    node _GEN_17 = mux(_T_9, _GEN_9, _GEN_16) @[Conditional.scala 39:67 chipyard.TestHarness.RocketConfig.fir 295060:6]
    node _GEN_18 = mux(_T_9, txData, _GEN_15) @[Conditional.scala 39:67 chipyard.TestHarness.RocketConfig.fir 295060:6 UARTAdapter.scala 39:19 chipyard.TestHarness.RocketConfig.fir 295009:4]
    node _GEN_20 = mux(_T_8, _GEN_8, _GEN_17) @[Conditional.scala 40:58 chipyard.TestHarness.RocketConfig.fir 295052:4]
    reg rxState : UInt<2>, clock with :
      reset => (UInt<1>("h0"), rxState) @[UARTAdapter.scala 79:24 chipyard.TestHarness.RocketConfig.fir 295094:4]
    reg rxBaudCount : UInt<10>, clock with :
      reset => (UInt<1>("h0"), rxBaudCount) @[Counter.scala 60:40 chipyard.TestHarness.RocketConfig.fir 295095:4]
    node wrap_wrap_3 = eq(rxBaudCount, UInt<10>("h363")) @[Counter.scala 72:24 chipyard.TestHarness.RocketConfig.fir 295099:6]
    node _wrap_value_T_6 = add(rxBaudCount, UInt<10>("h1")) @[Counter.scala 76:24 chipyard.TestHarness.RocketConfig.fir 295100:6]
    node _wrap_value_T_7 = tail(_wrap_value_T_6, 1) @[Counter.scala 76:24 chipyard.TestHarness.RocketConfig.fir 295101:6]
    node _GEN_21 = mux(wrap_wrap_3, UInt<10>("h0"), _wrap_value_T_7) @[Counter.scala 86:20 chipyard.TestHarness.RocketConfig.fir 295103:6 Counter.scala 86:28 chipyard.TestHarness.RocketConfig.fir 295104:8 Counter.scala 76:15 chipyard.TestHarness.RocketConfig.fir 295102:6]
    node _GEN_22 = mux(txfifo.io_enq_ready, _GEN_21, rxBaudCount) @[Counter.scala 118:17 chipyard.TestHarness.RocketConfig.fir 295098:4 Counter.scala 60:40 chipyard.TestHarness.RocketConfig.fir 295095:4]
    node rxBaudWrap = and(txfifo.io_enq_ready, wrap_wrap_3) @[Counter.scala 118:17 chipyard.TestHarness.RocketConfig.fir 295098:4 Counter.scala 118:24 chipyard.TestHarness.RocketConfig.fir 295106:6 chipyard.TestHarness.RocketConfig.fir 295097:4]
    node _T_14 = eq(rxState, UInt<2>("h2")) @[UARTAdapter.scala 83:49 chipyard.TestHarness.RocketConfig.fir 295108:4]
    node _T_15 = and(_T_14, txfifo.io_enq_ready) @[UARTAdapter.scala 83:61 chipyard.TestHarness.RocketConfig.fir 295109:4]
    node _T_16 = and(_T_15, rxBaudWrap) @[UARTAdapter.scala 83:84 chipyard.TestHarness.RocketConfig.fir 295110:4]
    reg rxDataIdx : UInt<3>, clock with :
      reset => (UInt<1>("h0"), rxDataIdx) @[Counter.scala 60:40 chipyard.TestHarness.RocketConfig.fir 295111:4]
    node wrap_wrap_4 = eq(rxDataIdx, UInt<3>("h7")) @[Counter.scala 72:24 chipyard.TestHarness.RocketConfig.fir 295115:6]
    node _wrap_value_T_8 = add(rxDataIdx, UInt<3>("h1")) @[Counter.scala 76:24 chipyard.TestHarness.RocketConfig.fir 295116:6]
    node _wrap_value_T_9 = tail(_wrap_value_T_8, 1) @[Counter.scala 76:24 chipyard.TestHarness.RocketConfig.fir 295117:6]
    node _GEN_24 = mux(_T_16, _wrap_value_T_9, rxDataIdx) @[Counter.scala 118:17 chipyard.TestHarness.RocketConfig.fir 295114:4 Counter.scala 76:15 chipyard.TestHarness.RocketConfig.fir 295118:6 Counter.scala 60:40 chipyard.TestHarness.RocketConfig.fir 295111:4]
    node rxDataWrap = and(_T_16, wrap_wrap_4) @[Counter.scala 118:17 chipyard.TestHarness.RocketConfig.fir 295114:4 Counter.scala 118:24 chipyard.TestHarness.RocketConfig.fir 295119:6 chipyard.TestHarness.RocketConfig.fir 295113:4]
    node _T_17 = eq(UInt<2>("h0"), rxState) @[Conditional.scala 37:30 chipyard.TestHarness.RocketConfig.fir 295122:4]
    node _T_18 = and(rxBaudWrap, rxfifo.io_deq_valid) @[UARTAdapter.scala 89:24 chipyard.TestHarness.RocketConfig.fir 295125:6]
    node _GEN_26 = mux(_T_18, UInt<2>("h1"), rxState) @[UARTAdapter.scala 89:48 chipyard.TestHarness.RocketConfig.fir 295126:6 UARTAdapter.scala 90:17 chipyard.TestHarness.RocketConfig.fir 295127:8 UARTAdapter.scala 79:24 chipyard.TestHarness.RocketConfig.fir 295094:4]
    node _T_19 = eq(UInt<2>("h1"), rxState) @[Conditional.scala 37:30 chipyard.TestHarness.RocketConfig.fir 295131:6]
    node _GEN_27 = mux(rxBaudWrap, UInt<2>("h2"), rxState) @[UARTAdapter.scala 95:24 chipyard.TestHarness.RocketConfig.fir 295134:8 UARTAdapter.scala 96:17 chipyard.TestHarness.RocketConfig.fir 295135:10 UARTAdapter.scala 79:24 chipyard.TestHarness.RocketConfig.fir 295094:4]
    node _T_20 = eq(UInt<2>("h2"), rxState) @[Conditional.scala 37:30 chipyard.TestHarness.RocketConfig.fir 295139:8]
    node _io_uart_rxd_T = dshr(rxfifo.io_deq_bits, rxDataIdx) @[UARTAdapter.scala 100:42 chipyard.TestHarness.RocketConfig.fir 295141:10]
    node _io_uart_rxd_T_1 = bits(_io_uart_rxd_T, 0, 0) @[UARTAdapter.scala 100:55 chipyard.TestHarness.RocketConfig.fir 295142:10]
    node _T_21 = and(rxDataWrap, rxBaudWrap) @[UARTAdapter.scala 101:23 chipyard.TestHarness.RocketConfig.fir 295144:10]
    node _GEN_28 = mux(_T_21, UInt<2>("h0"), rxState) @[UARTAdapter.scala 101:38 chipyard.TestHarness.RocketConfig.fir 295145:10 UARTAdapter.scala 102:17 chipyard.TestHarness.RocketConfig.fir 295146:12 UARTAdapter.scala 79:24 chipyard.TestHarness.RocketConfig.fir 295094:4]
    node _GEN_29 = mux(_T_20, _io_uart_rxd_T_1, UInt<1>("h1")) @[Conditional.scala 39:67 chipyard.TestHarness.RocketConfig.fir 295140:8 UARTAdapter.scala 100:19 chipyard.TestHarness.RocketConfig.fir 295143:10 UARTAdapter.scala 85:15 chipyard.TestHarness.RocketConfig.fir 295121:4]
    node _GEN_30 = mux(_T_20, _GEN_28, rxState) @[Conditional.scala 39:67 chipyard.TestHarness.RocketConfig.fir 295140:8 UARTAdapter.scala 79:24 chipyard.TestHarness.RocketConfig.fir 295094:4]
    node _GEN_31 = mux(_T_19, UInt<1>("h0"), _GEN_29) @[Conditional.scala 39:67 chipyard.TestHarness.RocketConfig.fir 295132:6 UARTAdapter.scala 94:19 chipyard.TestHarness.RocketConfig.fir 295133:8]
    node _GEN_32 = mux(_T_19, _GEN_27, _GEN_30) @[Conditional.scala 39:67 chipyard.TestHarness.RocketConfig.fir 295132:6]
    node _GEN_34 = mux(_T_17, _GEN_26, _GEN_32) @[Conditional.scala 40:58 chipyard.TestHarness.RocketConfig.fir 295123:4]
    node _rxfifo_io_deq_ready_T_1 = and(_T_14, rxDataWrap) @[UARTAdapter.scala 106:48 chipyard.TestHarness.RocketConfig.fir 295150:4]
    node _rxfifo_io_deq_ready_T_2 = and(_rxfifo_io_deq_ready_T_1, rxBaudWrap) @[UARTAdapter.scala 106:62 chipyard.TestHarness.RocketConfig.fir 295151:4]
    io_uart_rxd <= or(_T_17, _GEN_31) @[Conditional.scala 40:58 chipyard.TestHarness.RocketConfig.fir 295123:4 UARTAdapter.scala 88:19 chipyard.TestHarness.RocketConfig.fir 295124:6]
    txfifo.clock <= clock @[chipyard.TestHarness.RocketConfig.fir 295003:4]
    txfifo.reset <= reset @[chipyard.TestHarness.RocketConfig.fir 295004:4]
    txfifo.io_enq_valid <= and(_T_1, wrap_wrap) @[Counter.scala 118:17 chipyard.TestHarness.RocketConfig.fir 295015:4 Counter.scala 118:24 chipyard.TestHarness.RocketConfig.fir 295020:6 chipyard.TestHarness.RocketConfig.fir 295014:4]
    txfifo.io_enq_bits <= txData @[UARTAdapter.scala 75:23 chipyard.TestHarness.RocketConfig.fir 295092:4]
    txfifo.io_deq_ready <= sim.serial_out_ready @[UARTAdapter.scala 115:23 chipyard.TestHarness.RocketConfig.fir 295163:4]
    rxfifo.clock <= clock @[chipyard.TestHarness.RocketConfig.fir 295006:4]
    rxfifo.reset <= reset @[chipyard.TestHarness.RocketConfig.fir 295007:4]
    rxfifo.io_enq_valid <= sim.serial_in_valid @[UARTAdapter.scala 118:23 chipyard.TestHarness.RocketConfig.fir 295165:4]
    rxfifo.io_enq_bits <= sim.serial_in_bits @[UARTAdapter.scala 117:22 chipyard.TestHarness.RocketConfig.fir 295164:4]
    rxfifo.io_deq_ready <= and(_rxfifo_io_deq_ready_T_2, txfifo.io_enq_ready) @[UARTAdapter.scala 106:76 chipyard.TestHarness.RocketConfig.fir 295152:4]
    txState <= mux(reset, UInt<2>("h0"), _GEN_20) @[UARTAdapter.scala 38:24 chipyard.TestHarness.RocketConfig.fir 295008:4 UARTAdapter.scala 38:24 chipyard.TestHarness.RocketConfig.fir 295008:4]
    txData <= mux(_T_8, _GEN_7, _GEN_18) @[Conditional.scala 40:58 chipyard.TestHarness.RocketConfig.fir 295052:4]
    txDataIdx <= mux(reset, UInt<3>("h0"), _GEN_0) @[Counter.scala 60:40 chipyard.TestHarness.RocketConfig.fir 295012:4 Counter.scala 60:40 chipyard.TestHarness.RocketConfig.fir 295012:4]
    txBaudCount <= mux(reset, UInt<10>("h0"), _GEN_3) @[Counter.scala 60:40 chipyard.TestHarness.RocketConfig.fir 295024:4 Counter.scala 60:40 chipyard.TestHarness.RocketConfig.fir 295024:4]
    txSlackCount <= mux(reset, UInt<2>("h0"), _GEN_5) @[Counter.scala 60:40 chipyard.TestHarness.RocketConfig.fir 295041:4 Counter.scala 60:40 chipyard.TestHarness.RocketConfig.fir 295041:4]
    rxState <= mux(reset, UInt<2>("h0"), _GEN_34) @[UARTAdapter.scala 79:24 chipyard.TestHarness.RocketConfig.fir 295094:4 UARTAdapter.scala 79:24 chipyard.TestHarness.RocketConfig.fir 295094:4]
    rxBaudCount <= mux(reset, UInt<10>("h0"), _GEN_22) @[Counter.scala 60:40 chipyard.TestHarness.RocketConfig.fir 295095:4 Counter.scala 60:40 chipyard.TestHarness.RocketConfig.fir 295095:4]
    rxDataIdx <= mux(reset, UInt<3>("h0"), _GEN_24) @[Counter.scala 60:40 chipyard.TestHarness.RocketConfig.fir 295111:4 Counter.scala 60:40 chipyard.TestHarness.RocketConfig.fir 295111:4]
    sim.clock <= clock @[UARTAdapter.scala 110:16 chipyard.TestHarness.RocketConfig.fir 295158:4]
    sim.reset <= reset @[UARTAdapter.scala 111:25 chipyard.TestHarness.RocketConfig.fir 295159:4]
    sim.serial_in_ready <= rxfifo.io_enq_ready @[UARTAdapter.scala 119:26 chipyard.TestHarness.RocketConfig.fir 295166:4]
    sim.serial_out_valid <= txfifo.io_deq_valid @[UARTAdapter.scala 114:27 chipyard.TestHarness.RocketConfig.fir 295162:4]
    sim.serial_out_bits <= txfifo.io_deq_bits @[UARTAdapter.scala 113:26 chipyard.TestHarness.RocketConfig.fir 295161:4]

  module TestHarness : @[chipyard.TestHarness.RocketConfig.fir 295168:2]
    input clock : Clock @[chipyard.TestHarness.RocketConfig.fir 295169:4]
    input reset : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 295170:4]
    output io_success : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 295171:4]

    inst chiptop of ChipTop @[TestHarness.scala 34:19 chipyard.TestHarness.RocketConfig.fir 295173:4]
    inst SimJTAG of SimJTAG @[HarnessBinders.scala 190:26 chipyard.TestHarness.RocketConfig.fir 295185:4]
    inst plusarg_reader of plusarg_reader_108 @[PlusArg.scala 80:11 chipyard.TestHarness.RocketConfig.fir 295202:4]
    inst ram of SerialRAM_inTestHarness @[SerialAdapter.scala 27:26 chipyard.TestHarness.RocketConfig.fir 295222:4]
    inst success_sim of SimSerial @[SerialAdapter.scala 37:23 chipyard.TestHarness.RocketConfig.fir 295232:4]
    inst simdram of SimDRAM @[HarnessBinders.scala 146:23 chipyard.TestHarness.RocketConfig.fir 295248:4]
    inst uart_sim_0 of UARTAdapter_inTestHarness @[UARTAdapter.scala 132:28 chipyard.TestHarness.RocketConfig.fir 295255:4]
    node dtm_success = eq(SimJTAG.exit, UInt<32>("h1")) @[Periphery.scala 233:26 chipyard.TestHarness.RocketConfig.fir 295206:4]
    node _T_2 = not(reset) @[HarnessBinders.scala 190:105 chipyard.TestHarness.RocketConfig.fir 295194:4]
    node _T_3 = geq(SimJTAG.exit, UInt<32>("h2")) @[Periphery.scala 234:19 chipyard.TestHarness.RocketConfig.fir 295208:4]
    node _GEN_2 = shr(SimJTAG.exit, 1) @[Periphery.scala 235:59 chipyard.TestHarness.RocketConfig.fir 295210:6]
    node _T_4 = pad(_GEN_2, 32) @[Periphery.scala 235:59 chipyard.TestHarness.RocketConfig.fir 295210:6]
    io_success <= or(success_sim.exit, dtm_success) @[HarnessBinders.scala 236:22 chipyard.TestHarness.RocketConfig.fir 295245:4 HarnessBinders.scala 236:35 chipyard.TestHarness.RocketConfig.fir 295246:6]
    chiptop.jtag_TCK <= SimJTAG.jtag_TCK @[Periphery.scala 220:15 chipyard.TestHarness.RocketConfig.fir 295195:4]
    chiptop.jtag_TMS <= SimJTAG.jtag_TMS @[Periphery.scala 221:15 chipyard.TestHarness.RocketConfig.fir 295196:4]
    chiptop.jtag_TDI <= SimJTAG.jtag_TDI @[Periphery.scala 222:15 chipyard.TestHarness.RocketConfig.fir 295197:4]
    chiptop.serial_tl_bits_in_valid <= ram.io_ser_in_valid @[SerialAdapter.scala 28:21 chipyard.TestHarness.RocketConfig.fir 295229:4]
    chiptop.serial_tl_bits_in_bits <= ram.io_ser_in_bits @[SerialAdapter.scala 28:21 chipyard.TestHarness.RocketConfig.fir 295228:4]
    chiptop.serial_tl_bits_out_ready <= ram.io_ser_out_ready @[SerialAdapter.scala 28:21 chipyard.TestHarness.RocketConfig.fir 295227:4]
    chiptop.axi4_mem_0_bits_aw_ready <= simdram.axi_aw_ready @[HarnessBinders.scala 147:18 chipyard.TestHarness.RocketConfig.fir 295252:4]
    chiptop.axi4_mem_0_bits_w_ready <= simdram.axi_w_ready @[HarnessBinders.scala 147:18 chipyard.TestHarness.RocketConfig.fir 295252:4]
    chiptop.axi4_mem_0_bits_b_valid <= simdram.axi_b_valid @[HarnessBinders.scala 147:18 chipyard.TestHarness.RocketConfig.fir 295252:4]
    chiptop.axi4_mem_0_bits_b_bits_id <= simdram.axi_b_bits_id @[HarnessBinders.scala 147:18 chipyard.TestHarness.RocketConfig.fir 295252:4]
    chiptop.axi4_mem_0_bits_b_bits_resp <= simdram.axi_b_bits_resp @[HarnessBinders.scala 147:18 chipyard.TestHarness.RocketConfig.fir 295252:4]
    chiptop.axi4_mem_0_bits_ar_ready <= simdram.axi_ar_ready @[HarnessBinders.scala 147:18 chipyard.TestHarness.RocketConfig.fir 295252:4]
    chiptop.axi4_mem_0_bits_r_valid <= simdram.axi_r_valid @[HarnessBinders.scala 147:18 chipyard.TestHarness.RocketConfig.fir 295252:4]
    chiptop.axi4_mem_0_bits_r_bits_id <= simdram.axi_r_bits_id @[HarnessBinders.scala 147:18 chipyard.TestHarness.RocketConfig.fir 295252:4]
    chiptop.axi4_mem_0_bits_r_bits_data <= simdram.axi_r_bits_data @[HarnessBinders.scala 147:18 chipyard.TestHarness.RocketConfig.fir 295252:4]
    chiptop.axi4_mem_0_bits_r_bits_resp <= simdram.axi_r_bits_resp @[HarnessBinders.scala 147:18 chipyard.TestHarness.RocketConfig.fir 295252:4]
    chiptop.axi4_mem_0_bits_r_bits_last <= simdram.axi_r_bits_last @[HarnessBinders.scala 147:18 chipyard.TestHarness.RocketConfig.fir 295252:4]
    chiptop.uart_0_rxd <= uart_sim_0.io_uart_rxd @[UARTAdapter.scala 135:18 chipyard.TestHarness.RocketConfig.fir 295259:4]
    chiptop.reset_wire_reset <= asAsyncReset(reset) @[TestHarness.scala 41:24 chipyard.TestHarness.RocketConfig.fir 295177:4]
    chiptop.clock <= clock @[Clocks.scala 106:18 chipyard.TestHarness.RocketConfig.fir 295179:4]
    SimJTAG.clock <= clock @[Periphery.scala 225:14 chipyard.TestHarness.RocketConfig.fir 295200:4]
    SimJTAG.reset <= reset @[HarnessBinders.scala 190:97 chipyard.TestHarness.RocketConfig.fir 295192:4]
    SimJTAG.jtag_TDO_data <= chiptop.jtag_TDO_data @[Periphery.scala 223:17 chipyard.TestHarness.RocketConfig.fir 295199:4]
    SimJTAG.jtag_TDO_driven <= chiptop.jtag_TDO_driven @[Periphery.scala 223:17 chipyard.TestHarness.RocketConfig.fir 295198:4]
    SimJTAG.enable <= bits(plusarg_reader.out, 0, 0) @[Periphery.scala 228:18 chipyard.TestHarness.RocketConfig.fir 295204:4]
    SimJTAG.init_done <= not(reset) @[HarnessBinders.scala 190:105 chipyard.TestHarness.RocketConfig.fir 295194:4]
    ram.clock <= chiptop.serial_tl_clock @[chipyard.TestHarness.RocketConfig.fir 295223:4]
    ram.reset <= reset @[chipyard.TestHarness.RocketConfig.fir 295175:4 chipyard.TestHarness.RocketConfig.fir 295176:4]
    ram.io_ser_in_ready <= chiptop.serial_tl_bits_in_ready @[SerialAdapter.scala 28:21 chipyard.TestHarness.RocketConfig.fir 295230:4]
    ram.io_ser_out_valid <= chiptop.serial_tl_bits_out_valid @[SerialAdapter.scala 28:21 chipyard.TestHarness.RocketConfig.fir 295226:4]
    ram.io_ser_out_bits <= chiptop.serial_tl_bits_out_bits @[SerialAdapter.scala 28:21 chipyard.TestHarness.RocketConfig.fir 295225:4]
    ram.io_tsi_ser_in_valid <= success_sim.serial_in_valid @[SerialAdapter.scala 40:21 chipyard.TestHarness.RocketConfig.fir 295243:4]
    ram.io_tsi_ser_in_bits <= success_sim.serial_in_bits @[SerialAdapter.scala 40:21 chipyard.TestHarness.RocketConfig.fir 295242:4]
    ram.io_tsi_ser_out_ready <= success_sim.serial_out_ready @[SerialAdapter.scala 40:21 chipyard.TestHarness.RocketConfig.fir 295241:4]
    success_sim.clock <= chiptop.serial_tl_clock @[SerialAdapter.scala 38:20 chipyard.TestHarness.RocketConfig.fir 295237:4]
    success_sim.reset <= reset @[HarnessBinders.scala 235:103 chipyard.TestHarness.RocketConfig.fir 295231:4]
    success_sim.serial_in_ready <= ram.io_tsi_ser_in_ready @[SerialAdapter.scala 40:21 chipyard.TestHarness.RocketConfig.fir 295244:4]
    success_sim.serial_out_valid <= ram.io_tsi_ser_out_valid @[SerialAdapter.scala 40:21 chipyard.TestHarness.RocketConfig.fir 295240:4]
    success_sim.serial_out_bits <= ram.io_tsi_ser_out_bits @[SerialAdapter.scala 40:21 chipyard.TestHarness.RocketConfig.fir 295239:4]
    simdram.clock <= chiptop.axi4_mem_0_clock @[HarnessBinders.scala 148:20 chipyard.TestHarness.RocketConfig.fir 295253:4]
    simdram.reset <= chiptop.axi4_mem_0_reset @[HarnessBinders.scala 149:20 chipyard.TestHarness.RocketConfig.fir 295254:4]
    simdram.axi_aw_valid <= chiptop.axi4_mem_0_bits_aw_valid @[HarnessBinders.scala 147:18 chipyard.TestHarness.RocketConfig.fir 295252:4]
    simdram.axi_aw_bits_id <= chiptop.axi4_mem_0_bits_aw_bits_id @[HarnessBinders.scala 147:18 chipyard.TestHarness.RocketConfig.fir 295252:4]
    simdram.axi_aw_bits_addr <= chiptop.axi4_mem_0_bits_aw_bits_addr @[HarnessBinders.scala 147:18 chipyard.TestHarness.RocketConfig.fir 295252:4]
    simdram.axi_aw_bits_len <= chiptop.axi4_mem_0_bits_aw_bits_len @[HarnessBinders.scala 147:18 chipyard.TestHarness.RocketConfig.fir 295252:4]
    simdram.axi_aw_bits_size <= chiptop.axi4_mem_0_bits_aw_bits_size @[HarnessBinders.scala 147:18 chipyard.TestHarness.RocketConfig.fir 295252:4]
    simdram.axi_aw_bits_burst <= chiptop.axi4_mem_0_bits_aw_bits_burst @[HarnessBinders.scala 147:18 chipyard.TestHarness.RocketConfig.fir 295252:4]
    simdram.axi_aw_bits_lock <= chiptop.axi4_mem_0_bits_aw_bits_lock @[HarnessBinders.scala 147:18 chipyard.TestHarness.RocketConfig.fir 295252:4]
    simdram.axi_aw_bits_cache <= chiptop.axi4_mem_0_bits_aw_bits_cache @[HarnessBinders.scala 147:18 chipyard.TestHarness.RocketConfig.fir 295252:4]
    simdram.axi_aw_bits_prot <= chiptop.axi4_mem_0_bits_aw_bits_prot @[HarnessBinders.scala 147:18 chipyard.TestHarness.RocketConfig.fir 295252:4]
    simdram.axi_aw_bits_qos <= chiptop.axi4_mem_0_bits_aw_bits_qos @[HarnessBinders.scala 147:18 chipyard.TestHarness.RocketConfig.fir 295252:4]
    simdram.axi_w_valid <= chiptop.axi4_mem_0_bits_w_valid @[HarnessBinders.scala 147:18 chipyard.TestHarness.RocketConfig.fir 295252:4]
    simdram.axi_w_bits_data <= chiptop.axi4_mem_0_bits_w_bits_data @[HarnessBinders.scala 147:18 chipyard.TestHarness.RocketConfig.fir 295252:4]
    simdram.axi_w_bits_strb <= chiptop.axi4_mem_0_bits_w_bits_strb @[HarnessBinders.scala 147:18 chipyard.TestHarness.RocketConfig.fir 295252:4]
    simdram.axi_w_bits_last <= chiptop.axi4_mem_0_bits_w_bits_last @[HarnessBinders.scala 147:18 chipyard.TestHarness.RocketConfig.fir 295252:4]
    simdram.axi_b_ready <= chiptop.axi4_mem_0_bits_b_ready @[HarnessBinders.scala 147:18 chipyard.TestHarness.RocketConfig.fir 295252:4]
    simdram.axi_ar_valid <= chiptop.axi4_mem_0_bits_ar_valid @[HarnessBinders.scala 147:18 chipyard.TestHarness.RocketConfig.fir 295252:4]
    simdram.axi_ar_bits_id <= chiptop.axi4_mem_0_bits_ar_bits_id @[HarnessBinders.scala 147:18 chipyard.TestHarness.RocketConfig.fir 295252:4]
    simdram.axi_ar_bits_addr <= chiptop.axi4_mem_0_bits_ar_bits_addr @[HarnessBinders.scala 147:18 chipyard.TestHarness.RocketConfig.fir 295252:4]
    simdram.axi_ar_bits_len <= chiptop.axi4_mem_0_bits_ar_bits_len @[HarnessBinders.scala 147:18 chipyard.TestHarness.RocketConfig.fir 295252:4]
    simdram.axi_ar_bits_size <= chiptop.axi4_mem_0_bits_ar_bits_size @[HarnessBinders.scala 147:18 chipyard.TestHarness.RocketConfig.fir 295252:4]
    simdram.axi_ar_bits_burst <= chiptop.axi4_mem_0_bits_ar_bits_burst @[HarnessBinders.scala 147:18 chipyard.TestHarness.RocketConfig.fir 295252:4]
    simdram.axi_ar_bits_lock <= chiptop.axi4_mem_0_bits_ar_bits_lock @[HarnessBinders.scala 147:18 chipyard.TestHarness.RocketConfig.fir 295252:4]
    simdram.axi_ar_bits_cache <= chiptop.axi4_mem_0_bits_ar_bits_cache @[HarnessBinders.scala 147:18 chipyard.TestHarness.RocketConfig.fir 295252:4]
    simdram.axi_ar_bits_prot <= chiptop.axi4_mem_0_bits_ar_bits_prot @[HarnessBinders.scala 147:18 chipyard.TestHarness.RocketConfig.fir 295252:4]
    simdram.axi_ar_bits_qos <= chiptop.axi4_mem_0_bits_ar_bits_qos @[HarnessBinders.scala 147:18 chipyard.TestHarness.RocketConfig.fir 295252:4]
    simdram.axi_r_ready <= chiptop.axi4_mem_0_bits_r_ready @[HarnessBinders.scala 147:18 chipyard.TestHarness.RocketConfig.fir 295252:4]
    uart_sim_0.clock <= clock @[chipyard.TestHarness.RocketConfig.fir 295256:4]
    uart_sim_0.reset <= reset @[chipyard.TestHarness.RocketConfig.fir 295257:4]
    uart_sim_0.io_uart_txd <= chiptop.uart_0_txd @[UARTAdapter.scala 134:28 chipyard.TestHarness.RocketConfig.fir 295258:4]
    printf(clock, and(_T_3, _T_2), "*** FAILED *** (exit code = %d)\n", _T_4) @[Periphery.scala 235:13 chipyard.TestHarness.RocketConfig.fir 295214:8]
    stop(clock, and(_T_3, _T_2), 1) @[Periphery.scala 236:11 chipyard.TestHarness.RocketConfig.fir 295219:8]

  extmodule plusarg_reader : @[chipyard.TestHarness.RocketConfig.fir 134:2]
    output out : UInt<32> @[chipyard.TestHarness.RocketConfig.fir 135:4]
    defname = plusarg_reader
    parameter FORMAT = "tilelink_timeout=%d"
    parameter DEFAULT = 0
    parameter WIDTH = 32

  extmodule plusarg_reader_76 : @[chipyard.TestHarness.RocketConfig.fir 182316:2]
    output out : UInt<32> @[chipyard.TestHarness.RocketConfig.fir 182317:4]
    defname = plusarg_reader
    parameter FORMAT = "max_core_cycles=%d"
    parameter DEFAULT = 0
    parameter WIDTH = 32

  extmodule plusarg_reader_105 : @[chipyard.TestHarness.RocketConfig.fir 275032:2]
    output out : UInt<32> @[chipyard.TestHarness.RocketConfig.fir 275033:4]
    defname = plusarg_reader
    parameter FORMAT = "uart_tx=%d"
    parameter DEFAULT = 1
    parameter WIDTH = 32

  extmodule ClockDividerN : @[chipyard.TestHarness.RocketConfig.fir 280966:2]
    output clk_out : Clock @[chipyard.TestHarness.RocketConfig.fir 280967:4]
    input clk_in : Clock @[chipyard.TestHarness.RocketConfig.fir 280968:4]
    defname = ClockDividerN
    parameter DIV = 1

  extmodule EICG_wrapper : @[chipyard.TestHarness.RocketConfig.fir 281066:2]
    input in : Clock @[chipyard.TestHarness.RocketConfig.fir 281067:4]
    input test_en : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 281068:4]
    input en : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 281069:4]
    output out : Clock @[chipyard.TestHarness.RocketConfig.fir 281070:4]
    defname = EICG_wrapper

  extmodule GenericDigitalOutIOCell : @[chipyard.TestHarness.RocketConfig.fir 281075:2]
    output pad : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 281076:4]
    input o : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 281077:4]
    input oe : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 281078:4]
    defname = GenericDigitalOutIOCell

  extmodule GenericDigitalInIOCell : @[chipyard.TestHarness.RocketConfig.fir 281091:2]
    input pad : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 281092:4]
    output i : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 281093:4]
    input ie : UInt<1> @[chipyard.TestHarness.RocketConfig.fir 281094:4]
    defname = GenericDigitalInIOCell

  extmodule cc_dir_ext :
    input RW0_addr : UInt<10>
    input RW0_en : UInt<1>
    input RW0_clk : Clock
    input RW0_wmode : UInt<1>
    input RW0_wdata : UInt<136>
    output RW0_rdata : UInt<136>
    input RW0_wmask : UInt<8>
    defname = cc_dir_ext

  extmodule cc_banks_0_ext :
    input RW0_addr : UInt<14>
    input RW0_en : UInt<1>
    input RW0_clk : Clock
    input RW0_wmode : UInt<1>
    input RW0_wdata : UInt<64>
    output RW0_rdata : UInt<64>
    defname = cc_banks_0_ext

  extmodule data_arrays_0_ext :
    input RW0_addr : UInt<9>
    input RW0_en : UInt<1>
    input RW0_clk : Clock
    input RW0_wmode : UInt<1>
    input RW0_wdata : UInt<256>
    output RW0_rdata : UInt<256>
    input RW0_wmask : UInt<32>
    defname = data_arrays_0_ext

  extmodule tag_array_ext :
    input RW0_addr : UInt<6>
    input RW0_en : UInt<1>
    input RW0_clk : Clock
    input RW0_wmode : UInt<1>
    input RW0_wdata : UInt<88>
    output RW0_rdata : UInt<88>
    input RW0_wmask : UInt<4>
    defname = tag_array_ext

  extmodule tag_array_0_ext :
    input RW0_addr : UInt<6>
    input RW0_en : UInt<1>
    input RW0_clk : Clock
    input RW0_wmode : UInt<1>
    input RW0_wdata : UInt<84>
    output RW0_rdata : UInt<84>
    input RW0_wmask : UInt<4>
    defname = tag_array_0_ext

  extmodule data_arrays_0_0_ext :
    input RW0_addr : UInt<9>
    input RW0_en : UInt<1>
    input RW0_clk : Clock
    input RW0_wmode : UInt<1>
    input RW0_wdata : UInt<128>
    output RW0_rdata : UInt<128>
    input RW0_wmask : UInt<4>
    defname = data_arrays_0_0_ext

  extmodule l2_tlb_ram_ext :
    input RW0_addr : UInt<10>
    input RW0_en : UInt<1>
    input RW0_clk : Clock
    input RW0_wmode : UInt<1>
    input RW0_wdata : UInt<44>
    output RW0_rdata : UInt<44>
    defname = l2_tlb_ram_ext

  extmodule mem_ext :
    input RW0_addr : UInt<9>
    input RW0_en : UInt<1>
    input RW0_clk : Clock
    input RW0_wmode : UInt<1>
    input RW0_wdata : UInt<64>
    output RW0_rdata : UInt<64>
    input RW0_wmask : UInt<8>
    defname = mem_ext

  module mem_inTestHarness :
    input RW0_addr : UInt<9>
    input RW0_en : UInt<1>
    input RW0_clk : Clock
    input RW0_wmode : UInt<1>
    input RW0_wdata_0 : UInt<8>
    input RW0_wdata_1 : UInt<8>
    input RW0_wdata_2 : UInt<8>
    input RW0_wdata_3 : UInt<8>
    input RW0_wdata_4 : UInt<8>
    input RW0_wdata_5 : UInt<8>
    input RW0_wdata_6 : UInt<8>
    input RW0_wdata_7 : UInt<8>
    output RW0_rdata_0 : UInt<8>
    output RW0_rdata_1 : UInt<8>
    output RW0_rdata_2 : UInt<8>
    output RW0_rdata_3 : UInt<8>
    output RW0_rdata_4 : UInt<8>
    output RW0_rdata_5 : UInt<8>
    output RW0_rdata_6 : UInt<8>
    output RW0_rdata_7 : UInt<8>
    input RW0_wmask_0 : UInt<1>
    input RW0_wmask_1 : UInt<1>
    input RW0_wmask_2 : UInt<1>
    input RW0_wmask_3 : UInt<1>
    input RW0_wmask_4 : UInt<1>
    input RW0_wmask_5 : UInt<1>
    input RW0_wmask_6 : UInt<1>
    input RW0_wmask_7 : UInt<1>

    inst mem_ext of mem_ext
    mem_ext.RW0_clk <= RW0_clk
    mem_ext.RW0_en <= RW0_en
    mem_ext.RW0_addr <= RW0_addr
    RW0_rdata_0 <= bits(mem_ext.RW0_rdata, 7, 0)
    RW0_rdata_1 <= bits(mem_ext.RW0_rdata, 15, 8)
    RW0_rdata_2 <= bits(mem_ext.RW0_rdata, 23, 16)
    RW0_rdata_3 <= bits(mem_ext.RW0_rdata, 31, 24)
    RW0_rdata_4 <= bits(mem_ext.RW0_rdata, 39, 32)
    RW0_rdata_5 <= bits(mem_ext.RW0_rdata, 47, 40)
    RW0_rdata_6 <= bits(mem_ext.RW0_rdata, 55, 48)
    RW0_rdata_7 <= bits(mem_ext.RW0_rdata, 63, 56)
    mem_ext.RW0_wmode <= RW0_wmode
    node _GEN_4 = cat(cat(RW0_wdata_7, RW0_wdata_6), cat(RW0_wdata_5, RW0_wdata_4))
    node _GEN_5 = cat(cat(RW0_wdata_3, RW0_wdata_2), cat(RW0_wdata_1, RW0_wdata_0))
    mem_ext.RW0_wdata <= cat(_GEN_4, _GEN_5)
    node _GEN_10 = cat(cat(RW0_wmask_7, RW0_wmask_6), cat(RW0_wmask_5, RW0_wmask_4))
    node _GEN_11 = cat(cat(RW0_wmask_3, RW0_wmask_2), cat(RW0_wmask_1, RW0_wmask_0))
    mem_ext.RW0_wmask <= cat(_GEN_10, _GEN_11)
